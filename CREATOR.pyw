global stop_event
from tkinter import FALSE
from socket import timeout
from operator import truediv
import json
from genericpath import exists
import string
import random
import subprocess
import re
import concurrent.futures
import asyncio
import threading
try:
    import PySimpleGUI as sg
except ModuleNotFoundError:
    import subprocess
    import sys

    subprocess.run(['venv/scripts/activate.bat'], shell=True)
    subprocess.run(['pip', 'install', 'PySimpleGUI==4.60.5'])
    subprocess.run(['deactivate'], shell=True)
    import PySimpleGUI as sg
import multiprocessing
import hashlib
import time
from datetime import datetime
import unicodedata
try:
    import requests
except ModuleNotFoundError:
    import subprocess
    import sys

    subprocess.run(['venv/scripts/activate.bat'], shell=True)
    subprocess.run(['pip', 'install', 'requests'])
    subprocess.run(['deactivate'], shell=True)
    import requests

import os
import locale
import sys
import traceback
versao = '1.0.5'
if os.path.exists("CREATOR_temp.exe"):
    os.remove("CREATOR_temp.exe")
# Configuração da localização para pt_BR.utf-8
try:
    os.environ['LC_ALL'] = 'pt_BR.utf-8'
    locale.setlocale(locale.LC_ALL, 'pt_BR.utf-8')
except locale.Error as e:
    print(f"Erro ao configurar localização: {e}")
    pass  # Pode ser ignorado se a configuração falhar

# Adiciona o caminho base ao início do PYTHONPATH se o script estiver congelado
if getattr(sys, 'frozen', False):
    base_path = getattr(sys, '_MEIPASS', os.path.dirname(
        os.path.abspath(__file__)))
    sys.path.insert(0, base_path)

# Restante do seu código...

global parar

caminho_atual = os.path.dirname(__file__)

letras = 'abcdefghijklmnopqrstuvwxyz'

try:
    from google.oauth2.credentials import Credentials
    from googleapiclient.discovery import build
    from googleapiclient.errors import HttpError
except ModuleNotFoundError:
    import subprocess
    import sys

    subprocess.run(['venv/scripts/activate.bat'], shell=True)
    subprocess.run(['pip', 'install', '-r', 'requirements.txt'])
    subprocess.run(['deactivate'], shell=True)
    from google.oauth2.credentials import Credentials
    from googleapiclient.discovery import build
    from googleapiclient.errors import HttpError
try:
    import requests
except ModuleNotFoundError:
    import subprocess
    import sys

    subprocess.run(['venv/scripts/activate.bat'], shell=True)
    subprocess.run(['pip', 'install', 'requests'])
    subprocess.run(['deactivate'], shell=True)
    import requests

try:
    from faker import Faker

    fake = Faker('pt_BR')
except ModuleNotFoundError:
    import subprocess
    import sys

    subprocess.run(['venv/scripts/activate.bat'], shell=True)
    subprocess.run(['pip', 'install', 'Faker'])
    subprocess.run(['deactivate'], shell=True)
    from faker import Faker

    fake = Faker('pt_BR')

try:
    import pytz
except ModuleNotFoundError:
    import subprocess
    import sys

    subprocess.run(['venv/scripts/activate.bat'], shell=True)
    subprocess.run(['pip', 'install', 'pytz'])
    subprocess.run(['deactivate'], shell=True)
    import pytz
tz = pytz.timezone('America/Sao_Paulo')
try:
    import gspread
    from oauth2client.service_account import ServiceAccountCredentials
except ModuleNotFoundError:
    import subprocess
    import sys

    subprocess.run(['venv/scripts/activate.bat'], shell=True)
    subprocess.run(['pip', 'install', 'gspread'])
    subprocess.run(['deactivate'], shell=True)
    subprocess.run(['venv/scripts/activate.bat'], shell=True)
    subprocess.run(['pip', 'install', 'oauth2client'])
    subprocess.run(['deactivate'], shell=True)
    import gspread
    from oauth2client.service_account import ServiceAccountCredentials

    sg.theme('DarkGrey14')


now = datetime.now()
agora = datetime.now().strftime("[%H:%M:%S] ")


if not os.path.exists("relatorio.json"):
    # se o arquivo não existe, pede o nome do arquivo ao usuário e armazena em uma variável global
    with open("relatorio.json", "w") as f:
        pass
else:
    pass

try:
    import PySimpleGUI as sg
except ModuleNotFoundError:
    import subprocess
    import sys

    subprocess.run(['venv/scripts/activate.bat'], shell=True)
    subprocess.run(['pip', 'install', 'PySimpleGUI==4.60.5'])
    subprocess.run(['deactivate'], shell=True)
    import PySimpleGUI as sg

    sg.theme('DarkGrey14')
# print(f'Versão: {versao}')

url = "https://raw.githubusercontent.com/wnx3/Creator3.0/main/version"

# Fazendo a solicitação GET para a URL
response = requests.get(url)

# Verificando se a solicitação foi bem-sucedida (código de status 200)
if response.status_code == 200:
    # Imprimindo o conteúdo da resposta
    # print(response.text)
    pass
else:
    print("Falha ao obter a versão atual")

try:
    from tqdm import tqdm
except ModuleNotFoundError:
    import subprocess
    import sys

    subprocess.run(['venv/scripts/activate.bat'], shell=True)
    subprocess.run(['pip', 'install', 'tqdm'])
    subprocess.run(['deactivate'], shell=True)
    import PySimpleGUI as sg
print(f'Versão atual: {versao}')

url_versao = "https://raw.githubusercontent.com/wnx3/Creator3.0/main/version"

# Fazendo a solicitação GET para a URL da versão online
response_versao = requests.get(url_versao)

# Verificando se a solicitação da versão online foi bem-sucedida (código de status 200)
if response_versao.status_code == 200:
    # Obtendo a versão online do conteúdo da resposta
    versao_online = response_versao.text.strip()

    # Verificando se a versão local é diferente da versão online
    if versao != versao_online:
        print(f'Nova versão disponível: {versao_online}')
        print("Atualizando para a versão mais recente...")

        # URL do arquivo para baixar
        url_arquivo = "https://media.githubusercontent.com/media/wnx3/Creator3.0/main/CREATOR.exe"

        # Verificando se o arquivo CREATOR.exe já existe
        if os.path.exists("CREATOR.exe"):
            # Renomeando o arquivo existente para um nome temporário
            os.rename("CREATOR.exe", "CREATOR_temp.exe")

        # Baixando o arquivo com tqdm para exibir o progresso
        with requests.get(url_arquivo, stream=True) as r:
            # Obtendo o tamanho total do arquivo
            total_size = int(r.headers.get('content-length', 0))
            # Criando o arquivo local
            with open("CREATOR.exe", 'wb') as f, tqdm(
                    total=total_size, unit='B', unit_scale=True, unit_divisor=1024, desc="Baixando") as bar:
                # Iterando sobre os dados do arquivo em chunks
                for data in r.iter_content(chunk_size=1024):
                    # Escrevendo os dados no arquivo
                    f.write(data)
                    # Atualizando a barra de progresso
                    bar.update(len(data))
        if os.path.exists("CREATOR_temp.exe"):
            os.remove("CREATOR_temp.exe")
        print("Atualização concluída.\n")
        sg.theme('DarkGrey14')
        layout = [[sg.Text("Bot atualizado com sucesso.", font=('Open Sans', 10))],
                  [sg.Text("Abra novamente.", font=('Open Sans', 10))],
                  [sg.Button("OK", button_color='#1c2024')]]
        window = sg.Window("Atualização", layout)
        event, values = window.read()
        window.close()
        raise Exception('Abra novamente.')

    else:
        pass
else:
    print("Falha ao obter a versão atual.")
base_url = 'https://raw.githubusercontent.com/wnx3/Creator3.0/main/'
# Lista de arquivos que você deseja verificar e atualizar
file_list = ['relatorio.json', 'requirements.txt', 'CREATOR.pyw']
for file_name in file_list:
    # Caminho local do seu arquivo Python
    local_path = file_name
    # URL completa do arquivo no GitHub
    url = base_url + file_name
    # Obtenha a última versão do arquivo do GitHub
    response = requests.get(url)
    github_version = response.content.decode('utf-8')
    # Verifique se o arquivo local tem a mesma versão do GitHub
    with open(local_path, 'r', encoding='utf-8') as f:
        local_version = f.read()
    local_hash = hashlib.sha256(local_version.encode()).hexdigest()
    github_hash = hashlib.sha256(github_version.encode()).hexdigest()
    if local_hash != github_hash:
        # Baixe a nova versão do GitHub e salve-a localmente
        with open(local_path, 'w', encoding='utf-8') as f:
            f.write(github_version)
        sg.theme('DarkGrey14')
        layout = [[sg.Text("Bot atualizado com sucesso.", font=('Open Sans', 10))],
                  [sg.Text("Abra novamente.", font=('Open Sans', 10))],
                  [sg.Button("OK", button_color='#1c2024')]]
        window = sg.Window("Atualização", layout)
        event, values = window.read()
        window.close()
        raise Exception('Abra novamente.')
    else:
        pass


try:
    from minuteinbox import Inbox
except ModuleNotFoundError:
    import subprocess
    import sys

    subprocess.run(['venv/scripts/activate.bat'], shell=True)
    subprocess.run(['pip', 'install', 'minuteinbox'])
    subprocess.run(['deactivate'], shell=True)
    from minuteinbox import Inbox


try:
    with open("config.json", "r") as f:
        config = json.load(f)
except FileNotFoundError:
    config = {}


# Tenta abrir o arquivo token.json
try:
    with open("credentials.json", "r") as f:
        # Se o arquivo existir, lê o conteúdo
        content = f.read()
except FileNotFoundError:
    # Se o arquivo não existir, abre uma GUI para informar o usuário
    sg.theme('DarkGrey14')
    layout = [[sg.Text("Arquivo credentials.json não encontrado.", font=('Open Sans', 10))],
              [sg.Button("OK", button_color='#1c2024')]]
    window = sg.Window("Erro", layout)
    event, values = window.read()
    window.close()

sg.theme('DarkGrey14')


try:
    import mysql.connector
except ModuleNotFoundError:
    import subprocess
    import sys

    subprocess.run(['venv/scripts/activate.bat'], shell=True)
    subprocess.run(['pip', 'install', 'mysql-connector-python'])
    subprocess.run(['deactivate'], shell=True)
    import mysql.connector


def get_ip():
    response = requests.get('https://ipinfo.io/json')
    data = response.json()
    return data['ip']


gc = gspread.service_account(filename='relatorio.json')
sh = gc.open('funcionamento')

worksheet = sh.worksheet('IPs')

# Obtenha o endereço IP atual
ip_atual = get_ip()
valores_da_coluna = worksheet.col_values(1)


def get_username_from_ip(ip_atual):
    # Encontra o índice do IP na lista
    index = valores_da_coluna.index(ip_atual)
    # Obtém o nome na coluna B da mesma linha
    user_mysql = worksheet.cell(index + 1, 2).value
    return user_mysql


if ip_atual in valores_da_coluna:
    print(f'O IP {ip_atual} já está registrado.')

    user_mysql = get_username_from_ip(ip_atual)
    print(f'Olá, {user_mysql}')
    registrado = True

else:
    print(f'O IP {ip_atual} não está registrado.')
    registrado = False

if registrado is False:
    def validar_login(username, password):
        try:
            conn = mysql.connector.connect(
                host='creator.mysql.uhserver.com',
                user='wnx3',
                password='@Rumo100k',
                database='creator'
            )

            cursor = conn.cursor()
            cursor.execute(
                "SELECT * FROM user WHERE user = %s AND senha = %s", (username, password))
            user = cursor.fetchone()

            if user:
                return True
            else:
                return False

        except Exception as e:
            print(f"Erro ao validar o login: {str(e)}")
            return False

        finally:
            cursor.close()
            conn.close()

    layout = [
        [sg.Text("Usuário:"), sg.InputText(
            key='user', size=(20, 1), justification="l")],
        [sg.Text("Senha:"),
         sg.InputText(key='senha', pad=(12, (0, 0)), password_char='*', size=(20, 1), justification="l")],
        [sg.Button("Login", font=('Open Sans', 9),
                   button_color='#1c2024', border_width=0, size=(30, 1))]
    ]
    try:
        state = config['fixtop']
        if state:
            window = sg.Window(f'Login', layout, keep_on_top=True)
        else:
            window = sg.Window(f'Login', layout, keep_on_top=False)
    except:
        window = sg.Window(f'Login', layout, keep_on_top=False)

    while True:
        event, values = window.read()

        if event == sg.WINDOW_CLOSED:
            break

        if event == "Login":
            username = values['user']
            password = values['senha']

            if validar_login(username, password):
                login_sucedido = True
                user_mysql = values['user']
                print(f'Olá, {user_mysql}')
                break
            else:
                sg.popup("Login falhou. Tente novamente.")
                login_sucedido = False

    window.close()

    if login_sucedido is True:
        print('Login feito com sucesso.')

        def open_spreadsheet():
            # Substitua com o caminho para sua chave de API
            gc = gspread.service_account(filename='relatorio.json')
            # Substitua pelo nome da sua planilha
            sh = gc.open('funcionamento')
            return sh

        ip = get_ip()

        sh = open_spreadsheet()
        worksheet = sh.worksheet('IPs')  # Substitua pelo nome da aba

        # Encontre a primeira linha vazia na coluna A
        col_a = worksheet.col_values(1)
        first_empty_row = len(col_a) + 1

        # Escreva o IP e o nome de usuário na primeira linha vazia
        worksheet.update('A{0}'.format(first_empty_row), [[ip, username]])

        print(f'IP registrado.')

        pass
    else:
        print('Não foi possivel realizar o login.')
        raise Exception('Não foi possivel realizar o login.')

# Define a janela de diálogo com um input e um botão
microsoft_license = requests.get(
    'https://raw.githubusercontent.com/wnx3/Creator3.0/main/microsoft_license')
funcionamento = microsoft_license.json()
check_img = 'storage\\img\\total.png'
criada_img = 'storage\\img\\check.png'
button_color = sg.theme_background_color()
inicio = [
    [sg.Frame('WNx3 CREATOR', [
        [sg.Button("CREATOR", font=('Open Sans', 9),
                   button_color='#1c2024', border_width=0, size=(35, 1))],
        [sg.Button("CREATOR 2NR", font=('Open Sans', 9),
                   button_color='#1c2024', border_width=0, size=(35, 1))],
        [sg.Button("CREATOR TWILIO", font=('Open Sans', 9), disabled=False,
                   button_color='#1c2024', border_width=0, size=(35, 1))],
        [sg.Button("DIVISOR", font=('Open Sans', 9),
                   button_color='#1c2024', border_width=0, size=(35, 1))],
        [sg.Button("MONTADOR", font=('Open Sans', 9), disabled=True, button_color='#1c2024', border_width=0,
                   size=(35, 1))],
        [sg.Button("CRIAR POR CIMA", font=('Open Sans', 9), disabled=False, button_color='#1c2024', border_width=0,
                   size=(35, 1))]

    ], border_width=3, title_location='n')
    ]]
try:
    state = config['fixtop']
    if state:
        inicio = sg.Window(f'WNx3 CREATOR', inicio, keep_on_top=True)
    else:
        inicio = sg.Window(f'WNx3 CREATOR', inicio, keep_on_top=False)
except:
    inicio = sg.Window(f'WNx3 CREATOR', inicio, keep_on_top=False)

sg.theme('DarkGrey14')
sg.SetOptions(font=('Open Sans', 10))
# Define a janela com uma Multiline e um botão
check_img = 'storage\\img\\total.png'
criada_img = 'storage\\img\\check.png'
# config_img = 'storage/img/config.png'


vpn_list = ["Nenhuma", "AVG", "Avast", "SurfShark", "TunnelBear", "ExpressVPN", "PiaVPN", "BetterNet", "NordVPN",
            "CyberGhost",
            "HotspotShield", "HmaVPN", "WindscribeVPN"]
# Definir o layout da GUI de configuração
layout_configuracoes = [
    [sg.Text("Senha dos perfis: ", font=('Open Sans', 12)),
     sg.InputText(key="-senha-", default_text=config.get("senha", ""))],
    [sg.Text('VPN: ', font=('Open Sans', 12)),
     sg.OptionMenu(vpn_list, size=(7, 19), key="-vpn-", default_value=config.get("vpn", ""))],
    [sg.Text('Email ou número: ', font=('Open Sans', 12)),
     sg.Radio('Mail.TM', 'RADIO1', key='-mailtm-',
              default=config.get("email", "") == "-mailtm-"),
     sg.Radio('MinuteInBox', 'RADIO1', key='-minuteinbox-',
              default=config.get("email", "") == "-minuteinbox-"),
     sg.Radio('2NR', 'RADIO1', key='-2nr-',
              default=config.get("email", "") == "-2nr-"),
     sg.Radio('Free SMS', 'RADIO1', key='-freesms-',
              default=config.get("email", "") == "-freesms-"),
     sg.Radio('InstaFace', 'RADIO1', key='-instaface-', default=config.get("email", "") == "-instaface-")],
    [sg.Radio('Instagram Lite', 'RADIO2', key='-instalite-', default=config.get("app", "") == "-instalite-"),
     sg.Radio('Instagram', 'RADIO2', key='-insta-', default=config.get("app", "") == "-insta-")],
    [sg.HorizontalSeparator()],
    [sg.Text("Nome da maquina: "), sg.InputText(
        key="maquina", default_text=config.get("maquina", ""))],
    [sg.Text("SpreadsheetID: "), sg.InputText(
        key="spreadsheet", default_text=config.get("spreadsheet", ""))],
    [sg.Text("Planilha 2NR: "), sg.InputText(
        key="2nr", default_text=config.get("2nr", ""))],
    [sg.Button("Salvar", button_color='#1c2024')]
]

# Criar a janela da GUI de configuração
janela_configuracoes = sg.Window("Configurações", layout_configuracoes)

contagem = 0

try:
    comando = f"adb connect {porta}"
    subprocess.run(comando, stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, check=True, shell=True)
    subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server.test',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
except:
    pass


def gerar_senha(tamanho=12):
    if tamanho < 6:
        raise ValueError("A senha deve ter pelo menos 6 caracteres.")

    # Define uma lista de letras maiúsculas e minúsculas
    letras_maiusculas = [random.choice(
        string.ascii_uppercase) for _ in range(tamanho // 2)]
    letras_minusculas = [random.choice(
        string.ascii_lowercase) for _ in range(tamanho // 2)]

    # Intercale as letras maiúsculas e minúsculas
    senha = ''.join(''.join(pair)
                    for pair in zip(letras_maiusculas, letras_minusculas))

    # Adiciona caracteres especiais, números e @
    caracteres_permitidos = string.ascii_letters + string.digits + string.punctuation
    caracteres_permitidos = caracteres_permitidos.replace(
        "~", "")  # Remove ~ e outros acentos

    senha += ''.join(random.choice(caracteres_permitidos)
                     for _ in range(tamanho - len(senha) - 3))
    # Adiciona pelo menos uma letra maiúscula
    senha += random.choice(string.ascii_uppercase)
    senha += random.choice(string.digits)  # Adiciona pelo menos um número
    senha += "@"

    # Mistura os caracteres
    senha = ''.join(random.sample(senha, len(senha)))

    return senha

    # Exemplo de uso

def contagem():
    global nome
    global sobrenome
    contagem += 1
    window['contagem'].update(contagem)
    window.Refresh()

def creator_2NRv2():
    try:
        with open("config.json", "r") as f:
            config = json.load(f)
    except FileNotFoundError:
        config = {}
    global gerar_senha
    import traceback
    SPREADSHEET_ID = config['spreadsheet']
    conteudo = config['vpn']
    senha = gerar_senha(12)
    maquina = config['maquina']
    removenum_addemail = config['removenum_addemail']
    if removenum_addemail:
        def obter_dominios():
            import requests
            url = "https://api.mail.tm/domains"
            response = requests.get(url)
            if response.status_code == 200:
                return [domain['domain'] for domain in response.json()['hydra:member']]
            else:
                print("Erro ao obter os domínios:", response.json())
                return []
        dominios2 = obter_dominios()[0].replace("'", "")
    tentativa = False
    seguido = False
    regiao_vpn = 'Sem dados'
    app = 'Normal 2NRv2'
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    # Código que gera a saída
    import os
    import time
    import requests
    import hashlib
    import subprocess

    # verifica se o arquivo existe na pasta do bot

    try:
        from rich.console import Console
    except ModuleNotFoundError:
        import subprocess
        import sys

        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['pip', 'install', '-r', 'requirements.txt'])
        subprocess.run(['deactivate'], shell=True)
        from rich.console import Console
    import os
    import time
    try:
        import uiautomator2 as u2
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'uiautomator2==2.16.25'])
        subprocess.run(['deactivate'], shell=True)
        subprocess.run(['pip', 'install', '--upgrade', 'requests'])
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        import requests
        time.sleep(10)
        import uiautomator2 as u2
    d = u2.connect(f'{porta}')
    import requests
    import hashlib
    import subprocess
    from colorama import init, Fore, Back, Style
    from faker import Faker
    # teste
    init(autoreset=True)
    console = Console()
    from termcolor import colored

    from rich.console import Console
    from rich.panel import Panel
    from rich.text import Text
    from rich.rule import Rule

    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random
    from datetime import datetime
    import string
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import NoSuchElementException
    from mailtm import Email
    import re
    import logging

    logger = logging.getLogger(__name__)

    handler = logging.FileHandler('log.txt')
    handler.setLevel(logging.ERROR)

    logger.addHandler(handler)

    # RANGE_NAME = 'contas!A:D'
    #
    # SCOPES = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

    def vpn_avast():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Avast', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop("com.avast.android.vpn")
            d.app_start("com.avast.android.vpn", ".app.wizard.WizardActivity")
            time.sleep(10)
        except Exception as e:
            print(e)
        abc = False

    def nenhuma_vpn():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.facebook.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        time.sleep(10)

    def vpn_hotspotshield():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HotspotShield',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('hotspotshield.android.vpn')
            d.app_start('hotspotshield.android.vpn')
        except Exception as e:
            print(e)
        d(resourceId='hotspotshield.android.vpn:id/tryAgainButton').click()
        time.sleep(5)
        d(resourceId='hotspotshield.android.vpn:id/btnVpnConnect').click()

        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_pia():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da PiaVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.privateinternetaccess.android')
            d.app_start('com.privateinternetaccess.android')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()
        time.sleep(3)
        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()

        abc = False

    def vpn_express():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da ExpressVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.expressvpn.vpn')
            d.app_start('com.expressvpn.vpn')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.expressvpn.vpn:id/obiButton').click()
        time.sleep(3)
        d(resourceId='com.expressvpn.vpn:id/obiButton').click()

        abc = False

    def vpn_nord():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da NordVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.nordvpn.android')
            time.sleep(5)
            d.app_start('com.nordvpn.android', use_monkey=True)
        except:
            pass
        time.sleep(10)
        time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_surf():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('com.surfshark.vpnclient.android')
            d.app_start('com.surfshark.vpnclient.android')
        except:
            pass
        time.sleep(15)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_better():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da BetterNet', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        try:
            d.app_stop('com.freevpnintouch')
            d.app_start('com.freevpnintouch')
        except:
            pass
        time.sleep(10)
        dialog = d(resourceId='com.freevpnintouch:id/dialogCtaPositive')
        connect = d(
            resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
        if dialog.exists:
            d(resourceId='com.freevpnintouch:id/dialogCtaPositive').click()
            time.sleep(3)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            # time.sleep(5)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
        while connect == 'CONNECT':
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            time.sleep(4)
            connect = d(
                resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            # WebDriverWait(driver, 20).until(
            # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        ip = '127.0.0.1:' + porta

        output = subprocess.check_output(
            ['adb', '-s', ip, 'shell', 'ifconfig'])

        # Verifica se a conexão VPN está ativa
        if not "tun0" in str(output):
            window['output'].print("Não conectado na BetterNet.")
            window.Refresh()
            try:
                connect = d(
                    resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
                d.app_stop('com.freevpnintouch')
                d.app_start('com.freevpnintouch')
                while connect == 'CONNECT':
                    d(resourceId='com.freevpnintouch:id/buttonConnect').click()
                    time.sleep(4)
                    connect = d(
                        resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            except:
                pass
        abc = False

    def vpn_cyberghost():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da CyberGhost', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('de.mobileconcepts.cyberghost')
            d.app_start('de.mobileconcepts.cyberghost')
        except:
            pass
        # time.sleep(3)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        rate = d(resourceId='de.mobileconcepts.cyberghost:id/rate_me_text')
        if rate.exists:
            d(resourceId='android:id/button2').click()
        time.sleep(2)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        abc = False

    def vpn_tunnelbear():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.tunnelbear.android')
            d.app_start("com.tunnelbear.android")
            while True:
                output = subprocess.check_output(
                    ['adb', '-s', porta, 'shell', 'ifconfig'])
                # print(str(output))
                if "tun0" in str(output):
                    print('Conectada')
                    break
                elif not "tun0" in str(output):
                    print('Reconectando')
                    try:
                        d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                        time.sleep(10)
                    except:
                        pass
        except Exception as e:
            print(e)
            pass

    def vpn_avg():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da AVG', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.avg.android.vpn')
            d.app_start("com.avg.android.vpn",
                        "com.avast.android.vpn.app.wizard.WizardActivity")
            regiao_vpn = d(
                resourceId='com.avg.android.vpn:id/location_title').get_text()

        except Exception as e:
            print(e)
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #               stderr=subprocess.DEVNULL, check=True, shell=True)

        time.sleep(30)

    def vpn_windscribe():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Windscribe', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)
            d.app_stop("com.windscribe.vpn")
            d.app_start("com.windscribe.vpn")
        except:
            pass
        d(resourceId='com.windscribe.vpn:id/on_off_button').click()
        time.sleep(10)
        primeiro = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_name').get_text()
        segundo = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_nick_name').get_text()
        regiao_vpn = primeiro + ' ' + segundo

    def vpn_hma():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HMA', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)

            d.app_stop("com.hidemyass.hidemyassprovpn")
            time.sleep(3)
            d.app_start('com.hidemyass.hidemyassprovpn',
                        'com.avast.android.vpn.activity.HmaOnboardingActivity')
        except:
            pass
        time.sleep(10)

    def gerar_id():
        chars = string.ascii_lowercase + string.digits
        android_id = ''.join(random.choice(chars) for i in range(16))
        return android_id

    options = Options()
    prefs = {"profile.managed_default_content_settings.images": 2}
    options.page_load_strategy = 'none'
    options.add_experimental_option("prefs", prefs)

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    window.Refresh()

    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global transition_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass
    gerar_id()
    android_id = gerar_id()
    subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    time.sleep(2)
    # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True, stdout=subprocess.DEVNULL,
    #               stderr=subprocess.DEVNULL)

    try:
        subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
    except Exception as e:
        pass

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Efetuando troca de IP.')
    window.Refresh()
    try:
        conteudo = config['vpn']
        if conteudo == "AVG":
            vpn_avg()
        elif conteudo == "SurfShark":
            vpn_surf()
        elif conteudo == "Nenhuma":
            nenhuma_vpn()
        elif conteudo == "Avast":
            vpn_avast()
        elif conteudo == "ExpressVPN":
            vpn_express()

        elif conteudo == "PiaVPN":
            vpn_pia()
        elif conteudo == "TunnelBear":
            vpn_tunnelbear()
        elif conteudo == "BetterNet":
            vpn_better()
        elif conteudo == "CyberGhost":
            vpn_cyberghost()
        elif conteudo == "NordVPN":
            vpn_nord()
        elif conteudo == "HotspotShield":
            vpn_hotspotshield()
        elif conteudo == "WindscribeVPN":
            vpn_windscribe()
        elif conteudo == "HmaVPN":
            vpn_hma()
        else:
            window['output'].print(
                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
            window.Refresh()

    except Exception as e:
        print(e)
        pass

    window.Refresh()
    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando sistema inicializar.')
    window.Refresh()

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.\n')
    window.Refresh()
    d.implicitly_wait(30.0)
    d.set_fastinput_ime(True)
    if not os.path.exists('./erros'):
        os.makedirs('./erros')
    codigo_não_recebido_seguidos = 0
    seguido = False
    tentativa = False
    while parar is False:
        senha = gerar_senha(12)
        if parar is True:
            print('Parando Thread')
            break
        print(linha_ret)
        # if codigo_não_recebido_seguidos == 3:
        #    #tempo_aleatorio = random.randint(10, 40)
        #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] 3 códigos não recebidos seguidos.')
        #    window.Refresh()
        #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando 1 hora para voltar novamente.')
        #    window.Refresh()
        #    time.sleep(3600)
        #    codigo_não_recebido_seguidos = 0
        try:
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)

            except:
                pass
            try:
                subprocess.run(
                    f'adb -s {porta} shell pm grant com.instagram.android android.permission.READ_CONTACTS',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            gerar_id()
            android_id = gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            window['output'].print(linha_ret)
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo 2NR')
            window.Refresh()

            

            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)

            except Exception as e:
                print('Verifique se o Instagram está instalado.')
                print(e)
                pass
            try:
                subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except Exception as e:
                print(e)
                pass
            try:
                subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server.test',
                               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)
                subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, shell=True)
            except:
                pass
            window.Refresh()

            try:
                # time.sleep(10)

                gerar_id()
                android_id = gerar_id()
                subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                               shell=True)
                try:
                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.READ_CONTACTS',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.CAMERA',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.RECORD_AUDIO',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    try:
                        subprocess.run(
                            f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.ACCESS_NOTIFICATION_POLICY',
                            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    except:
                        pass

                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.POST_NOTIFICATIONS',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                except:
                    pass
                try:
                    d.app_start('pl.rs.sip.softphone.newapp')
                except:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu algum erro ao abrir o 2NR, tentando novamente.')
                    window.Refresh()
                time.sleep(3)
                scope = ["https://spreadsheets.google.com/feeds",
                         "https://www.googleapis.com/auth/drive"]
                creds = ServiceAccountCredentials.from_json_keyfile_name(
                    'credentials.json', scope)
                client = gspread.authorize(creds)

                spreadsheet_id = config['spreadsheet']
                sheet_name = config['2nr']
                try:
                    sheet = client.open_by_key(
                        spreadsheet_id).worksheet(sheet_name)
                except Exception as e:
                    print(e)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu algum erro ao acessar a planilha.')
                    window.Refresh()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Tentando novamente em 1 minuto.')
                    window.Refresh()
                    time.sleep(60)
                    raise Exception('skip')
                # Obtém todas as células
                cells = sheet.get_all_values()

                # Armazena as células que correspondem à condição
                matches = [cell for row in cells for cell in row if
                           re.match(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', cell)]

                # Armazena a lista de células correspondentes à condição em uma variável
                regex2nr = matches
                while len(regex2nr) == 0:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nenhuma conta do 2NR encontrada.\nTentando novamente em 5 min.')
                    window.Refresh()
                    time.sleep(300)
                    scope = ["https://spreadsheets.google.com/feeds",
                            "https://www.googleapis.com/auth/drive"]
                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                        'credentials.json', scope)
                    client = gspread.authorize(creds)

                    spreadsheet_id = config['spreadsheet']

                    sheet_name = config['2nr']
                    sheet = client.open_by_key(
                        spreadsheet_id).worksheet(sheet_name)
                    values = sheet.col_values(1)

                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                    rows = sheet.get_all_values()

                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                    regex = re.compile(r'\S+\s\S+')
                    sheet_name = config['2nr']
                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                    try:
                        num_rows = sum(1 for row in rows if regex.match(row[0]))
                        window['total'].update(num_rows)
                    except:
                        pass
                    

                    cells = sheet.get_all_values()

                    # Armazena as células que correspondem à condição
                    matches = [cell for row in cells for cell in row if
                               re.match(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', cell)]

                    # Armazena a lista de células correspondentes à condição em uma variável
                    regex2nr = matches
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] {len(regex2nr)} conta(s) encontrada.')
                window.Refresh()
                time.sleep(3)
                try:
                    d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(timeout=60)
                except Exception as e:
                    print(e)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao clicar em login. Tentando novamente.')
                    window.Refresh()
                    subprocess.run(
                        f'uiautomator2 -s {porta} uninstall com.github.uiautomator',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    raise Exception('Ocorreu um erro ao clicar em login.')
                time.sleep(5)
                spreadsheet_id = config['spreadsheet']
                sheet_name = config['2nr']
                sheet = client.open_by_key(
                    spreadsheet_id).worksheet(sheet_name)
                # Obtém todas as células

                # Define a faixa de células para leitura
                first_linha = sheet.cell(1, 1).value

                # Divide a string em duas partes separadas por um espaço em branco
                partes = first_linha.split(' ')

                # Atribui a primeira parte (endereço de e-mail) à variável email2nr
                email2nr = partes[0]

                # Atribui a segunda parte (texto) à variável senha2nr
                senha2nr = partes[1]
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Email 2NR: {email2nr}')
                window.Refresh()
                d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email2nr)
                time.sleep(0.5)
                d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha2nr)
                time.sleep(0.5)
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                time.sleep(3)
                perm = d(resourceId='pl.rs.sip.softphone.newapp:id/messages')
                if perm.exists(timeout=30):
                    time.sleep(10)
                    pass
                else:
                    try:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Conta não existe.')
                        window.Refresh()
                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                            'credentials.json', scope)
                        client = gspread.authorize(creds)
                        # Abre a planilha e a planilha de uma determinada aba
                        spreadsheet_id = config['spreadsheet']
                        sheet_name = config['2nr']
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)

                        # Apaga a primeira célula da coluna A e desloca as células abaixo
                        sheet.delete_rows(1, 1)
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')
                    except Exception as e:
                        print(e)
                    raise Exception('skip')
                try:
                    qtd_num2 = d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[*]/androidx.appcompat.widget.LinearLayoutCompat/android.widget.LinearLayout/android.widget.TextView[1]')
                    qtd_num = qtd_num2.all()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] {len(qtd_num)} número(s) encontrado.')
                except Exception as e:
                    print(e)
                if len(qtd_num) == 0:
                    try:
                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                            'credentials.json', scope)
                        client = gspread.authorize(creds)
                        # Abre a planilha e a planilha de uma determinada aba
                        spreadsheet_id = config['spreadsheet']
                        sheet_name = config['2nr']
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)

                        # Apaga a primeira célula da coluna A e desloca as células abaixo
                        sheet.delete_rows(1, 1)
                    except Exception as e:
                        print(e)
                    continue
                window.Refresh()
                try:
                    num = d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat/android.widget.LinearLayout/android.widget.TextView[1]').get_text()
                    num = num.replace(' ', '')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Número: +48{num}')
                    window.Refresh()
                    email = num
                except Exception as e:
                    print(e)
                d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonSettings').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()

                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo instagram.')
                window.Refresh()
                try:
                    subprocess.run(
                        f'adb -s {porta} shell pm grant com.instagram.android android.permission.READ_CONTACTS',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                except:
                    pass


                def escrever_devagar(element, text, delay=0.05, chunk_size=3):
                    element.clear_text()
                    current_text = ""
                    for i in range(0, len(text), chunk_size):
                        if d(text='EXCLUIR'):
                            d.press('back')
                        current_text += text[i:i+chunk_size]
                        element.set_text(current_text)
                        if d(text='EXCLUIR'):
                            d.press('back')
                def gerar_senha(tamanho=12):
                    if tamanho < 6:
                        raise ValueError("A senha deve ter pelo menos 6 caracteres.")

                    # Define uma lista de letras maiúsculas e minúsculas
                    letras_maiusculas = [random.choice(
                        string.ascii_uppercase) for _ in range(tamanho // 2)]
                    letras_minusculas = [random.choice(
                        string.ascii_lowercase) for _ in range(tamanho // 2)]

                    # Intercale as letras maiúsculas e minúsculas
                    senha = ''.join(''.join(pair)
                                    for pair in zip(letras_maiusculas, letras_minusculas))

                    # Adiciona caracteres especiais, números e @
                    caracteres_permitidos = string.ascii_letters + string.digits + string.punctuation
                    caracteres_permitidos = caracteres_permitidos.replace(
                        "~", "")  # Remove ~ e outros acentos

                    senha += ''.join(random.choice(caracteres_permitidos)
                                    for _ in range(tamanho - len(senha) - 3))
                    # Adiciona pelo menos uma letra maiúscula
                    senha += random.choice(string.ascii_uppercase)
                    senha += random.choice(string.digits)  # Adiciona pelo menos um número
                    senha += "@"

                    # Mistura os caracteres
                    senha = ''.join(random.sample(senha, len(senha)))

                    return senha
                
                
                d.app_clear('com.instagram.android')
                d.app_start('com.instagram.android', use_monkey=True)
                
                while True:
                    if d(text="Criar nova conta"):
                        print('Tela de login')
                        d(text="Criar nova conta").click()
                    #elif d(text="Tentar novamente"):
                    #    d(text="Tentar novamente").click()
                    elif d(text='Qual é o seu email?'):
                        d(text="Cadastrar-se com o número do celular").click()
                        time.sleep(3)
                    elif d(textContains='Aguarde alguns minutos antes de tentar novamente') or d(textContains='Ocorreu um erro. Tente novamente mais tarde') or d(textContains='Tente novamente mais tarde'):
                        print('Tela de restrição')
                        if tentativa is True:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                            window.Refresh()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                            window.Refresh()
                            tentativa = False

                            d.app_start('pl.rs.sip.softphone.newapp')
                            time.sleep(4)
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                            window.Refresh()
                            try:
                                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                            stdout=subprocess.DEVNULL,
                                            stderr=subprocess.DEVNULL, check=True, shell=True)

                            except:
                                pass
                            try:
                                subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                            stdout=subprocess.DEVNULL,
                                            stderr=subprocess.DEVNULL, check=True, shell=True)
                            except:
                                pass

                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')

                        elif tentativa is False:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                            window.Refresh()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                            window.Refresh()
                            tentativa = True
                            try:
                                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                            stdout=subprocess.DEVNULL,
                                            stderr=subprocess.DEVNULL, check=True, shell=True)

                            except:
                                pass
                            try:
                                subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                            stdout=subprocess.DEVNULL,
                                            stderr=subprocess.DEVNULL, check=True, shell=True)
                            except:
                                pass
                            try:
                                conteudo = config['vpn']
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                                raise Exception('skip')
                            except:
                                raise Exception('skip')
                            
                    elif d(text='Qual é o número do seu celular?') or d(text='Qual é seu número de celular ou email?'):
                        print('Tela de adicionar número')
                        escrever_devagar(d(className="android.widget.EditText"), f'+48{num}', chunk_size=3)
                        d(text="Avançar").click()
                        time.sleep(15)
                        if d(textContains="Você está tentando entrar?").wait(timeout=15):
                            d(text="Criar nova conta").click()
                            time.sleep(3)
                        if d(text="Enviar código por SMS"):
                            d(text="Enviar código por SMS").click()
                            d(text="Avançar").click(timeout=30)
                        time.sleep(5)
                    elif d(text="Insira o código de confirmação"):
                        print('Tela de aguardar código')
                        window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código')
                        window.Refresh()
                        d.app_start("pl.rs.sip.softphone.newapp")
                        time.sleep(5)
                        if d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').exists:
                            print('2NR deslogou')
                            d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(timeout=60)
                            time.sleep(5)

                            d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email2nr)
                            time.sleep(0.5)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha2nr)
                            time.sleep(0.5)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                            time.sleep(3)

                        d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()


                        try:
                            cod = d(
                                resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=60)

                        except:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido')
                            window.Refresh()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click(timeout=30)
                            time.sleep(1)
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                            window.Refresh()
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            d.app_clear('com.instagram.android')
                            raise Exception('Código não recebido')
                        
                        cod = cod.replace(' ', '')
                        codigo = re.sub('[^0-9]', '', cod)[:6]
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                        window.Refresh()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonSettings').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()

                        d.app_start('com.instagram.android', use_monkey=True)
                        d(text='Avançar').wait(timeout=30)
                        escrever_devagar(d(className="android.widget.EditText"), codigo, chunk_size=3)
                        d(text="Avançar").click(timeout=30)
                        time.sleep(3)

                    elif d(text="Crie uma senha"):
                        print('Tela de criar senha')
                        senha = gerar_senha(12)
                        escrever_devagar(d(className="android.widget.EditText"), senha, chunk_size=3)
                        time.sleep(1)
                        d(text="Avançar").click(timeout=30)
                        time.sleep(5)

                    elif d(text="Salvar suas informações de login?"):
                        print('Tela de salvar informações')
                        d(text="Agora não").click()

                    elif d(textContains="Definir data") or d(textContains="Qual é a sua data de nascimento?"):
                        print('Tela de data de nascimento')
                        if d(textContains="CANCELAR"):
                            d(textContains="CANCELAR").click()
                        d(text="Avançar").click(timeout=30)
                        time.sleep(0.5)
                        d(text="Avançar").click(timeout=30)
                        d(text="Qual é a sua idade?").wait(timeout=30)
                        idade_aleatoria = str(random.randint(18, 55))
                        escrever_devagar(d(className="android.widget.EditText"), idade_aleatoria, chunk_size=3)
                        d(text="Avançar").click(timeout=30)
                        d(text="OK").click(timeout=30)

                    elif d(text="Qual é o seu nome?"):
                        print('Tela de escolher nome')
                        
                        lista_user = random.choices(range(0, 9), k=2)
                        lista_letras = random.choices(letras, k=1)
                        nomea = fake.first_name_male().replace(" ", "")
                        nome = unicodedata.normalize('NFKD', nomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        sobrenomea = fake.last_name().replace(" ", "").lower()
                        sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        nome_completo = nome + ' ' + sobrenome
                        nome_completo_s = nome + sobrenome
                        numeros_concatenados = ''.join(
                            str(numero) for numero in lista_user)
                        d(className="android.widget.EditText").set_text(nome_completo)
                        #escrever_devagar(d(className="android.widget.EditText"), nome_completo, chunk_size=3)
                        d(text="Avançar").click(timeout=30)
                        time.sleep(5)

                    elif d(text="Crie um nome de usuário") or d(textContains="Confira seu nome de us"):
                        print('Tela de escolher user')
                        lista_user = random.choices(range(0, 9), k=2)
                        lista_letras = random.choices(letras, k=1)
                        nome_completo = nome + ' ' + sobrenome
                        nome_completo_s = nome + sobrenome
                        numeros_concatenados = ''.join(
                            str(numero) for numero in lista_user)
                        user_completo1 = nome_completo_s + '' + \
                            str(numeros_concatenados) + ''.join(lista_letras)

                        user_completo = random.randint(1, len(user_completo1))
                        # Insira o ponto no índice aleatório
                        string_with_dot = user_completo1[:user_completo] + \
                            '_' + user_completo1[user_completo:]
                        user_completo_antigo = string_with_dot.lower()

                        escolha = random.choice(["_", "."])
                        user_completo = nome + escolha + sobrenome + \
                            str(numeros_concatenados) + ''.join(lista_letras)
                        
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] User: {user_completo}')
                        window.Refresh()
                        escrever_devagar(d(className="android.widget.EditText"), user_completo, chunk_size=3)
                        time.sleep(5)
                        try: d(text="Avançar").click(timeout=30)
                        except: pass
                        time.sleep(5)
                    elif d(textContains="Aceite os termos e") or d(textContains="leia e concorde com nossos termos"):
                        print('Tela de termos e políticas')
                        try:
                            d(text="Concordo").click()
                            time.sleep(10)
                            while True:
                                if d(text="Concordo") and d(textContains="Aceite os termos e") or d(text="Concordo") and d(textContains="leia e concorde com nossos termos"):
                                    #d(text="Já tem uma conta?").click(timeout=25)
                                    d.app_stop('com.instagram.android')
                                    d.app_clear('com.instagram.android')
                                    d.app_start('com.instagram.android')
                                    #d(text="ENTRAR").click(timeout=10)
                                    d(className="android.widget.EditText").wait(timeout=40)
                                    d(className="android.widget.EditText", instance=0).set_text(user_completo)
                                    d(className="android.widget.EditText", instance=1).set_text(senha)
                                    d(text='Entrar').click()
                                    if d(text="Agora não").wait(timeout=10):
                                        d(text="Agora não").click()
                                    else:
                                        conteudo = config['vpn']
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                                        window.Refresh()
                                        if conteudo == "AVG":
                                            vpn_avg()
                                        elif conteudo == "SurfShark":
                                            vpn_surf()
                                        elif conteudo == "Nenhuma":
                                            nenhuma_vpn()
                                        elif conteudo == "Avast":
                                            vpn_avast()
                                        elif conteudo == "ExpressVPN":
                                            vpn_express()
                                        elif conteudo == "PiaVPN":
                                            vpn_pia()
                                        elif conteudo == "TunnelBear":
                                            vpn_tunnelbear()
                                        elif conteudo == "BetterNet":
                                            vpn_better()
                                        elif conteudo == "CyberGhost":
                                            vpn_cyberghost()
                                        elif conteudo == "NordVPN":
                                            vpn_nord()
                                        elif conteudo == "HotspotShield":
                                            vpn_hotspotshield()
                                        elif conteudo == "WindscribeVPN":
                                            vpn_windscribe()
                                        elif conteudo == "HmaVPN":
                                            vpn_hma()
                                        else:
                                            window['output'].print(
                                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                            window.Refresh()
                                        raise Exception("Restrição")
                                elif d(textContains='Tente novamente mais tarde'):
                                    conteudo = config['vpn']
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                                    window.Refresh()
                                    if conteudo == "AVG":
                                        vpn_avg()
                                    elif conteudo == "SurfShark":
                                        vpn_surf()
                                    elif conteudo == "Nenhuma":
                                        nenhuma_vpn()
                                    elif conteudo == "Avast":
                                        vpn_avast()
                                    elif conteudo == "ExpressVPN":
                                        vpn_express()
                                    elif conteudo == "PiaVPN":
                                        vpn_pia()
                                    elif conteudo == "TunnelBear":
                                        vpn_tunnelbear()
                                    elif conteudo == "BetterNet":
                                        vpn_better()
                                    elif conteudo == "CyberGhost":
                                        vpn_cyberghost()
                                    elif conteudo == "NordVPN":
                                        vpn_nord()
                                    elif conteudo == "HotspotShield":
                                        vpn_hotspotshield()
                                    elif conteudo == "WindscribeVPN":
                                        vpn_windscribe()
                                    elif conteudo == "HmaVPN":
                                        vpn_hma()
                                    else:
                                        window['output'].print(
                                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                        window.Refresh()
                                    raise Exception("Restrição")
                                elif not d(textContains="Aceite os termos e"):
                                    break
                        except Exception as e:
                            if d(resourceId="com.instagram.android:id/tab_avatar"): pass
                            else: print(e)
                            if str(e) == 'Restrição':
                                raise Exception('')
                                

                    elif d(textContains="Ocorreu um erro") and d(textContains='Tentar novamente'):
                        print('Tela de erro de tradução')
                        d(textContains='Tentar novamente').click()
                        time.sleep(10)
                        if d(textContains='Tentar novamente'):
                            print('Não foi possível passar da tela')
                            try:
                                conteudo = config['vpn']
                        #
                                # Executa a função correspondente ao conteúdo do arquivo
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                                raise Exception('skip')
                            except Exception as e:
                                raise Exception('skip')
                    
                    elif d(text="A Página não está disponível no momento"):
                        print('Tela de página não disponível')
                        d.press('back')
                        time.sleep(5)
                        if d(text="A Página não está disponível no momento"):
                            print('Não foi possível passar da tela')
                            try:
                                conteudo = config['vpn']
                        #
                                # Executa a função correspondente ao conteúdo do arquivo
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                                raise Exception('skip')
                            except Exception as e:
                                raise Exception('skip')
                    elif d(resourceId="com.android.packageinstaller:id/permission_deny_button"):
                        print('Tela de permissão')
                        d(resourceId="com.android.packageinstaller:id/permission_deny_button").click()
                    elif d(textContains="Adicione uma foto") or d(resourceId="com.instagram.android:id/tab_avatar"):
                        if d(resourceId="com.instagram.android:id/tab_avatar"):
                            pass
                        else:
                            d(textContains="Pular").click()
                        print('Conta criada')
                        time.sleep(5)
                        try:
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                text_color=('lime'))
                            window.Refresh()
                            seguido = False
                            contagem += 1
                            window['criadas'].update(contagem)
                            window.Refresh()
                            now = datetime.now()
                            now_brasilia = tz.localize(now)
                            timestamp = now_brasilia.strftime(
                                "%d/%m/%Y %H:%M:%S")
                            try:
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)
                        
                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                if removenum_addemail:
                                    email = f'{user_completo1}@{dominios2}'
                                    print(email)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                        conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)
                        
                                rows = sheet.get_all_values()
                        
                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')
                        
                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            except Exception as e:
                                print(e)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                tempo_aleatorio = random.randint(10, 40)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                time.sleep(tempo_aleatorio)
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)
                        
                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                        conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)
                        
                                rows = sheet.get_all_values()
                        
                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')
                        
                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            window['total'].update(num_rows)
                            random_number = random.random()
                        
                            # Definir a chance desejada (10%)
                            chance = 0.2
                        
                            # Verificar se o número aleatório está abaixo da chance
                            if random_number < chance and not user_mysql == "wn3":
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                    funcionamento, scope)
                                client = gspread.authorize(creds)
                        
                                spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                sheet_name = 'relatorio_geral'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                        conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)
                        except Exception as e:
                            print(e)
                            pass
                        d.app_clear('com.instagram.android')
                        d.app_start('com.instagram.android', use_monkey=True)
                        d(className="android.widget.EditText", instance=0).set_text(user_completo)
                        d(className="android.widget.EditText", instance=1).set_text(senha)
                        d(text='Entrar').click()
                        if d(text="Agora não").wait(timeout=10):
                            d(text="Agora não").click()

                        while True:
                            print('Criar por cima')
                            window['output'].print(f'{linha_ret}')
                            window.Refresh()
                            d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                            d(textContains="Ver tudo").click()
                            
                            if d(textContains='Não permitir acesso').wait(timeout=15):
                                d(textContains='Não permitir acesso').click()
                            seguir_sugeridos = 0
                            while seguir_sugeridos < 10:
                                try:
                                    d(text="Seguir").click(timeout=2)
                                    time.sleep(1)
                                    seguir_sugeridos += 1
                                except:
                                    width, height = d.window_size()
                                    start_x = width // 2
                                    start_y = height * 3 // 4  # Comece no 75% da altura
                                    end_x = width // 2
                                    end_y = height // 4  # Termine no 25% da altura

                                    # Realize o swipe
                                    d.swipe(start_x, start_y, end_x, end_y, duration=0.5)
                                    if not d(text="Seguir"):
                                        break
                            d(resourceId="com.instagram.android:id/action_bar_button_back").click(timeout=10)
                            if removenum_addemail:
                                window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Processo de adicionar email')
                                window.Refresh()
                                d.xpath('//*[@content-desc="Opções"]').click()
                                d(text='Configurações e privacidade').click()
                                d(text='Central de Contas').click()
                                try: 
                                    if d(text='Agora na Central de Contas').wait(timeout=5):
                                        d(text='OK').click()
                                except: pass
                                d(text='Dados pessoais').click()
                                d(text='Informações de contato').click()
                                d(text='Adicionar novo contato').click()
                                d(text='Adicionar email').click()
                                d(text='Adicione um endereço de email').wait(timeout=30)
                                # Função para obter os domínios disponíveis
                                def obter_dominios():
                                    url = "https://api.mail.tm/domains"
                                    response = requests.get(url)
                                    if response.status_code == 200:
                                        return [domain['domain'] for domain in response.json()['hydra:member']]
                                    else:
                                        print("Erro ao obter os domínios:", response.json())
                                        return []

                                # Função para criar uma conta no Mail.tm
                                def criar_conta(email_prefixo, senha, dominio):
                                    global email_instagram
                                    email_instagram = f"{email_prefixo}@{dominio}"
                                    url = "https://api.mail.tm/accounts"
                                    payload = {
                                        "address": email_instagram,
                                        "password": senha
                                    }
                                    headers = {
                                        "Content-Type": "application/json"
                                    }
                                    response = requests.post(url, json=payload, headers=headers)
                                    if response.status_code == 201:
                                        print(f"Email criado com sucesso: {email_instagram}")
                                        d.xpath('//android.widget.EditText').set_text(email_instagram)
                                        d(text='Instagram').click()
                                        d(text='Avançar').click()
                                        d(text='Insira seu código de confirmação').wait(timeout=30)
                                        return response.json()
                                    else:
                                        print("Erro ao criar o email:", response.json())
                                        return None

                                # Função para obter o token de autenticação
                                def obter_token(email_instagram, senha):
                                    url = "https://api.mail.tm/token"
                                    payload = {
                                        "address": email_instagram,
                                        "password": senha
                                    }
                                    headers = {
                                        "Content-Type": "application/json"
                                    }
                                    response = requests.post(url, json=payload, headers=headers)
                                    if response.status_code == 200:
                                        return response.json()['token']
                                    else:
                                        print("Erro ao obter o token:", response.json())
                                        return None

                                # Função para verificar se há emails recebidos com o assunto 'Confirmar email' e extrair os 6 primeiros algarismos do corpo do email
                                def verificar_emails(token):
                                    url = "https://api.mail.tm/messages"
                                    headers = {
                                        "Authorization": f"Bearer {token}"
                                    }
                                    response = requests.get(url, headers=headers)
                                    if response.status_code == 200:
                                        emails = response.json()["hydra:member"]
                                        for email in emails:
                                            if 'confirmar email' in email['subject'].lower():
                                                # Obter o corpo do email
                                                email_url = f"https://api.mail.tm/messages/{email['id']}"
                                                email_response = requests.get(email_url, headers=headers)
                                                if email_response.status_code == 200:
                                                    email_body = email_response.json()['text']
                                                    match = re.search(r'\d{6}', email_body)
                                                    if match:
                                                        return match.group(0)
                                        return None
                                    else:
                                        print("Erro ao verificar os emails:", response.json())
                                        return None

                                # Parâmetros desejados
                                email_prefixo = user_completo1
                                senha_desejada = senha
                                # Obter domínios disponíveis
                                dominios = obter_dominios()

                                if dominios:
                                    # Tentar criar a conta com os domínios disponíveis
                                    conta = None
                                    for dominio in dominios:
                                        conta = criar_conta(email_prefixo, senha_desejada, dominio)
                                        if conta:
                                            break

                                    if conta:
                                        # Obter token de autenticação
                                        token = obter_token(conta['address'], senha_desejada)

                                        if token:
                                            # Esperar até 1 minuto por um email com assunto 'Confirmar email'
                                            start_time = time.time()
                                            while time.time() - start_time < 180:
                                                resultado = verificar_emails(token)
                                                if resultado:
                                                    print(f"Código recebido: {resultado}")
                                                    break
                                                time.sleep(5)  # Espera 5 segundos antes de verificar novamente
                                            else:
                                                print("Não foi possível receber o email dentro de 3 minutos.")
                                                window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Email não chegou')
                                                window.Refresh()
                                                raise Exception('Email não chegou')
                                else:
                                    print("Nenhum domínio disponível foi encontrado.")



                                d.xpath('//android.widget.EditText').set_text(resultado)
                                d(text='Avançar').click()
                                d(text='Você adicionou seu email às contas selecionadas').wait(timeout=30)
                                print(f'Email adicionado: {email_instagram}')
                                d(text='Fechar').click()
                                time.sleep(3)
                                d(textContains='+48').click()
                                try:
                                    d(text='Excluir número').click()
                                except:
                                    d(textContains='+48').click()
                                    d(text='Excluir número').click()
                                d(text='EXCLUIR').click()
                                try:
                                    if d(text='Para sua segurança, insira sua senha novamente para continuar').wait(timeout=5):
                                        print("Conta deslogou")
                                        d.xpath('//android.widget.EditText').set_text(senha)
                                        d(text='Continuar').click()
                                except: pass
                                d(text='Você excluiu seu número anterior').wait(timeout=30)
                                print("Número excluido")
                                d(text='Fechar').click()
                                d.app_stop('com.instagram.android')
                                d.app_start('com.instagram.android')
                                d(resourceId='com.instagram.android:id/profile_tab').click()
                                print('Email adicionado')
                                window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Email adicionado: {email_instagram}')
                                window.Refresh()
                            
                            try:
                                d(resourceId="com.instagram.android:id/action_bar_title_chevron").click(timeout=10)
                            except: 
                                d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                                d(resourceId="com.instagram.android:id/action_bar_title_chevron").click(timeout=10)
                            d(textContains="Adicionar conta").click(timeout=30)
                            d(text="Criar nova conta").click(timeout=20)
                            lista_user = random.choices(range(0, 9), k=2)
                            lista_letras = random.choices(letras, k=2)
                            nomea = fake.first_name_male().replace(" ", "")
                            nome = unicodedata.normalize('NFKD', nomea).encode(
                                'ASCII', 'ignore').decode('ASCII')
                            sobrenomea = fake.last_name().replace(" ", "").lower()
                            sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                                'ASCII', 'ignore').decode('ASCII')
                            nome_completo = nome + ' ' + sobrenome
                            nome_completo_s = nome + sobrenome
                            numeros_concatenados = ''.join(str(numero)
                                                        for numero in lista_user)
                            user_completo1 = nome_completo_s + '' + \
                                str(numeros_concatenados) + ''.join(lista_letras)
                            user_completo = random.randint(1, len(user_completo1))
                            string_with_dot = user_completo1[:user_completo] + \
                                '_' + user_completo1[user_completo:]
                            user_completo_antigo = string_with_dot.lower()
                            escolha = random.choice(["_", "."])
                            user_completo = nome + escolha + sobrenome + \
                                str(numeros_concatenados) + ''.join(lista_letras)
                            print(user_completo)

                            d(text="Escolha um nome de usuário").wait(timeout=30)
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] User: {user_completo}')
                            window.Refresh()
                            d(className="android.widget.EditText").set_text(user_completo)
                            while True:
                                if d(textContains='não está disponível.'):
                                    d(resourceId='com.instagram.android:id/username_suggestion_text').click()
                                elif d(resourceId="com.instagram.android:id/username_valid_icon"):
                                    break
                                elif d(text='EXCLUIR'):
                                    d.press('back')
                                elif d(textContains='Aguarde alguns minutos antes de tentar novamente') or d(textContains="Ocorreu um erro de rede desconhecido"):
                                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Restrição')
                                    window.Refresh()
                                    conteudo = config['vpn']
                                    if conteudo == "AVG":
                                        vpn_avg()
                                    elif conteudo == "SurfShark":
                                        vpn_surf()
                                    elif conteudo == "Nenhuma":
                                        nenhuma_vpn()
                                    elif conteudo == "Avast":
                                        vpn_avast()
                                    elif conteudo == "ExpressVPN":
                                        vpn_express()
                                    elif conteudo == "PiaVPN":
                                        vpn_pia()
                                    elif conteudo == "TunnelBear":
                                        vpn_tunnelbear()
                                    elif conteudo == "BetterNet":
                                        vpn_better()
                                    elif conteudo == "CyberGhost":
                                        vpn_cyberghost()
                                    elif conteudo == "NordVPN":
                                        vpn_nord()
                                    elif conteudo == "HotspotShield":
                                        vpn_hotspotshield()
                                    elif conteudo == "WindscribeVPN":
                                        vpn_windscribe()
                                    elif conteudo == "HmaVPN":
                                        vpn_hma()
                                    else:
                                        window['output'].print(
                                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                        window.Refresh()
                                    raise Exception("Restrição")
                            try:
                                d(text="Avançar", enabled=True).click(timeout=10)
                            except:
                                if d(text='EXCLUIR'):
                                    d.press('back')
                            d(text="Crie uma senha").wait(timeout=20)
                            senha = gerar_senha(12)
                            
                            escrever_devagar(d(className="android.widget.EditText"), senha, chunk_size=4)
                            time.sleep(2)
                            d(text="Avançar", enabled=True).click()
                            time.sleep(3)
                            d(text='Adicionar novo telefone ou email').click(timeout=20)
                            d(text="Adicionar telefone ou email").wait(timeout=30)
                            escrever_devagar(d(className="android.widget.EditText"), num, chunk_size=2)
                            time.sleep(1)
                            d(text="Avançar", enabled=True).click()

                            while True:
                                if (
                                    d(text='Tente novamente mais tarde') or
                                    d(textContains="Ocorreu um erro de rede desconhecido") or
                                    d(textContains="feedback_required") or
                                    d(textContains='Aguarde alguns minutos') or
                                    d(textContains='Fazer uma apelação') or
                                    d(textContains='Ocorreu um problema com a sua') or
                                    d(textContains='Insira o código de confirmação') or
                                    d(textContains='concluir a sua solicitação') or
                                    d(textContains='Parâmetros inválidos') or
                                    d(resourceId="com.instagram.android:id/tab_avatar") or
                                    d(text='OK')
                                ):
                                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Restrição')
                                    window.Refresh()
                                    conteudo = config['vpn']
                                    if conteudo == "AVG":
                                        vpn_avg()
                                    elif conteudo == "SurfShark":
                                        vpn_surf()
                                    elif conteudo == "Nenhuma":
                                        nenhuma_vpn()
                                    elif conteudo == "Avast":
                                        vpn_avast()
                                    elif conteudo == "ExpressVPN":
                                        vpn_express()
                                    elif conteudo == "PiaVPN":
                                        vpn_pia()
                                    elif conteudo == "TunnelBear":
                                        vpn_tunnelbear()
                                    elif conteudo == "BetterNet":
                                        vpn_better()
                                    elif conteudo == "CyberGhost":
                                        vpn_cyberghost()
                                    elif conteudo == "NordVPN":
                                        vpn_nord()
                                    elif conteudo == "HotspotShield":
                                        vpn_hotspotshield()
                                    elif conteudo == "WindscribeVPN":
                                        vpn_windscribe()
                                    elif conteudo == "HmaVPN":
                                        vpn_hma()
                                    else:
                                        window['output'].print(
                                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                        window.Refresh()
                                    raise Exception("Restrição")
                                
                                elif d(text='Pular'): break
                            time.sleep(5)
                            d(text='Pular').wait(timeout=30)
                            time.sleep(5)
                            if d(text="Pular"):
                                print("Conta criada")
                                try:
                                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                        text_color=('lime'))
                                    window.Refresh()
                                    seguido = False
                                    contagem += 1
                                    window['criadas'].update(contagem)
                                    window.Refresh()
                                    now = datetime.now()
                                    now_brasilia = tz.localize(now)
                                    timestamp = now_brasilia.strftime(
                                        "%d/%m/%Y %H:%M:%S")
                                    try:
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                                            'credentials.json', scope)
                                        client = gspread.authorize(creds)
                        #
                                        spreadsheet_id = config['spreadsheet']
                                        sheet_name = 'contas'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        if removenum_addemail:
                                            email = f'{user_completo}@{dominios2}'
                                        values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                                conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:G{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)
                        #
                                        rows = sheet.get_all_values()
                        #
                                        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                        regex = re.compile(r'\S+\s\S+')
                        #
                                        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                        num_rows = sum(
                                            1 for row in rows if regex.match(row[0]))
                                    except Exception as e:
                                        print(e)
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                        tempo_aleatorio = random.randint(10, 40)
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                        time.sleep(tempo_aleatorio)
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                                            'credentials.json', scope)
                                        client = gspread.authorize(creds)
                        #
                                        spreadsheet_id = config['spreadsheet']
                                        sheet_name = 'contas'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                                conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:G{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)
                        #
                                        rows = sheet.get_all_values()
                        #
                                        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                        regex = re.compile(r'\S+\s\S+')
                        #
                                        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                        num_rows = sum(
                                            1 for row in rows if regex.match(row[0]))
                                    window['total'].update(num_rows)
                                    random_number = random.random()
                        #
                                    # Definir a chance desejada (10%)
                                    chance = 0.2
                        #
                                    # Verificar se o número aleatório está abaixo da chance
                                    if random_number < chance and not user_mysql == "wn3":
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                            funcionamento, scope)
                                        client = gspread.authorize(creds)
                        #
                                        spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                        sheet_name = 'relatorio_geral'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                                conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:G{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)
                                except Exception as e:
                                    print(e)
                                    pass
                                d.app_stop('com.instagram.android')
                                d.app_start('com.instagram.android', use_monkey=True)

                            elif d(text="Fazer uma apelação") or d(textContains='Aguarde alguns minutos'):
                                print('Conta suspensa')
                                d.app_clear('com.instagram.android')
                                try:
                                    conteudo = config['vpn']
                        #
                                    # Executa a função correspondente ao conteúdo do arquivo
                                    if conteudo == "AVG":
                                        vpn_avg()
                                    elif conteudo == "SurfShark":
                                        vpn_surf()
                                    elif conteudo == "Nenhuma":
                                        nenhuma_vpn()
                                    elif conteudo == "Avast":
                                        vpn_avast()
                                    elif conteudo == "ExpressVPN":
                                        vpn_express()
                                    elif conteudo == "PiaVPN":
                                        vpn_pia()
                                    elif conteudo == "TunnelBear":
                                        vpn_tunnelbear()
                                    elif conteudo == "BetterNet":
                                        vpn_better()
                                    elif conteudo == "CyberGhost":
                                        vpn_cyberghost()
                                    elif conteudo == "NordVPN":
                                        vpn_nord()
                                    elif conteudo == "HotspotShield":
                                        vpn_hotspotshield()
                                    elif conteudo == "WindscribeVPN":
                                        vpn_windscribe()
                                    elif conteudo == "HmaVPN":
                                        vpn_hma()
                                    else:
                                        window['output'].print(
                                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                        window.Refresh()
                                    raise Exception('skip')
                                except Exception as e:
                                    raise Exception('skip')
                    
                        
                        
                    elif d(text="Fazer uma apelação"):
                        print('Conta suspensa')
                        d.app_clear('com.instagram.android')
                        if seguido is True:
                            seguido = False
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] SMS seguidos, Trocando de número.')
                            window.Refresh()
                            d.app_start('pl.rs.sip.softphone.newapp')
                            time.sleep(4)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                            window.Refresh()
                            sms = True
                        elif seguido is False:
                            seguido = True
                        try:
                            conteudo = config['vpn']
                #
                            # Executa a função correspondente ao conteúdo do arquivo
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                            
                        except Exception as e:
                            raise Exception('skip')
                            sms = True
                    time.sleep(3)

            except Exception as e:
                print(e)
                import traceback
                if not str(e) == '' or not str(e) == ' ' or not str(e) == 'skip':
                    traceback.print_exc()
                if not e == 'skip' or not e == 'Manutenção.':
                    try:
                        d.screenshot(
                            f'./erros/{datetime.now().strftime("%H_%M_%S")}.png')
                    except Exception as e:
                        print(e)
                        pass
                pass
        except Exception as e:
            print(e)
            import traceback
            if not str(e) == '' or not str(e) == ' ' or not str(e) == 'skip':
                traceback.print_exc()
            if not e == 'skip' or not e == 'Manutenção.':
                try:
                    d.screenshot(
                        f'./erros/{datetime.now().strftime("%H_%M_%S")}.png')
                except Exception as e:
                    print(e)
                    pass
            pass

def creator_TWILIO_INSTA():
    try:
        with open("config.json", "r") as f:
            config = json.load(f)
    except FileNotFoundError:
        config = {}
    global gerar_senha
    import traceback
    SPREADSHEET_ID = config['spreadsheet']
    conteudo = config['vpn']
    senha = gerar_senha(12)
    maquina = config['maquina']
    tentativa = False
    seguido = False
    regiao_vpn = 'Sem dados'
    app = 'Normal TWILIO'
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    # Código que gera a saída
    import os
    import time
    import requests
    import hashlib
    import subprocess

    # verifica se o arquivo existe na pasta do bot

    try:
        from rich.console import Console
    except ModuleNotFoundError:
        import subprocess
        import sys

        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['pip', 'install', '-r', 'requirements.txt'])
        subprocess.run(['deactivate'], shell=True)
        from rich.console import Console
    import os
    import time
    try:
        from twilio.rest import Client
    except:
        subprocess.run(['pip', 'install', 'twilio'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        from twilio.rest import Client
    try:
        import uiautomator2 as u2
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'uiautomator2==2.16.25'])
        subprocess.run(['deactivate'], shell=True)
        subprocess.run(['pip', 'install', '--upgrade', 'requests'])
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        import requests
        time.sleep(10)
        import uiautomator2 as u2
    d = u2.connect(f'{porta}')
    import requests
    import hashlib
    import subprocess
    from colorama import init, Fore, Back, Style
    from faker import Faker
    # teste
    init(autoreset=True)
    console = Console()
    from termcolor import colored

    from rich.console import Console
    from rich.panel import Panel
    from rich.text import Text
    from rich.rule import Rule

    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random
    from datetime import datetime
    import string
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import NoSuchElementException
    from mailtm import Email
    import re
    import logging

    logger = logging.getLogger(__name__)

    handler = logging.FileHandler('log.txt')
    handler.setLevel(logging.ERROR)

    logger.addHandler(handler)

    # RANGE_NAME = 'contas!A:D'
    #
    # SCOPES = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

    def vpn_avast():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Avast', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop("com.avast.android.vpn")
            d.app_start("com.avast.android.vpn", ".app.wizard.WizardActivity")
            time.sleep(10)
        except Exception as e:
            print(e)
        abc = False

    def nenhuma_vpn():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.facebook.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        time.sleep(10)

    def vpn_hotspotshield():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HotspotShield',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('hotspotshield.android.vpn')
            d.app_start('hotspotshield.android.vpn')
        except Exception as e:
            print(e)
        d(resourceId='hotspotshield.android.vpn:id/tryAgainButton').click()
        time.sleep(5)
        d(resourceId='hotspotshield.android.vpn:id/btnVpnConnect').click()

        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_pia():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da PiaVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.privateinternetaccess.android')
            d.app_start('com.privateinternetaccess.android')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()
        time.sleep(3)
        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()

        abc = False

    def vpn_express():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da ExpressVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.expressvpn.vpn')
            d.app_start('com.expressvpn.vpn')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.expressvpn.vpn:id/obiButton').click()
        time.sleep(3)
        d(resourceId='com.expressvpn.vpn:id/obiButton').click()

        abc = False

    def vpn_nord():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da NordVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.nordvpn.android')
            time.sleep(5)
            d.app_start('com.nordvpn.android', use_monkey=True)
        except:
            pass
        time.sleep(10)
        time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_surf():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('com.surfshark.vpnclient.android')
            d.app_start('com.surfshark.vpnclient.android')
        except:
            pass
        time.sleep(15)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_better():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da BetterNet', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        try:
            d.app_stop('com.freevpnintouch')
            d.app_start('com.freevpnintouch')
        except:
            pass
        time.sleep(10)
        dialog = d(resourceId='com.freevpnintouch:id/dialogCtaPositive')
        connect = d(
            resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
        if dialog.exists:
            d(resourceId='com.freevpnintouch:id/dialogCtaPositive').click()
            time.sleep(3)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            # time.sleep(5)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
        while connect == 'CONNECT':
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            time.sleep(4)
            connect = d(
                resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            # WebDriverWait(driver, 20).until(
            # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        ip = '127.0.0.1:' + porta

        output = subprocess.check_output(
            ['adb', '-s', ip, 'shell', 'ifconfig'])

        # Verifica se a conexão VPN está ativa
        if not "tun0" in str(output):
            window['output'].print("Não conectado na BetterNet.")
            window.Refresh()
            try:
                connect = d(
                    resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
                d.app_stop('com.freevpnintouch')
                d.app_start('com.freevpnintouch')
                while connect == 'CONNECT':
                    d(resourceId='com.freevpnintouch:id/buttonConnect').click()
                    time.sleep(4)
                    connect = d(
                        resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            except:
                pass
        abc = False

    def vpn_cyberghost():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da CyberGhost', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('de.mobileconcepts.cyberghost')
            d.app_start('de.mobileconcepts.cyberghost')
        except:
            pass
        # time.sleep(3)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        rate = d(resourceId='de.mobileconcepts.cyberghost:id/rate_me_text')
        if rate.exists:
            d(resourceId='android:id/button2').click()
        time.sleep(2)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        abc = False

    def vpn_tunnelbear():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.tunnelbear.android')
            d.app_start("com.tunnelbear.android")
            while True:
                output = subprocess.check_output(
                    ['adb', '-s', porta, 'shell', 'ifconfig'])
                # print(str(output))
                if "tun0" in str(output):
                    print('Conectada')
                    break
                elif not "tun0" in str(output):
                    print('Reconectando')
                    try:
                        d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                        time.sleep(10)
                    except:
                        pass
        except Exception as e:
            print(e)
            pass

    def vpn_avg():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da AVG', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.avg.android.vpn')
            d.app_start("com.avg.android.vpn",
                        "com.avast.android.vpn.app.wizard.WizardActivity")
            regiao_vpn = d(
                resourceId='com.avg.android.vpn:id/location_title').get_text()

        except Exception as e:
            print(e)
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #               stderr=subprocess.DEVNULL, check=True, shell=True)

        time.sleep(30)

    def vpn_windscribe():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Windscribe', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)
            d.app_stop("com.windscribe.vpn")
            d.app_start("com.windscribe.vpn")
        except:
            pass
        d(resourceId='com.windscribe.vpn:id/on_off_button').click()
        time.sleep(10)
        primeiro = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_name').get_text()
        segundo = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_nick_name').get_text()
        regiao_vpn = primeiro + ' ' + segundo

    def vpn_hma():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HMA', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)

            d.app_stop("com.hidemyass.hidemyassprovpn")
            time.sleep(3)
            d.app_start('com.hidemyass.hidemyassprovpn',
                        'com.avast.android.vpn.activity.HmaOnboardingActivity')
        except:
            pass
        time.sleep(10)

    def gerar_id():
        chars = string.ascii_lowercase + string.digits
        android_id = ''.join(random.choice(chars) for i in range(16))
        return android_id

    options = Options()
    prefs = {"profile.managed_default_content_settings.images": 2}
    options.page_load_strategy = 'none'
    options.add_experimental_option("prefs", prefs)

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    window.Refresh()

    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global transition_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass
    gerar_id()
    android_id = gerar_id()
    subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    time.sleep(2)
    # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True, stdout=subprocess.DEVNULL,
    #               stderr=subprocess.DEVNULL)

    try:
        subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
    except Exception as e:
        pass

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Efetuando troca de IP.')
    window.Refresh()
    try:
        conteudo = config['vpn']
        if conteudo == "AVG":
            vpn_avg()
        elif conteudo == "SurfShark":
            vpn_surf()
        elif conteudo == "Nenhuma":
            nenhuma_vpn()
        elif conteudo == "Avast":
            vpn_avast()
        elif conteudo == "ExpressVPN":
            vpn_express()
        elif conteudo == "PiaVPN":
            vpn_pia()
        elif conteudo == "TunnelBear":
            vpn_tunnelbear()
        elif conteudo == "BetterNet":
            vpn_better()
        elif conteudo == "CyberGhost":
            vpn_cyberghost()
        elif conteudo == "NordVPN":
            vpn_nord()
        elif conteudo == "HotspotShield":
            vpn_hotspotshield()
        elif conteudo == "WindscribeVPN":
            vpn_windscribe()
        elif conteudo == "HmaVPN":
            vpn_hma()
        else:
            window['output'].print(
                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
            window.Refresh()

    except Exception as e:
        print(e)
        pass

    window.Refresh()
    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando sistema inicializar.')
    window.Refresh()

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.\n')
    window.Refresh()
    d.implicitly_wait(30.0)
    d.set_fastinput_ime(True)
    if not os.path.exists('./erros'):
        os.makedirs('./erros')
    codigo_não_recebido_seguidos = 0
    seguido = False
    tentativa = False
    ja_tentou = False
    ja_tentou2 = False
    smsbody = ''
    while parar is False:
        senha = gerar_senha(12)
        if parar is True:
            print('Parando Thread')
            break
        # if codigo_não_recebido_seguidos == 3:
        #    #tempo_aleatorio = random.randint(10, 40)
        #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] 3 códigos não recebidos seguidos.')
        #    window.Refresh()
        #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando 1 hora para voltar novamente.')
        #    window.Refresh()
        #    time.sleep(3600)
        #    codigo_não_recebido_seguidos = 0
        try:
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)

            except:
                pass
            try:
                subprocess.run(
                    f'adb -s {porta} shell pm grant com.instagram.android android.permission.READ_CONTACTS',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            gerar_id()
            android_id = gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            window['output'].print(linha_ret)
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Pegando conta TWILIO')
            window.Refresh()

            try:
                scope = ["https://spreadsheets.google.com/feeds",
                         "https://www.googleapis.com/auth/drive"]
                creds = ServiceAccountCredentials.from_json_keyfile_name(
                    'credentials.json', scope)
                client = gspread.authorize(creds)
                #
                spreadsheet_id = config['spreadsheet']
                sheet_name = 'contas'
                # Insert user, password, and timestamp into first empty row
                sheet = client.open_by_key(
                    spreadsheet_id).worksheet(sheet_name)
                values = sheet.col_values(1)
                #
                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                rows = sheet.get_all_values()
                #
                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                regex = re.compile(r'\S+\s\S+')
                #
                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                num_rows = sum(1 for row in rows if regex.match(row[0]))
                window['total'].update(num_rows)
            except Exception as e:
                print(e)
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu algum erro ao acessar a planilha.')
                window.Refresh()
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Tentando novamente em 1 minuto.')
                window.Refresh()
                time.sleep(60)
                raise Exception('skip')

            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)

            except Exception as e:
                print('Verifique se o Instagram está instalado.')
                print(e)
                pass
            try:
                subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server.test',
                               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)
                subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, shell=True)
            except:
                pass
            window.Refresh()

            try:
                # time.sleep(10)

                gerar_id()
                android_id = gerar_id()
                subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                               shell=True)
                try:
                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.READ_CONTACTS',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.CAMERA',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.RECORD_AUDIO',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    try:
                        subprocess.run(
                            f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.ACCESS_NOTIFICATION_POLICY',
                            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    except:
                        pass

                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.POST_NOTIFICATIONS',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                except:
                    pass
                
                scope = ["https://spreadsheets.google.com/feeds",
                         "https://www.googleapis.com/auth/drive"]
                creds = ServiceAccountCredentials.from_json_keyfile_name(
                    'credentials.json', scope)
                client = gspread.authorize(creds)

                spreadsheet_id = config['spreadsheet']
                sheet_name = config['2nr']

                sheet = client.open_by_key(
                    spreadsheet_id).worksheet(sheet_name)
                # Obtém todas as células
                cells = sheet.get_all_values()

                # Armazena as células que correspondem à condição
                matches = [cell for row in cells for cell in row if re.match(r'.*\s+.*', cell)]

                # Armazena a lista de células correspondentes à condição em uma variável
                regex2nr = matches
                while len(regex2nr) == 0:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nenhuma conta do TWILIO encontrada.\nTentando novamente em 5 min.')
                    window.Refresh()
                    scope = ["https://spreadsheets.google.com/feeds",
                            "https://www.googleapis.com/auth/drive"]
                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                        'credentials.json', scope)
                    client = gspread.authorize(creds)

                    spreadsheet_id = config['spreadsheet']

                    sheet_name = config['2nr']
                    sheet = client.open_by_key(
                        spreadsheet_id).worksheet(sheet_name)
                    # Insert user, password, and timestamp into first empty row
                    sheet = client.open_by_key(
                        spreadsheet_id).worksheet(sheet_name)
                    values = sheet.col_values(1)

                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                    rows = sheet.get_all_values()

                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                    regex = re.compile(r'\S+\s\S+')
                    sheet_name = config['2nr']
                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                    try:
                        num_rows = sum(1 for row in rows if regex.match(row[0]))
                    except:
                        pass
                    window['total'].update(num_rows)

                    time.sleep(300)
                    cells = sheet.get_all_values()

                    # Armazena as células que correspondem à condição
                    matches = [cell for row in cells for cell in row if re.match(r'.*\s+.*', cell)]

                    # Armazena a lista de células correspondentes à condição em uma variável
                    regex2nr = matches
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] {len(regex2nr)} conta(s) encontrada.')
                window.Refresh()
                time.sleep(3)
                spreadsheet_id = config['spreadsheet']
                sheet_name = config['2nr']
                sheet = client.open_by_key(
                    spreadsheet_id).worksheet(sheet_name)
                # Obtém todas as células

                # Define a faixa de células para leitura
                first_linha = sheet.cell(1, 1).value

                # Divide a string em duas partes separadas por um espaço em branco
                partes = first_linha.split(' ')

                # Atribui a primeira parte (endereço de e-mail) à variável email2nr
                account_sid = partes[0]

                # Atribui a segunda parte (texto) à variável senha2nr
                auth_token = partes[1]

                

                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo instagram.')
                window.Refresh()
                try:
                    subprocess.run(
                        f'adb -s {porta} shell pm grant com.instagram.android android.permission.READ_CONTACTS',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                except:
                    pass


                def escrever_devagar(element, text, delay=0.05, chunk_size=3):
                    element.clear_text()
                    current_text = ""
                    for i in range(0, len(text), chunk_size):
                        if d(text='EXCLUIR'):
                            d.press('back')
                        current_text += text[i:i+chunk_size]
                        element.set_text(current_text)
                        if d(text='EXCLUIR'):
                            d.press('back')
                def gerar_senha(tamanho=12):
                    if tamanho < 6:
                        raise ValueError("A senha deve ter pelo menos 6 caracteres.")

                    # Define uma lista de letras maiúsculas e minúsculas
                    letras_maiusculas = [random.choice(
                        string.ascii_uppercase) for _ in range(tamanho // 2)]
                    letras_minusculas = [random.choice(
                        string.ascii_lowercase) for _ in range(tamanho // 2)]

                    # Intercale as letras maiúsculas e minúsculas
                    senha = ''.join(''.join(pair)
                                    for pair in zip(letras_maiusculas, letras_minusculas))

                    # Adiciona caracteres especiais, números e @
                    caracteres_permitidos = string.ascii_letters + string.digits + string.punctuation
                    caracteres_permitidos = caracteres_permitidos.replace(
                        "~", "")  # Remove ~ e outros acentos

                    senha += ''.join(random.choice(caracteres_permitidos)
                                    for _ in range(tamanho - len(senha) - 3))
                    # Adiciona pelo menos uma letra maiúscula
                    senha += random.choice(string.ascii_uppercase)
                    senha += random.choice(string.digits)  # Adiciona pelo menos um número
                    senha += "@"

                    # Mistura os caracteres
                    senha = ''.join(random.sample(senha, len(senha)))

                    return senha
                
                
                d.app_clear('com.instagram.android')
                d.app_start('com.instagram.android', use_monkey=True)
                client = Client(account_sid, auth_token)
                try:
                    balance = client.balance.fetch()
                except Exception as e:
                    if 'Unable to fetch record: Authenticate' in str(e):
                        print('Conta bloqueada, alterando')
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Conta não existe.')
                        window.Refresh()
                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                            'credentials.json', scope)
                        client = gspread.authorize(creds)
                        # Abre a planilha e a planilha de uma determinada aba
                        spreadsheet_id = config['spreadsheet']
                        sheet_name = config['2nr']
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)

                        # Apaga a primeira célula da coluna A e desloca as células abaixo
                        sheet.delete_rows(1, 1)
                        raise Exception('Mudar de conta twilio')
                    else:
                        print(e)
                print(f'Saldo da conta Twilio: {balance.balance}')
                available_numbers = client.available_phone_numbers('CA').local.list(limit=1)
                try:
                    if available_numbers:
                        new_number = client.incoming_phone_numbers.create(phone_number=available_numbers[0].phone_number)
                        print(f'Novo número de telefone comprado: {new_number.phone_number}')
                    else:
                        print('Nenhum número disponível encontrado.')
                except Exception as e:
                    if 'Account is restricted from provisioning new long code Phone Numbers' in str(e):
                        print('Conta bloqueada, alterando')
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Conta não existe.')
                        window.Refresh()
                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                            'credentials.json', scope)
                        client = gspread.authorize(creds)
                        # Abre a planilha e a planilha de uma determinada aba
                        spreadsheet_id = config['spreadsheet']
                        sheet_name = config['2nr']
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)

                        # Apaga a primeira célula da coluna A e desloca as células abaixo
                        sheet.delete_rows(1, 1)
                        raise Exception('Mudar de conta twilio')
                    elif 'Trial accounts are allowed' in str(e):
                        pass
                    else:
                        print(e)
                    pass
                # VER NUMERO
                for number in client.incoming_phone_numbers.list():
                    print(f"SID: {number.sid}, Número: {number.phone_number}")
                
                num = number.phone_number
                email = num
                num_por_cima = num.replace('+1', '')
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Número: {num}')
                window.Refresh()
                
                while True:
                    if d(text="Criar nova conta"):
                        print('Tela de login')
                        d(text="Criar nova conta").click()
                    #elif d(text="Tentar novamente"):
                    #    d(text="Tentar novamente").click()
                    elif d(text='Qual é o seu email?'):
                        d(text="Cadastrar-se com o número do celular").click()
                        time.sleep(3)
                    elif d(textContains='Aguarde alguns minutos antes de tentar novamente') or d(textContains='Ocorreu um erro. Tente novamente mais tarde'):
                        print('Tela de restrição')
                        if tentativa is True:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                            window.Refresh()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                            window.Refresh()
                            tentativa = False

                            # APAGAR NUMERO
                            client.incoming_phone_numbers(number.sid).delete()
                            print(f'Número de telefone {number.sid} apagado com sucesso.')


                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                            window.Refresh()
                            try:
                                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                            stdout=subprocess.DEVNULL,
                                            stderr=subprocess.DEVNULL, check=True, shell=True)

                            except:
                                pass

                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')

                        elif tentativa is False:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                            window.Refresh()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                            window.Refresh()
                            tentativa = True
                            try:
                                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                            stdout=subprocess.DEVNULL,
                                            stderr=subprocess.DEVNULL, check=True, shell=True)

                            except:
                                pass
                            try:
                                conteudo = config['vpn']
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                                raise Exception('skip')
                            except:
                                raise Exception('skip')
                            
                    elif d(text='Qual é o número do seu celular?'):
                        print('Tela de adicionar número')
                        escrever_devagar(d(className="android.widget.EditText"), f'{num}', chunk_size=3)
                        d(text="Avançar").click()
                        time.sleep(15)
                        if d(textContains="Você está tentando entrar?").wait(timeout=15):
                            d(text="Criar nova conta").click()
                            time.sleep(3)
                        if d(text="Enviar código por SMS"):
                            d(text="Enviar código por SMS").click()
                            d(text="Avançar").click(timeout=30)
                        time.sleep(5)
                    elif d(text="Insira o código de confirmação"):
                        print('Tela de aguardar código')
                        if d(textContains='Esse código não é válido'):
                            if ja_tentou2 is False:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Código inválido. Tentando novamente')
                                window.Refresh()
                                ja_tentou2 = True
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                                d.app_clear('com.instagram.android')
                                raise Exception('')

                            elif ja_tentou2 is True:
                                # APAGAR NUMERO
                                ja_tentou2 = False
                                client.incoming_phone_numbers(number.sid).delete()
                                print(f'Número de telefone {number.sid} apagado com sucesso.')
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                                window.Refresh()
                                available_numbers = client.available_phone_numbers('CA').local.list(limit=1)
                                if available_numbers:
                                    new_number = client.incoming_phone_numbers.create(phone_number=available_numbers[0].phone_number)
                                    print(f'Novo número de telefone comprado: {new_number.phone_number}')
                                else:
                                    print('Nenhum número disponível encontrado.')
                                

                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                                d.app_clear('com.instagram.android')
                                raise Exception('Código não recebido')
                            
                        window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código')
                        window.Refresh()
                        time.sleep(15)
                        tentativa_cod = 0
                        try:
                            while True:
                                if tentativa_cod == 10:
                                    raise Exception('Código')
                                try:
                                    if 'Instagram' in sms.body:
                                        cod = sms.body
                                        if smsbody != sms.body:
                                            break
                                except:
                                    pass
                                for sms in client.messages.list(limit=1):
                                    print(f"SMS: {sms.body}")
                                    if 'Instagram' in sms.body:
                                        cod = sms.body
                                        if smsbody != sms.body:
                                            break
                                tentativa_cod += 1
                                time.sleep(10)

                        except:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido')
                            window.Refresh()
                            if ja_tentou is False:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP e tentando novamente')
                                window.Refresh()
                                ja_tentou = True

                            elif ja_tentou is True:
                                # APAGAR NUMERO
                                ja_tentou = False
                                client.incoming_phone_numbers(number.sid).delete()
                                print(f'Número de telefone {number.sid} apagado com sucesso.')
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                                window.Refresh()
                                available_numbers = client.available_phone_numbers('CA').local.list(limit=1)
                                if available_numbers:
                                    new_number = client.incoming_phone_numbers.create(phone_number=available_numbers[0].phone_number)
                                    print(f'Novo número de telefone comprado: {new_number.phone_number}')
                                else:
                                    print('Nenhum número disponível encontrado.')
                                

                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            d.app_clear('com.instagram.android')
                            raise Exception('Código não recebido')
                        smsbody = sms.body
                        cod = cod.replace(' ', '')
                        ja_tentou = False
                        codigo = re.sub('[^0-9]', '', cod)[:6]
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                        #d(text='Avançar').wait(timeout=30)
                        escrever_devagar(d(className="android.widget.EditText"), codigo, chunk_size=3)
                        d(text="Avançar").click(timeout=30)
                        time.sleep(3)

                    elif d(text="Crie uma senha"):
                        print('Tela de criar senha')
                        senha = gerar_senha(12)
                        escrever_devagar(d(className="android.widget.EditText"), senha, chunk_size=3)
                        time.sleep(1)
                        d(text="Avançar").click(timeout=30)
                        time.sleep(5)

                    elif d(text="Salvar suas informações de login?"):
                        print('Tela de salvar informações')
                        d(text="Agora não").click()

                    elif d(textContains="Definir data") or d(textContains="Qual é a sua data de nascimento?"):
                        print('Tela de data de nascimento')
                        if d(textContains="CANCELAR"):
                            d(textContains="CANCELAR").click()
                        d(text="Avançar").click(timeout=30)
                        time.sleep(0.5)
                        d(text="Avançar").click(timeout=30)
                        d(text="Qual é a sua idade?").wait(timeout=30)
                        idade_aleatoria = str(random.randint(18, 55))
                        escrever_devagar(d(className="android.widget.EditText"), idade_aleatoria, chunk_size=3)
                        d(text="Avançar").click(timeout=30)
                        d(text="OK").click(timeout=30)

                    elif d(text="Qual é o seu nome?"):
                        print('Tela de escolher nome')
                        
                        lista_user = random.choices(range(0, 9), k=2)
                        lista_letras = random.choices(letras, k=1)
                        nomea = fake.first_name_male().replace(" ", "")
                        nome = unicodedata.normalize('NFKD', nomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        sobrenomea = fake.last_name().replace(" ", "").lower()
                        sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        nome_completo = nome + ' ' + sobrenome
                        nome_completo_s = nome + sobrenome
                        numeros_concatenados = ''.join(
                            str(numero) for numero in lista_user)
                        user_completo1 = nome_completo_s + '' + \
                            str(numeros_concatenados) + ''.join(lista_letras)

                        user_completo = random.randint(1, len(user_completo1))
                        # Insira o ponto no índice aleatório
                        string_with_dot = user_completo1[:user_completo] + \
                            '_' + user_completo1[user_completo:]
                        user_completo_antigo = string_with_dot.lower()

                        escolha = random.choice(["_", "."])
                        user_completo = nome + escolha + sobrenome + \
                            str(numeros_concatenados) + ''.join(lista_letras)
                        escrever_devagar(d(className="android.widget.EditText"), nome_completo, chunk_size=3)
                        d(text="Avançar").click(timeout=30)
                        time.sleep(5)

                    elif d(text="Crie um nome de usuário"):
                        print('Tela de escolher user')
                        escrever_devagar(d(className="android.widget.EditText"), user_completo, chunk_size=3)
                        time.sleep(5)
                        d(text="Avançar").click(timeout=30)
                        time.sleep(5)
                    elif d(textContains="Aceite os termos e") or d(textContains="leia e concorde com nossos termos"):
                        print('Tela de termos e políticas')
                        d(text="Concordo").click()
                        while True:
                            if d(text="Concordo") and d(textContains="Aceite os termos e") or d(text="Concordo") and d(textContains="leia e concorde com nossos termos"):
                                d(text="Já tem uma conta?").click(timeout=25)
                                d(text="ENTRAR").click(timeout=10)
                                d(className="android.widget.EditText", instance=0).set_text(user_completo)
                                d(className="android.widget.EditText", instance=1).set_text(senha)
                                d(text='Entrar').click()
                                if d(text="Agora não").wait(timeout=10):
                                    print('Conta criada')
                                    d(text="Agora não").click()
                                else:
                                    conteudo = config['vpn']
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                                    window.Refresh()
                                    if conteudo == "AVG":
                                        vpn_avg()
                                    elif conteudo == "SurfShark":
                                        vpn_surf()
                                    elif conteudo == "Nenhuma":
                                        nenhuma_vpn()
                                    elif conteudo == "Avast":
                                        vpn_avast()
                                    elif conteudo == "ExpressVPN":
                                        vpn_express()
                                    elif conteudo == "PiaVPN":
                                        vpn_pia()
                                    elif conteudo == "TunnelBear":
                                        vpn_tunnelbear()
                                    elif conteudo == "BetterNet":
                                        vpn_better()
                                    elif conteudo == "CyberGhost":
                                        vpn_cyberghost()
                                    elif conteudo == "NordVPN":
                                        vpn_nord()
                                    elif conteudo == "HotspotShield":
                                        vpn_hotspotshield()
                                    elif conteudo == "WindscribeVPN":
                                        vpn_windscribe()
                                    elif conteudo == "HmaVPN":
                                        vpn_hma()
                                    else:
                                        window['output'].print(
                                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                        window.Refresh()
                                    raise Exception("Restrição")
                            elif not d(textContains="Aceite os termos e"):
                                break

                    elif d(textContains="Ocorreu um erro") and d(textContains='Tentar novamente'):
                        print('Tela de erro de tradução')
                        d(textContains='Tentar novamente').click()
                        time.sleep(10)
                        if d(textContains='Tentar novamente'):
                            print('Não foi possível passar da tela')
                            try:
                                conteudo = config['vpn']
                        #
                                # Executa a função correspondente ao conteúdo do arquivo
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                                raise Exception('skip')
                            except Exception as e:
                                raise Exception('skip')
                    
                    elif d(text="A Página não está disponível no momento"):
                        print('Tela de página não disponível')
                        d.press('back')
                        time.sleep(5)
                        if d(text="A Página não está disponível no momento"):
                            print('Não foi possível passar da tela')
                            try:
                                conteudo = config['vpn']
                        #
                                # Executa a função correspondente ao conteúdo do arquivo
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                                raise Exception('skip')
                            except Exception as e:
                                raise Exception('skip')

                    elif d(textContains="Adicione uma foto"):
                        d(textContains="Pular").click()
                        print('Conta criada')
                        time.sleep(5)
                        try:
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                text_color=('lime'))
                            window.Refresh()
                            seguido = False
                            contagem += 1
                            window['criadas'].update(contagem)
                            window.Refresh()
                            now = datetime.now()
                            now_brasilia = tz.localize(now)
                            timestamp = now_brasilia.strftime(
                                "%d/%m/%Y %H:%M:%S")
                            try:
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)
                        
                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                        conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)
                        
                                rows = sheet.get_all_values()
                        
                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')
                        
                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            except Exception as e:
                                print(e)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                tempo_aleatorio = random.randint(10, 40)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                time.sleep(tempo_aleatorio)
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)
                        
                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                        conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)
                        
                                rows = sheet.get_all_values()
                        
                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')
                        
                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            window['total'].update(num_rows)
                            random_number = random.random()
                        
                            # Definir a chance desejada (10%)
                            chance = 0.2
                        
                            # Verificar se o número aleatório está abaixo da chance
                            if random_number < chance and not user_mysql == "wn3":
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                    funcionamento, scope)
                                client = gspread.authorize(creds)
                        
                                spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                sheet_name = 'relatorio_geral'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                        conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)
                        except Exception as e:
                            print(e)
                            pass
                        d.app_clear('com.instagram.android')
                        d.app_start('com.instagram.android', use_monkey=True)
                        d(className="android.widget.EditText", instance=0).set_text(user_completo)
                        d(className="android.widget.EditText", instance=1).set_text(senha)
                        d(text='Entrar').click()
                        if d(text="Agora não").wait(timeout=10):
                            print('Conta criada')
                            d(text="Agora não").click()

                        while True:
                            print('Criar por cima')
                            window['output'].print(f'{linha_ret}')
                            window.Refresh()
                            d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                            d(textContains="eguindo").click()
                            seguir_sugeridos = 0
                            while seguir_sugeridos < 10:
                                try:
                                    d(text="Seguir").click(timeout=2)
                                    time.sleep(1)
                                    seguir_sugeridos += 1
                                except:
                                    width, height = d.window_size()
                                    start_x = width // 2
                                    start_y = height * 3 // 4  # Comece no 75% da altura
                                    end_x = width // 2
                                    end_y = height // 4  # Termine no 25% da altura

                                    # Realize o swipe
                                    d.swipe(start_x, start_y, end_x, end_y, duration=0.5)
                                    if not d(text="Seguir"):
                                        break
                            d(resourceId="com.instagram.android:id/action_bar_button_back").click(timeout=10)
                            try:
                                d(resourceId="com.instagram.android:id/action_bar_title_chevron").click(timeout=10)
                            except: 
                                d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                                d(resourceId="com.instagram.android:id/action_bar_title_chevron").click(timeout=10)
                            d(textContains="Adicionar conta").click(timeout=30)
                            d(text="Criar nova conta").click(timeout=20)
                            lista_user = random.choices(range(0, 9), k=2)
                            lista_letras = random.choices(letras, k=2)
                            nomea = fake.first_name_male().replace(" ", "")
                            nome = unicodedata.normalize('NFKD', nomea).encode(
                                'ASCII', 'ignore').decode('ASCII')
                            sobrenomea = fake.last_name().replace(" ", "").lower()
                            sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                                'ASCII', 'ignore').decode('ASCII')
                            nome_completo = nome + ' ' + sobrenome
                            nome_completo_s = nome + sobrenome
                            numeros_concatenados = ''.join(str(numero)
                                                        for numero in lista_user)
                            user_completo1 = nome_completo_s + '' + \
                                str(numeros_concatenados) + ''.join(lista_letras)
                            user_completo = random.randint(1, len(user_completo1))
                            string_with_dot = user_completo1[:user_completo] + \
                                '_' + user_completo1[user_completo:]
                            user_completo_antigo = string_with_dot.lower()
                            escolha = random.choice(["_", "."])
                            user_completo = nome + escolha + sobrenome + \
                                str(numeros_concatenados) + ''.join(lista_letras)
                            print(user_completo)

                            d(text="Escolha um nome de usuário").wait(timeout=30)
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] User: {user_completo}')
                            window.Refresh()
                            escrever_devagar(d(className="android.widget.EditText"), user_completo, chunk_size=4)
                            while True:
                                if d(textContains='não está disponível.'):
                                    d(resourceId='com.instagram.android:id/username_suggestion_text').click()
                                elif d(resourceId="com.instagram.android:id/username_valid_icon"):
                                    break
                                elif d(text='EXCLUIR'):
                                    d.press('back')
                            try:
                                d(text="Avançar", enabled=True).click(timeout=10)
                            except:
                                if d(text='EXCLUIR'):
                                    d.press('back')
                            d(text="Crie uma senha").wait(timeout=20)
                            senha = gerar_senha(12)
                            
                            escrever_devagar(d(className="android.widget.EditText"), senha, chunk_size=4)
                            time.sleep(2)
                            d(text="Avançar", enabled=True).click()
                            time.sleep(3)
                            d(text='Adicionar novo telefone ou email').click(timeout=20)
                            d(text="Adicionar telefone ou email").wait(timeout=30)
                            escrever_devagar(d(className="android.widget.EditText"), num_por_cima, chunk_size=2)
                            time.sleep(1)
                            d(text="Avançar", enabled=True).click()

                            while True:
                                if (
                                    d(text='Tente novamente mais tarde') or 
                                    d(textContains="Ocorreu um erro de rede desconhecido") or
                                    d(textContains="feedback_required") or
                                    d(textContains='Aguarde alguns minutos')


                                ):
                                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Restrição')
                                    window.Refresh()
                                    conteudo = config['vpn']
                                    if conteudo == "AVG":
                                        vpn_avg()
                                    elif conteudo == "SurfShark":
                                        vpn_surf()
                                    elif conteudo == "Nenhuma":
                                        nenhuma_vpn()
                                    elif conteudo == "Avast":
                                        vpn_avast()
                                    elif conteudo == "ExpressVPN":
                                        vpn_express()
                                    elif conteudo == "PiaVPN":
                                        vpn_pia()
                                    elif conteudo == "TunnelBear":
                                        vpn_tunnelbear()
                                    elif conteudo == "BetterNet":
                                        vpn_better()
                                    elif conteudo == "CyberGhost":
                                        vpn_cyberghost()
                                    elif conteudo == "NordVPN":
                                        vpn_nord()
                                    elif conteudo == "HotspotShield":
                                        vpn_hotspotshield()
                                    elif conteudo == "WindscribeVPN":
                                        vpn_windscribe()
                                    elif conteudo == "HmaVPN":
                                        vpn_hma()
                                    else:
                                        window['output'].print(
                                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                        window.Refresh()
                                    raise Exception("Restrição")
                                
                                elif d(text='Pular'): break
                            time.sleep(5)
                            d(text='Pular').wait(timeout=30)
                            time.sleep(5)
                            if d(text="Pular"):
                                print("Conta criada")
                                try:
                                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                        text_color=('lime'))
                                    window.Refresh()
                                    seguido = False
                                    contagem += 1
                                    window['criadas'].update(contagem)
                                    window.Refresh()
                                    now = datetime.now()
                                    now_brasilia = tz.localize(now)
                                    timestamp = now_brasilia.strftime(
                                        "%d/%m/%Y %H:%M:%S")
                                    try:
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                                            'credentials.json', scope)
                                        client = gspread.authorize(creds)
                        #
                                        spreadsheet_id = config['spreadsheet']
                                        sheet_name = 'contas'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                                conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:G{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)
                        #
                                        rows = sheet.get_all_values()
                        #
                                        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                        regex = re.compile(r'\S+\s\S+')
                        #
                                        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                        num_rows = sum(
                                            1 for row in rows if regex.match(row[0]))
                                    except Exception as e:
                                        print(e)
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                        tempo_aleatorio = random.randint(10, 40)
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                        time.sleep(tempo_aleatorio)
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                                            'credentials.json', scope)
                                        client = gspread.authorize(creds)
                        #
                                        spreadsheet_id = config['spreadsheet']
                                        sheet_name = 'contas'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                                conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:G{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)
                        #
                                        rows = sheet.get_all_values()
                        #
                                        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                        regex = re.compile(r'\S+\s\S+')
                        #
                                        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                        num_rows = sum(
                                            1 for row in rows if regex.match(row[0]))
                                    window['total'].update(num_rows)
                                    random_number = random.random()
                        #
                                    # Definir a chance desejada (10%)
                                    chance = 0.2
                        #
                                    # Verificar se o número aleatório está abaixo da chance
                                    if random_number < chance and not user_mysql == "wn3":
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                            funcionamento, scope)
                                        client = gspread.authorize(creds)
                        #
                                        spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                        sheet_name = 'relatorio_geral'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                                conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:G{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)
                                except Exception as e:
                                    print(e)
                                    pass
                                d.app_stop('com.instagram.android')
                                d.app_start('com.instagram.android', use_monkey=True)

                            elif d(text="Fazer uma apelação") or d(textContains='Aguarde alguns minutos'):
                                print('Conta suspensa')
                                d.app_clear('com.instagram.android')
                                try:
                                    conteudo = config['vpn']
                        #
                                    # Executa a função correspondente ao conteúdo do arquivo
                                    if conteudo == "AVG":
                                        vpn_avg()
                                    elif conteudo == "SurfShark":
                                        vpn_surf()
                                    elif conteudo == "Nenhuma":
                                        nenhuma_vpn()
                                    elif conteudo == "Avast":
                                        vpn_avast()
                                    elif conteudo == "ExpressVPN":
                                        vpn_express()
                                    elif conteudo == "PiaVPN":
                                        vpn_pia()
                                    elif conteudo == "TunnelBear":
                                        vpn_tunnelbear()
                                    elif conteudo == "BetterNet":
                                        vpn_better()
                                    elif conteudo == "CyberGhost":
                                        vpn_cyberghost()
                                    elif conteudo == "NordVPN":
                                        vpn_nord()
                                    elif conteudo == "HotspotShield":
                                        vpn_hotspotshield()
                                    elif conteudo == "WindscribeVPN":
                                        vpn_windscribe()
                                    elif conteudo == "HmaVPN":
                                        vpn_hma()
                                    else:
                                        window['output'].print(
                                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                        window.Refresh()
                                    raise Exception('skip')
                                except Exception as e:
                                    raise Exception('skip')
                    
                        
                        
                    elif d(text="Fazer uma apelação"):
                        print('Conta suspensa')
                        d.app_clear('com.instagram.android')
                        if seguido is True:
                            seguido = False
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] SMS seguidos, Trocando de número.')
                            window.Refresh()
                            d.app_start('pl.rs.sip.softphone.newapp')
                            time.sleep(4)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                            window.Refresh()
                            sms = True
                        elif seguido is False:
                            seguido = True
                        try:
                            conteudo = config['vpn']
                #
                            # Executa a função correspondente ao conteúdo do arquivo
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                            
                        except Exception as e:
                            raise Exception('skip')
                            sms = True
                    time.sleep(3)

            except Exception as e:
                print(e)
                import traceback
                if not str(e) == '' or not str(e) == ' ' or not str(e) == 'skip':
                    traceback.print_exc()
                if not e == 'skip' or not e == 'Manutenção.':
                    try:
                        d.screenshot(
                            f'./erros/{datetime.now().strftime("%H_%M_%S")}.png')
                    except Exception as e:
                        print(e)
                        pass
                pass
        except Exception as e:
            print(e)
            import traceback
            if not str(e) == '' or not str(e) == ' ' or not str(e) == 'skip':
                traceback.print_exc()
            if not e == 'skip' or not e == 'Manutenção.':
                try:
                    d.screenshot(
                        f'./erros/{datetime.now().strftime("%H_%M_%S")}.png')
                except Exception as e:
                    print(e)
                    pass
            pass

def creator_LITE_EMAIL():
    import traceback
    SPREADSHEET_ID = config['spreadsheet']
    conteudo = config['vpn']
    senha = gerar_senha(12)
    maquina = config['maquina']
    tentativa = False
    seguido = False
    regiao_vpn = 'Sem dados'
    if config['email'] == '-2nr-' and config['app'] == '-instalite-':
        app = 'Lite'
    elif config['email'] == '-2nr-' and config['app'] == '-insta-':
        app = 'Normal'
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    # Código que gera a saída
    import os
    import time
    import requests
    import hashlib
    import subprocess

    # verifica se o arquivo existe na pasta do bot

    try:
        from rich.console import Console
    except ModuleNotFoundError:
        import subprocess
        import sys

        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['pip', 'install', '-r', 'requirements.txt'])
        subprocess.run(['deactivate'], shell=True)
        from rich.console import Console
    import os
    import time
    try:
        import uiautomator2 as u2
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'uiautomator2==2.16.25'])
        subprocess.run(['deactivate'], shell=True)
        subprocess.run(['pip', 'install', '--upgrade', 'requests'])
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        import requests
        time.sleep(10)
        import uiautomator2 as u2
    d = u2.connect(f'{porta}')
    import requests
    import hashlib
    import subprocess
    from colorama import init, Fore, Back, Style
    from faker import Faker
    # teste
    init(autoreset=True)
    console = Console()
    from termcolor import colored

    from rich.console import Console
    from rich.panel import Panel
    from rich.text import Text
    from rich.rule import Rule

    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random
    from datetime import datetime
    import string
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import NoSuchElementException
    from mailtm import Email
    import re
    import logging

    logger = logging.getLogger(__name__)

    handler = logging.FileHandler('log.txt')
    handler.setLevel(logging.ERROR)

    logger.addHandler(handler)

    # RANGE_NAME = 'contas!A:D'
    #
    # SCOPES = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

    def vpn_avast():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Avast', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop("com.avast.android.vpn")
            d.app_start("com.avast.android.vpn", ".app.wizard.WizardActivity")
            time.sleep(10)
        except Exception as e:
            print(e)
        abc = False

    def nenhuma_vpn():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.facebook.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        time.sleep(10)

    def vpn_hotspotshield():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HotspotShield',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('hotspotshield.android.vpn')
            d.app_start('hotspotshield.android.vpn')
        except Exception as e:
            print(e)
        d(resourceId='hotspotshield.android.vpn:id/tryAgainButton').click()
        time.sleep(5)
        d(resourceId='hotspotshield.android.vpn:id/btnVpnConnect').click()

        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_pia():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da PiaVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.privateinternetaccess.android')
            d.app_start('com.privateinternetaccess.android')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()
        time.sleep(3)
        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()

        abc = False

    def vpn_express():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da ExpressVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.expressvpn.vpn')
            d.app_start('com.expressvpn.vpn')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.expressvpn.vpn:id/obiButton').click()
        time.sleep(3)
        d(resourceId='com.expressvpn.vpn:id/obiButton').click()

        abc = False

    def vpn_nord():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da NordVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.nordvpn.android')
            time.sleep(5)
            d.app_start('com.nordvpn.android', use_monkey=True)
        except:
            pass
        time.sleep(10)
        time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_surf():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('com.surfshark.vpnclient.android')
            d.app_start('com.surfshark.vpnclient.android')
        except:
            pass
        time.sleep(15)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_better():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da BetterNet', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        try:
            d.app_stop('com.freevpnintouch')
            d.app_start('com.freevpnintouch')
        except:
            pass
        time.sleep(10)
        dialog = d(resourceId='com.freevpnintouch:id/dialogCtaPositive')
        connect = d(
            resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
        if dialog.exists:
            d(resourceId='com.freevpnintouch:id/dialogCtaPositive').click()
            time.sleep(3)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            # time.sleep(5)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
        while connect == 'CONNECT':
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            time.sleep(4)
            connect = d(
                resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            # WebDriverWait(driver, 20).until(
            # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        ip = '127.0.0.1:' + porta

        output = subprocess.check_output(
            ['adb', '-s', ip, 'shell', 'ifconfig'])

        # Verifica se a conexão VPN está ativa
        if not "tun0" in str(output):
            window['output'].print("Não conectado na BetterNet.")
            window.Refresh()
            try:
                connect = d(
                    resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
                d.app_stop('com.freevpnintouch')
                d.app_start('com.freevpnintouch')
                while connect == 'CONNECT':
                    d(resourceId='com.freevpnintouch:id/buttonConnect').click()
                    time.sleep(4)
                    connect = d(
                        resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            except:
                pass
        abc = False

    def vpn_cyberghost():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da CyberGhost', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('de.mobileconcepts.cyberghost')
            d.app_start('de.mobileconcepts.cyberghost')
        except:
            pass
        # time.sleep(3)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        rate = d(resourceId='de.mobileconcepts.cyberghost:id/rate_me_text')
        if rate.exists:
            d(resourceId='android:id/button2').click()
        time.sleep(2)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        abc = False

    def vpn_tunnelbear():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.tunnelbear.android')
            d.app_start("com.tunnelbear.android")
            while True:
                output = subprocess.check_output(
                    ['adb', '-s', porta, 'shell', 'ifconfig'])
                # print(str(output))
                if "tun0" in str(output):
                    print('Conectada')
                    break
                elif not "tun0" in str(output):
                    print('Reconectando')
                    try:
                        d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                        time.sleep(10)
                    except:
                        pass
        except Exception as e:
            print(e)
            pass

    def vpn_avg():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da AVG', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.avg.android.vpn')
            d.app_start("com.avg.android.vpn",
                        "com.avast.android.vpn.app.wizard.WizardActivity")
            regiao_vpn = d(
                resourceId='com.avg.android.vpn:id/location_title').get_text()

        except Exception as e:
            print(e)
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #               stderr=subprocess.DEVNULL, check=True, shell=True)

        time.sleep(30)

    def vpn_windscribe():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Windscribe', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)
            d.app_stop("com.windscribe.vpn")
            d.app_start("com.windscribe.vpn")
        except:
            pass
        d(resourceId='com.windscribe.vpn:id/on_off_button').click()
        time.sleep(10)
        primeiro = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_name').get_text()
        segundo = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_nick_name').get_text()
        regiao_vpn = primeiro + ' ' + segundo

    def vpn_hma():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HMA', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)

            d.app_stop("com.hidemyass.hidemyassprovpn")
            time.sleep(3)
            d.app_start('com.hidemyass.hidemyassprovpn',
                        'com.avast.android.vpn.activity.HmaOnboardingActivity')
        except:
            pass
        time.sleep(10)

    def gerar_id():
        chars = string.ascii_lowercase + string.digits
        android_id = ''.join(random.choice(chars) for i in range(16))
        return android_id

    options = Options()
    prefs = {"profile.managed_default_content_settings.images": 2}
    options.page_load_strategy = 'none'
    options.add_experimental_option("prefs", prefs)

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    window.Refresh()

    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global transition_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass
    gerar_id()
    android_id = gerar_id()
    subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    time.sleep(2)
    # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True, stdout=subprocess.DEVNULL,
    #               stderr=subprocess.DEVNULL)

    try:
        subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
    except Exception as e:
        pass

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Efetuando troca de IP.')
    window.Refresh()
    try:
        conteudo = config['vpn']
        if conteudo == "AVG":
            vpn_avg()
        elif conteudo == "SurfShark":
            vpn_surf()
        elif conteudo == "Nenhuma":
            nenhuma_vpn()
        elif conteudo == "Avast":
            vpn_avast()
        elif conteudo == "ExpressVPN":
            vpn_express()

        elif conteudo == "PiaVPN":
            vpn_pia()
        elif conteudo == "TunnelBear":
            vpn_tunnelbear()
        elif conteudo == "BetterNet":
            vpn_better()
        elif conteudo == "CyberGhost":
            vpn_cyberghost()
        elif conteudo == "NordVPN":
            vpn_nord()
        elif conteudo == "HotspotShield":
            vpn_hotspotshield()
        elif conteudo == "WindscribeVPN":
            vpn_windscribe()
        elif conteudo == "HmaVPN":
            vpn_hma()
        else:
            window['output'].print(
                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
            window.Refresh()

    except Exception as e:
        print(e)
        pass

    window.Refresh()
    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando sistema inicializar.')
    window.Refresh()

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.\n')
    window.Refresh()
    d.implicitly_wait(30.0)
    d.set_fastinput_ime(True)
    if not os.path.exists('./erros'):
        os.makedirs('./erros')
    codigo_não_recebido_seguidos = 0
    while parar is False:
        senha = gerar_senha(12)
        if parar is True:
            print('Parando Thread')
            break

        try:
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)

            except:
                pass
            try:
                subprocess.run(
                    f'adb -s {porta} shell pm grant com.instagram.lite android.permission.READ_CONTACTS',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            gerar_id()
            android_id = gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            window['output'].print(linha_ret)
            window.Refresh()

            

            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)

            except Exception as e:
                print('Verifique se o Instagram está instalado.')
                print(e)
                pass
            window.Refresh()

            try:
                # time.sleep(10)

                gerar_id()
                android_id = gerar_id()
                subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                               shell=True)
                

                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo instagram Lite.')
                window.Refresh()
                try:
                    subprocess.run(
                        f'adb -s {porta} shell pm grant com.instagram.lite android.permission.READ_CONTACTS',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                except:
                    pass
                d.app_start('com.instagram.lite')

                try:
                    d.xpath(
                        '//android.widget.Button[@content-desc="Criar nova conta"]').click(timeout=120)
                except:
                    conteudo = config['vpn']
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Pagina Estática.')
                    window.Refresh()
                    if conteudo == "AVG":
                        vpn_avg()
                    elif conteudo == "SurfShark":
                        vpn_surf()
                    elif conteudo == "Nenhuma":
                        nenhuma_vpn()
                    elif conteudo == "Avast":
                        vpn_avast()
                    elif conteudo == "ExpressVPN":
                        vpn_express()
                    elif conteudo == "PiaVPN":
                        vpn_pia()
                    elif conteudo == "TunnelBear":
                        vpn_tunnelbear()
                    elif conteudo == "BetterNet":
                        vpn_better()
                    elif conteudo == "CyberGhost":
                        vpn_cyberghost()
                    elif conteudo == "NordVPN":
                        vpn_nord()
                    elif conteudo == "HotspotShield":
                        vpn_hotspotshield()
                    elif conteudo == "WindscribeVPN":
                        vpn_windscribe()
                    elif conteudo == "HmaVPN":
                        vpn_hma()
                    else:
                        window['output'].print(
                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                        window.Refresh()
                    raise Exception('skip')
                # time.sleep(6)
                # novo_layout = d.xpath('//android.view.View[@content-desc="Qual é o seu nome?"]')
                # if len(novo_layout) == 1:
                #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Layout novo encontrado, reiniciando app.')
                #    window.Refresh()
                #    raise Exception("skip.")

                ######################################################################
                lista_user = random.choices(range(0, 9), k=2)
                lista_letras = random.choices(letras, k=1)

                with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                    nomes = nomes_arquivo.readlines()

                with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                    sobrenomes = sobrenomes_arquivo.readlines()

                nomea = fake.first_name_male().replace(" ", "")
                nome = unicodedata.normalize('NFKD', nomea).encode(
                    'ASCII', 'ignore').decode('ASCII')
                sobrenomea = fake.last_name().replace(" ", "").lower()
                sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                    'ASCII', 'ignore').decode('ASCII')
                nome_completo = nome + ' ' + sobrenome
                nome_completo_s = nome + sobrenome
                numeros_concatenados = ''.join(
                    str(numero) for numero in lista_user)
                user_completo1 = nome_completo_s + '' + \
                    str(numeros_concatenados) + ''.join(lista_letras)

                user_completo = random.randint(1, len(user_completo1))
                # Insira o ponto no índice aleatório
                string_with_dot = user_completo1[:user_completo] + \
                    '_' + user_completo1[user_completo:]
                user_completo_antigo = string_with_dot.lower()

                escolha = random.choice(["_", "."])
                user_completo = nome + escolha + sobrenome + \
                    str(numeros_concatenados) + ''.join(lista_letras)
                ######################################################################
                time.sleep(10)
                layout1 = d.xpath(
                    '//android.view.View[@content-desc="Crie um nome de usuário"]')
                layout2 = d(resourceId='android:id/button2')
                layout3 = d.xpath(
                    '//android.view.View[@content-desc="Qual é o número do seu celular?"]')
                layout3v2 = d.xpath(
                    '//android.view.View[@content-desc="Qual é seu número de celular ou email?"]')
                layout4 = d.xpath(
                    '//android.view.View[@content-desc="Crie uma senha"]')
                if layout1.exists:
                    layout_usado = 'layout1'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout1 novo encontrado.')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(4)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=20.0)
                    except Exception as e:
                        print(e)
                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)

                elif layout2.exists:
                    layout_usado = 'layout2'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout2 novo encontrado.')
                    window.Refresh()
                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(4)
                    d.xpath(
                        '//android.widget.Button[@content-desc="Avançar"]/android.view.ViewGroup').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.Button[@content-desc="Avançar"]/android.view.ViewGroup').click()
                    time.sleep(5)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=10.0)
                    except Exception as e:
                        pass

                elif layout3.exists or layout3v2.exists:
                    layout_usado = 'layout3'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout3 novo encontrado.')
                    window.Refresh()
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                        time.sleep(4)
                    else:
                        pass
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=10.0)
                    except Exception as e:
                        print(e)
                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        nome_completo)
                    time.sleep(1)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nome escolhido: {nome_completo}')
                    window.Refresh()
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                    window.Refresh()
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        '')
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(3)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(3)

                elif layout4.exists:
                    layout_usado = 'layout4'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout4 novo encontrado.')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.Button[@content-desc="Avançar"]/android.view.ViewGroup').click()
                    time.sleep(4)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=20.0)
                    except Exception as e:
                        print(e)
                    time.sleep(4)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                    window.Refresh()
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        '')
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(3)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)

                else:
                    layout_usado = 'layout_normal'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout normal encontrado.')
                    window.Refresh()
                    # raise Exception('Manutenção.')
                    cancel = d(resourceId='com.google.android.gms:id/cancel')
                    if cancel.exists(timeout=10):
                        d(resourceId='com.google.android.gms:id/cancel').click()
                    senha = gerar_senha(12)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        nome_completo)
                    time.sleep(1)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nome escolhido: {nome_completo}')
                    window.Refresh()
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=20.0)
                    except Exception as e:
                        print(e)
                    # salvar_senha = d.xpath('//android.view.View[@content-desc="Agora não"]')
                    # if salvar_senha.exists:
                    #    d.xpath('//android.view.View[@content-desc="Agora não"]').click()

                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Alterar nome de usuário"]').click(timeout=5)
                    except:
                        pass
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                    window.Refresh()
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        '')
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(3)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    time.sleep(3)
                    selecionar_sms = d.xpath(
                        '//android.view.View[@content-desc="Enviar código por SMS"]')
                    if selecionar_sms.exists:
                        selecionar_sms.click()
                        time.sleep(1)
                        d.xpath(
                            '//android.view.View[@content-desc="Enviar código"]').click()
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)

                codigo_invalido = d.xpath(
                    '//android.view.View[@content-desc="Não recebi o código"]')
                d.xpath(
                    '//android.view.View[@content-desc="Concordo"]').click()
                time.sleep(5)
                errodetec = d.xpath(
                    '//android.view.View[@content-desc="Concordo"]')
                if errodetec.exists:
                    d.xpath(
                        '//android.view.View[@content-desc="Concordo"]').click()
                    time.sleep(5)

                errodetec = d.xpath(
                    '//android.view.View[@content-desc="Concordo"]')
                if errodetec.exists:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Instagram não deixou avançar.')
                    window.Refresh()

                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
                window.Refresh()
                time.sleep(45)
                verificar = d.xpath(
                    '//android.view.View[@content-desc="Adicionar foto"]')
                verificar2 = d.xpath(
                    '//android.view.View[@content-desc="Aceite os termos e políticas do Instagram"]')

                try:
                    if verificar.exists:
                        try:
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                   text_color=('lime'))
                            window.Refresh()
                            seguido = False
                            contagem += 1
                            window['criadas'].update(contagem)
                            window.Refresh()
                            now = datetime.now()
                            now_brasilia = tz.localize(now)
                            timestamp = now_brasilia.strftime(
                                "%d/%m/%Y %H:%M:%S")
                            try:
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                          conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            except Exception as e:
                                print(e)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                tempo_aleatorio = random.randint(10, 40)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                time.sleep(tempo_aleatorio)
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                          conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            window['total'].update(num_rows)
                            random_number = random.random()

                            # Definir a chance desejada (10%)
                            chance = 0.2

                            # Verificar se o número aleatório está abaixo da chance
                            if random_number < chance and not user_mysql == "wn3":
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                    funcionamento, scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                sheet_name = 'relatorio_geral'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                          conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)
                        except Exception as e:
                            print(e)
                            pass
                        window.Refresh()
                        arquivo = open(
                            'configuracoes/contas/contas_criadas.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(user_completo + ' ' + senha + "\n")
                        arquivo = open(
                            'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(
                            email + '\n' + user_completo + '\n' + senha + "\n\n")
                        try:
                            d.xpath(
                                '//android.view.View[@content-desc="Pular"]').click()
                            time.sleep(2)
                            d(resourceId='com.instagram.android:id/skip_button').click()
                            time.sleep(2)
                            d(resourceId='com.instagram.android:id/negative_button').click()
                            time.sleep(2)
                            d(resourceId='com.instagram.android:id/skip_button').click()
                            skip_button = d(
                                resourceId='com.instagram.android:id/skip_button')
                            time.sleep(2)
                            if skip_button.exists:
                                d(resourceId='com.instagram.android:id/skip_button').click()
                            time.sleep(4)
                            try:
                                element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                target_text = "Seguir"

                                # Encontre todos os elementos que correspondem ao ID fornecido
                                elements = d(resourceId=element_id)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Seguindo sugeridos...')
                                window.Refresh()
                                time.sleep(5)
                                for element in elements:
                                    if element.get_text() == target_text:
                                        element.click()
                                        time.sleep(1)
                                try:
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                except:
                                    pass
                            except Exception as e:
                                print(e)
                                time.sleep(2)
                                element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                target_text = "Seguir"

                                # Encontre todos os elementos que correspondem ao ID fornecido
                                elements = d(resourceId=element_id)
                                # window['output'].print("Seguindo sugeridos...")
                                window.Refresh()
                                for element in elements:
                                    if element.get_text() == target_text:
                                        element.click()
                                        time.sleep(1)
                                d.xpath(
                                    '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                            time.sleep(1)
                            try:
                                d(resourceId='com.instagram.android:id/button_text').click(timeout=10)
                            except:
                                try:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                except:
                                    time.sleep(2)
                                    try:
                                        d(resourceId='com.instagram.android:id/tab_avatar').click()
                                    except:
                                        d.app_stop("com.instagram.android")
                                        time.sleep(1)
                                        d.app_start("com.instagram.android")
                                        time.sleep(30)
                                        try:
                                            pagina_login = d.xpath(
                                                '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                            if pagina_login.exists:
                                                pagina_login.click()
                                                time.sleep(5)
                                                d.xpath(
                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                                    senha)
                                                pagina_login.click()
                                                time.sleep(3)
                                                d.xpath(
                                                    '//android.view.View[@content-desc="Agora não"]').click()
                                            else:
                                                d(resourceId='com.instagram.android:id/profile_tab').click()
                                        except:
                                            time.sleep(2)
                                            pagina_login = d.xpath(
                                                '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                            if pagina_login.exists:
                                                pagina_login.click()
                                                time.sleep(5)
                                                d.xpath(
                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                                    senha)
                                                pagina_login.click()
                                                time.sleep(3)
                                                d.xpath(
                                                    '//android.view.View[@content-desc="Agora não"]').click()
                                            else:
                                                d(resourceId='com.instagram.android:id/tab_avatar').click()

                            sms = False
                        except Exception as e:
                            d.app_stop("com.instagram.android")
                            time.sleep(1)
                            d.app_start("com.instagram.android")
                            time.sleep(40)
                            try:
                                pagina_login = d.xpath(
                                    '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                if pagina_login.exists:
                                    pagina_login.click()
                                    time.sleep(5)
                                    d.xpath(
                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                        senha)
                                    pagina_login.click()
                                else:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                            except:
                                time.sleep(2)
                                pagina_login = d.xpath(
                                    '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                if pagina_login.exists:
                                    pagina_login.click()
                                    time.sleep(5)
                                    d.xpath(
                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                        senha)
                                    pagina_login.click()
                                else:
                                    d(resourceId='com.instagram.android:id/tab_avatar').click()
                    elif verificar2.exists:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Verificando novamente...')
                        window.Refresh()
                        d.app_stop("com.instagram.android")
                        time.sleep(1)
                        d.app_start("com.instagram.android")

                        if d.xpath('//android.view.View[@content-desc="Esqueceu a senha?"]').exists(timeout=60):
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                user_completo)
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                senha)
                            d.xpath(
                                '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup').click()
                            d.xpath(
                                '//android.view.View[@content-desc="Agora não"]').click()

                        verificar3 = d.xpath(
                            '//android.widget.FrameLayout[@content-desc="Perfil"]/android.view.ViewGroup')
                        time.sleep(40)
                        if verificar3.exists:
                            try:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                                window.Refresh()
                                contagem = contagem + 1
                                sms = False
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")
                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                              conteudo + ' - ' + app]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                              conteudo + ' - ' + app]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                window['total'].update(num_rows)
                                random_number = random.random()

                                # Definir a chance desejada (10%)
                                chance = 0.2

                                # Verificar se o número aleatório está abaixo da chance
                                if random_number < chance and not user_mysql == "wn3":
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                        funcionamento, scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                    sheet_name = 'relatorio_geral'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)
                            except Exception as e:
                                print(e)
                        else:
                            if seguido is True:
                                seguido = False
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] SMS seguidos, Trocando de número.')
                                window.Refresh()
                                d.app_start('pl.rs.sip.softphone.newapp')
                                time.sleep(4)
                                d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                                d.xpath(
                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                                window.Refresh()
                                sms = True
                            elif seguido is False:
                                seguido = True
                            try:
                                conteudo = config['vpn']

                                # Executa a função correspondente ao conteúdo do arquivo
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                            except Exception as e:
                                raise Exception('skip')
                                sms = True
                                continue
                    else:
                        verificar = d(
                            resourceId='com.instagram.android:id/profile_tab')
                        if verificar.exists:
                            try:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                                window.Refresh()
                                seguido = False
                                contagem += 1
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")
                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                window['total'].update(num_rows)
                                random_number = random.random()

                                # Definir a chance desejada (10%)
                                chance = 0.2

                                # Verificar se o número aleatório está abaixo da chance
                                if random_number < chance and not user_mysql == "wn3":
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                        funcionamento, scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                    sheet_name = 'relatorio_geral'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)
                            except Exception as e:
                                print(e)
                                pass
                            window.Refresh()
                            arquivo = open(
                                'configuracoes/contas/contas_criadas.txt', 'a')
                            # Escreva mais conteúdo no arquivo
                            arquivo.write(user_completo + ' ' + senha + "\n")
                            arquivo = open(
                                'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                            # Escreva mais conteúdo no arquivo
                            arquivo.write(
                                email + '\n' + user_completo + '\n' + senha + "\n\n")
                            try:
                                d.xpath(
                                    '//android.view.View[@content-desc="Pular"]').click()
                                time.sleep(2)
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(2)
                                d(resourceId='com.instagram.android:id/negative_button').click()
                                time.sleep(2)
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(4)
                                try:
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Seguindo sugeridos...')
                                    window.Refresh()
                                    time.sleep(5)
                                    for element in elements:
                                        if element.get_text() == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                except Exception as e:
                                    print(e)
                                    time.sleep(2)
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window['output'].print(
                                        "Seguindo sugeridos...")
                                    window.Refresh()
                                    for element in elements:
                                        if element.get_text() == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                time.sleep(1)
                                try:
                                    d(resourceId='com.instagram.android:id/button_text').click()
                                except:
                                    pass
                                time.sleep(3)
                                try:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                except:
                                    time.sleep(2)
                                    d(resourceId='com.instagram.android:id/tab_avatar').click()
                                sms = False
                            except Exception as e:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Reabrindo Instagram.')
                                window.Refresh()
                                d.app_stop('com.instagram.android')
                                d.app_start('com.instagram.android')
                                time.sleep(20)
                                pass
                        else:
                            if seguido is True:
                                seguido = False
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] SMS seguidos, Trocando de número.')
                                window.Refresh()
                                d.app_start('pl.rs.sip.softphone.newapp')
                                time.sleep(4)
                                d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                                d.xpath(
                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                                window.Refresh()
                                sms = True
                            elif seguido is False:
                                seguido = True
                            try:
                                conteudo = config['vpn']

                                # Executa a função correspondente ao conteúdo do arquivo
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                            except Exception as e:
                                raise Exception('skip')
                                continue
                except Exception as e:
                    print(e)
                    if conteudo == "AVG":
                        vpn_avg()
                    elif conteudo == "SurfShark":
                        vpn_surf()
                    elif conteudo == "Nenhuma":
                        nenhuma_vpn()
                    elif conteudo == "Avast":
                        vpn_avast()
                    elif conteudo == "ExpressVPN":
                        vpn_express()
                    elif conteudo == "PiaVPN":
                        vpn_pia()
                    elif conteudo == "TunnelBear":
                        vpn_tunnelbear()
                    elif conteudo == "BetterNet":
                        vpn_better()
                    elif conteudo == "CyberGhost":
                        vpn_cyberghost()
                    elif conteudo == "NordVPN":
                        vpn_nord()
                    elif conteudo == "HotspotShield":
                        vpn_hotspotshield()
                    elif conteudo == "WindscribeVPN":
                        vpn_windscribe()
                    elif conteudo == "HmaVPN":
                        vpn_hma()
                    else:
                        window['output'].print(
                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                        window.Refresh()
                    sms = True
                    raise Exception('skip')
                while sms is False:
                    senha = gerar_senha(12)
                    try:
                        time.sleep(3)
                        try:
                            d(resourceId='com.instagram.android:id/profile_tab').click(timeout=120)
                        except:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu algum erro nesta conta.')
                            window.Refresh()
                            raise Exception('Erro na conta')
                        window['output'].print(linha_ret)
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Criação de outro perfil.')
                        window.Refresh()
                        seguido = False
                        # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True)
                        # Clicar no botão de perfil

                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/action_bar_title_chevron').click()
                        time.sleep(2)
                        # Clicar em perfis
                        try:
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout[2]/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.ListView/android.widget.LinearLayout[last()]/android.widget.FrameLayout/android.widget.ImageView').click()
                        except Exception as e:
                            print(e)
                            print('Erro aq')
                            time.sleep(200)
                        # Clicar em adicionar conta
                        d.xpath(
                            '//android.widget.Button[@content-desc="Criar nova conta"]').click()

                        time.sleep(3)
                        # Gerar nome de usuário, digitar no campo e clicar em avançae
                        lista_user = random.choices(range(0, 9), k=2)
                        lista_letras = random.choices(letras, k=1)

                        with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                            nomes = nomes_arquivo.readlines()

                        with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                            sobrenomes = sobrenomes_arquivo.readlines()

                        nomea = fake.first_name_male().replace(" ", "")
                        nome = unicodedata.normalize('NFKD', nomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        sobrenomea = fake.last_name().replace(" ", "").lower()
                        sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        nome_completo = nome + sobrenome
                        numeros_concatenados = ''.join(
                            str(numero) for numero in lista_user)
                        user_completo1 = nome_completo + '' + \
                            str(numeros_concatenados) + ''.join(lista_letras)

                        user_completo = random.randint(1, len(user_completo1))
                        # Insira o ponto no índice aleatório
                        string_with_dot = user_completo1[:user_completo] + \
                            '_' + user_completo1[user_completo:]
                        user_completo_antigo = string_with_dot.lower()

                        escolha = random.choice(["_", "."])
                        user_completo = nome + escolha + sobrenome + \
                            str(numeros_concatenados) + ''.join(lista_letras)
                        print(user_completo)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: ' + user_completo)
                        window.Refresh()
                        d(resourceId='com.instagram.android:id/username').set_text(
                            user_completo)
                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/button_text').click()
                        # Digitar senha e avançar
                        time.sleep(3)
                        try:
                            d(resourceId='com.instagram.android:id/password').set_text(
                                senha)
                        except:
                            try:
                                conteudo = config['vpn']
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()

                            except Exception as e:
                                raise Exception('skip')
                        d(resourceId='com.instagram.android:id/button_text').click()
                        # Clicar em concluir cadastro
                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/button_text').click()

                        time.sleep(4)
                        feedback = d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.View')
                        if feedback.exists:
                            sms = True

                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
                        window.Refresh()
                        # WebDriverWait(driver, 40).until(EC.visibility_of_element_located)(((By.XPATH,
                        #                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')

                        verificar = d(
                            resourceId='com.instagram.android:id/connect_text')
                        if verificar.exists(timeout=60):
                            time.sleep(20)
                            verificar = d(
                                resourceId='com.instagram.android:id/connect_text')
                        if verificar.exists:
                            try:
                                conteudo = config['vpn']
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                                window.Refresh()
                                contagem += 1
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")

                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))

                                window['total'].update(num_rows)
                                try:
                                    random_number = random.random()

                                    # Definir a chance desejada (10%)
                                    chance = 0.2

                                    # Verificar se o número aleatório está abaixo da chance
                                    if random_number < chance and not user_mysql == "wn3":
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                 "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                            funcionamento, scope)
                                        client = gspread.authorize(creds)

                                        spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                        sheet_name = 'relatorio_geral'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                                  conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:G{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)
                                except:
                                    pass

                                window.Refresh()
                                arquivo = open(
                                    'configuracoes/contas/contas_criadas.txt', 'a')
                                # Escreva mais conteúdo no arquivo
                                arquivo.write(user_completo +
                                              ' ' + senha + "\n")
                                arquivo = open(
                                    'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                                # Escreva mais conteúdo no arquivo
                                arquivo.write(
                                    email + '\n' + user_completo + '\n' + senha + "\n\n")
                                window.Refresh()
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(1)
                                d(resourceId='com.instagram.android:id/negative_button').click()
                                time.sleep(3)
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(1)
                                try:
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Seguindo sugeridos...')
                                    window.Refresh()
                                    for element in elements:
                                        if element.get_text() == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                except Exception as e:
                                    print(e)
                                    d(resourceId='com.instagram.android:id/skip_button').click()
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window.Refresh()
                                    for element in elements:
                                        if element.text == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()

                                time.sleep(1)
                                time.sleep(3)
                                try:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                except Exception as e:
                                    print(e)
                                    d(resourceId='com.instagram.android:id/button_text').click()
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                sms = False
                            except Exception as e:
                                print(e)

                        else:
                            try:
                                conteudo = config['vpn']
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()

                            except Exception as e:
                                sms = True
                                if not str(e) == '':
                                    traceback.print_exc()
                                if not e == 'skip' or not e == 'Manutenção.':
                                    try:
                                        d.screenshot(
                                            f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                                    except Exception as e:
                                        print(e)
                                        pass
                    except Exception as e:
                        import traceback
                        if not str(e) == '':
                            traceback.print_exc()
                        print(e)
                        if not e == 'skip' or not e == 'Manutenção.':
                            try:
                                d.screenshot(
                                    f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                            except Exception as e:
                                print(e)
                                pass
                        sms = True

            except Exception as e:
                print(e)
                if not str(e) == '':
                    traceback.print_exc()
                if not e == 'skip' or not e == 'Manutenção.':
                    try:
                        d.screenshot(
                            f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                    except Exception as e:
                        print(e)
                        pass

        except Exception as e:
            print(e)
            import traceback
            if not str(e) == '':
                traceback.print_exc()
            if not e == 'skip' or not e == 'Manutenção.':
                try:
                    d.screenshot(
                        f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                except Exception as e:
                    print(e)
                    pass

            pass

def creator_CLONER_NUM():
    import traceback
    import random
    global gerar_senha
    SPREADSHEET_ID = config['spreadsheet']
    conteudo = config['vpn']
    #def gerar_senha(tamanho=12):
    #    import random
    #    if tamanho < 6:
    #        raise ValueError("A senha deve ter pelo menos 6 caracteres.")
#
    #    # Define uma lista de letras maiúsculas e minúsculas
    #    letras_maiusculas = [random.choice(
    #        string.ascii_uppercase) for _ in range(tamanho // 2)]
    #    letras_minusculas = [random.choice(
    #        string.ascii_lowercase) for _ in range(tamanho // 2)]
#
    #    # Intercale as letras maiúsculas e minúsculas
    #    senha = ''.join(''.join(pair)
    #                    for pair in zip(letras_maiusculas, letras_minusculas))
#
    #    # Adiciona caracteres especiais, números e @
    #    caracteres_permitidos = string.ascii_letters + string.digits + string.punctuation
    #    caracteres_permitidos = caracteres_permitidos.replace(
    #        "~", "")  # Remove ~ e outros acentos
#
    #    senha += ''.join(random.choice(caracteres_permitidos)
    #                    for _ in range(tamanho - len(senha) - 3))
    #    # Adiciona pelo menos uma letra maiúscula
    #    senha += random.choice(string.ascii_uppercase)
    #    senha += random.choice(string.digits)  # Adiciona pelo menos um número
    #    senha += "@"
#
    #    # Mistura os caracteres
    #    senha = ''.join(random.sample(senha, len(senha)))
#
    #    return senha
    senha = gerar_senha(12)
    maquina = config['maquina']
    tentativa = False
    seguido = False
    regiao_vpn = 'Sem dados'
    app = 'Normal'
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    # Código que gera a saída
    import os
    import time
    import requests
    import hashlib
    import subprocess

    # verifica se o arquivo existe na pasta do bot

    try:
        from rich.console import Console
    except ModuleNotFoundError:
        import subprocess
        import sys

        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['pip', 'install', '-r', 'requirements.txt'])
        subprocess.run(['deactivate'], shell=True)
        from rich.console import Console
    import os
    import time

    try:
        from PIL import Image
        import cv2
        import numpy as np
        import tempfile
        import random
        import os
        import requests
        from io import BytesIO
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(f'pip install pillow opencv-python-headless numpy',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(['deactivate'], shell=True)
        from PIL import Image
        import cv2
        import numpy as np
        import tempfile
        import random
        import os
        import requests
        from io import BytesIO

    try:
        import uiautomator2 as u2
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'uiautomator2==2.16.25'])
        subprocess.run(['deactivate'], shell=True)
        subprocess.run(['pip', 'install', '--upgrade', 'requests'])
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        import requests
        time.sleep(10)
        import uiautomator2 as u2
    d = u2.connect(f'{porta}')
    import requests
    import hashlib
    import subprocess
    from colorama import init, Fore, Back, Style
    from faker import Faker
    # teste
    init(autoreset=True)
    console = Console()
    from termcolor import colored

    from rich.console import Console
    from rich.panel import Panel
    from rich.text import Text
    from rich.rule import Rule
    from PIL import Image
    import numpy as np
    import time
    import os
    import tempfile
    import subprocess
    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random
    from datetime import datetime
    import string
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import NoSuchElementException
    from mailtm import Email
    import re
    import logging

    logger = logging.getLogger(__name__)

    handler = logging.FileHandler('log.txt')
    handler.setLevel(logging.ERROR)

    logger.addHandler(handler)

    # RANGE_NAME = 'contas!A:D'
    #
    # SCOPES = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

    def vpn_avast():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Avast', text_color='red')
        window.Refresh()
        sms = True
        try:
            d.app_stop("com.avast.android.vpn")
            d.app_start("com.avast.android.vpn", ".app.wizard.WizardActivity")
            time.sleep(10)
        except Exception as e:
            print(e)
        abc = False

    def nenhuma_vpn():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        sms = True
        time.sleep(10)

    def vpn_hotspotshield():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HotspotShield',
                               text_color='red')
        window.Refresh()
        sms = True
        try:
            d.app_stop('hotspotshield.android.vpn')
            d.app_start('hotspotshield.android.vpn')
        except Exception as e:
            print(e)
        d(resourceId='hotspotshield.android.vpn:id/tryAgainButton').click()
        time.sleep(5)
        d(resourceId='hotspotshield.android.vpn:id/btnVpnConnect').click()

        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_pia():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da PiaVPN', text_color='red')
        window.Refresh()
        sms = True
        try:
            d.app_stop('com.privateinternetaccess.android')
            d.app_start('com.privateinternetaccess.android')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()
        time.sleep(3)
        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()

        abc = False

    def vpn_express():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da ExpressVPN', text_color='red')
        window.Refresh()
        sms = True
        try:
            d.app_stop('com.expressvpn.vpn')
            d.app_start('com.expressvpn.vpn')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.expressvpn.vpn:id/obiButton').click()
        time.sleep(3)
        d(resourceId='com.expressvpn.vpn:id/obiButton').click()

        abc = False

    def vpn_nord():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da NordVPN', text_color='red')
        window.Refresh()
        sms = True
        try:
            d.app_stop('com.nordvpn.android')
            time.sleep(5)
            d.app_start('com.nordvpn.android', use_monkey=True)
        except:
            pass
        time.sleep(10)
        time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_surf():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark', text_color='red')
        window.Refresh()

        try:
            d.app_stop('com.surfshark.vpnclient.android')
            d.app_start('com.surfshark.vpnclient.android')
        except:
            pass
        time.sleep(15)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_better():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da BetterNet', text_color='red')
        window.Refresh()

        try:
            d.app_stop('com.freevpnintouch')
            d.app_start('com.freevpnintouch')
        except:
            pass
        time.sleep(10)
        dialog = d(resourceId='com.freevpnintouch:id/dialogCtaPositive')
        connect = d(
            resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
        if dialog.exists:
            d(resourceId='com.freevpnintouch:id/dialogCtaPositive').click()
            time.sleep(3)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            # time.sleep(5)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
        while connect == 'CONNECT':
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            time.sleep(4)
            connect = d(
                resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            # WebDriverWait(driver, 20).until(
            # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        ip = '127.0.0.1:' + porta

        output = subprocess.check_output(
            ['adb', '-s', ip, 'shell', 'ifconfig'])

        # Verifica se a conexão VPN está ativa
        if not "tun0" in str(output):
            window['output'].print("Não conectado na BetterNet.")
            window.Refresh()
            try:
                connect = d(
                    resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
                d.app_stop('com.freevpnintouch')
                d.app_start('com.freevpnintouch')
                while connect == 'CONNECT':
                    d(resourceId='com.freevpnintouch:id/buttonConnect').click()
                    time.sleep(4)
                    connect = d(
                        resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            except:
                pass
        abc = False

    def vpn_cyberghost():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da CyberGhost', text_color='red')
        window.Refresh()

        try:
            d.app_stop('de.mobileconcepts.cyberghost')
            d.app_start('de.mobileconcepts.cyberghost')
        except:
            pass
        # time.sleep(3)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        rate = d(resourceId='de.mobileconcepts.cyberghost:id/rate_me_text')
        if rate.exists:
            d(resourceId='android:id/button2').click()
        time.sleep(2)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        abc = False

    def vpn_tunnelbear():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        sms = True
        try:
            d.app_stop('com.tunnelbear.android')
            d.app_start("com.tunnelbear.android")
            while True:
                output = subprocess.check_output(
                    ['adb', '-s', porta, 'shell', 'ifconfig'])
                # print(str(output))
                if "tun0" in str(output):
                    print('Conectada')
                    break
                elif not "tun0" in str(output):
                    print('Reconectando')
                    try:
                        d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                        time.sleep(10)
                    except:
                        pass
        except Exception as e:
            print(e)
            pass

    def vpn_avg():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da AVG', text_color='red')
        window.Refresh()
        sms = True
        try:
            d.app_stop('com.avg.android.vpn')
            d.app_start("com.avg.android.vpn",
                        "com.avast.android.vpn.app.wizard.WizardActivity")
            regiao_vpn = d(
                resourceId='com.avg.android.vpn:id/location_title').get_text()

        except Exception as e:
            print(e)
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #               stderr=subprocess.DEVNULL, check=True, shell=True)

        time.sleep(30)

    def vpn_windscribe():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Windscribe', text_color='red')
        window.Refresh()
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)
            d.app_stop("com.windscribe.vpn")
            d.app_start("com.windscribe.vpn")
        except:
            pass
        d(resourceId='com.windscribe.vpn:id/on_off_button').click()
        time.sleep(10)
        primeiro = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_name').get_text()
        segundo = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_nick_name').get_text()
        regiao_vpn = primeiro + ' ' + segundo

    def vpn_hma():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HMA', text_color='red')
        window.Refresh()
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)

            d.app_stop("com.hidemyass.hidemyassprovpn")
            time.sleep(3)
            d.app_start('com.hidemyass.hidemyassprovpn',
                        'com.avast.android.vpn.activity.HmaOnboardingActivity')
        except:
            pass
        time.sleep(10)
    def gerar_senha(tamanho=12):
        if tamanho < 6:
            raise ValueError("A senha deve ter pelo menos 6 caracteres.")

        # Define uma lista de letras maiúsculas e minúsculas
        letras_maiusculas = [random.choice(
            string.ascii_uppercase) for _ in range(tamanho // 2)]
        letras_minusculas = [random.choice(
            string.ascii_lowercase) for _ in range(tamanho // 2)]

        # Intercale as letras maiúsculas e minúsculas
        senha = ''.join(''.join(pair)
                        for pair in zip(letras_maiusculas, letras_minusculas))

        # Adiciona caracteres especiais, números e @
        caracteres_permitidos = string.ascii_letters + string.digits + string.punctuation
        caracteres_permitidos = caracteres_permitidos.replace(
            "~", "")  # Remove ~ e outros acentos

        senha += ''.join(random.choice(caracteres_permitidos)
                        for _ in range(tamanho - len(senha) - 3))
        # Adiciona pelo menos uma letra maiúscula
        senha += random.choice(string.ascii_uppercase)
        senha += random.choice(string.digits)  # Adiciona pelo menos um número
        senha += "@"

        # Mistura os caracteres
        senha = ''.join(random.sample(senha, len(senha)))

        return senha

    def escrever_devagar(element, text, delay=0.05, chunk_size=3):
        element.clear_text()
        current_text = ""
        for i in range(0, len(text), chunk_size):
            current_text += text[i:i+chunk_size]
            element.set_text(current_text)
            time.sleep(delay)


    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    window.Refresh()

    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global transition_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass
    try:
        subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
    except Exception as e:
        pass

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Efetuando troca de IP.')
    window.Refresh()
    try:
        conteudo = config['vpn']
        if conteudo == "AVG":
            vpn_avg()
        elif conteudo == "SurfShark":
            vpn_surf()
        elif conteudo == "Nenhuma":
            nenhuma_vpn()
        elif conteudo == "Avast":
            vpn_avast()
        elif conteudo == "ExpressVPN":
            vpn_express()

        elif conteudo == "PiaVPN":
            vpn_pia()
        elif conteudo == "TunnelBear":
            vpn_tunnelbear()
        elif conteudo == "BetterNet":
            vpn_better()
        elif conteudo == "CyberGhost":
            vpn_cyberghost()
        elif conteudo == "NordVPN":
            vpn_nord()
        elif conteudo == "HotspotShield":
            vpn_hotspotshield()
        elif conteudo == "WindscribeVPN":
            vpn_windscribe()
        elif conteudo == "HmaVPN":
            vpn_hma()
        else:
            window['output'].print(
                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
            window.Refresh()

    except Exception as e:
        print(e)
        pass

    window.Refresh()
    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando sistema inicializar.')
    window.Refresh()

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.\n')

    d.implicitly_wait(30.0)
    d.set_fastinput_ime(True)
    if not os.path.exists('./erros'):
        os.makedirs('./erros')
    codigo_não_recebido_seguidos = 0
    while parar is False:
        try:
            try: d.app_clear("com.instagram.android")
            except: pass
            try: d.app_clear("pl.rs.sip.softphone.newapp")
            except: pass
            try: d.app_stop("com.lbe.parallel.intl")
            except: pass
            try: d.app_stop("com.lbe.parallel.intl.arm32")
            except: pass
            try: d.app_stop("com.lbe.parallel.intl.arm64")
            except: pass
            senha = gerar_senha(12)
            if parar is True:
                print('Parando Thread')
                break

            window['output'].print(linha_ret)
            window.Refresh()
            try:
                subprocess.run(
                    f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.READ_CONTACTS',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                subprocess.run(
                    f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.CAMERA',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                subprocess.run(
                    f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.RECORD_AUDIO',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                try:
                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.ACCESS_NOTIFICATION_POLICY',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                except:
                    pass

                subprocess.run(
                    f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.POST_NOTIFICATIONS',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            try:
                d.app_start('pl.rs.sip.softphone.newapp')
            except:
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu algum erro ao abrir o 2NR, tentando novamente.')
                window.Refresh()
            time.sleep(3)
            scope = ["https://spreadsheets.google.com/feeds",
                    "https://www.googleapis.com/auth/drive"]
            creds = ServiceAccountCredentials.from_json_keyfile_name(
                'credentials.json', scope)
            client = gspread.authorize(creds)
            spreadsheet_id = config['spreadsheet']
            sheet_name = config['2nr']
            sheet = client.open_by_key(
                spreadsheet_id).worksheet(sheet_name)
            # Obtém todas as células
            cells = sheet.get_all_values()
            # Armazena as células que correspondem à condição
            matches = [cell for row in cells for cell in row if
                    re.match(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', cell)]
            # Armazena a lista de células correspondentes à condição em uma variável
            regex2nr = matches
            while len(regex2nr) == 0:
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Nenhuma conta do 2NR encontrada.\nTentando novamente em 5 min.')
                window.Refresh()
                scope = ["https://spreadsheets.google.com/feeds",
                        "https://www.googleapis.com/auth/drive"]
                creds = ServiceAccountCredentials.from_json_keyfile_name(
                    'credentials.json', scope)
                client = gspread.authorize(creds)
                spreadsheet_id = config['spreadsheet']
                sheet_name = config['2nr']
                sheet = client.open_by_key(
                    spreadsheet_id).worksheet(sheet_name)
                # Insert user, password, and timestamp into first empty row
                sheet = client.open_by_key(
                    spreadsheet_id).worksheet(sheet_name)
                values = sheet.col_values(1)
                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                rows = sheet.get_all_values()
                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                regex = re.compile(r'\S+\s\S+')
                sheet_name = config['2nr']
                try:
                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                    num_rows = sum(1 for row in rows if regex.match(row[0]))
                    window['total'].update(num_rows)
                except:
                    pass
                time.sleep(300)
                cells = sheet.get_all_values()
                # Armazena as células que correspondem à condição
                matches = [cell for row in cells for cell in row if
                        re.match(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', cell)]
                # Armazena a lista de células correspondentes à condição em uma variável
                regex2nr = matches
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] {len(regex2nr)} conta(s) encontrada.')
            window.Refresh()
            time.sleep(3)
            try:
                d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(timeout=60)
            except Exception as e:
                print(e)
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao clicar em login. Tentando novamente.')
                window.Refresh()
                subprocess.run(
                    f'uiautomator2 -s {porta} uninstall com.github.uiautomator',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                raise Exception('Ocorreu um erro ao clicar em login.')
            time.sleep(5)
            spreadsheet_id = config['spreadsheet']
            sheet_name = config['2nr']
            sheet = client.open_by_key(
                spreadsheet_id).worksheet(sheet_name)
            # Obtém todas as células
            # Define a faixa de células para leitura
            first_linha = sheet.cell(1, 1).value
            # Divide a string em duas partes separadas por um espaço em branco
            partes = first_linha.split(' ')
            # Atribui a primeira parte (endereço de e-mail) à variável email2nr
            email2nr = partes[0]
            # Atribui a segunda parte (texto) à variável senha2nr
            senha2nr = partes[1]
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Email 2NR: {email2nr}')
            window.Refresh()
            d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email2nr)
            time.sleep(0.5)
            d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha2nr)
            time.sleep(0.5)
            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
            time.sleep(3)
            perm = d(resourceId='pl.rs.sip.softphone.newapp:id/messages')
            if perm.exists(timeout=30):
                time.sleep(10)
                pass
            else:
                try:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Conta não existe.')
                    window.Refresh()
                    scope = ["https://spreadsheets.google.com/feeds",
                            "https://www.googleapis.com/auth/drive"]
                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                        'credentials.json', scope)
                    client = gspread.authorize(creds)
                    # Abre a planilha e a planilha de uma determinada aba
                    spreadsheet_id = config['spreadsheet']
                    sheet_name = config['2nr']
                    sheet = client.open_by_key(
                        spreadsheet_id).worksheet(sheet_name)
                    # Apaga a primeira célula da coluna A e desloca as células abaixo
                    sheet.delete_rows(1, 1)
                    try:
                        conteudo = config['vpn']
                        # Executa a função correspondente ao conteúdo do arquivo
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                    except Exception as e:
                        raise Exception('skip')
                        sms = True
                    raise Exception('skip')
                except Exception as e:
                    print(e)
                raise Exception('skip')
            try:
                qtd_num2 = d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[*]/androidx.appcompat.widget.LinearLayoutCompat/android.widget.LinearLayout/android.widget.TextView[1]')
                qtd_num = qtd_num2.all()
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] {len(qtd_num)} número(s) encontrado.')
            except Exception as e:
                print(e)
            if len(qtd_num) == 0:
                try:
                    scope = ["https://spreadsheets.google.com/feeds",
                            "https://www.googleapis.com/auth/drive"]
                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                        'credentials.json', scope)
                    client = gspread.authorize(creds)
                    # Abre a planilha e a planilha de uma determinada aba
                    spreadsheet_id = config['spreadsheet']
                    sheet_name = config['2nr']
                    sheet = client.open_by_key(
                        spreadsheet_id).worksheet(sheet_name)
                    # Apaga a primeira célula da coluna A e desloca as células abaixo
                    sheet.delete_rows(1, 1)
                except Exception as e:
                    print(e)
                continue
            window.Refresh()
            
            try:
                num = d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat/android.widget.LinearLayout/android.widget.TextView[1]').get_text()
                num = num.replace(' ', '')
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Número: +48{num}')
                window.Refresh()
                email = num
            except Exception as e:
                print(e)
            d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonSettings').click()
            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
            d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                
            try:
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Clonando Instagram')
                window.Refresh()
                package_name = "com.lbe.parallel.intl"
                d.app_clear(package_name)
                #clear_command = f"adb shell pm clear {package_name}"
                #subprocess.run(clear_command.split(), capture_output=True, text=True)
                try:
                    clear_command = f"adb shell pm clear com.lbe.parallel.intl.arm32"
                    subprocess.run(clear_command.split(), capture_output=True, text=True)
                except: pass
                try:
                    clear_command = f"adb shell pm clear com.lbe.parallel.intl.arm64"
                    subprocess.run(clear_command.split(), capture_output=True, text=True)
                except: pass
                permissions = [
                    "android.permission.CALL_PHONE",
                    "android.permission.READ_EXTERNAL_STORAGE",
                    "android.permission.WRITE_EXTERNAL_STORAGE",
                    "android.permission.ACCESS_FINE_LOCATION",
                    "android.permission.ACCESS_COARSE_LOCATION",
                    "android.permission.READ_CONTACTS"
                ]
#
#
                # Conceder cada permissão
                for permission in permissions:
                    command = f"adb -s {porta} shell pm grant {package_name} {permission}"
                    result = subprocess.run(command.split(), capture_output=True, text=True)
                    if result.returncode == 0:
                        pass
                        #print(f"Permissão '{permission}' concedida para '{package_name}'.")
                    else:
                        print(f"Erro ao conceder permissão '{permission}': {result.stderr}")
                d.app_start(package_name)
                d(text="Agree and continue").click(timeout=15)
                d(text='CONTINUAR').click(timeout=20)
                try:
                    d(text='COMEÇAR').click(timeout=15)
                except:
                    image_url = "https://www.dropbox.com/scl/fi/qag56h0ps1yaa8sfh4091/Captura-de-tela-2024-06-16-184155.png?rlkey=mhh2dyb1gf7eaw8uqzhbh0wmo&st=x0ngbkzk&dl=1"

                    # Baixe a imagem de referência
                    response = requests.get(image_url)
                    template = Image.open(BytesIO(response.content))
                    template_path = os.path.join(tempfile.gettempdir(), f"consent.png")
                    template.save(template_path)

                    # Converta a imagem de referência para o formato necessário
                    template = cv2.cvtColor(np.array(template), cv2.COLOR_RGB2BGR)

                    # Conecte ao dispositivo
                    #d = u2.connect()

                    # Capture a tela
                    screenshot = d.screenshot(format='pillow')
                    screenshot_path = os.path.join(tempfile.gettempdir(), f"screen{random.randint(000,999)}.png")
                    screenshot.save(screenshot_path)
                    print(screenshot_path)

                    # Carregue a imagem da tela e a imagem de referência
                    screenshot = cv2.cvtColor(np.array(screenshot), cv2.COLOR_RGB2BGR)

                    # Realize a correspondência de templates usando OpenCV
                    result = cv2.matchTemplate(screenshot, template, cv2.TM_CCOEFF_NORMED)

                    # Defina um limite para considerar uma correspondência válida
                    threshold = 0.0
                    loc = np.where(result >= threshold)

                    # Encontre o ponto (x, y) do centro da correspondência
                    if len(loc[0]) > 0:
                        min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)
                        top_left = max_loc
                        h, w, _ = template.shape
                        center_x = top_left[0] + w // 2
                        center_y = top_left[1] + h // 2
                        # Clique na posição calculada
                        d.click(center_x, center_y)
                        print(f"Imagem encontrada e clicada na posição ({center_x}, {center_y}).")
                    else:
                        print("Imagem de referência não encontrada na tela.")
                    d(text='COMEÇAR').click(timeout=20)
                d(resourceId="com.lbe.parallel.intl:id/clone_add").click(timeout=25)
                #d(text="Adicionar Apps").wait(timeout=30)
                d(text="ACEITAR").click()
                try: d(text="Instagram").click(timeout=10)
                except: 
                    d(text="Adicionar Apps").click(timeout=10)
                    #d(text="Instagram").click(timeout=10)
                    d(resourceId="com.lbe.parallel.intl:id/clone_add").click(timeout=25)
                time.sleep(2)


                #from PIL import Image
                #import numpy as np
                #import time
                #import random
                #import os
                #import tempfile
                #d.app_clear("com.ludashi.dualspaceprox")
                #package_name = "com.ludashi.dualspaceprox"
                #permissions = [
                #    "android.permission.CALL_PHONE",
                #    "android.permission.READ_EXTERNAL_STORAGE",
                #    "android.permission.WRITE_EXTERNAL_STORAGE",
                #    "android.permission.ACCESS_FINE_LOCATION",
                #    "android.permission.ACCESS_COARSE_LOCATION",
                #    "android.permission.READ_CONTACTS"
                #]
                ## Conceder cada permissão
                #for permission in permissions:
                #    command = f"adb -s {porta} shell pm grant {package_name} {permission}"
                #    result = subprocess.run(command.split(), capture_output=True, text=True)
                #    if result.returncode == 0:
                #        pass
                #        #print(f"Permissão '{permission}' concedida para '{package_name}'.")
                #    else:
                #        print(f"Erro ao conceder permissão '{permission}': {result.stderr}")
                #d.app_start("com.ludashi.dualspaceprox")
                #d(textContains="INICIAR").click(timeout=30)
                #time.sleep(2)
                #d(resourceId="com.ludashi.dualspaceprox:id/search").click(timeout=30)
                #time.sleep(2)
                #try:
                #    d(resourceId="com.ludashi.dualspaceprox:id/input_edit").set_text("Instagra")
                #except:
                #    d(resourceId="com.ludashi.dualspaceprox:id/search").click(timeout=30)
                #    time.sleep(3)
                #    d(resourceId="com.ludashi.dualspaceprox:id/input_edit").set_text("Instagra")
                #    time.sleep(1)
#
                #d(text="Instagram").click(timeout=20)
                #d.press("back")
                #d.press("back")
                #d(resourceId="com.ludashi.dualspaceprox:id/btn_clone").click(timeout=20)
                #d(text="Instagram(1)").click(timeout=30)
                #d(text="Instagram(1)").click(timeout=30)
                #time.sleep(3)
#
                #screenshot_path = os.path.join(tempfile.gettempdir(), f"screen{random.randint(000,999)}.png")
                #d.screenshot(screenshot_path)
#
                ## Esperar um pouco para garantir que a captura de tela seja salva
                #time.sleep(2)
#
                ## Abrir a imagem da captura de tela
                #img = Image.open(screenshot_path)
                #img_array = np.array(img)
#
                ## Definir a cor que você está procurando (RGB)
                #target_color = (31, 109, 238)  # Exemplo: vermelho
#
                ## Encontrar o último pixel com a cor alvo
                #def find_last_color_pixel(image_array, target_color):
                #    # Converte a imagem para o espaço de cores RGB
                #    img_rgb = img_array[:, :, :3]
#
                #    # Calcula a diferença entre cada pixel e a cor alvo
                #    diff = np.abs(img_rgb - np.array(target_color))
#
                #    # Soma as diferenças para cada canal RGB
                #    total_diff = np.sum(diff, axis=-1)
#
                #    # Encontra todos os índices onde a diferença é zero (corresponde à cor alvo)
                #    indices = np.argwhere(total_diff == 0)
#
                #    # Se não houver índices encontrados, retorna None
                #    if len(indices) == 0:
                #        return None, None
#
                #    # Encontra o último índice onde a diferença é zero
                #    last_index = indices[-1]
#
                #    # Obtém as coordenadas do último pixel com a cor alvo
                #    y, x = last_index
#
                #    return x, y
#
                #x, y = find_last_color_pixel(img_array, target_color)
#
                #if x is not None and y is not None:
                #    print(f"Último pixel encontrado na posição: ({x}, {y})")
#
                #    # Converter x e y para inteiros
                #    x = int(x)
                #    y = int(y)
#
                #    # Clicar no pixel encontrado
                #    d.click(x, y)
                #else:
                #    print("Cor não encontrada na imagem.")
#
                ## Remover a captura de tela temporária no computador
                #os.remove(screenshot_path)


                while True:
                    if d(text="Tentar novamente"):
                        d(text="Tentar novamente").click()
                    elif d(text="Ir para o app"):
                        d(text="Ir para o app").click()
                    elif d(text="ENTENDI"):
                        d(text="ENTENDI").click()
                    elif d(text="Termos e Política de Privacidade"):
                        d.xpath('//android.widget.Button[@content-desc="Continuar"]').click()
                        time.sleep(5)
                        if not d(text="Criar nova conta"):
                            d.press("back")
                            d(text="Instagram(1)").click(timeout=30)
                        
                    elif d(text="Criar nova conta"):
                        d(text="Criar nova conta").click()
                        break
                    elif d(text="Adicionar Apps"):
                        d(text="Instagram").click(timeout=10)
                        time.sleep(2)
                    elif d(text="Instagram(1)"):
                        try:
                            d(textContains="Instagram").click(timeout=10)
                        except Exception as e:
                            print(e)
                        time.sleep(2)
                    elif d(text="Recarregar"):
                        d(text="Recarregar").click()
                        time.sleep(3)
                        if d(text="Recarregar"):
                            conteudo = config['vpn']
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Pagina Estática.')
                            window.Refresh()
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception("IP Bloqueado")
                
                d(text='Cadastrar-se com o email').wait(timeout=30)
                num = f"+48{num}"
                escrever_devagar(d(className="android.widget.EditText"), num, delay=0.05)
                d(text="Avançar").click(timeout=30)
                time.sleep(5)
                if d(textContains="Você está tentando entrar?").wait(timeout=15):
                    d(text="Criar nova conta").click()
                    time.sleep(3)
                if d(text="Enviar código por SMS"):
                    d(text="Enviar código por SMS").click()
                    d(text="Avançar").click(timeout=30)
                try:
                    d(text="Não recebi o código").wait(timeout=30)
                except:
                    print("Restrição")
                    time.sleep(1000)
                    raise Exception("Restrição")
                
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                window.Refresh()
                troca_ip_estatica = 0
                # MUDAR PARA 2NR
                d.app_start("pl.rs.sip.softphone.newapp")
                #d.press("recent")
                #d.press("recent")
                # MUDAR PARA 2NR
                time.sleep(5)
                if d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').exists:
                    print('2NR deslogou')
                    d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(timeout=60)
                    time.sleep(5)

                    d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email2nr)
                    time.sleep(0.5)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha2nr)
                    time.sleep(0.5)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                    time.sleep(3)

                d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()

                try:
                    cod = d(
                        resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=40)

                except:
                    codigo_não_recebido_seguidos += 1
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Reenviando código.')
                    window.Refresh()
                    # MUDAR PARA INSTA
                    d.press("recent")
                    time.sleep(1)
                    d.press("recent")
                    # MUDAR PARA INSTA
                    time.sleep(2)
                    try:
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                    except: pass
                    # MUDAR PARA INSTA
                    d.press("recent")
                    time.sleep(1)
                    d.press("recent")
                    # MUDAR PARA INSTA
                    d.app_start('pl.rs.sip.softphone.newapp')
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()

                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=40)

                    except:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido')
                        window.Refresh()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click(timeout=30)
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception(' ')
                
                cod = cod.replace(' ', '')
                codigo = re.sub('[^0-9]', '', cod)[:6]
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                window.Refresh()
                d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonSettings').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()

                # MUDAR PARA INSTA
                d.press("recent")
                time.sleep(1)
                d.press("recent")
                # MUDAR PARA INSTA
                d(text='Avançar').wait(timeout=30)
                escrever_devagar(d(className="android.widget.EditText"), codigo, delay=0.05)

                d(text="Avançar").click(timeout=30)
                d(text='Crie uma senha').wait(timeout=30)
                senha = gerar_senha(12)
                escrever_devagar(d(className="android.widget.EditText"), senha, delay=0.05)
                #escrever_devagar(d(className="android.widget.EditText"), senha, delay=0.05)
                d(text="Avançar").click(timeout=30)
                d(text="Agora não").click(timeout=30)
                try:
                    if d(text="CANCELAR").wait(timeout=10):
                        d(text="CANCELAR").click()
                except:
                    pass

                d(text="Avançar").click(timeout=30)
                time.sleep(0.5)
                d(text="Avançar").click(timeout=30)
                d(text="Qual é a sua idade?").wait(timeout=30)
                idade_aleatorio = str(random.randint(18, 50))
                escrever_devagar(d(className="android.widget.EditText"), idade_aleatorio, delay=0.05)
                #d(className="android.widget.EditText").set_text(random.randint(18, 50))
                d(text="Avançar").click(timeout=30)
                d(text="OK").click(timeout=30)
                d(text="Qual é o seu nome?").wait(timeout=30)

                lista_user = random.choices(range(0, 9), k=2)
                lista_letras = random.choices(letras, k=2)
                nomea = fake.first_name_male().replace(" ", "")
                nome = unicodedata.normalize('NFKD', nomea).encode(
                    'ASCII', 'ignore').decode('ASCII')
                sobrenomea = fake.last_name().replace(" ", "").lower()
                sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                    'ASCII', 'ignore').decode('ASCII')
                nome_completo = nome + ' ' + sobrenome
                nome_completo_s = nome + sobrenome
                numeros_concatenados = ''.join(str(numero)
                                            for numero in lista_user)
                user_completo1 = nome_completo_s + '' + \
                    str(numeros_concatenados) + ''.join(lista_letras)
                user_completo = random.randint(1, len(user_completo1))
                string_with_dot = user_completo1[:user_completo] + \
                    '_' + user_completo1[user_completo:]
                user_completo_antigo = string_with_dot.lower()
                escolha = random.choice(["_", "."])
                user_completo = nome + escolha + sobrenome + \
                    str(numeros_concatenados) + ''.join(lista_letras)
                print(user_completo)


                #escrever_devagar(d(className="android.widget.EditText"), nome_completo, delay=0.05)
                d(className="android.widget.EditText").set_text(nome_completo)
                d(text="Avançar").click(timeout=30)
                d(text="Crie um nome de usuário").wait(timeout=30)
                #escrever_devagar(d(className="android.widget.EditText"), user_completo, delay=0.05)
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] User: {user_completo}')
                window.Refresh()
                escrever_devagar(d(className="android.widget.EditText"), user_completo, delay=0.05)

                time.sleep(5)
                d(text="Avançar").click(timeout=30)
                d(text="Concordo").click(timeout=30)

                for i in range(21):
                    time.sleep(2)
                    if d(resourceId="com.instagram.android:id/tab_avatar"):
                        d(resourceId="com.instagram.android:id/tab_avatar").click()
                        time.sleep(5)
                    elif d(text="Pular") or d(resourceId="com.instagram.android:id/tab_avatar"):
                        print("Conta criada")
                        try:
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                text_color=('lime'))
                            window.Refresh()
                            seguido = False
                            contagem += 1
                            window['criadas'].update(contagem)
                            window.Refresh()
                            now = datetime.now()
                            now_brasilia = tz.localize(now)
                            timestamp = now_brasilia.strftime(
                                "%d/%m/%Y %H:%M:%S")
                            try:
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                        conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            except Exception as e:
                                print(e)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                tempo_aleatorio = random.randint(10, 40)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                time.sleep(tempo_aleatorio)
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                        conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            window['total'].update(num_rows)
                            random_number = random.random()

                            # Definir a chance desejada (10%)
                            chance = 0.2

                            # Verificar se o número aleatório está abaixo da chance
                            if random_number < chance and not user_mysql == "wn3":
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                    funcionamento, scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                sheet_name = 'relatorio_geral'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                        conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)
                        except Exception as e:
                            print(e)
                            pass
                        try:
                            raise Exception("Criar por cima")
                            #d(text="Pular").click(timeout=30)
                            #d(textContains="Em seguida, você pode permitir o acesso").wait(timeout=30)
                            #d(text="Pular").click(timeout=30)
                            #d(text="Receba sugestões do Facebook").wait(timeout=30)
                            #d(text="Pular").click(timeout=30)
                            #d(text="Seguir amigos").wait(timeout=30)
                            #d(text="Pular").click(timeout=30)
                            #d(text="Convide amigos para seguirem você").wait(timeout=30)
                            #d(text="Pular").click(timeout=30)
                            #time.sleep(3)
                            #if d(textContains="Siga mais 5"):
                            #    d(text="Avançar").click(timeout=30)
                            #    time.sleep(10)
                            #else:
                            #    d(text="Encontrar pessoas").wait(timeout=30)
                            #    d.xpath('//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click(timeout=10)
                        except:
                            #package_name = "com.lbe.parallel.intl"
                            package_name = "com.lbe.parallel.intl"
                            d.app_stop(package_name)
                            #clear_command = f"adb shell pm clear {package_name}"
                            #subprocess.run(clear_command.split(), capture_output=True, text=True)
                            try:
                                d.app_stop("com.lbe.parallel.intl.arm32")
                            except: pass
                            try:
                                d.app_stop("com.lbe.parallel.intl.arm64")
                            except: pass
                            d.app_start(package_name)
                            while True:
                                if d(text="Ir para o app"):
                                    d(text="Ir para o app").click()
                                elif d(text="Adicionar Apps"):
                                    try:
                                        d(text="Instagram").click(timeout=10)
                                    except: pass
                                elif d(text="Instagram(1)"):
                                    d(text="Instagram(1)").click(timeout=30)
                                elif d(resourceId="com.instagram.android:id/tab_avatar"):
                                    break
                        #d(text="Sincronize seus contatos para encontrar seus amigos").wait(timeout=30)
                        #d(text="Pular").click(timeout=30)
                        
                        #d(text="Encontrar pessoas").wait(timeout=30)
                        #d.xpath('//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click(timeout=10)
                        while True:
                            time.sleep(5)
                            if d(text="Ir para o app"):
                                d(text="Ir para o app").click()
                            elif d(text="Adicionar Apps"):
                                d(text="Instagram").click(timeout=10)
                            elif d(text="Instagram(1)"):
                                d(text="Instagram(1)").click(timeout=30)
                            elif d(textContains="Permitir todos os cookies"):
                                d(textContains="Permitir todos os cookies").click()
                            elif d(resourceId="com.instagram.android:id/tab_avatar"):
                                break
                        try:
                            d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                        except:
                            d(textContains="Permitir todos os cookies").click()
                            d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                        #d(resourceId="com.instagram.android:id/netego_carousel_cta").click(timeout=60)
                        #if d(text="Não permitir acesso").wait(timeout=30):
                        #    d(text="Não permitir acesso").click(timeout=60)
                        #seguir_sugeridos = 0
                        #while seguir_sugeridos < 10:
                        #    d(resourceId="com.instagram.android:id/recommended_user_card_follow_button").click(timeout=60)
                        #    d(resourceId="com.instagram.android:id/recommended_user_dismiss_button").click(timeout=60)
                        #    time.sleep(0.5)
                        #    seguir_sugeridos += 1
    #
                        #d(resourceId="com.instagram.android:id/action_bar_button_back").click(timeout=10)
                        d(text="seguindo").click()
                        seguir_sugeridos = 0
                        while seguir_sugeridos < 10:
                            try:
                                d(text="Seguir").click(timeout=1)
                                seguir_sugeridos += 1
                            except:
                                width, height = d.window_size()
                                start_x = width // 2
                                start_y = height * 3 // 4  # Comece no 75% da altura
                                end_x = width // 2
                                end_y = height // 4  # Termine no 25% da altura

                                # Realize o swipe
                                d.swipe(start_x, start_y, end_x, end_y, duration=0.5)
                                if not d(text="Seguir"):
                                    break
                        d(resourceId="com.instagram.android:id/action_bar_button_back").click(timeout=10)
                        try:
                            d(resourceId="com.instagram.android:id/action_bar_title_chevron").click(timeout=10)
                        except: 
                            d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                            d(resourceId="com.instagram.android:id/action_bar_title_chevron").click(timeout=10)
                        d(textContains="Adicionar conta").click(timeout=30)
                        d(text="Criar nova conta").click(timeout=20)
                        lista_user = random.choices(range(0, 9), k=2)
                        lista_letras = random.choices(letras, k=2)
                        nomea = fake.first_name_male().replace(" ", "")
                        nome = unicodedata.normalize('NFKD', nomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        sobrenomea = fake.last_name().replace(" ", "").lower()
                        sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        nome_completo = nome + ' ' + sobrenome
                        nome_completo_s = nome + sobrenome
                        numeros_concatenados = ''.join(str(numero)
                                                    for numero in lista_user)
                        user_completo1 = nome_completo_s + '' + \
                            str(numeros_concatenados) + ''.join(lista_letras)
                        user_completo = random.randint(1, len(user_completo1))
                        string_with_dot = user_completo1[:user_completo] + \
                            '_' + user_completo1[user_completo:]
                        user_completo_antigo = string_with_dot.lower()
                        escolha = random.choice(["_", "."])
                        user_completo = nome + escolha + sobrenome + \
                            str(numeros_concatenados) + ''.join(lista_letras)
                        print(user_completo)

                        d(text="Escolha um nome de usuário").wait(timeout=30)
                        escrever_devagar(d(className="android.widget.EditText"), user_completo, delay=0.05, chunk_size=1)
                        while True:
                            if d(textContains='não está disponível.'):
                                d(resourceId='com.instagram.android:id/username_suggestion_text').click()
                            elif d(resourceId="com.instagram.android:id/username_valid_icon"):
                                break
                        d(text="Avançar", enabled=True).click()
                        d(text="Crie uma senha").wait(timeout=20)
                        senha = gerar_senha(12)
                        escrever_devagar(d(className="android.widget.EditText"), senha, delay=0.05, chunk_size=1)
                        time.sleep(2)
                        d(text="Avançar", enabled=True).click()
                        time.sleep(3)
                        d(text='Concluir o cadastro').click(timeout=20)
                        while True:
                            if (
                                d(text='Tente novamente mais tarde') or 
                                d(textContains="Ocorreu um erro de rede desconhecido") or
                                d(textContains="feedback_required")

                            ):
                                window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Restrição')
                                window.Refresh()
                                conteudo = config['vpn']
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                                raise Exception("Restrição")
                            
                            elif d(text='Pular'): break
                        time.sleep(5)
                        d(text='Pular').wait(timeout=30)
                        time.sleep(5)
                        if d(text="Pular"):
                            print("Conta criada")
                            try:
                                window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                    text_color=('lime'))
                                window.Refresh()
                                seguido = False
                                contagem += 1
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")
                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                            "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                            conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                            "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                            conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                window['total'].update(num_rows)
                                random_number = random.random()

                                # Definir a chance desejada (10%)
                                chance = 0.2

                                # Verificar se o número aleatório está abaixo da chance
                                if random_number < chance and not user_mysql == "wn3":
                                    scope = ["https://spreadsheets.google.com/feeds",
                                            "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                        funcionamento, scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                    sheet_name = 'relatorio_geral'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                            conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)
                            except Exception as e:
                                print(e)
                                pass
                            try:
                                raise Exception("Criar por cima")
                               #d(text="Pular").click()
                               ##d(text="Seguir amigos").wait(timeout=30)
                               ##d(text="Pular").click(timeout=30)
                               #d(text="Adicionar foto do perfil").wait(timeout=30)
                               #d(text="Pular").click(timeout=30)
                               #d(text="Convide amigos para seguirem você").wait(timeout=30)
                               #d(text="Pular").click(timeout=30)
                               #d(text="Encontrar pessoas").wait(timeout=30)
                               #d.xpath('//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click(timeout=10)
                            except:
                                #package_name = "com.lbe.parallel.intl"
                                package_name = "com.lbe.parallel.intl"
                                d.app_stop(package_name)
                                #clear_command = f"adb shell pm clear {package_name}"
                                #subprocess.run(clear_command.split(), capture_output=True, text=True)
                                try:
                                    d.app_stop("com.lbe.parallel.intl.arm32")
                                except: pass
                                try:
                                    d.app_stop("com.lbe.parallel.intl.arm64")
                                except: pass
                                d.app_start(package_name)
                                while True:
                                    if d(text="Ir para o app"):
                                        d(text="Ir para o app").click()
                                    elif d(text="Adicionar Apps"):
                                        try:
                                            d(text="Instagram").click(timeout=10)
                                        except:
                                            pass
                                    elif d(text="Instagram(1)"):
                                        d(text="Instagram(1)").click(timeout=30)
                                    elif d(resourceId="com.instagram.android:id/tab_avatar"):
                                        break
                            #d(text="Sincronize seus contatos para encontrar seus amigos").wait(timeout=30)
                            #d(text="Pular").click(timeout=30)
                            
                            #d(text="Encontrar pessoas").wait(timeout=30)
                            #d.xpath('//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click(timeout=10)
                            while True:
                                time.sleep(5)
                                if d(text="Ir para o app"):
                                    d(text="Ir para o app").click()
                                elif d(text="Adicionar Apps"):
                                    try:
                                        d(text="Instagram").click(timeout=10)
                                    except: pass
                                elif d(text="Instagram(1)"):
                                    d(text="Instagram(1)").click(timeout=30)
                                else: break
                            try:
                                d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                            except:
                                d(textContains="Permitir todos os cookies").click()
                                d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)

                            break
                    elif d(text="RELATAR PROBLEMA"):
                        conteudo = config['vpn']
                        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception("Restrição")
                    elif d(text="Concordo"):
                        print('Tentando logar')
                        d(text="Concordo")
                        d(text="Já tem uma conta?").click(timeout=25)
                        d(text="ENTRAR").click(timeout=10)
                        d(className="android.widget.EditText", instance=0).set_text(user_completo)
                        d(className="android.widget.EditText", instance=1).set_text(senha)
                        d(text='Entrar').click()
                        if d(text="Agora não").wait(timeout=10):
                            print('Conta criada')
                            d(text="Agora não").click()
                        else:
                            conteudo = config['vpn']
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                            window.Refresh()
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception("Restrição")
                    elif d(text="Fazer uma apelação"):
                        print("SMS")
                        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] SMS')
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception("SMS")
                else:
                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Não foi possivel criar esta conta')
                    window.Refresh()
                try:
                    while True:
                        window['output'].print(linha_ret)
                        d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                        d(resourceId="com.instagram.android:id/action_bar_title_chevron").click(timeout=30)
                        d.xpath('/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout[2]/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.ListView/android.widget.LinearLayout[last()]/android.widget.FrameLayout/android.widget.ImageView').click(timeout=30)
                        d(text="Criar nova conta").click(timeout=20)
                        lista_user = random.choices(range(0, 9), k=2)
                        lista_letras = random.choices(letras, k=2)
                        nomea = fake.first_name_male().replace(" ", "")
                        nome = unicodedata.normalize('NFKD', nomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        sobrenomea = fake.last_name().replace(" ", "").lower()
                        sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        nome_completo = nome + ' ' + sobrenome
                        nome_completo_s = nome + sobrenome
                        numeros_concatenados = ''.join(str(numero)
                                                    for numero in lista_user)
                        user_completo1 = nome_completo_s + '' + \
                            str(numeros_concatenados) + ''.join(lista_letras)
                        user_completo = random.randint(1, len(user_completo1))
                        string_with_dot = user_completo1[:user_completo] + \
                            '_' + user_completo1[user_completo:]
                        user_completo_antigo = string_with_dot.lower()
                        escolha = random.choice(["_", "."])
                        user_completo = nome + escolha + sobrenome + \
                            str(numeros_concatenados) + ''.join(lista_letras)
                        print(user_completo)
                        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] User: {user_completo}')
                        window.Refresh()
                        d(text="Escolha um nome de usuário").wait(timeout=30)
                        escrever_devagar(d(className="android.widget.EditText"), user_completo, delay=0.05)
                        while True:
                            if d(textContains='não está disponível.'):
                                d(resourceId='com.instagram.android:id/username_suggestion_text').click()
                            elif d(resourceId="com.instagram.android:id/username_valid_icon"):
                                break
                        d(text="Avançar", enabled=True).click()
                        d(text="Crie uma senha").wait(timeout=20)
                        senha = gerar_senha(12)
                        escrever_devagar(d(className="android.widget.EditText"), senha, delay=0.05)
                        time.sleep(0.5)
                        d(text="Avançar", enabled=True).click()
                        d(text='Concluir o cadastro').click(timeout=20)
                        if d(text='Tente novamente mais tarde').wait(timeout=5):
                            conteudo = config['vpn']
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                            window.Refresh()
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception("Restrição")
                        d(text='Pular').wait(timeout=30)
                        time.sleep(5)
                        if d(text="Pular"):
                            print("Conta criada")
                            try:
                                window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                    text_color=('lime'))
                                window.Refresh()
                                seguido = False
                                contagem += 1
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")
                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                            "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                            conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                            "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                            conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                window['total'].update(num_rows)
                                random_number = random.random()

                                # Definir a chance desejada (10%)
                                chance = 0.2

                                # Verificar se o número aleatório está abaixo da chance
                                if random_number < chance and not user_mysql == "wn3":
                                    scope = ["https://spreadsheets.google.com/feeds",
                                            "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                        funcionamento, scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                    sheet_name = 'relatorio_geral'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                            conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)
                            except Exception as e:
                                print(e)
                                pass
                            try:
                                d(text="Pular").click()
                                d(text="Seguir amigos").wait(timeout=30)
                                d(text="Pular").click(timeout=30)
                                d(text="Adicionar foto do perfil").wait(timeout=30)
                                d(text="Pular").click(timeout=30)
                                d(text="Convide amigos para seguirem você").wait(timeout=30)
                                d(text="Pular").click(timeout=30)
                                d(text="Encontrar pessoas").wait(timeout=30)
                                d.xpath('//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click(timeout=10)
                            except:
                                #package_name = "com.lbe.parallel.intl"
                                package_name = "com.lbe.parallel.intl"
                                d.app_stop(package_name)
                                #clear_command = f"adb shell pm clear {package_name}"
                                #subprocess.run(clear_command.split(), capture_output=True, text=True)
                                try:
                                    d.app_stop("com.lbe.parallel.intl.arm32")
                                except: pass
                                try:
                                    d.app_stop("com.lbe.parallel.intl.arm64")
                                except: pass
                                d.app_start(package_name)
                                while True:
                                    if d(text="Ir para o app"):
                                        d(text="Ir para o app").click()
                                    elif d(text="Adicionar Apps"):
                                        d(text="Instagram").click(timeout=10)
                                    elif d(text="Instagram(1)"):
                                        d(text="Instagram(1)").click(timeout=30)
                                    else: break
                            #d(text="Sincronize seus contatos para encontrar seus amigos").wait(timeout=30)
                            #d(text="Pular").click(timeout=30)
                            
                            #d(text="Encontrar pessoas").wait(timeout=30)
                            #d.xpath('//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click(timeout=10)
                            while True:
                                time.sleep(5)
                                if d(text="Ir para o app"):
                                    d(text="Ir para o app").click()
                                elif d(text="Adicionar Apps"):
                                    d(text="Instagram").click(timeout=10)
                                elif d(text="Instagram(1)"):
                                    d(text="Instagram(1)").click(timeout=30)
                                else: break
                            try:
                                d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                            except:
                                d(textContains="Permitir todos os cookies").click()
                                d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                except Exception as e:
                    print(e)
                    if not str(e) == '':
                        traceback.print_exc()
                    if not e == 'skip' or not e == 'Manutenção.':
                        try:
                            d.screenshot(
                                f'./erros/{datetime.now().strftime("%H_%M_%S")}.png')
                        except Exception as e:
                            print(e)
                            pass

            except Exception as e:
                print(e)
                if not str(e) == '':
                    traceback.print_exc()
                if not e == 'skip' or not e == 'Manutenção.':
                    try:
                        d.screenshot(
                            f'./erros/{datetime.now().strftime("%H_%M_%S")}.png')
                    except Exception as e:
                        print(e)
                        pass
        except Exception as e:
            print(e)
            if not str(e) == '':
                traceback.print_exc()
            if not e == 'skip' or not e == 'Manutenção.':
                try:
                    d.screenshot(
                        f'./erros/{datetime.now().strftime("%H_%M_%S")}.png')
                except Exception as e:
                    print(e)
                    pass




def creator_CLONER_EMAIL():
    import traceback
    import random
    global gerar_senha
    SPREADSHEET_ID = config['spreadsheet']
    conteudo = config['vpn']
    #def gerar_senha(tamanho=12):
    #    import random
    #    if tamanho < 6:
    #        raise ValueError("A senha deve ter pelo menos 6 caracteres.")
#
    #    # Define uma lista de letras maiúsculas e minúsculas
    #    letras_maiusculas = [random.choice(
    #        string.ascii_uppercase) for _ in range(tamanho // 2)]
    #    letras_minusculas = [random.choice(
    #        string.ascii_lowercase) for _ in range(tamanho // 2)]
#
    #    # Intercale as letras maiúsculas e minúsculas
    #    senha = ''.join(''.join(pair)
    #                    for pair in zip(letras_maiusculas, letras_minusculas))
#
    #    # Adiciona caracteres especiais, números e @
    #    caracteres_permitidos = string.ascii_letters + string.digits + string.punctuation
    #    caracteres_permitidos = caracteres_permitidos.replace(
    #        "~", "")  # Remove ~ e outros acentos
#
    #    senha += ''.join(random.choice(caracteres_permitidos)
    #                    for _ in range(tamanho - len(senha) - 3))
    #    # Adiciona pelo menos uma letra maiúscula
    #    senha += random.choice(string.ascii_uppercase)
    #    senha += random.choice(string.digits)  # Adiciona pelo menos um número
    #    senha += "@"
#
    #    # Mistura os caracteres
    #    senha = ''.join(random.sample(senha, len(senha)))
#
    #    return senha
    senha = gerar_senha(12)
    maquina = config['maquina']
    tentativa = False
    seguido = False
    regiao_vpn = 'Sem dados'
    app = 'Normal'
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    # Código que gera a saída
    import os
    import time
    import requests
    try:
        from PIL import Image
        import cv2
        import numpy as np
        import tempfile
        import random
        import os
        import requests
        from io import BytesIO
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(f'pip install pillow opencv-python-headless numpy',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(['deactivate'], shell=True)
        from PIL import Image
        import cv2
        import numpy as np
        import tempfile
        import random
        import os
        import requests
        from io import BytesIO
    import hashlib
    import subprocess

    # verifica se o arquivo existe na pasta do bot

    try:
        from rich.console import Console
    except ModuleNotFoundError:
        import subprocess
        import sys

        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['pip', 'install', '-r', 'requirements.txt'])
        subprocess.run(['deactivate'], shell=True)
        from rich.console import Console
    import os
    import time
    try:
        import uiautomator2 as u2
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'uiautomator2==2.16.25'])
        subprocess.run(['deactivate'], shell=True)
        subprocess.run(['pip', 'install', '--upgrade', 'requests'])
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        import requests
        time.sleep(10)
        import uiautomator2 as u2
    d = u2.connect(f'{porta}')
    import requests
    import hashlib
    import subprocess
    from colorama import init, Fore, Back, Style
    from faker import Faker
    # teste
    init(autoreset=True)
    console = Console()
    from termcolor import colored

    from rich.console import Console
    from rich.panel import Panel
    from rich.text import Text
    from rich.rule import Rule
    from PIL import Image
    import numpy as np
    import time
    import os
    import tempfile
    import subprocess
    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random
    from datetime import datetime
    import string
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import NoSuchElementException
    from mailtm import Email
    import re
    import logging

    logger = logging.getLogger(__name__)

    handler = logging.FileHandler('log.txt')
    handler.setLevel(logging.ERROR)

    logger.addHandler(handler)

    # RANGE_NAME = 'contas!A:D'
    #
    # SCOPES = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

    def vpn_avast():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Avast', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop("com.avast.android.vpn")
            d.app_start("com.avast.android.vpn", ".app.wizard.WizardActivity")
            time.sleep(10)
        except Exception as e:
            print(e)
        abc = False

    def nenhuma_vpn():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.facebook.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        time.sleep(10)

    def vpn_hotspotshield():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HotspotShield',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('hotspotshield.android.vpn')
            d.app_start('hotspotshield.android.vpn')
        except Exception as e:
            print(e)
        d(resourceId='hotspotshield.android.vpn:id/tryAgainButton').click()
        time.sleep(5)
        d(resourceId='hotspotshield.android.vpn:id/btnVpnConnect').click()

        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_pia():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da PiaVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.privateinternetaccess.android')
            d.app_start('com.privateinternetaccess.android')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()
        time.sleep(3)
        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()

        abc = False

    def vpn_express():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da ExpressVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.expressvpn.vpn')
            d.app_start('com.expressvpn.vpn')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.expressvpn.vpn:id/obiButton').click()
        time.sleep(3)
        d(resourceId='com.expressvpn.vpn:id/obiButton').click()

        abc = False

    def vpn_nord():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da NordVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.nordvpn.android')
            time.sleep(5)
            d.app_start('com.nordvpn.android', use_monkey=True)
        except:
            pass
        time.sleep(10)
        time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_surf():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('com.surfshark.vpnclient.android')
            d.app_start('com.surfshark.vpnclient.android')
        except:
            pass
        time.sleep(15)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_better():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da BetterNet', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        try:
            d.app_stop('com.freevpnintouch')
            d.app_start('com.freevpnintouch')
        except:
            pass
        time.sleep(10)
        dialog = d(resourceId='com.freevpnintouch:id/dialogCtaPositive')
        connect = d(
            resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
        if dialog.exists:
            d(resourceId='com.freevpnintouch:id/dialogCtaPositive').click()
            time.sleep(3)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            # time.sleep(5)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
        while connect == 'CONNECT':
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            time.sleep(4)
            connect = d(
                resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            # WebDriverWait(driver, 20).until(
            # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        ip = '127.0.0.1:' + porta

        output = subprocess.check_output(
            ['adb', '-s', ip, 'shell', 'ifconfig'])

        # Verifica se a conexão VPN está ativa
        if not "tun0" in str(output):
            window['output'].print("Não conectado na BetterNet.")
            window.Refresh()
            try:
                connect = d(
                    resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
                d.app_stop('com.freevpnintouch')
                d.app_start('com.freevpnintouch')
                while connect == 'CONNECT':
                    d(resourceId='com.freevpnintouch:id/buttonConnect').click()
                    time.sleep(4)
                    connect = d(
                        resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            except:
                pass
        abc = False

    def vpn_cyberghost():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da CyberGhost', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('de.mobileconcepts.cyberghost')
            d.app_start('de.mobileconcepts.cyberghost')
        except:
            pass
        # time.sleep(3)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        rate = d(resourceId='de.mobileconcepts.cyberghost:id/rate_me_text')
        if rate.exists:
            d(resourceId='android:id/button2').click()
        time.sleep(2)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        abc = False

    def vpn_tunnelbear():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.tunnelbear.android')
            d.app_start("com.tunnelbear.android")
            while True:
                output = subprocess.check_output(
                    ['adb', '-s', porta, 'shell', 'ifconfig'])
                # print(str(output))
                if "tun0" in str(output):
                    print('Conectada')
                    break
                elif not "tun0" in str(output):
                    print('Reconectando')
                    try:
                        d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                        time.sleep(10)
                    except:
                        pass
        except Exception as e:
            print(e)
            pass

    def vpn_avg():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da AVG', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.avg.android.vpn')
            d.app_start("com.avg.android.vpn",
                        "com.avast.android.vpn.app.wizard.WizardActivity")
            regiao_vpn = d(
                resourceId='com.avg.android.vpn:id/location_title').get_text()

        except Exception as e:
            print(e)
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #               stderr=subprocess.DEVNULL, check=True, shell=True)

        time.sleep(30)

    def vpn_windscribe():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Windscribe', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)
            d.app_stop("com.windscribe.vpn")
            d.app_start("com.windscribe.vpn")
        except:
            pass
        d(resourceId='com.windscribe.vpn:id/on_off_button').click()
        time.sleep(10)
        primeiro = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_name').get_text()
        segundo = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_nick_name').get_text()
        regiao_vpn = primeiro + ' ' + segundo

    def vpn_hma():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HMA', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)

            d.app_stop("com.hidemyass.hidemyassprovpn")
            time.sleep(3)
            d.app_start('com.hidemyass.hidemyassprovpn',
                        'com.avast.android.vpn.activity.HmaOnboardingActivity')
        except:
            pass
        time.sleep(10)
    def gerar_senha(tamanho=12):
        if tamanho < 6:
            raise ValueError("A senha deve ter pelo menos 6 caracteres.")

        # Define uma lista de letras maiúsculas e minúsculas
        letras_maiusculas = [random.choice(
            string.ascii_uppercase) for _ in range(tamanho // 2)]
        letras_minusculas = [random.choice(
            string.ascii_lowercase) for _ in range(tamanho // 2)]

        # Intercale as letras maiúsculas e minúsculas
        senha = ''.join(''.join(pair)
                        for pair in zip(letras_maiusculas, letras_minusculas))

        # Adiciona caracteres especiais, números e @
        caracteres_permitidos = string.ascii_letters + string.digits + string.punctuation
        caracteres_permitidos = caracteres_permitidos.replace(
            "~", "")  # Remove ~ e outros acentos

        senha += ''.join(random.choice(caracteres_permitidos)
                        for _ in range(tamanho - len(senha) - 3))
        # Adiciona pelo menos uma letra maiúscula
        senha += random.choice(string.ascii_uppercase)
        senha += random.choice(string.digits)  # Adiciona pelo menos um número
        senha += "@"

        # Mistura os caracteres
        senha = ''.join(random.sample(senha, len(senha)))

        return senha

    def escrever_devagar(element, text, delay=0.05, chunk_size=3):
        element.clear_text()
        current_text = ""
        for i in range(0, len(text), chunk_size):
            current_text += text[i:i+chunk_size]
            element.set_text(current_text)
            time.sleep(delay)

    options = Options()
    prefs = {"profile.managed_default_content_settings.images": 2}
    options.page_load_strategy = 'none'
    options.add_experimental_option("prefs", prefs)

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    window.Refresh()

    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global transition_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass
    try:
        subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
    except Exception as e:
        pass

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Efetuando troca de IP.')
    window.Refresh()
    try:
        conteudo = config['vpn']
        if conteudo == "AVG":
            vpn_avg()
        elif conteudo == "SurfShark":
            vpn_surf()
        elif conteudo == "Nenhuma":
            nenhuma_vpn()
        elif conteudo == "Avast":
            vpn_avast()
        elif conteudo == "ExpressVPN":
            vpn_express()

        elif conteudo == "PiaVPN":
            vpn_pia()
        elif conteudo == "TunnelBear":
            vpn_tunnelbear()
        elif conteudo == "BetterNet":
            vpn_better()
        elif conteudo == "CyberGhost":
            vpn_cyberghost()
        elif conteudo == "NordVPN":
            vpn_nord()
        elif conteudo == "HotspotShield":
            vpn_hotspotshield()
        elif conteudo == "WindscribeVPN":
            vpn_windscribe()
        elif conteudo == "HmaVPN":
            vpn_hma()
        else:
            window['output'].print(
                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
            window.Refresh()

    except Exception as e:
        print(e)
        pass

    window.Refresh()
    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando sistema inicializar.')
    window.Refresh()

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.\n')

    d.implicitly_wait(30.0)
    d.set_fastinput_ime(True)
    if not os.path.exists('./erros'):
        os.makedirs('./erros')
    codigo_não_recebido_seguidos = 0
    while parar is False:
        senha = gerar_senha(12)
        if parar is True:
            print('Parando Thread')
            break
        window['output'].print(linha_ret)
        window.Refresh()
        try:
            

            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Clonando Instagram')
            window.Refresh()
            package_name = "com.lbe.parallel.intl"
            d.app_clear(package_name)
            #clear_command = f"adb shell pm clear {package_name}"
            #subprocess.run(clear_command.split(), capture_output=True, text=True)
            try:
                clear_command = f"adb shell pm clear com.lbe.parallel.intl.arm32"
                subprocess.run(clear_command.split(), capture_output=True, text=True)
            except: pass
            try:
                clear_command = f"adb shell pm clear com.lbe.parallel.intl.arm64"
                subprocess.run(clear_command.split(), capture_output=True, text=True)
            except: pass
            permissions = [
                "android.permission.CALL_PHONE",
                "android.permission.READ_EXTERNAL_STORAGE",
                "android.permission.WRITE_EXTERNAL_STORAGE",
                "android.permission.ACCESS_FINE_LOCATION",
                "android.permission.ACCESS_COARSE_LOCATION",
                "android.permission.READ_CONTACTS"
            ]
#
#
            # Conceder cada permissão
            for permission in permissions:
                command = f"adb -s {porta} shell pm grant {package_name} {permission}"
                result = subprocess.run(command.split(), capture_output=True, text=True)
                if result.returncode == 0:
                    pass
                    #print(f"Permissão '{permission}' concedida para '{package_name}'.")
                else:
                    print(f"Erro ao conceder permissão '{permission}': {result.stderr}")
            d.app_start(package_name)
            d(text="Agree and continue").click(timeout=15)
            d(text='CONTINUAR').click(timeout=20)
            try:
                d(text='COMEÇAR').click(timeout=15)
            except:
                image_url = "https://www.dropbox.com/scl/fi/qag56h0ps1yaa8sfh4091/Captura-de-tela-2024-06-16-184155.png?rlkey=mhh2dyb1gf7eaw8uqzhbh0wmo&st=x0ngbkzk&dl=1"

                # Baixe a imagem de referência
                response = requests.get(image_url)
                template = Image.open(BytesIO(response.content))
                template_path = os.path.join(tempfile.gettempdir(), f"consent.png")
                template.save(template_path)

                # Converta a imagem de referência para o formato necessário
                template = cv2.cvtColor(np.array(template), cv2.COLOR_RGB2BGR)

                # Conecte ao dispositivo

                # Capture a tela
                screenshot = d.screenshot(format='pillow')
                screenshot_path = os.path.join(tempfile.gettempdir(), f"screen{random.randint(000,999)}.png")
                screenshot.save(screenshot_path)
                print(screenshot_path)

                # Carregue a imagem da tela e a imagem de referência
                screenshot = cv2.cvtColor(np.array(screenshot), cv2.COLOR_RGB2BGR)

                # Realize a correspondência de templates usando OpenCV
                result = cv2.matchTemplate(screenshot, template, cv2.TM_CCOEFF_NORMED)

                # Defina um limite para considerar uma correspondência válida
                threshold = 0.0
                loc = np.where(result >= threshold)

                # Encontre o ponto (x, y) do centro da correspondência
                if len(loc[0]) > 0:
                    min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)
                    top_left = max_loc
                    h, w, _ = template.shape
                    center_x = top_left[0] + w // 2
                    center_y = top_left[1] + h // 2
                    # Clique na posição calculada
                    d.click(center_x, center_y)
                    print(f"Imagem encontrada e clicada na posição ({center_x}, {center_y}).")
                else:
                    print("Imagem de referência não encontrada na tela.")
                d(text='COMEÇAR').click(timeout=20)
            d(resourceId="com.lbe.parallel.intl:id/clone_add").click(timeout=25)
            #d(text="Adicionar Apps").wait(timeout=30)
            d(text="ACEITAR").click()
            try: d(text="Instagram").click(timeout=10)
            except: 
                d(text="Adicionar Apps").click(timeout=10)
                #d(text="Instagram").click(timeout=10)
                d(resourceId="com.lbe.parallel.intl:id/clone_add").click(timeout=25)
            time.sleep(2)

            #from PIL import Image
            #import numpy as np
            #import time
            #import random
            #import os
            #import tempfile
            #d.app_clear("com.ludashi.dualspaceprox")
            #package_name = "com.ludashi.dualspaceprox"
            #permissions = [
            #    "android.permission.CALL_PHONE",
            #    "android.permission.READ_EXTERNAL_STORAGE",
            #    "android.permission.WRITE_EXTERNAL_STORAGE",
            #    "android.permission.ACCESS_FINE_LOCATION",
            #    "android.permission.ACCESS_COARSE_LOCATION",
            #    "android.permission.READ_CONTACTS"
            #]
            ## Conceder cada permissão
            #for permission in permissions:
            #    command = f"adb -s {porta} shell pm grant {package_name} {permission}"
            #    result = subprocess.run(command.split(), capture_output=True, text=True)
            #    if result.returncode == 0:
            #        pass
            #        #print(f"Permissão '{permission}' concedida para '{package_name}'.")
            #    else:
            #        print(f"Erro ao conceder permissão '{permission}': {result.stderr}")
            #d.app_start("com.ludashi.dualspaceprox")
            #d(textContains="INICIAR").click(timeout=30)
            #time.sleep(2)
            #d(resourceId="com.ludashi.dualspaceprox:id/search").click(timeout=30)
            #time.sleep(2)
            #try:
            #    d(resourceId="com.ludashi.dualspaceprox:id/input_edit").set_text("Instagra")
            #except:
            #    d(resourceId="com.ludashi.dualspaceprox:id/search").click(timeout=30)
            #    time.sleep(3)
            #    d(resourceId="com.ludashi.dualspaceprox:id/input_edit").set_text("Instagra")
            #    time.sleep(1)
#
            #d(text="Instagram").click(timeout=20)
            #d.press("back")
            #d.press("back")
            #d(resourceId="com.ludashi.dualspaceprox:id/btn_clone").click(timeout=20)
            #d(text="Instagram(1)").click(timeout=30)
            #d(text="Instagram(1)").click(timeout=30)
            #time.sleep(3)
#
            #screenshot_path = os.path.join(tempfile.gettempdir(), f"screen{random.randint(000,999)}.png")
            #d.screenshot(screenshot_path)
#
            ## Esperar um pouco para garantir que a captura de tela seja salva
            #time.sleep(2)
#
            ## Abrir a imagem da captura de tela
            #img = Image.open(screenshot_path)
            #img_array = np.array(img)
#
            ## Definir a cor que você está procurando (RGB)
            #target_color = (31, 109, 238)  # Exemplo: vermelho
#
            ## Encontrar o último pixel com a cor alvo
            #def find_last_color_pixel(image_array, target_color):
            #    # Converte a imagem para o espaço de cores RGB
            #    img_rgb = img_array[:, :, :3]
#
            #    # Calcula a diferença entre cada pixel e a cor alvo
            #    diff = np.abs(img_rgb - np.array(target_color))
#
            #    # Soma as diferenças para cada canal RGB
            #    total_diff = np.sum(diff, axis=-1)
#
            #    # Encontra todos os índices onde a diferença é zero (corresponde à cor alvo)
            #    indices = np.argwhere(total_diff == 0)
#
            #    # Se não houver índices encontrados, retorna None
            #    if len(indices) == 0:
            #        return None, None
#
            #    # Encontra o último índice onde a diferença é zero
            #    last_index = indices[-1]
#
            #    # Obtém as coordenadas do último pixel com a cor alvo
            #    y, x = last_index
#
            #    return x, y
#
            #x, y = find_last_color_pixel(img_array, target_color)
#
            #if x is not None and y is not None:
            #    print(f"Último pixel encontrado na posição: ({x}, {y})")
#
            #    # Converter x e y para inteiros
            #    x = int(x)
            #    y = int(y)
#
            #    # Clicar no pixel encontrado
            #    d.click(x, y)
            #else:
            #    print("Cor não encontrada na imagem.")
#
            ## Remover a captura de tela temporária no computador
            #os.remove(screenshot_path)

            while True:
                if d(text="Tentar novamente"):
                    d(text="Tentar novamente").click()
                elif d(text="Ir para o app"):
                    d(text="Ir para o app").click()
                elif d(text="ENTENDI"):
                    d(text="ENTENDI").click()
                elif d(text="Termos e Política de Privacidade"):
                    d.xpath('//android.widget.Button[@content-desc="Continuar"]').click()
                    time.sleep(5)
                    if not d(text="Criar nova conta"):
                        d.press("back")
                        d(text="Instagram(1)").click(timeout=30)

                    
                    
                elif d(text="Criar nova conta"):
                    d(text="Criar nova conta").click()
                    break
                elif d(text="Adicionar Apps"):
                    d(text="Instagram").click(timeout=10)
                    time.sleep(2)
                elif d(text="Instagram(1)"):
                    try:    
                        d(textContains="Instagram").click(timeout=10)
                    except Exception as e:
                        print(e)
                    time.sleep(2)
                elif d(text="Recarregar"):
                    d(text="Recarregar").click()
                    time.sleep(3)
                    if d(text="Recarregar"):
                        conteudo = config['vpn']
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Pagina Estática.')
                        window.Refresh()
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception("IP Bloqueado")
            d(text='Cadastrar-se com o email').click(timeout=30)
            cod_chegou = False
            email_escolhido = random.choice(["MailTM", "1SecMail"])
            if email_escolhido == "MailTM":
                window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] MailTM sendo utilizado')
                window.Refresh()
                base_url = "https://api.mail.tm"
                def get_domain():
                    url = f"{base_url}/domains"
                    response = requests.get(url)
                    if response.status_code == 200:
                        domains = response.json()['hydra:member']
                        return random.choice(domains)['domain']
                    else:
                        print("Erro ao obter domínios:", response.json())
                        return None

                def generate_random_email(domain):
                    username = ''.join(random.choices(string.ascii_lowercase + string.digits, k=10))
                    return f"{username}@{domain}"

                def create_account(email, password):
                    url = f"{base_url}/accounts"
                    data = {
                        "address": email,
                        "password": password
                    }
                    response = requests.post(url, json=data)
                    if response.status_code == 201:
                        print("Conta criada com sucesso!")
                        return response.json()
                    else:
                        print("Erro ao criar conta:", response.json())
                        return None

                def get_token(email, password):
                    url = f"{base_url}/token"
                    data = {
                        "address": email,
                        "password": password
                    }
                    response = requests.post(url, json=data)
                    if response.status_code == 200:
                        print("Token obtido com sucesso!")
                        return response.json()
                    else:
                        print("Erro ao obter token:", response.json())
                        return None

                def check_messages(token):
                    global codigo
                    tentativa = 0
                    tentativa2 = 0
                    while True:
                        time.sleep(2)
                        if tentativa == 10:
                            d(text="Não recebi o código").click()
                            d(text="Reenviar código de confirmação").click()
                            tentativa = 11
                        else:
                            tentativa += 1
                        if tentativa2 == 20:
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido')
                            window.Refresh()
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception("Código não recebido")
                        if d(text="Cadastrar-se com o número de celular"):
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Restrição')
                            window.Refresh()
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception("Restrição")
                        url = f"{base_url}/messages"
                        headers = {
                            "Authorization": f"Bearer {token}"
                        }
                        response = requests.get(url, headers=headers)
                        if response.status_code == 200:
                            messages = response.json()['hydra:member']
                            
                            time.sleep(5)
                            for message in messages:
                                
                                if "Instagram" in message['subject']:
                                    codigo = re.sub('[^0-9]', '', message['subject'])[:6]
                                    print(codigo)
                                    escrever_devagar(d(className="android.widget.EditText"), codigo, delay=0.05)
                                    cod_chegou = True
                                    raise Exception("Código recebido")
                        else:
                            print("Erro ao verificar mensagens:", response.json())

                domain = get_domain()
                if domain:
                    email = generate_random_email(domain)
                    password = ''.join(random.choices(string.ascii_letters + string.digits, k=12))
                    print(f"Criando conta com e-mail: {email} e senha: {password}")
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Email: {email}')
                    window.Refresh()
                    escrever_devagar(d(className="android.widget.EditText"), email, delay=0.05)
                    #d(className="android.widget.EditText").set_text(email)
                    d(text="Avançar").click(timeout=30)
                    time.sleep(5)
                    account = create_account(email, password)
                    if account:
                        token_data = get_token(email, password)
                        if token_data:
                            token = token_data['token']
                            try:
                                check_messages(token)
                            except Exception as e:
                                pass
            elif email_escolhido == "1SecMail":
                window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] 1SecMail sendo utilizado')
                window.Refresh()
                def generate_email():
                    response = requests.get("https://www.1secmail.com/api/v1/?action=genRandomMailbox&count=1")
                    email = response.json()[0]
                    login, domain = email.split('@')
                    return login, domain, email

                # Função para verificar emails
                def check_inbox(login, domain):
                    response = requests.get(f"https://www.1secmail.com/api/v1/?action=getMessages&login={login}&domain={domain}")
                    return response.json()

                # Função para obter o conteúdo do email
                def read_email(login, domain, message_id):
                    response = requests.get(f"https://www.1secmail.com/api/v1/?action=readMessage&login={login}&domain={domain}&id={message_id}")
                    return response.json()

                # Função principal
                login, domain, email = generate_email()
                print(f"Email temporário gerado: {email}")
                window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Email: {email}')
                window.Refresh()
                escrever_devagar(d(className="android.widget.EditText"), email, delay=0.05)
                d(className="android.widget.EditText").set_text(email)
                d(text="Avançar").click(timeout=30)
                # Aguardar por emails (você pode ajustar o tempo e o número de verificações conforme necessário)
                cod_chegou = False
                tentativa = 0
                tentativa2 = 0
                while True:
                    time.sleep(3)
                    if tentativa == 10:
                        d(text="Não recebi o código").click()
                        d(text="Reenviar código de confirmação").click()
                        tentativa = 11
                    else:
                        tentativa += 1
                    if tentativa2 == 20:
                        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido')
                        window.Refresh()
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception("Código não recebido")
                    else:
                        tentativa2 += 1
                    messages = check_inbox(login, domain)
                    if cod_chegou is True: break
                    for message in messages:
                        if 'Instagram' in message['subject']:
                            print(f"Email encontrado: {message['subject']}")
                            email_content = read_email(login, domain, message['id'])
                            
                            # Extrair os seis primeiros algarismos do conteúdo
                            digits = message['subject']
                            if digits:
                                codigo = re.sub('[^0-9]', '', digits)[:6]

                                print(f"Seis primeiros algarismos: {codigo}")
                                escrever_devagar(d(className="android.widget.EditText"), codigo, delay=0.05)
                                cod_chegou = True
                                break
                                
                            else:
                                print("Nenhum algarismo encontrado no conteúdo do email.")
                            

            
            #d(className="android.widget.EditText").set_text(codigo)
            d(text="Avançar").click(timeout=30)
            d(text='Crie uma senha').wait(timeout=30)
            senha = gerar_senha(12)
            escrever_devagar(d(className="android.widget.EditText"), senha, delay=0.05)
            #escrever_devagar(d(className="android.widget.EditText"), senha, delay=0.05)
            d(text="Avançar").click(timeout=30)
            d(text="Agora não").click(timeout=30)
            try:
                if d(text="CANCELAR").wait(timeout=10):
                    d(text="CANCELAR").click()
            except:
                pass

            d(text="Avançar").click(timeout=30)
            time.sleep(0.5)
            d(text="Avançar").click(timeout=30)
            d(text="Qual é a sua idade?").wait(timeout=30)
            idade_aleatorio = str(random.randint(18, 50))
            escrever_devagar(d(className="android.widget.EditText"), idade_aleatorio, delay=0.05)
            #d(className="android.widget.EditText").set_text(random.randint(18, 50))
            d(text="Avançar").click(timeout=30)
            d(text="OK").click(timeout=30)
            d(text="Qual é o seu nome?").wait(timeout=30)

            lista_user = random.choices(range(0, 9), k=2)
            lista_letras = random.choices(letras, k=2)
            nomea = fake.first_name_male().replace(" ", "")
            nome = unicodedata.normalize('NFKD', nomea).encode(
                'ASCII', 'ignore').decode('ASCII')
            sobrenomea = fake.last_name().replace(" ", "").lower()
            sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                'ASCII', 'ignore').decode('ASCII')
            nome_completo = nome + ' ' + sobrenome
            nome_completo_s = nome + sobrenome
            numeros_concatenados = ''.join(str(numero)
                                        for numero in lista_user)
            user_completo1 = nome_completo_s + '' + \
                str(numeros_concatenados) + ''.join(lista_letras)
            user_completo = random.randint(1, len(user_completo1))
            string_with_dot = user_completo1[:user_completo] + \
                '_' + user_completo1[user_completo:]
            user_completo_antigo = string_with_dot.lower()
            escolha = random.choice(["_", "."])
            user_completo = nome + escolha + sobrenome + \
                str(numeros_concatenados) + ''.join(lista_letras)
            print(user_completo)


            #escrever_devagar(d(className="android.widget.EditText"), nome_completo, delay=0.05)
            d(className="android.widget.EditText").set_text(nome_completo)
            d(text="Avançar").click(timeout=30)
            d(text="Crie um nome de usuário").wait(timeout=30)
            #escrever_devagar(d(className="android.widget.EditText"), user_completo, delay=0.05)
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] User: {user_completo}')
            window.Refresh()
            escrever_devagar(d(className="android.widget.EditText"), user_completo, delay=0.05)

            time.sleep(5)
            d(text="Avançar").click(timeout=30)
            d(text="Concordo").click(timeout=30)

            for i in range(20):
                time.sleep(2)
                if d(resourceId="com.instagram.android:id/tab_avatar"):
                    d(resourceId="com.instagram.android:id/tab_avatar").click()
                    time.sleep(5)
                elif d(text="Pular") or d(resourceId="com.instagram.android:id/tab_avatar"):
                    print("Conta criada")
                    try:
                        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                               text_color=('lime'))
                        window.Refresh()
                        seguido = False
                        contagem += 1
                        window['criadas'].update(contagem)
                        window.Refresh()
                        now = datetime.now()
                        now_brasilia = tz.localize(now)
                        timestamp = now_brasilia.strftime(
                            "%d/%m/%Y %H:%M:%S")
                        try:
                            scope = ["https://spreadsheets.google.com/feeds",
                                     "https://www.googleapis.com/auth/drive"]
                            creds = ServiceAccountCredentials.from_json_keyfile_name(
                                'credentials.json', scope)
                            client = gspread.authorize(creds)

                            spreadsheet_id = config['spreadsheet']
                            sheet_name = 'contas'
                            # Insert user, password, and timestamp into first empty row
                            sheet = client.open_by_key(
                                spreadsheet_id).worksheet(sheet_name)
                            values = sheet.col_values(1)
                            last_row = len(values)
                            values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                      conteudo + ' - ' + app, regiao_vpn, user_mysql]
                            cell_list = sheet.range(
                                f'A{last_row + 1}:G{last_row + 1}')
                            for i, val in enumerate(values):
                                cell_list[i].value = val
                            sheet.update_cells(cell_list)

                            rows = sheet.get_all_values()

                            # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                            regex = re.compile(r'\S+\s\S+')

                            # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                            num_rows = sum(
                                1 for row in rows if regex.match(row[0]))
                        except Exception as e:
                            print(e)
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                            tempo_aleatorio = random.randint(10, 40)
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                            time.sleep(tempo_aleatorio)
                            scope = ["https://spreadsheets.google.com/feeds",
                                     "https://www.googleapis.com/auth/drive"]
                            creds = ServiceAccountCredentials.from_json_keyfile_name(
                                'credentials.json', scope)
                            client = gspread.authorize(creds)

                            spreadsheet_id = config['spreadsheet']
                            sheet_name = 'contas'
                            # Insert user, password, and timestamp into first empty row
                            sheet = client.open_by_key(
                                spreadsheet_id).worksheet(sheet_name)
                            values = sheet.col_values(1)
                            last_row = len(values)
                            values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                      conteudo + ' - ' + app, regiao_vpn, user_mysql]
                            cell_list = sheet.range(
                                f'A{last_row + 1}:G{last_row + 1}')
                            for i, val in enumerate(values):
                                cell_list[i].value = val
                            sheet.update_cells(cell_list)

                            rows = sheet.get_all_values()

                            # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                            regex = re.compile(r'\S+\s\S+')

                            # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                            num_rows = sum(
                                1 for row in rows if regex.match(row[0]))
                        window['total'].update(num_rows)
                        random_number = random.random()

                        # Definir a chance desejada (10%)
                        chance = 0.2

                        # Verificar se o número aleatório está abaixo da chance
                        if random_number < chance and not user_mysql == "wn3":
                            scope = ["https://spreadsheets.google.com/feeds",
                                     "https://www.googleapis.com/auth/drive"]
                            creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                funcionamento, scope)
                            client = gspread.authorize(creds)

                            spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                            sheet_name = 'relatorio_geral'
                            # Insert user, password, and timestamp into first empty row
                            sheet = client.open_by_key(
                                spreadsheet_id).worksheet(sheet_name)
                            values = sheet.col_values(1)
                            last_row = len(values)
                            values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                      conteudo + ' - ' + app, regiao_vpn, user_mysql]
                            cell_list = sheet.range(
                                f'A{last_row + 1}:G{last_row + 1}')
                            for i, val in enumerate(values):
                                cell_list[i].value = val
                            sheet.update_cells(cell_list)
                    except Exception as e:
                        print(e)
                        pass
                    try:
                        raise Exception("Criar por cima")
                        #d(text="Pular").click(timeout=30)
                        #d(textContains="Em seguida, você pode permitir o acesso").wait(timeout=30)
                        #d(text="Pular").click(timeout=30)
                        #d(text="Receba sugestões do Facebook").wait(timeout=30)
                        #d(text="Pular").click(timeout=30)
                        #d(text="Seguir amigos").wait(timeout=30)
                        #d(text="Pular").click(timeout=30)
                        #d(text="Convide amigos para seguirem você").wait(timeout=30)
                        #d(text="Pular").click(timeout=30)
                        #time.sleep(3)
                        #if d(textContains="Siga mais 5"):
                        #    d(text="Avançar").click(timeout=30)
                        #    time.sleep(10)
                        #else:
                        #    d(text="Encontrar pessoas").wait(timeout=30)
                        #    d.xpath('//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click(timeout=10)
                    except:
                        #package_name = "com.lbe.parallel.intl"
                        package_name = "com.lbe.parallel.intl"
                        d.app_stop(package_name)
                        #clear_command = f"adb shell pm clear {package_name}"
                        #subprocess.run(clear_command.split(), capture_output=True, text=True)
                        try:
                            d.app_stop("com.lbe.parallel.intl.arm32")
                        except: pass
                        try:
                            d.app_stop("com.lbe.parallel.intl.arm64")
                        except: pass
                        d.app_start(package_name)
                        while True:
                            if d(text="Ir para o app"):
                                d(text="Ir para o app").click()
                            elif d(text="Adicionar Apps"):
                                try:
                                    d(text="Instagram").click(timeout=10)
                                except:
                                    pass
                            elif d(text="Instagram(1)"):
                                d(text="Instagram(1)").click(timeout=30)
                            elif d(resourceId="com.instagram.android:id/tab_avatar"):
                                break
                    #d(text="Sincronize seus contatos para encontrar seus amigos").wait(timeout=30)
                    #d(text="Pular").click(timeout=30)
                    
                    #d(text="Encontrar pessoas").wait(timeout=30)
                    #d.xpath('//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click(timeout=10)
                    while True:
                        time.sleep(5)
                        if d(text="Ir para o app"):
                            d(text="Ir para o app").click()
                        elif d(text="Adicionar Apps"):
                            try:
                                d(text="Instagram").click(timeout=10)
                            except: pass
                        elif d(text="Instagram(1)"):
                            d(text="Instagram(1)").click(timeout=30)
                        elif d(textContains="Permitir todos os cookies"):
                            d(textContains="Permitir todos os cookies").click()
                        elif d(resourceId="com.instagram.android:id/tab_avatar"):
                            break
                    try:
                        d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                    except:
                        d(textContains="Permitir todos os cookies").click()
                        d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                    #d(resourceId="com.instagram.android:id/netego_carousel_cta").click(timeout=60)
                    #if d(text="Não permitir acesso").wait(timeout=30):
                    #    d(text="Não permitir acesso").click(timeout=60)
                    #seguir_sugeridos = 0
                    #while seguir_sugeridos < 10:
                    #    d(resourceId="com.instagram.android:id/recommended_user_card_follow_button").click(timeout=60)
                    #    d(resourceId="com.instagram.android:id/recommended_user_dismiss_button").click(timeout=60)
                    #    time.sleep(0.5)
                    #    seguir_sugeridos += 1
                    d(text="seguindo").click()
                    seguir_sugeridos = 0
                    while seguir_sugeridos < 10:
                        try:
                            d(text="Seguir").click(timeout=1)
                            seguir_sugeridos += 1
                        except:
                            width, height = d.window_size()
                            start_x = width // 2
                            start_y = height * 3 // 4  # Comece no 75% da altura
                            end_x = width // 2
                            end_y = height // 4  # Termine no 25% da altura

                            # Realize o swipe
                            d.swipe(start_x, start_y, end_x, end_y, duration=0.5)
                            if not d(text="Seguir"):
                                break
                    d(resourceId="com.instagram.android:id/action_bar_button_back").click(timeout=10)
                    try:
                        d(resourceId="com.instagram.android:id/action_bar_title_chevron").click(timeout=10)
                    except: 
                        d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                        d(resourceId="com.instagram.android:id/action_bar_title_chevron").click(timeout=10)
                    d(textContains="Adicionar conta").click(timeout=30)
                    d(text="Criar nova conta").click(timeout=20)
                    window['output'].print(linha_ret)
                    window.Refresh()
                    lista_user = random.choices(range(0, 9), k=2)
                    lista_letras = random.choices(letras, k=2)
                    nomea = fake.first_name_male().replace(" ", "")
                    nome = unicodedata.normalize('NFKD', nomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    sobrenomea = fake.last_name().replace(" ", "").lower()
                    sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    nome_completo = nome + ' ' + sobrenome
                    nome_completo_s = nome + sobrenome
                    numeros_concatenados = ''.join(str(numero)
                                                for numero in lista_user)
                    user_completo1 = nome_completo_s + '' + \
                        str(numeros_concatenados) + ''.join(lista_letras)
                    user_completo = random.randint(1, len(user_completo1))
                    string_with_dot = user_completo1[:user_completo] + \
                        '_' + user_completo1[user_completo:]
                    user_completo_antigo = string_with_dot.lower()
                    escolha = random.choice(["_", "."])
                    user_completo = nome + escolha + sobrenome + \
                        str(numeros_concatenados) + ''.join(lista_letras)
                    print(user_completo)

                    d(text="Escolha um nome de usuário").wait(timeout=30)
                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] User: {user_completo}')
                    window.Refresh()
                    escrever_devagar(d(className="android.widget.EditText"), user_completo, delay=0.05, chunk_size=1)
                    while True:
                        if d(textContains='não está disponível.'):
                            d(resourceId='com.instagram.android:id/username_suggestion_text').click()
                        elif d(resourceId="com.instagram.android:id/username_valid_icon"):
                            break
                    d(text="Avançar", enabled=True).click()
                    d(text="Crie uma senha").wait(timeout=20)
                    senha = gerar_senha(12)
                    escrever_devagar(d(className="android.widget.EditText"), senha, delay=0.05, chunk_size=1)
                    time.sleep(2)
                    d(text="Avançar", enabled=True).click()
                    time.sleep(3)
                    d(text='Concluir o cadastro').click(timeout=20)
                    while True:
                        if (
                            d(text='Tente novamente mais tarde') or 
                            d(textContains="Ocorreu um erro de rede desconhecido") or
                            d(textContains="feedback_required")

                        ):
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Restrição')
                            window.Refresh()
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception("Restrição")
                        
                        elif d(text='Pular'): break
                    time.sleep(5)
                    if d(text="Pular"):
                        print("Conta criada")
                        try:
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                text_color=('lime'))
                            window.Refresh()
                            seguido = False
                            contagem += 1
                            window['criadas'].update(contagem)
                            window.Refresh()
                            now = datetime.now()
                            now_brasilia = tz.localize(now)
                            timestamp = now_brasilia.strftime(
                                "%d/%m/%Y %H:%M:%S")
                            try:
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                        conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            except Exception as e:
                                print(e)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                tempo_aleatorio = random.randint(10, 40)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                time.sleep(tempo_aleatorio)
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                        conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            window['total'].update(num_rows)
                            random_number = random.random()

                            # Definir a chance desejada (10%)
                            chance = 0.2

                            # Verificar se o número aleatório está abaixo da chance
                            if random_number < chance and not user_mysql == "wn3":
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                    funcionamento, scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                sheet_name = 'relatorio_geral'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                        conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)
                        except Exception as e:
                            print(e)
                            pass
                        try:
                            raise Exception("Criar por cima")
                            #d(text="Pular").click(timeout=30)
                            #d(textContains="Em seguida, você pode permitir o acesso").wait(timeout=30)
                            #d(text="Pular").click(timeout=30)
                            #d(text="Receba sugestões do Facebook").wait(timeout=30)
                            #d(text="Pular").click(timeout=30)
                            #d(text="Seguir amigos").wait(timeout=30)
                            #d(text="Pular").click(timeout=30)
                            #d(text="Convide amigos para seguirem você").wait(timeout=30)
                            #d(text="Pular").click(timeout=30)
                            #time.sleep(3)
                            #if d(textContains="Siga mais 5"):
                            #    d(text="Avançar").click(timeout=30)
                            #    time.sleep(10)
                            #else:
                            #    d(text="Encontrar pessoas").wait(timeout=30)
                            #    d.xpath('//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click(timeout=10)
                        except:
                            #package_name = "com.lbe.parallel.intl"
                            package_name = "com.lbe.parallel.intl"
                            d.app_stop(package_name)
                            #clear_command = f"adb shell pm clear {package_name}"
                            #subprocess.run(clear_command.split(), capture_output=True, text=True)
                            try:
                                d.app_stop("com.lbe.parallel.intl.arm32")
                            except: pass
                            try:
                                d.app_stop("com.lbe.parallel.intl.arm64")
                            except: pass
                            d.app_start(package_name)
                            while True:
                                if d(text="Ir para o app"):
                                    d(text="Ir para o app").click()
                                elif d(text="Adicionar Apps"):
                                    try:
                                        d(text="Instagram").click(timeout=10)
                                    except: pass
                                elif d(text="Instagram(1)"):
                                    d(text="Instagram(1)").click(timeout=30)
                                elif d(resourceId="com.instagram.android:id/tab_avatar"):
                                    break
                        #d(text="Sincronize seus contatos para encontrar seus amigos").wait(timeout=30)
                        #d(text="Pular").click(timeout=30)
                        
                        #d(text="Encontrar pessoas").wait(timeout=30)
                        #d.xpath('//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click(timeout=10)
                        while True:
                            time.sleep(5)
                            if d(text="Ir para o app"):
                                d(text="Ir para o app").click()
                            elif d(text="Adicionar Apps"):
                                d(text="Instagram").click(timeout=10)
                            elif d(text="Instagram(1)"):
                                d(text="Instagram(1)").click(timeout=30)
                            else: break
                        try:
                            d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                        except:
                            d(textContains="Permitir todos os cookies").click()
                            d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)

                        break
                elif d(text="RELATAR PROBLEMA"):
                    conteudo = config['vpn']
                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                    window.Refresh()
                    if conteudo == "AVG":
                        vpn_avg()
                    elif conteudo == "SurfShark":
                        vpn_surf()
                    elif conteudo == "Nenhuma":
                        nenhuma_vpn()
                    elif conteudo == "Avast":
                        vpn_avast()
                    elif conteudo == "ExpressVPN":
                        vpn_express()
                    elif conteudo == "PiaVPN":
                        vpn_pia()
                    elif conteudo == "TunnelBear":
                        vpn_tunnelbear()
                    elif conteudo == "BetterNet":
                        vpn_better()
                    elif conteudo == "CyberGhost":
                        vpn_cyberghost()
                    elif conteudo == "NordVPN":
                        vpn_nord()
                    elif conteudo == "HotspotShield":
                        vpn_hotspotshield()
                    elif conteudo == "WindscribeVPN":
                        vpn_windscribe()
                    elif conteudo == "HmaVPN":
                        vpn_hma()
                    else:
                        window['output'].print(
                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                        window.Refresh()
                    raise Exception("Restrição")
                elif d(text="Concordo"):
                    print('Tentando logar')
                    d(text="Concordo")
                    d(text="Já tem uma conta?").click(timeout=25)
                    d(text="ENTRAR").click(timeout=10)
                    d(className="android.widget.EditText", instance=0).set_text(user_completo)
                    d(className="android.widget.EditText", instance=1).set_text(senha)
                    d(text='Entrar').click()
                    if d(text="Agora não").wait(timeout=10):
                        print('Conta criada')
                        d(text="Agora não").click()
                    else:
                        conteudo = config['vpn']
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception("Restrição")
                elif d(text="Fazer uma apelação"):
                    print("SMS")
                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] SMS')
                    conteudo = config['vpn']
                    if conteudo == "AVG":
                        vpn_avg()
                    elif conteudo == "SurfShark":
                        vpn_surf()
                    elif conteudo == "Nenhuma":
                        nenhuma_vpn()
                    elif conteudo == "Avast":
                        vpn_avast()
                    elif conteudo == "ExpressVPN":
                        vpn_express()
                    elif conteudo == "PiaVPN":
                        vpn_pia()
                    elif conteudo == "TunnelBear":
                        vpn_tunnelbear()
                    elif conteudo == "BetterNet":
                        vpn_better()
                    elif conteudo == "CyberGhost":
                        vpn_cyberghost()
                    elif conteudo == "NordVPN":
                        vpn_nord()
                    elif conteudo == "HotspotShield":
                        vpn_hotspotshield()
                    elif conteudo == "WindscribeVPN":
                        vpn_windscribe()
                    elif conteudo == "HmaVPN":
                        vpn_hma()
                    else:
                        window['output'].print(
                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                        window.Refresh()
                    raise Exception("SMS")
            else:
                window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Não foi possivel criar esta conta')
                window.Refresh()
            try:
                while True:
                    window['output'].print(linha_ret)
                    d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                    d(resourceId="com.instagram.android:id/action_bar_title_chevron").click(timeout=30)
                    d.xpath('/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout[2]/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.ListView/android.widget.LinearLayout[last()]/android.widget.FrameLayout/android.widget.ImageView').click(timeout=30)
                    d(text="Criar nova conta").click(timeout=20)
                    lista_user = random.choices(range(0, 9), k=2)
                    lista_letras = random.choices(letras, k=2)
                    nomea = fake.first_name_male().replace(" ", "")
                    nome = unicodedata.normalize('NFKD', nomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    sobrenomea = fake.last_name().replace(" ", "").lower()
                    sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    nome_completo = nome + ' ' + sobrenome
                    nome_completo_s = nome + sobrenome
                    numeros_concatenados = ''.join(str(numero)
                                                for numero in lista_user)
                    user_completo1 = nome_completo_s + '' + \
                        str(numeros_concatenados) + ''.join(lista_letras)
                    user_completo = random.randint(1, len(user_completo1))
                    string_with_dot = user_completo1[:user_completo] + \
                        '_' + user_completo1[user_completo:]
                    user_completo_antigo = string_with_dot.lower()
                    escolha = random.choice(["_", "."])
                    user_completo = nome + escolha + sobrenome + \
                        str(numeros_concatenados) + ''.join(lista_letras)
                    print(user_completo)
                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] User: {user_completo}')
                    window.Refresh()
                    d(text="Escolha um nome de usuário").wait(timeout=30)
                    escrever_devagar(d(className="android.widget.EditText"), user_completo, delay=0.05)
                    while True:
                        if d(textContains='não está disponível.'):
                            d(resourceId='com.instagram.android:id/username_suggestion_text').click()
                        elif d(resourceId="com.instagram.android:id/username_valid_icon"):
                            break
                    d(text="Avançar", enabled=True).click()
                    d(text="Crie uma senha").wait(timeout=20)
                    senha = gerar_senha(12)
                    escrever_devagar(d(className="android.widget.EditText"), senha, delay=0.05)
                    time.sleep(0.5)
                    d(text="Avançar", enabled=True).click()
                    d(text='Concluir o cadastro').click(timeout=20)
                    if d(text='Tente novamente mais tarde').wait(timeout=5):
                        conteudo = config['vpn']
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception("Restrição")
                    d(text='Pular').wait(timeout=30)
                    time.sleep(5)
                    if d(text="Pular"):
                        print("Conta criada")
                        try:
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                text_color=('lime'))
                            window.Refresh()
                            seguido = False
                            contagem += 1
                            window['criadas'].update(contagem)
                            window.Refresh()
                            now = datetime.now()
                            now_brasilia = tz.localize(now)
                            timestamp = now_brasilia.strftime(
                                "%d/%m/%Y %H:%M:%S")
                            try:
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                        conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            except Exception as e:
                                print(e)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                tempo_aleatorio = random.randint(10, 40)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                time.sleep(tempo_aleatorio)
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                        conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            window['total'].update(num_rows)
                            random_number = random.random()

                            # Definir a chance desejada (10%)
                            chance = 0.2

                            # Verificar se o número aleatório está abaixo da chance
                            if random_number < chance and not user_mysql == "wn3":
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                    funcionamento, scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                sheet_name = 'relatorio_geral'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                        conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)
                        except Exception as e:
                            print(e)
                            pass
                        try:
                            d(text="Pular").click()
                            d(text="Seguir amigos").wait(timeout=30)
                            d(text="Pular").click(timeout=30)
                            d(text="Adicionar foto do perfil").wait(timeout=30)
                            d(text="Pular").click(timeout=30)
                            d(text="Convide amigos para seguirem você").wait(timeout=30)
                            d(text="Pular").click(timeout=30)
                            d(text="Encontrar pessoas").wait(timeout=30)
                            d.xpath('//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click(timeout=10)
                        except:
                            #package_name = "com.lbe.parallel.intl"
                            package_name = "com.lbe.parallel.intl"
                            d.app_stop(package_name)
                            #clear_command = f"adb shell pm clear {package_name}"
                            #subprocess.run(clear_command.split(), capture_output=True, text=True)
                            try:
                                d.app_stop("com.lbe.parallel.intl.arm32")
                            except: pass
                            try:
                                d.app_stop("com.lbe.parallel.intl.arm64")
                            except: pass
                            d.app_start(package_name)
                            while True:
                                if d(text="Ir para o app"):
                                    d(text="Ir para o app").click()
                                elif d(text="Adicionar Apps"):
                                    d(text="Instagram").click(timeout=10)
                                elif d(text="Instagram(1)"):
                                    d(text="Instagram(1)").click(timeout=30)
                                else: break
                        #d(text="Sincronize seus contatos para encontrar seus amigos").wait(timeout=30)
                        #d(text="Pular").click(timeout=30)
                        
                        #d(text="Encontrar pessoas").wait(timeout=30)
                        #d.xpath('//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click(timeout=10)
                        while True:
                            time.sleep(5)
                            if d(text="Ir para o app"):
                                d(text="Ir para o app").click()
                            elif d(text="Adicionar Apps"):
                                d(text="Instagram").click(timeout=10)
                            elif d(text="Instagram(1)"):
                                d(text="Instagram(1)").click(timeout=30)
                            else: break
                        try:
                            d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                        except:
                            d(textContains="Permitir todos os cookies").click()
                            d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
            except Exception as e:
                print(e)
                if not str(e) == '':
                    traceback.print_exc()
                if not e == 'skip' or not e == 'Manutenção.':
                    try:
                        d.screenshot(
                            f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                    except Exception as e:
                        print(e)
                        pass

        except Exception as e:
            print(e)
            if not str(e) == '':
                traceback.print_exc()
            if not e == 'skip' or not e == 'Manutenção.':
                try:
                    d.screenshot(
                        f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                except Exception as e:
                    print(e)
                    pass

def creator_FREESMS_NAV():
    SPREADSHEET_ID = config['spreadsheet']
    conteudo = config['vpn']
    senha = gerar_senha(12)
    maquina = config['maquina']
    tentativa = False
    seguido = False
    regiao_vpn = 'Sem dados'
    app = "Nav"
    global vpn_nav
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global lista_site
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    # Código que gera a saída
    import os
    from selenium.webdriver.common.by import By
    from selenium.webdriver.chrome.service import Service
    import time
    from selenium.common.exceptions import NoSuchElementException
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support.ui import Select
    import requests
    from selenium.webdriver.support import expected_conditions as EC
    import undetected_chromedriver as uc
    import traceback
    import string
    import subprocess
    import re
    import unicodedata
    import random
    import time
    import requests
    import hashlib
    import subprocess
    try:
        from seleniumbase import SB
    except:
        print('Instalando SeleniumBase')
        subprocess.run(
            ['pip', 'install', 'seleniumbase'])
        from seleniumbase import SB
    # verifica se o arquivo existe na pasta do bot

    try:
        from rich.console import Console
    except ModuleNotFoundError:
        import subprocess
        import sys

        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['pip', 'install', '-r', 'requirements.txt'])
        subprocess.run(['deactivate'], shell=True)
        from rich.console import Console
    import os
    import time
    import requests
    import hashlib
    import subprocess
    from colorama import init, Fore, Back, Style
    from faker import Faker
    # teste
    init(autoreset=True)
    console = Console()
    from termcolor import colored

    from rich.console import Console
    from rich.panel import Panel
    from rich.text import Text
    from rich.rule import Rule

    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random
    from datetime import datetime
    import string
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import NoSuchElementException
    from mailtm import Email
    import re
    import logging
    import sys
    logger = logging.getLogger(__name__)

    handler = logging.FileHandler('log.txt')
    handler.setLevel(logging.ERROR)

    logger.addHandler(handler)
    file_path = './storage/recaptcha.crx'
    import zipfile

    if os.path.exists("./storage/recaptcha/"):
        result = f"A pasta 'recaptcha' já existe em '{file_path}'."
    else:
        # URL para download
        url = 'https://www.dropbox.com/scl/fi/ezzl75hi49jq9rq84vvpl/recaptcha.crx?rlkey=z2vyoo7rqc407l36atsjfajzg&st=cmpklgle&dl=1'

        # Fazendo o download do arquivo
        response = requests.get(url)
        if response.status_code == 200:
            with open(file_path, 'wb') as file:
                file.write(response.content)
            print("Arquivo 'recaptcha.crx' baixado e salvo em './storage/recaptcha.crx'.")
            # Caminho do arquivo original (altere para o seu caminho de arquivo)
            caminho_original = './storage/recaptcha.crx'
            novo_caminho = './storage/recaptcha.zip'

            # Renomear o arquivo
            os.rename(caminho_original, novo_caminho)

            # Caminho do arquivo zip
            caminho_zip = './storage/recaptcha.zip'

            # Diretório de destino para extrair
            diretorio_destino = './storage/recaptcha/'

            # Remover um arquivo anterior, se existir
            arquivo_antigo = './storage/recaptcha'
            if os.path.exists(arquivo_antigo):
                os.remove(arquivo_antigo)

            # Criar o diretório de destino se ele não existir
            if not os.path.exists(diretorio_destino):
                os.makedirs(diretorio_destino)

            # Extrair o arquivo zip
            with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                zip_ref.extractall(diretorio_destino)

            print("Arquivo extraído com sucesso!")
            os.remove('./storage/recaptcha.zip')

        else:
            result = "Não foi possível baixar o arquivo. Status Code: " + \
                str(response.status_code)


    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    window.Refresh()
    time.sleep(2)

    window.Refresh()
    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando sistema inicializar.')
    window.Refresh()

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.')
    window.Refresh()

    if not os.path.exists('./erros'):
        os.makedirs('./erros')
    codigo_não_recebido_seguidos = 0
    criou = False
    while parar is False:
        senha = gerar_senha(12)
        if parar is True:
            print('Parando Thread')
            break
        print(linha_ret)
        window['output'].print(linha_ret)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo navegador.')
        window.Refresh()

        nav_oculto = config7['navegador_oculto']
        usar_troca_ip = config7['usar_troca_ip']

        ###################### PROVEDORES ######################
        if dialog_values['-site_escolhido-'] == 'quackr.io':
            prov_atual = 'quackr.io'
        if dialog_values['-site_escolhido-'] == 'temporary-phone-number.com':
            prov_atual = 'temporary-phone-number.com'
        if dialog_values['-site_escolhido-'] == 'smstome.com':
            prov_atual = 'smstome.com'
        elif dialog_values['-site_escolhido-'] == 'Aleatório':
            lista_site = ['quackr.io', 'temporary-phone-number.com', 'smstome.com']
            prov_atual = random.choice(lista_site)
            print(prov_atual)
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Provedor atual: {prov_atual}.')
            window.Refresh()

        ##################### VPNs ######################
        if dialog_values['-vpnlista-'] == 'SurfShark':
            vpn_usada = 'surfshark'
        elif dialog_values['-vpnlista-'] == 'TouchVPN':
            vpn_usada = 'touchvpn'
        elif dialog_values['-vpnlista-'] == 'CyberGhost':
            vpn_usada = 'cyberghost'
        elif dialog_values['-vpnlista-'] == 'ZenMate':
            vpn_usada = 'zenmate'
        elif dialog_values['-vpnlista-'] == 'UrbanVPN':
            vpn_usada = 'urbanvpn'
        elif dialog_values['-vpnlista-'] == 'Troywell':
            vpn_usada = 'troywell'
        elif dialog_values['-vpnlista-'] == 'VeePN':
            vpn_usada = 'veepn'
        elif dialog_values['-vpnlista-'] == 'PlanetVPN':
            vpn_usada = 'planetvpn'
        elif dialog_values['-vpnlista-'] == 'Aleatorio':
            vpn_usada = random.choice(['TouchVPN', 'CyberGhost', 'VeePN', 'PlanetVPN', 'Troywell'])
            vpn_nav = vpn_usada
            window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] VPN Escolhida: {vpn_nav}.')
            window.Refresh()
        ##################### VPNs ######################


        try:
            with SB(uc=True, ad_block_on=True, locale_code='pt-br', demo=False, headless=nav_oculto, incognito=True, extension_dir=rf'.\storage\recaptcha,{caminho_atual}\storage\{vpn_usada}') as chrome:
                time.sleep(5)

                if vpn_nav == 'SurfShark':
                    file_path = './storage/surfshark.crx'
                    import zipfile

                    if os.path.exists("./storage/surfshark/"):
                        result = f"A pasta 'surfshark' já existe em '{file_path}'."
                    else:
                        # URL para download
                        url = 'https://www.dropbox.com/scl/fi/e4f4h29zl5s5tywjp1ev2/surfshark.crx?rlkey=zb499vqpr8swexgd8yrsu6rvc&dl=1'

                        # Fazendo o download do arquivo
                        response = requests.get(url)
                        if response.status_code == 200:
                            with open(file_path, 'wb') as file:
                                file.write(response.content)
                            print("Arquivo 'surfshark.crx' baixado e salvo em './storage/surfshark.crx'.")
                            # Caminho do arquivo original (altere para o seu caminho de arquivo)
                            caminho_original = './storage/surfshark.crx'
                            novo_caminho = './storage/surfshark.zip'

                            # Renomear o arquivo
                            os.rename(caminho_original, novo_caminho)

                            # Caminho do arquivo zip
                            caminho_zip = './storage/surfshark.zip'

                            # Diretório de destino para extrair
                            diretorio_destino = './storage/surfshark/'

                            # Remover um arquivo anterior, se existir
                            arquivo_antigo = './storage/surfshark'
                            if os.path.exists(arquivo_antigo):
                                os.remove(arquivo_antigo)

                            # Criar o diretório de destino se ele não existir
                            if not os.path.exists(diretorio_destino):
                                os.makedirs(diretorio_destino)

                            # Extrair o arquivo zip
                            with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                                zip_ref.extractall(diretorio_destino)

                            print("Arquivo extraído com sucesso!")
                            os.remove('./storage/surfshark.zip')

                        else:
                            result = "Não foi possível baixar o arquivo. Status Code: " + \
                                str(response.status_code)
                    try:
                        
                        chrome.set_window_size(800, 800)
                        # Alternar para a nova aba
                        chrome.driver.switch_to.window(
                            chrome.driver.window_handles[-1])

                        # Verificar se a URL está correta e fechar a aba
                        if chrome.driver.current_url == "https://surfshark.com/pt-br/download/chrome/onboarding":
                            chrome.driver.close()

                        # Alternar de volta para a aba original
                        chrome.driver.switch_to.window(
                            chrome.driver.window_handles[0])
                        chrome.open('chrome://extensions/')
                        extensoes = chrome.execute_script(
                            'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                        )

                        id_extensao = None
                        for ext in extensoes:
                            nome_ext = chrome.execute_script(
                                'return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                            if "Surf" in nome_ext:
                                id_extensao = chrome.execute_script(
                                    'return arguments[0].getAttribute("id");', ext)
                                break

                        if id_extensao:
                            url_extensao = f'chrome-extension://{id_extensao}/index.html'
                            # chrome.get(url_extensao)
                            # print(f"Página da extensão aberta em {url_extensao}")
                        else:
                            print("ID da extensão não encontrado")
                        # Continuar com outras operações na aba original, se necessário
                    except Exception as e:
                        print(e)
                    if os.path.exists(r'.\storage\cookies_surf.json'):
                        chrome.driver.uc_open_with_reconnect(
                            'https://my.surfshark.com/auth/login', 4)
                        try:
                            chrome.save_screenshot('erro_nav.png')
                            chrome.switch_to_frame(
                                'iframe[id^="cf-chl"]', timeout=1)
                            print(chrome.driver.find_elements(
                                By.XPATH, '//*[@id="challenge-stage"]/div/label/input'))
                            # chrome.driver.uc_click('//*[@id="challenge-stage"]/div/label/input')
                            chrome.driver.uc_click(
                                'span')
                            chrome.save_screenshot('erro_nav.png')
                            # chrome.driver.execute_script("arguments[0].click();", chrome.driver.find_element(By.XPATH, '//*[@id="challenge-stage"]/div/label/input'))
                        except Exception as e:
                            print('Sem Cloudflare')
                        with open(r'.\storage\cookies_surf.json', 'r') as file:
                            cookies = json.load(file)

                        # Adiciona os cookies salvos ao navegador
                        for cookie in cookies:
                            chrome.driver.add_cookie(cookie)

                        # Recarrega a página para usar os cookies
                        print('Adicionou os cookies')
                        time.sleep(2)
                        chrome.refresh()
                        time.sleep(2)
                        if chrome.driver.current_url == 'https://my.surfshark.com/home/dashboard':
                            chrome.driver.get(url_extensao)
                            chrome.wait_for_element(
                                "//button[@data-test='login-in-button']").click()
                            time.sleep(3)
                        elif 'https://my.surfshark.com/auth/login' in chrome.driver.current_url:
                            try:
                                chrome.driver.get(url_extensao)
                                chrome.wait_for_element(
                                    "//button[@data-test='login-in-button']").click()

                                time.sleep(5)
                                nova_janela = chrome.driver.window_handles[-1]
                                chrome.driver.switch_to.window(nova_janela)
                                time.sleep(4)
                                if chrome.driver.current_url == 'https://my.surfshark.com/account/extension-login-success':

                                    time.sleep(5)
                                    chrome.driver.close()
                                nova_janela = chrome.driver.window_handles[0]
                                chrome.driver.switch_to.window(nova_janela)

                                time.sleep(3)
                            except Exception as e:
                                print(e)
                    else:
                        chrome.driver.switch_to.window(
                            chrome.driver.window_handles[0])
                        import time
                        # Abre uma nova aba para a extensão (geralmente chrome-extension://<extension-id>/)
                        chrome.driver.get(url_extensao)
                        chrome.wait_for_element(
                            "//button[@data-test='login-in-button']").click()
                        time.sleep(3)
                        janela_principal = chrome.driver.window_handles[0]
                        nova_janela = chrome.driver.window_handles[1]
                        chrome.driver.switch_to.window(nova_janela)
                        print(chrome.driver.current_url)
                        email_surf = emailvpn
                        senha_surf = senhavpn
                        try:
                            chrome.save_screenshot('erro_nav.png')
                            chrome.switch_to_frame(
                                'iframe[id^="cf-chl"]', timeout=1)
                            print(chrome.driver.find_elements(
                                By.XPATH, '//*[@id="challenge-stage"]/div/label/input'))
                            # chrome.driver.uc_click('//*[@id="challenge-stage"]/div/label/input')
                            chrome.driver.uc_click(
                                'span')
                            chrome.save_screenshot('erro_nav.png')
                            # chrome.driver.execute_script("arguments[0].click();", chrome.driver.find_element(By.XPATH, '//*[@id="challenge-stage"]/div/label/input'))
                        except Exception as e:
                            print('Sem Cloudflare 2')
                        chrome.send_keys(
                            "//input[@name='emailField']", email_surf)
                        chrome.send_keys(
                            "//input[@name='passwordField']", senha_surf)
                        chrome.click(("//button[@id='loginSubmit']"))
                        time.sleep(10)
                        if chrome.driver.current_url == 'https://my.surfshark.com/account/extension-login-success':

                            cookies = chrome.driver.get_cookies()

                            # Guarde os cookies em um arquivo JSON
                            with open(r'.\storage\cookies_surf.json', 'w') as file:
                                json.dump(cookies, file)
                        else:
                            print('Falha ao logar na surfshark')
                        chrome.driver.close()
                        chrome.driver.switch_to.window(janela_principal)

                    if 'https://my.surfshark.com/auth/login' in chrome.driver.current_url:
                        print('Falha ao logar na surfshark')
                        chrome.driver.switch_to.window(
                            chrome.driver.window_handles[0])
                        import time
                        # Abre uma nova aba para a extensão (geralmente chrome-extension://<extension-id>/)
                        chrome.driver.get(url_extensao)
                        chrome.wait_for_element(
                            "//button[@data-test='login-in-button']").click()
                        time.sleep(3)
                        janela_principal = chrome.driver.window_handles[0]
                        nova_janela = chrome.driver.window_handles[1]
                        chrome.driver.switch_to.window(nova_janela)
                        print(chrome.driver.current_url)
                        email_surf = 'americanplayer@protonmail.com'
                        senha_surf = 'Kotinha10@'
                        chrome.send_keys(
                            "//input[@name='emailField']", email_surf)
                        chrome.send_keys(
                            "//input[@name='passwordField']", senha_surf)
                        chrome.click(("//button[@id='loginSubmit']"))
                        time.sleep(10)
                        if chrome.driver.current_url == 'https://my.surfshark.com/account/extension-login-success':
                            if os.path.exists(r'.\storage\cookies_surf.json'):
                                # Apaga o arquivo
                                os.remove(
                                    r'.\storage\cookies_surf.json')
                                print(
                                    f"cookies_surf.json foi apagado com sucesso.")
                            else:
                                print(f"cookies_surf.json não existe.")
                            cookies = chrome.driver.get_cookies()

                            # Guarde os cookies em um arquivo JSON
                            with open(r'.\storage\cookies_surf.json', 'w') as file:
                                json.dump(cookies, file)
                            chrome.driver.close()
                            chrome.switch_to.window(janela_principal)
                        else:
                            print('Falha ao logar na surfshark')
                    print('Logou com sucesso na surfshark')

                    locais = ['Canada', 'Australia', 'Netherlands', 'Poland', 'United Kingdom',
                            'Germany', 'Africa', 'Japan', 'Indonesia', 'India', 'Denmark', 'France', 'USA']
                    local_vpn = random.choice(locais)
                    print(f'Regiao escolhida {local_vpn}')
                    chrome.driver.refresh()
                    time.sleep(5)
                    try:
                        chrome.send_keys(
                            "//input[@data-test='location-search-input']", local_vpn)
                    except:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Erro ao logar na VPN.')
                        window.Refresh()
                        if os.path.exists(r'.\storage\cookies_surf.json'):
                            # Apaga o arquivo
                            os.remove(
                                r'.\storage\cookies_surf.json')
                            print(
                                f"cookies_surf.json foi apagado com sucesso.")
                    chrome.click("//div[@data-test='location-title']")
                    try:
                        chrome.wait_for_element(
                            "//button[@data-test='disconnect-button']")

                        print('VPN conectada')
                        time.sleep(5)
                    except Exception as e:
                        print(e)
                        
                elif vpn_nav == 'TouchVPN':
                    file_path = './storage/touchvpn.crx'
                    import zipfile

                    if os.path.exists("./storage/touchvpn/"):
                        result = f"A pasta 'touchvpn' já existe em '{file_path}'."
                    else:
                        # URL para download
                        url = 'https://www.dropbox.com/scl/fi/xlfanzmvr46zd36ki8o6s/touchvpn.crx?rlkey=ue55t76a21aur82c9ecm9d5al&st=muc5temz&dl=1'

                        # Fazendo o download do arquivo
                        response = requests.get(url)
                        if response.status_code == 200:
                            with open(file_path, 'wb') as file:
                                file.write(response.content)
                            print("Arquivo 'touchvpn.crx' baixado e salvo em './storage/touchvpn.crx'.")
                            # Caminho do arquivo original (altere para o seu caminho de arquivo)
                            caminho_original = './storage/touchvpn.crx'
                            novo_caminho = './storage/touchvpn.zip'

                            # Renomear o arquivo
                            os.rename(caminho_original, novo_caminho)

                            # Caminho do arquivo zip
                            caminho_zip = './storage/touchvpn.zip'

                            # Diretório de destino para extrair
                            diretorio_destino = './storage/touchvpn/'

                            # Remover um arquivo anterior, se existir
                            arquivo_antigo = './storage/touchvpn'
                            if os.path.exists(arquivo_antigo):
                                os.remove(arquivo_antigo)

                            # Criar o diretório de destino se ele não existir
                            if not os.path.exists(diretorio_destino):
                                os.makedirs(diretorio_destino)

                            # Extrair o arquivo zip
                            with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                                zip_ref.extractall(diretorio_destino)

                            print("Arquivo extraído com sucesso!")
                            os.remove('./storage/touchvpn.zip')

                        else:
                            result = "Não foi possível baixar o arquivo. Status Code: " + \
                                str(response.status_code)
                    time.sleep(5)
                    chrome.driver.switch_to.window(
                        chrome.driver.window_handles[-1])
                    # Verificar se a URL está correta e fechar a aba
                    if chrome.driver.current_url == "https://www.touchvpn.net/":
                        chrome.driver.close()
                    # Alternar de volta para a aba original
                    chrome.driver.switch_to.window(
                        chrome.driver.window_handles[0])
                    chrome.open('chrome://extensions/')
                    extensoes = chrome.execute_script(
                        'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                    )

                    id_extensao = None
                    for ext in extensoes:
                        nome_ext = chrome.execute_script('return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                        if "Touch" in nome_ext:  # Substitua pelo nome da sua extensão
                            id_extensao = chrome.execute_script('return arguments[0].getAttribute("id");', ext)
                            break

                    if id_extensao:
                        # Use o ID da extensão para abrir a página da extensão
                        url_extensao = f'chrome-extension://{id_extensao}/panel/index.html'
                        chrome.driver.get(url_extensao)
                    else:
                        print("ID da extensão não encontrado")
                    chrome.wait_for_element("div[class=location]").click()
                    locais = ['United States', 'Canada', 'Germany', 'Netherlands', 'United Kingdom']
                    local_vpn = random.choice(locais)
                    print(local_vpn)
                    chrome.wait_for_element(f'''//div[contains(text(), '{local_vpn}')]/div[@class='flag']''').click()
                    chrome.wait_for_element("div[id=ConnectionButton]").click()
                    chrome.wait_for_element("div[id=AdBlocker]")
                    if chrome.find_elements("div[id=AdBlocker]"):
                        print('VPN Conectada')

                elif vpn_nav == 'CyberGhost':
                    file_path = './storage/cyberghost.crx'
                    import zipfile

                    if os.path.exists("./storage/cyberghost/"):
                        result = f"A pasta 'cyberghost' já existe em '{file_path}'."
                    else:
                        # URL para download
                        url = 'https://www.dropbox.com/scl/fi/nw94zxsqdcyvs1x7i4r4e/cyberghost.crx?rlkey=162gv0ry8524g1mgt8gpf0n1c&st=vaj6u9r7&dl=1'

                        # Fazendo o download do arquivo
                        response = requests.get(url)
                        if response.status_code == 200:
                            with open(file_path, 'wb') as file:
                                file.write(response.content)
                            print("Arquivo 'cyberghost.crx' baixado e salvo em './storage/cyberghost.crx'.")
                            # Caminho do arquivo original (altere para o seu caminho de arquivo)
                            caminho_original = './storage/cyberghost.crx'
                            novo_caminho = './storage/cyberghost.zip'

                            # Renomear o arquivo
                            os.rename(caminho_original, novo_caminho)

                            # Caminho do arquivo zip
                            caminho_zip = './storage/cyberghost.zip'

                            # Diretório de destino para extrair
                            diretorio_destino = './storage/cyberghost/'

                            # Remover um arquivo anterior, se existir
                            arquivo_antigo = './storage/cyberghost'
                            if os.path.exists(arquivo_antigo):
                                os.remove(arquivo_antigo)

                            # Criar o diretório de destino se ele não existir
                            if not os.path.exists(diretorio_destino):
                                os.makedirs(diretorio_destino)

                            # Extrair o arquivo zip
                            with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                                zip_ref.extractall(diretorio_destino)

                            print("Arquivo extraído com sucesso!")
                            os.remove('./storage/cyberghost.zip')

                        else:
                            result = "Não foi possível baixar o arquivo. Status Code: " + \
                                str(response.status_code)
                    
                    chrome.open('chrome://extensions/')
                    extensoes = chrome.execute_script(
                        'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                    )

                    id_extensao = None
                    for ext in extensoes:
                        nome_ext = chrome.execute_script('return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                        if "CyberGhost" in nome_ext:
                            id_extensao = chrome.execute_script('return arguments[0].getAttribute("id");', ext)
                            break

                    if id_extensao:
                        url_extensao = f'chrome-extension://{id_extensao}/index.html'
                        chrome.driver.get(url_extensao)
                    else:
                        print("ID da extensão não encontrado")
                    
                    locais = ['Romania', 'Netherlands', 'Germany', 'United States']
                    local_vpn = random.choice(locais)
                    print(local_vpn)
                    if local_vpn == 'Romania':
                        pass
                    else:
                        chrome.wait_for_element("span[class=selected-country]").click()
                        chrome.wait_for_element(f"//span[normalize-space(text())='{local_vpn}']").click()
                    chrome.wait_for_element("div[class=spinner]").click()
                    while True:
                        if chrome.find_elements('//h4[text()="Connected"]'):
                            print('VPN Conectada')
                            break
                        elif chrome.find_elements('//h4[text()="connectPage.error"]'):
                            chrome.wait_for_element("div[class=spinner]").click()
                            chrome.wait_for_element('//h4[text()="Connected"]')
                            
                elif vpn_nav == 'ZenMate':
                    file_path = './storage/zenmate.crx'
                    import zipfile

                    if os.path.exists("./storage/zenmate/"):
                        result = f"A pasta 'zenmate' já existe em '{file_path}'."
                    else:
                        # URL para download
                        url = 'https://www.dropbox.com/scl/fi/ype15i0fln67zlxfjhsa7/zenmate.crx?rlkey=qc2wrm1zy8i63murehrgb16dr&st=7gkbc98m&dl=1'

                        # Fazendo o download do arquivo
                        response = requests.get(url)
                        if response.status_code == 200:
                            with open(file_path, 'wb') as file:
                                file.write(response.content)
                            print("Arquivo 'zenmate.crx' baixado e salvo em './storage/zenmate.crx'.")
                            # Caminho do arquivo original (altere para o seu caminho de arquivo)
                            caminho_original = './storage/zenmate.crx'
                            novo_caminho = './storage/zenmate.zip'

                            # Renomear o arquivo
                            os.rename(caminho_original, novo_caminho)

                            # Caminho do arquivo zip
                            caminho_zip = './storage/zenmate.zip'

                            # Diretório de destino para extrair
                            diretorio_destino = './storage/zenmate/'

                            # Remover um arquivo anterior, se existir
                            arquivo_antigo = './storage/zenmate'
                            if os.path.exists(arquivo_antigo):
                                os.remove(arquivo_antigo)

                            # Criar o diretório de destino se ele não existir
                            if not os.path.exists(diretorio_destino):
                                os.makedirs(diretorio_destino)

                            # Extrair o arquivo zip
                            with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                                zip_ref.extractall(diretorio_destino)

                            print("Arquivo extraído com sucesso!")
                            os.remove('./storage/zenmate.zip')

                        else:
                            result = "Não foi possível baixar o arquivo. Status Code: " + \
                                str(response.status_code)
                    
                    chrome.open('chrome://extensions/')
                    extensoes = chrome.execute_script(
                        'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                    )
                    id_extensao = None
                    for ext in extensoes:
                        nome_ext = chrome.execute_script('return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                        if "ZenMate" in nome_ext:
                            id_extensao = chrome.execute_script('return arguments[0].getAttribute("id");', ext)
                            break
                    if id_extensao:
                        url_extensao = f'chrome-extension://{id_extensao}/index.html'
                        chrome.driver.get(url_extensao)
                    else:
                        print("ID da extensão não encontrado")

                    locais = ['Germany', 'Romania', 'Singapore', 'United States']
                    local_vpn = random.choice(locais)
                    print(local_vpn)
                    if local_vpn == 'Germany':
                        local_zenmate = '#country-browsing-DE'
                    elif local_vpn == 'Romania':
                        local_zenmate = '#country-browsing-RO'
                    elif local_vpn == 'Singapore':
                        local_zenmate = '#country-browsing-SG'
                    elif local_vpn == 'United States':
                        local_zenmate = '#country-browsing-US'
                    while True:
                        if not chrome.find_elements("div[class=shield-container]"): 
                            chrome.driver.get(url_extensao)
                            time.sleep(2)
                        else:
                            time.sleep(2)
                            chrome.wait_for_element('//a[@routerlink="/servers"]').click()
                            locais = ['Germnay', 'Romania', 'Singapore', 'United States']
                            local_vpn = random.choice(locais)
                            time.sleep(2)
                            if not chrome.find_elements(f"{local_zenmate}") or chrome.find_elements('xpath', "//div[@class='alert alert-danger text-center mt-2' and not(@hidden)]"):
                                chrome.wait_for_element('//a[@routerlink="/home"]').click()
                                time.sleep(4)
                                chrome.wait_for_element('//a[@routerlink="/servers"]').click()
                            chrome.wait_for_element(f"{local_zenmate}").click()
                            time.sleep(3)
                            try:
                                chrome.wait_for_element('div.proxy-status-container > div.pt-1.location-info > a')
                            except:
                                chrome.driver.get(url_extensao)
                                chrome.wait_for_element('div.proxy-status-container > div.pt-1.location-info > a')
                            if chrome.find_element('div.proxy-status-container > div.pt-1.location-info > a').text == 'Connected to':
                                print('VPN Conectada')
                                break
                
                elif vpn_nav == 'VeePN':
                    file_path = './storage/veepn.crx'
                    import zipfile

                    if os.path.exists("./storage/veepn/"):
                        result = f"A pasta 'veepn' já existe em '{file_path}'."
                    else:
                        # URL para download
                        url = 'https://www.dropbox.com/scl/fi/ube9dvmevvhhk5eqt32gt/veepn.crx?rlkey=yuzwpgst6vo0oohhtcsi7i65o&dl=1'

                        # Fazendo o download do arquivo
                        response = requests.get(url)
                        if response.status_code == 200:
                            with open(file_path, 'wb') as file:
                                file.write(response.content)
                            print("Arquivo 'veepn.crx' baixado e salvo em './storage/veepn.crx'.")
                            # Caminho do arquivo original (altere para o seu caminho de arquivo)
                            caminho_original = './storage/veepn.crx'
                            novo_caminho = './storage/veepn.zip'

                            # Renomear o arquivo
                            os.rename(caminho_original, novo_caminho)

                            # Caminho do arquivo zip
                            caminho_zip = './storage/veepn.zip'

                            # Diretório de destino para extrair
                            diretorio_destino = './storage/veepn/'

                            # Remover um arquivo anterior, se existir
                            arquivo_antigo = './storage/veepn'
                            if os.path.exists(arquivo_antigo):
                                os.remove(arquivo_antigo)

                            # Criar o diretório de destino se ele não existir
                            if not os.path.exists(diretorio_destino):
                                os.makedirs(diretorio_destino)

                            # Extrair o arquivo zip
                            with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                                zip_ref.extractall(diretorio_destino)

                            print("Arquivo extraído com sucesso!")
                            os.remove('./storage/veepn.zip')

                        else:
                            result = "Não foi possível baixar o arquivo. Status Code: " + \
                                str(response.status_code)
                    
                    chrome.open('chrome://extensions/')
                    extensoes = chrome.execute_script(
                        'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                    )

                    id_extensao = None
                    for ext in extensoes:
                        nome_ext = chrome.execute_script('return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                        if "Vee" in nome_ext:
                            id_extensao = chrome.execute_script('return arguments[0].getAttribute("id");', ext)
                            break

                    if id_extensao:
                        url_extensao = f'chrome-extension://{id_extensao}/html/foreground.html'
                        chrome.driver.get(url_extensao)
                    else:
                        print("ID da extensão não encontrado")
                    
                    chrome.driver.switch_to.window(
                        chrome.driver.window_handles[-1])
                    # Verificar se a URL está correta e fechar a aba
                    if "https://veepn.com" in chrome.driver.current_url:
                        chrome.driver.close()
                    # Alternar de volta para a aba original
                    chrome.driver.switch_to.window(
                        chrome.driver.window_handles[0])

                    chrome.wait_for_element("button.next").click()
                    chrome.wait_for_element("button.next").click()
                    if chrome.find_elements("div.footer-decline-text"):
                        chrome.wait_for_element("div.footer-decline-text").click()

                    locais = ['France', 'Netherlands','Singapore', 'London','Virginia', 'Oregon']
                    local_vpn = random.choice(locais)
                    print(local_vpn)
                    chrome.wait_for_element("div.current-region-upper-block").click()
                    chrome.wait_for_element("input.region-search-input").send_keys(local_vpn)
                    chrome.wait_for_element("div.radio.off", timeout=25).click()
                    chrome.wait_for_element('div[id=mainBtn]').click()
                    while True:
                        if chrome.find_element("div.description.fadeIn.linebreak").text == 'VPN is ON':
                            print('VPN Conectada')
                            break
                        elif chrome.find_element("div.description.fadeIn.linebreak").text == 'VPN is OFF':
                            chrome.wait_for_element('div[id=mainBtn]').click()
                        elif chrome.find_elements("div.footer-decline-text"):
                            chrome.wait_for_element("div.footer-decline-text").click()

                elif vpn_nav == 'PlanetVPN':
                    file_path = './storage/planetvpn.crx'
                    import zipfile

                    if os.path.exists("./storage/planetvpn/"):
                        result = f"A pasta 'planetvpn' já existe em '{file_path}'."
                    else:
                        # URL para download
                        url = 'https://www.dropbox.com/scl/fi/5nkgxkdyd3hmbl2yezwpz/planetvpn.crx?rlkey=q67oe53sq6qoian2izabfxc5q&dl=1'

                        # Fazendo o download do arquivo
                        response = requests.get(url)
                        if response.status_code == 200:
                            with open(file_path, 'wb') as file:
                                file.write(response.content)
                            print("Arquivo 'planetvpn.crx' baixado e salvo em './storage/planetvpn.crx'.")
                            # Caminho do arquivo original (altere para o seu caminho de arquivo)
                            caminho_original = './storage/planetvpn.crx'
                            novo_caminho = './storage/planetvpn.zip'

                            # Renomear o arquivo
                            os.rename(caminho_original, novo_caminho)

                            # Caminho do arquivo zip
                            caminho_zip = './storage/planetvpn.zip'

                            # Diretório de destino para extrair
                            diretorio_destino = './storage/planetvpn/'

                            # Remover um arquivo anterior, se existir
                            arquivo_antigo = './storage/planetvpn'
                            if os.path.exists(arquivo_antigo):
                                os.remove(arquivo_antigo)

                            # Criar o diretório de destino se ele não existir
                            if not os.path.exists(diretorio_destino):
                                os.makedirs(diretorio_destino)

                            # Extrair o arquivo zip
                            with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                                zip_ref.extractall(diretorio_destino)

                            print("Arquivo extraído com sucesso!")
                            os.remove('./storage/planetvpn.zip')

                        else:
                            result = "Não foi possível baixar o arquivo. Status Code: " + \
                                str(response.status_code)
                    
                    chrome.open('chrome://extensions/')
                    extensoes = chrome.execute_script(
                        'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                    )

                    id_extensao = None
                    for ext in extensoes:
                        nome_ext = chrome.execute_script('return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                        if "Planet" in nome_ext:
                            id_extensao = chrome.execute_script('return arguments[0].getAttribute("id");', ext)
                            break

                    if id_extensao:
                        url_extensao = f'chrome-extension://{id_extensao}/popup.html'
                        chrome.driver.get(url_extensao)
                    else:
                        print("ID da extensão não encontrado")
                    
                    chrome.driver.switch_to.window(
                        chrome.driver.window_handles[-1])
                    # Verificar se a URL está correta e fechar a aba
                    if "https://freevpnplanet.com/" in chrome.driver.current_url:
                        chrome.driver.close()
                    # Alternar de volta para a aba original
                    chrome.driver.switch_to.window(
                        chrome.driver.window_handles[0])

                    chrome.wait_for_element("div.consent-button").click()
                    chrome.wait_for_element("div.select-country").click()
                    locais = ['Germany', 'United Kingdom', 'USA']
                    local_vpn = random.choice(locais)
                    print(local_vpn)
                    chrome.wait_for_element("input.search-input").send_keys(local_vpn)
                    chrome.wait_for_element("div.server-name").click()
                    time.sleep(1)
                    while True:
                        if chrome.find_elements("button.button.button-connected"):
                            print('VPN Conectada')
                            break
                        elif chrome.find_elements("button.button.button-disconnected"):
                            chrome.find_element("button.button.button-disconnected").click()

                elif vpn_nav == 'Troywell':
                    file_path = './storage/troywell.crx'
                    import zipfile

                    if os.path.exists("./storage/troywell/"):
                        result = f"A pasta 'troywell' já existe em '{file_path}'."
                    else:
                        # URL para download
                        url = 'https://www.dropbox.com/scl/fi/rn25p6mmg57pmikq8d2xu/troywell.crx?rlkey=wwmakky5j6952lisr19723vw7&dl=1'

                        # Fazendo o download do arquivo
                        response = requests.get(url)
                        if response.status_code == 200:
                            with open(file_path, 'wb') as file:
                                file.write(response.content)
                            print("Arquivo 'troywell.crx' baixado e salvo em './storage/troywell.crx'.")
                            # Caminho do arquivo original (altere para o seu caminho de arquivo)
                            caminho_original = './storage/troywell.crx'
                            novo_caminho = './storage/troywell.zip'

                            # Renomear o arquivo
                            os.rename(caminho_original, novo_caminho)

                            # Caminho do arquivo zip
                            caminho_zip = './storage/troywell.zip'

                            # Diretório de destino para extrair
                            diretorio_destino = './storage/troywell/'

                            # Remover um arquivo anterior, se existir
                            arquivo_antigo = './storage/troywell'
                            if os.path.exists(arquivo_antigo):
                                os.remove(arquivo_antigo)

                            # Criar o diretório de destino se ele não existir
                            if not os.path.exists(diretorio_destino):
                                os.makedirs(diretorio_destino)

                            # Extrair o arquivo zip
                            with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                                zip_ref.extractall(diretorio_destino)

                            print("Arquivo extraído com sucesso!")
                            os.remove('./storage/troywell.zip')

                        else:
                            result = "Não foi possível baixar o arquivo. Status Code: " + \
                                str(response.status_code)
                
                    chrome.open('chrome://extensions/')
                    extensoes = chrome.execute_script(
                        'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                    )

                    id_extensao = None
                    for ext in extensoes:
                        nome_ext = chrome.execute_script('return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                        if "Troywell" in nome_ext:
                            id_extensao = chrome.execute_script('return arguments[0].getAttribute("id");', ext)
                            break

                    if id_extensao:
                        url_extensao = f'chrome-extension://{id_extensao}/popup.html'
                        chrome.driver.get(url_extensao)
                    else:
                        print("ID da extensão não encontrado")

                    try:
                        chrome.wait_for_element("div.button.analytics__button", timeout=2).click()
                    except:
                        chrome.driver.get(url_extensao)
                        chrome.wait_for_element("div.button.analytics__button").click()
                    chrome.wait_for_element("div.server-select__row").click()
                    time.sleep(2)
                    locais = ['Alemanha', 'Polônia', 'Holanda', 'Japão', 'Austrália', 'França', 'Noruega', 'África do Sul', 'Canadá']
                    local_vpn = random.choice(locais)
                    print(local_vpn)
                    chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                    while True:
                        try:
                            chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]").click()
                            break
                        except:
                            chrome.driver.get(url_extensao)
                            chrome.wait_for_element("div.server-select__row").click()
                            time.sleep(2)
                            local_vpn = random.choice(locais)
                            chrome.wait_for_element("input.search__input").clear()
                            chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                            chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]").click()

                    chrome.wait_for_element("div.connect-button").click()
                    try:
                        chrome.wait_for_element("div.connection-block__label")
                    except:
                        if chrome.find_elements("div.button.button_selected.connection-failed__button.connection-failed__button_blue"):
                            chrome.find_element("div.button.button_selected.connection-failed__button.connection-failed__button_blue").click()
                            chrome.wait_for_element("div.server-select__row").click()
                            time.sleep(2)
                            local_vpn = random.choice(locais)
                            chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                            chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]").click()
                            chrome.wait_for_element("div.connect-button").click()
                            chrome.wait_for_element("div.connection-block__label")
                    time.sleep(1)
                    while True:
                        if chrome.find_elements("div.connection-block__label"):
                            print('VPN Conectada')
                            break
                        elif chrome.find_elements("div.button.button_selected.connection-failed__button.connection-failed__button_blue"):
                            chrome.find_element("div.button.button_selected.connection-failed__button.connection-failed__button_blue").click()
                            chrome.wait_for_element("div.server-select__row").click()
                            time.sleep(2)
                            local_vpn = random.choice(locais)
                            chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                            chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]").click()
                            chrome.wait_for_element("div.connect-button").click()
                            chrome.wait_for_element("div.connection-block__label")


                #janela_principal = chrome.driver.window_handles[0]
                #chrome.driver.switch_to.window(janela_principal)
                ################# PEGAR NÚMERO #################

                if prov_atual == 'quackr.io':
                    url_prov = 'https://quackr.io/temporary-phone-number-generator'
                    if criou:
                        url_prov = url_atual

                    if criou:
                        chrome.open(url_prov)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Utilizando o mesmo número.')
                        window.Refresh()
                        chrome.set_window_size(800, 2000)
                        chrome.execute_script(
                            "document.body.style.zoom='50%'")
                    else:
                        chrome.open('https://quackr.io/temporary-phone-number-generator')

                        try:
                            chrome.wait_for_element("button[mode=primary]")
                            chrome.wait_for_element("button[mode=primary]").click()
                        except:
                            pass
                        paises_num = ['8', '21', '28']
                        pais = random.choice(paises_num)
                        chrome.wait_for_element('/html/body/app-root/div/div/main/app-temporary-phone-number-generator/section/div/div[1]/div/div/div[1]/button').click()
                        chrome.wait_for_element(f'/html/body/app-root/div/div/main/app-temporary-phone-number-generator/section/div/div[1]/div/div/div[2]/div/a[{pais}]').click()
                        chrome.wait_for_element('button.button.is-success').click()

                    time.sleep(5)
                    try:
                        chrome.execute_script("""
                        var l = document.getElementsByClassName("footer-overlay-regulated")[0];
                        l.parentNode.removeChild(l);
                        """)
                    except:
                        pass
                    try:
                        chrome.execute_script("""
                        var l = document.getElementsByClassName("message is-info")[0];
                        l.parentNode.removeChild(l);
                        """)
                    except:
                        pass
                    num = chrome.wait_for_element('h1[tooltip="Copied"]').text
                    url_atual = chrome.driver.current_url
                    chrome.execute_script("document.body.style.zoom='50%'")
                    window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número: {num}')
                    window.Refresh()
                    print(num)
                    criou = False
                    
                elif prov_atual == 'temporary-phone-number.com':
                    url_prov = 'https://temporary-phone-number.com/'
                    if criou:
                        url_prov = url_atual

                    if criou:
                        chrome.open(url_prov)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Utilizando o mesmo número.')
                        window.Refresh()
                        chrome.set_window_size(800, 2000)
                        chrome.execute_script(
                            "document.body.style.zoom='50%'")
                    else:
                        chrome.open(url_prov)
                        lista = ['2', '3', '4', '5', '6', '7', '8', '9', '11', '12', '13', '14', '15', '16', '17',
                                '18', '20']
                        numero_escolhido = random.choice(lista)

                        while True:
                            if '+7 ' in chrome.find_element('xpath', f'/html/body/div[2]/div/section[2]/div[1]/div[{numero_escolhido}]/a/div/span[2]').text:
                                #print('É da russia')
                                lista = ['2', '3', '4', '5', '6', '7', '8', '9', '11', '12', '13', '14', '15', '16', '17',
                                    '18', '20']
                                numero_escolhido = random.choice(lista)

                                #chrome.highlight('xpath', f'/html/body/div[2]/div/section[2]/div[1]/div[{numero_escolhido}]/a')
                            else:
                                #print('Não é da russia')
                                break
                        chrome.wait_for_element(f'/html/body/div[2]/div/section[2]/div[1]/div[{numero_escolhido}]/a').click()
                        

                    time.sleep(5)
                    chrome.wait_for_element('h1.btn1')
                    num = chrome.find_element('h1.btn1').text
                    print(num)
                    url_atual = chrome.driver.current_url
                    chrome.execute_script("document.body.style.zoom='50%'")
                    window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número: {num}')
                    window.Refresh()
                    print(num)
                    criou = False

                elif prov_atual == 'smstome.com':
                    url_prov = 'smstome.com'
                    if criou:
                        url_prov = url_atual

                    if criou:
                        chrome.open(url_prov)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Utilizando o mesmo número.')
                        window.Refresh()
                        chrome.set_window_size(800, 2000)
                        chrome.execute_script(
                            "document.body.style.zoom='50%'")
                    else:
                        chrome.open(url_prov)
                        if chrome.find_elements('button.fc-button.fc-cta-consent.fc-primary-button'):
                            chrome.wait_for_element('button.fc-button.fc-cta-consent.fc-primary-button').click()
                        while True:
                            rnd = random.randint(1, 8)
                            if rnd == 1 or rnd == 2 or rnd == 7:
                                rnd = random.randint(1, 8)
                            else:
                                break
                        print(rnd)
                        chrome.wait_for_element('xpath',f'/html/body/main/header/section/div/div[2]/ul/li[{rnd}]/a').click()
                                        #/html/body/main/header/section/div/div[2]/ul/li[1]/a
                        if rnd == 4:
                            primeiro_nome = fake.first_name()
                            primeiro_nome = primeiro_nome.replace(' ', '')
                            sobrenome_smstome = fake.last_name()
                            primeiro_nome = re.sub(r'[^a-zA-Z0-9._%+-]+', '', primeiro_nome)
                            sobrenome_smstome = re.sub(r'[^a-zA-Z0-9._%+-]+', '', sobrenome_smstome)
                            email_customizado = f"{primeiro_nome.lower()}.{sobrenome_smstome.lower()}@{fake.free_email_domain()}"
                            #email_customizado = re.sub(r'[^a-zA-Z0-9._%+-]+', '', email_customizado)
                            chrome.open('https://smstome.com/sign-up')
                            chrome.wait_for_element('input[name=name]').send_keys(primeiro_nome + ' ' + sobrenome_smstome)
                            chrome.wait_for_element('input[name=email]').send_keys(email_customizado)
                            senha_smstome = fake.password(length=12, special_chars=True, digits=True, upper_case=True, lower_case=True)
                            chrome.wait_for_element('input[name=password]').send_keys(senha_smstome)
                            expressao = chrome.wait_for_element('xpath','/html/body/main/header/section/div/form/div[4]/label').text
                            expressao = expressao.replace('What is ', '')
                            expressao = expressao.replace('?', '')
                            resultado = resultado = eval(expressao)
                            chrome.wait_for_element('input[name=captcha]').send_keys(resultado)
                            chrome.wait_for_element('button.btn.btn-primary').click()
                            time.sleep(2)
                            chrome.open('https://smstome.com/country/france')
                            
                        num_pag = chrome.wait_for_element('/html/body/main/section/div[8]/div/a[13]').text
                        num_pag = int(num_pag) - 1
                        num_pag = random.randint(1, int(num_pag))
                        print(num_pag)
                        url_agora = chrome.driver.current_url
                        chrome.get(f'{url_agora}?page={num_pag}')
                        numero_de_elementos = random.randint(1, 7)
                        rnd2 = random.randint(1, 3)
                        try:
                            #print(numero_de_elementos, rnd2)
                            chrome.wait_for_element(f'/html/body/main/section/div[{numero_de_elementos}]/div[{rnd2}]/div/div/div[3]/a').click()
                        except:
                            chrome.wait_for_element(f'/html/body/main/section/div[{numero_de_elementos}]/div[1]/div/div/div[3]/a').click()
                        

                    time.sleep(5)
                    url_atual = chrome.driver.current_url
                    chrome.execute_script("document.body.style.zoom='50%'")
                    num = chrome.wait_for_element('/html/body/main/header/section/h1/small/b').text
                    print(num)
                    window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número: {num}')
                    window.Refresh()
                    print(num)
                    criou = False
                ################# PEGAR NÚMERO #################

                #chrome.execute_script("window.open('a', 'new_tab')")
                #chrome.driver.switch_to.window(chrome.driver.window_handles[-1])
                url = f"https://www.instagram.com/"
                chrome.set_window_size(800, 800)
                chrome.driver.uc_open_with_reconnect(url, 10)
                #chrome.driver.switch_to.window(chrome.driver.window_handles[-1])
                #for handle in chrome.driver.window_handles:
                #    chrome.driver.switch_to.window(handle)
                #    if 'Instagram' in chrome.driver.title:
                #        break

                try:
                    chrome.driver.uc_click(
                        'button:contains("Permitir todos os cookies")', 5)
                    print('Cookies aceito')
                    #for handle in chrome.driver.window_handles:
                    #    chrome.driver.switch_to.window(handle)
                    #    if 'Instagram' in chrome.driver.title:
                    #        break
                    cook = True
                    time.sleep(5)
                except:
                    print('Sem cookies')
                    cook = False
                try:
                    chrome.driver.uc_click(
                        "a[href='/accounts/emailsignup/']", 4)
                except:
                    chrome.driver.refresh()
                    chrome.driver.uc_click("a[href='/accounts/emailsignup/']", 4)

                #for handle in chrome.driver.window_handles:
                #    chrome.driver.switch_to.window(handle)
                #    if 'Instagram' in chrome.driver.title:
                #        break
                lista_user = random.choices(range(0, 9), k=2)
                lista_letras = random.choices(letras, k=2)
                nomea = fake.first_name_male().replace(" ", "")
                nome = unicodedata.normalize('NFKD', nomea).encode(
                    'ASCII', 'ignore').decode('ASCII')
                sobrenomea = fake.last_name().replace(" ", "").lower()
                sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                    'ASCII', 'ignore').decode('ASCII')
                nome_completo = nome + ' ' + sobrenome
                nome_completo_s = nome + sobrenome
                numeros_concatenados = ''.join(str(numero)
                                            for numero in lista_user)
                user_completo1 = nome_completo_s + '' + \
                    str(numeros_concatenados) + ''.join(lista_letras)
                user_completo = random.randint(1, len(user_completo1))
                string_with_dot = user_completo1[:user_completo] + \
                    '_' + user_completo1[user_completo:]
                user_completo_antigo = string_with_dot.lower()
                escolha = random.choice(["_", "."])
                user_completo = nome + escolha + sobrenome + \
                    str(numeros_concatenados) + ''.join(lista_letras)

                print(user_completo)
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] User: {user_completo}')
                window.Refresh()
                senha = gerar_senha(12)
                print(senha)
                chrome.wait_for_element("//input[@name='emailOrPhone']", timeout=30)
                chrome.type("//input[@name='fullName']", nome_completo)
                time.sleep(random.uniform(0.5, 2))
                chrome.wait_for_element("//input[@name='emailOrPhone']", timeout=30)
                chrome.type("//input[@name='emailOrPhone']", num)
                time.sleep(random.uniform(0.5, 2))
                chrome.type("//input[@name='username']", user_completo)
                time.sleep(random.uniform(0.5, 2))
                chrome.type("//input[@name='password']", senha)
                time.sleep(random.uniform(0.5, 2))
                time.sleep(5)
                chrome.driver.uc_click('''button[type='submit']''', 5)
                ano = str(random.randint(1960, 2000))
                janela_principal = chrome.driver.current_window_handle
                if len(chrome.find_elements("//input[@name='emailOrPhone']")) == 1:
                    print('IP Bloqueado, procurando outro IP')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] IP Bloqueado')
                    window.Refresh()

                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Procurando outro IP')
                    window.Refresh()
                    tentativa = 1
                    if vpn_nav == 'SurfShark':
                        while True:
                            chrome.execute_script(
                                "window.open('a', 'new_tab')")
                            
                            nova_janela = chrome.driver.window_handles[-1]
                            chrome.driver.switch_to.window(nova_janela)
                            chrome.driver.get(url_extensao)
                            chrome.wait_for_element(
                                "//button[@data-test='disconnect-button']").click()
                            time.sleep(2)
                            # locais = ['Canada', 'Australia', 'Netherlands']
                            # local_vpn = random.choice(locais)
                            chrome.send_keys(
                                "//input[@data-test='location-search-input']", local_vpn)
                            chrome.click("//div[@data-test='location-title']")
                            try:
                                chrome.wait_for_element(
                                    "//button[@data-test='disconnect-button']")

                                print('VPN conectada')
                                time.sleep(5)
                            except:
                                print('Não foi possivel conectar')

                            chrome.driver.close()
                            
                            chrome.driver.switch_to.window(janela_principal)
                            time.sleep(3)
                            try:
                                chrome.driver.uc_click(
                                    '''button[type='submit']''', 5)
                            except:
                                chrome.driver.uc_click(
                                    '''//button[@type='submit']''', 5)

                            if len(chrome.find_elements("//select[@title='Ano:']")) == 1:
                                print('IP aceito')
                                break
                            tentativa += 1
                            if tentativa == 5:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Não achou IP válido', text_color='red')
                                window.Refresh()
                                raise Exception("Não achou IP válido")
                    elif vpn_nav == 'TouchVPN':
                        while True:
                            chrome.execute_script(
                                "window.open('a', 'new_tab')")
                            
                            nova_janela = chrome.driver.window_handles[-1]
                            chrome.driver.switch_to.window(nova_janela)
                            chrome.driver.get(url_extensao)
                            chrome.wait_for_element("div[id=ConnectionButton]").click()
                            chrome.wait_for_element("div[class=location]")
                            chrome.wait_for_element("div[id=ConnectionButton]").click()
                            time.sleep(3)
                            chrome.driver.close()
                            
                            chrome.driver.switch_to.window(janela_principal)
                            time.sleep(3)
                            try:
                                chrome.driver.uc_click(
                                    '''button[type='submit']''', 5)
                            except:
                                chrome.driver.uc_click(
                                    '''//button[@type='submit']''', 5)

                            if len(chrome.find_elements("//select[@title='Ano:']")) == 1:
                                print('IP aceito')
                                break
                            tentativa += 1
                            if tentativa == 5:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Não achou IP válido', text_color='red')
                                window.Refresh()
                                raise Exception("Não achou IP válido")
                            
                    elif vpn_nav == 'CyberGhost':
                        while True:
                            chrome.execute_script(
                                "window.open('a', 'new_tab')")
                            
                            nova_janela = chrome.driver.window_handles[-1]
                            chrome.driver.switch_to.window(nova_janela)
                            chrome.driver.get(url_extensao)
                            chrome.wait_for_element("div[class=spinner]").click()
                            chrome.wait_for_element('//h4[text()="Start a Connection"]')
                            time.sleep(2)
                            chrome.wait_for_element("div[class=spinner]").click()
                            while True:
                                if chrome.find_elements('//h4[text()="Connected"]'):
                                    print('VPN Conectada')
                                    break
                                elif chrome.find_elements('//h4[text()="connectPage.error"]'):
                                    chrome.wait_for_element("div[class=spinner]").click()
                                    chrome.wait_for_element('//h4[text()="Connected"]')
                            
                            chrome.driver.close()
                            
                            chrome.driver.switch_to.window(janela_principal)
                            time.sleep(3)
                            try:
                                chrome.driver.uc_click(
                                    '''button[type='submit']''', 5)
                            except:
                                chrome.driver.uc_click(
                                    '''//button[@type='submit']''', 5)

                            if len(chrome.find_elements("//select[@title='Ano:']")) == 1:
                                print('IP aceito')
                                break
                            tentativa += 1
                            if tentativa == 5:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Não achou IP válido', text_color='red')
                                window.Refresh()
                                raise Exception("Não achou IP válido")
                            
                    elif vpn_nav == 'ZenMate':
                        while True:
                            chrome.execute_script(
                                "window.open('a', 'new_tab')")
                            
                            nova_janela = chrome.driver.window_handles[-1]
                            chrome.driver.switch_to.window(nova_janela)
                            chrome.driver.get(url_extensao)
                            chrome.wait_for_element("div.shield-container.active").click()
                            time.sleep(2)
                            while True:

                                if chrome.find_elements('body > app-root > main > app-campaign > app-image-campaign > div > div.header.white > a > i'):
                                    
                                    chrome.find_element('body > app-root > main > app-campaign > app-image-campaign > div > div.header.white > a > i').click()

                                elif chrome.find_elements('body > app-root > main > app-home > app-rate-us > div > div > button'):
                                    
                                    try:
                                        chrome.find_element('body > app-root > main > app-home > app-rate-us > div > div > button').click()
                                    except:
                                        pass
                                    break
                                
                                elif chrome.find_elements('div.shield-container'):
                                    break

                            chrome.wait_for_element("div.shield-container").click()
                            time.sleep(2)
                            while True:
                                if chrome.find_element('div.proxy-status-container > div.pt-1.location-info > a').text == 'Connected to':
                                    print('VPN Conectada')
                                    break
                            
                            chrome.driver.close()
                            
                            chrome.driver.switch_to.window(janela_principal)
                            time.sleep(3)
                            try:
                                chrome.driver.uc_click(
                                    '''button[type='submit']''', 5)
                            except:
                                chrome.driver.uc_click(
                                    '''//button[@type='submit']''', 5)

                            if len(chrome.find_elements("//select[@title='Ano:']")) == 1:
                                print('IP aceito')
                                break
                            tentativa += 1
                            if tentativa == 5:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Não achou IP válido', text_color='red')
                                window.Refresh()
                                raise Exception("Não achou IP válido")
                
                    elif vpn_nav == 'VeePN':
                        while True:
                            chrome.execute_script(
                                "window.open('a', 'new_tab')")
                            
                            nova_janela = chrome.driver.window_handles[-1]
                            chrome.driver.switch_to.window(nova_janela)
                            chrome.driver.get(url_extensao)
                            chrome.wait_for_element('div[id=mainBtn]').click()
                            time.sleep(3)
                            chrome.wait_for_element('div[id=mainBtn]').click()
                            while True:
                                if chrome.find_element("div.description.fadeIn.linebreak").text == 'VPN is ON':
                                    print('VPN Conectada')
                                    break
                                elif chrome.find_element("div.description.fadeIn.linebreak").text == 'VPN is OFF':
                                    chrome.wait_for_element('div[id=mainBtn]').click()
                                elif chrome.find_elements("div.footer-decline-text"):
                                    chrome.wait_for_element("div.footer-decline-text").click()

                            
                            chrome.driver.close()
                            
                            chrome.driver.switch_to.window(janela_principal)
                            time.sleep(3)
                            try:
                                chrome.driver.uc_click(
                                    '''button[type='submit']''', 5)
                            except:
                                chrome.driver.uc_click(
                                    '''//button[@type='submit']''', 5)

                            if len(chrome.find_elements("//select[@title='Ano:']")) == 1:
                                print('IP aceito')
                                break
                            tentativa += 1
                            if tentativa == 5:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Não achou IP válido', text_color='red')
                                window.Refresh()
                                raise Exception("Não achou IP válido")
                    elif vpn_nav == 'PlanetVPN':
                        while True:
                            chrome.execute_script(
                                "window.open('a', 'new_tab')")
                            
                            nova_janela = chrome.driver.window_handles[-1]
                            chrome.driver.switch_to.window(nova_janela)
                            chrome.driver.get(url_extensao)

                            chrome.wait_for_element('button.button.button-connected').click()
                            time.sleep(2)
                            chrome.wait_for_element('button.button.button-disconnected').click()
                            time.sleep(1)
                            while True:
                                if chrome.find_elements("button.button.button-connected"):
                                    print('VPN Conectada')
                                    break
                                elif chrome.find_elements("button.button.button-disconnected"):
                                    chrome.find_element("button.button.button-disconnected").click()

                            
                            chrome.driver.close()
                            chrome.driver.switch_to.window(janela_principal)
                            time.sleep(3)
                            try:
                                chrome.driver.uc_click(
                                    '''button[type='submit']''', 5)
                            except:
                                chrome.driver.uc_click(
                                    '''//button[@type='submit']''', 5)

                            if len(chrome.find_elements("//select[@title='Ano:']")) == 1:
                                print('IP aceito')
                                break
                            tentativa += 1
                            if tentativa == 5:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Não achou IP válido', text_color='red')
                                window.Refresh()
                                raise Exception("Não achou IP válido")

                    elif vpn_nav == 'Troywell':
                        while True:
                            chrome.execute_script(
                                "window.open('a', 'new_tab')")
                            
                            nova_janela = chrome.driver.window_handles[-1]
                            chrome.driver.switch_to.window(nova_janela)
                            chrome.driver.get(url_extensao)

                            chrome.wait_for_element('div.connect-button').click()
                            time.sleep(2)
                            chrome.wait_for_element("div.server-select__row").click()
                            time.sleep(2)
                            chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                            while True:
                                try:
                                    chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]", timeout=4).click()
                                    break
                                except:
                                    chrome.driver.get(url_extensao)
                                    time.sleep(2)
                                    chrome.wait_for_element("div.server-select__row").click()
                                    time.sleep(2)
                                    chrome.wait_for_element("input.search__input").clear()
                                    chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                                    chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]").click()

                            chrome.wait_for_element("div.connect-button").click()
                            try:
                                chrome.wait_for_element("div.connection-block__label")
                            except:
                                if chrome.find_elements("div.button.button_selected.connection-failed__button.connection-failed__button_blue"):
                                    chrome.find_element("div.button.button_selected.connection-failed__button.connection-failed__button_blue").click()
                                    chrome.wait_for_element("div.server-select__row").click()
                                    time.sleep(2)
                                    chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                                    chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]").click()
                                    chrome.wait_for_element("div.connect-button").click()
                                    chrome.wait_for_element("div.connection-block__label")
                            time.sleep(1)
                            while True:
                                if chrome.find_elements("div.connection-block__label"):
                                    print('VPN Conectada')
                                    break
                                elif chrome.find_elements("div.button.button_selected.connection-failed__button.connection-failed__button_blue"):
                                    chrome.find_element("div.button.button_selected.connection-failed__button.connection-failed__button_blue").click()
                                    chrome.wait_for_element("div.server-select__row").click()
                                    time.sleep(2)
                                    chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                                    chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]").click()
                                    chrome.wait_for_element("div.connect-button").click()
                                    chrome.wait_for_element("div.connection-block__label")
                            
                            chrome.driver.close()
                            chrome.driver.switch_to.window(janela_principal)
                            time.sleep(3)
                            try:
                                chrome.driver.uc_click(
                                    '''button[type='submit']''', 5)
                            except:
                                chrome.driver.uc_click(
                                    '''//button[@type='submit']''', 5)

                            if len(chrome.find_elements("//select[@title='Ano:']")) == 1:
                                print('IP aceito')
                                break
                            tentativa += 1
                            if tentativa == 5:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Não achou IP válido', text_color='red')
                                window.Refresh()
                                raise Exception("Não achou IP válido")


                try:
                    chrome.wait_for_element(
                        "//select[@title='Ano:']").send_keys(ano)
                except:
                    print('IP Bloqueado')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] IP Bloqueado ou Número bloqueado', text_color='red')
                    window.Refresh()

                dia = str(random.randint(1, 28))
                time.sleep(random.uniform(0.5, 2))
                chrome.wait_for_element(
                    "//select[@title='Dia:']").send_keys(dia)
                months = [
                    ("janeiro", 1),
                    ("fevereiro", 2),
                    ("março", 3),
                    ("abril", 4),
                    ("maio", 5),
                    ("junho", 6),
                    ("julho", 7),
                    ("agosto", 8),
                    ("setembro", 9),
                    ("outubro", 10),
                    ("novembro", 11),
                    ("dezembro", 12),
                ]

                random_month = random.choice(months)
                month_text = random_month[0]

                time.sleep(random.uniform(0.5, 2))
                chrome.wait_for_element(
                    "//select[@title='Mês:']").send_keys(month_text)
                time.sleep(2)
                chrome.driver.uc_click('button:contains("Avançar")', 15)
                if len(chrome.find_elements("//p[@id='ssfErrorAlert']")) == 1 or chrome.find_elements("//span[contains(text(), 'Não foi possível criar uma conta para você')]"):
                    print('IP Bloqueado ou Número bloqueado')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] IP Bloqueado ou Número bloqueado', text_color='red')
                    window.Refresh()
                    raise Exception('skip')
                captcha_element = chrome.find_elements(
                    "//input[@id='recaptcha-input']")
                tentativas = 1
                if len(captcha_element) == 1:
                    print('Resolvendo captcha')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Resolvendo captcha')
                    window.Refresh()
                    while True:
                        try:
                            # Check if the button is clickable
                            button = WebDriverWait(chrome.driver, 3).until(EC.element_to_be_clickable(
                                (By.XPATH, "//button[contains(text(), 'Avançar')]")))

                            # Click the button once it's clickable
                            chrome.driver.uc_click(
                                'button:contains("Avançar")', 20)
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Captcha resolvido')
                            window.Refresh()
                            break  # Exit the loop once the button is clicked

                        except Exception as e:
                            print(f"Captcha ainda não resolvido")

                            # Wait for a short interval before checking again
                            time.sleep(2)
                            tentativas += 1
                            if tentativas == 40:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Captcha não pode ser resolvido')
                                window.Refresh()
                                print('Captcha não pode ser resolvido')
                                raise Exception(' ')
                else:
                    print('Sem Captcha')
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                window.Refresh()
                troca_ip_estatica = 0
                
                ########## RECEBER CODIGO ##########
                chrome.execute_script("window.open('a', 'new_tab')")
                janela_prov = chrome.driver.window_handles[-1]
                chrome.driver.switch_to.window(janela_prov)

                if prov_atual == 'quackr.io':
                    try:
                        encontrado = False
                        chrome.driver.default_get(url_atual)
                        tentativa = 0
                        while not encontrado and tentativa < 6:
                            if "#google_vignette" in chrome.driver.current_url:
                                chrome.driver.refresh()
                                chrome.execute_script(
                                    "document.body.style.zoom='50%'")
                                try:
                                    chrome.execute_script("""
                                    var l = document.getElementsByClassName("footer-overlay-regulated")[0];
                                    l.parentNode.removeChild(l);
                                    """)
                                except:
                                    pass
                                try:
                                    chrome.execute_script("""
                                    var l = document.getElementsByClassName("message is-info")[0];
                                    l.parentNode.removeChild(l);
                                    """)
                                except:
                                    pass
                                time.sleep(3)
                            try:
                                elemento = chrome.wait_for_element('/html/body/app-root/div/div/main/messages/section/div/div/div/table/tbody/tr/td[3]').text
                                # print(elemento)
                                time_second = chrome.wait_for_element('/html/body/app-root/div/div/main/messages/section/div/div/div/table/tbody/tr/td[1]').text
                                # print(time_second)
                            except:
                                elemento = 'Não recebeu'
                                time_second = 'Não recebeu'
                            if 'Instagram' in elemento and (
                                    'seconds' in time_second or '1 minute ago' in time_second or '2 minute ago' in time_second):
                                encontrado = True
                                match = re.search(r'\d+\s*\d+\s*\d+\s*\d+\s*\d+\s*\d+',
                                                elemento)  # Extrai seis grupos de dígitos, permitindo espaços entre eles
                                if match:
                                    numeros = ''.join(match.group().split())
                                    chrome.driver.close()
                            else:
                                # Clique no outro elemento
                                tentativa = tentativa + 1
                                chrome.driver.refresh()
                                chrome.execute_script(
                                    "document.body.style.zoom='50%'")
                                time.sleep(10)
                        if tentativa == 6:
                            #chrome.driver.quit()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Codigo não recebido.')
                            window.Refresh()

                            raise Exception("Codigo não recebido.")
                    except Exception as e:
                        print(e)
                        raise Exception("Codigo não recebido.")
                    
                elif prov_atual == 'temporary-phone-number.com':
                    try:
                        encontrado = False
                        chrome.driver.default_get(url_atual)
                        tentativa = 0
                        while not encontrado and tentativa < 6:
                            if "#google_vignette" in chrome.driver.current_url:
                                chrome.driver.refresh()
                                chrome.execute_script(
                                    "document.body.style.zoom='50%'")
                                try:
                                    chrome.execute_script("""
                                    var l = document.getElementsByClassName("footer-overlay-regulated")[0];
                                    l.parentNode.removeChild(l);
                                    """)
                                except:
                                    pass
                                try:
                                    chrome.execute_script("""
                                    var l = document.getElementsByClassName("message is-info")[0];
                                    l.parentNode.removeChild(l);
                                    """)
                                except:
                                    pass
                                time.sleep(3)
                            try:
                                botao_fechar = chrome.find_elements("div.fc-ab-root.button.fc-close")
                                chrome.execute_script(
                                    "arguments[0].click();", botao_fechar)
                            except:
                                pass
                            try:
                                elemento = chrome.wait_for_element('div.direct-chat-text').text
                                time_second = chrome.wait_for_element('time.timeago.direct-chat-timestamp.pull-left').text
                                # print(time_second)
                            except:
                                elemento = 'Não recebeu'
                                time_second = 'Não recebeu'
                            if 'Instagram' in elemento and (
                                    'seconds' in time_second or '1 minute ago' in time_second or '2 minute ago' in time_second):
                                encontrado = True
                                match = re.search(r'\d+\s*\d+\s*\d+\s*\d+\s*\d+\s*\d+',
                                                elemento)  # Extrai seis grupos de dígitos, permitindo espaços entre eles
                                if match:
                                    numeros = ''.join(match.group().split())
                                    chrome.driver.close()
                            else:
                                # Clique no outro elemento
                                tentativa = tentativa + 1
                                chrome.driver.refresh()
                                chrome.execute_script(
                                    "document.body.style.zoom='50%'")
                                time.sleep(10)
                        if tentativa == 6:
                            #chrome.driver.quit()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Codigo não recebido.')
                            window.Refresh()

                            raise Exception("Codigo não recebido.")
                    except Exception as e:
                        print(e)
                        raise Exception("Codigo não recebido.")
                    
                elif prov_atual == 'smstome.com':
                    try:
                        encontrado = False
                        chrome.driver.default_get(url_atual)
                        tentativa = 0
                        while not encontrado and tentativa < 6:
                            chrome.execute_script(
                                "document.body.style.zoom='50%'")
                            elemento = chrome.wait_for_element(f'/html/body/main/section/div[1]/table/tbody/tr[1]/td[3]').text
                            print(elemento)
                            # print(elemento)
                            time_second = chrome.wait_for_element(f'/html/body/main/section/div[1]/table/tbody/tr[1]/td[2]').text
                            print(time_second)
                            # print(time_second)
                            if 'Instagram' in elemento and (
                                    'seconds' in time_second or '1 minute ago' in time_second or '2 minutes ago' in time_second):
                                encontrado = True
                                match = re.search(r'\d+\s*\d+\s*\d+\s*\d+\s*\d+\s*\d+',
                                                elemento)  # Extrai seis grupos de dígitos, permitindo espaços entre eles
                                if match:
                                    numeros = ''.join(match.group().split())
                                    chrome.driver.close()
                            else:
                                # Clique no outro elemento
                                tentativa = tentativa + 1
                                chrome.driver.refresh()
                                chrome.execute_script(
                                    "document.body.style.zoom='50%'")
                                time.sleep(7)
                        if tentativa == 6:
                            #chrome.driver.quit()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Codigo não recebido.')
                            window.Refresh()

                            raise Exception("Codigo não recebido.")
                    except Exception as e:
                        print(e)
                        raise Exception("Codigo não recebido.")


                ########## RECEBER CODIGO ##########

                janela_insta = chrome.driver.window_handles[0]
                chrome.driver.switch_to.window(janela_insta)

                cod = numeros.replace(' ', '')
                codigo = re.sub('[^0-9]', '', cod)[:6]
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                window.Refresh()
                codigo = cod
                for codigo in cod:
                    chrome.send_keys(
                        "//input[@name='confirmationCode']", codigo)
                    time.sleep(random.uniform(0.1, 0.4))

                time.sleep(random.uniform(0.5, 2))
                chrome.driver.uc_click('button:contains("Confirmar")', 20)
                tentativa_log = 0
                while True:
                    print(tentativa_log)
                    if len(chrome.find_elements("//p[@id='phoneSignupConfirmErrorAlert']")) == 1:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando relogar')
                        window.Refresh()
                        chrome.driver.uc_open_with_reconnect(url, 3)
                        try:
                            chrome.driver.uc_click(
                                'button:contains("Permitir todos os cookies")', 5)
                            print('Cookies aceito')
                            time.sleep(5)
                        except:
                            print('Sem cookies')
                        for user in user_completo:
                            chrome.send_keys(
                                "//input[@name='username']", user)
                            time.sleep(random.uniform(0.001, 0.05))
                        time.sleep(random.uniform(0.5, 2))
                        # chrome.type("//input[@name='password']", senha)
                        for password in senha:
                            chrome.send_keys(
                                "//input[@name='password']", password)
                            time.sleep(random.uniform(0.001, 0.05))
                        time.sleep(2)
                        chrome.driver.uc_click(
                            '''button[type='submit']''', 20)

                        if (
                            "challenge" in chrome.driver.current_url or
                            "suspended" in chrome.driver.current_url or
                            len(chrome.find_elements("//div[contains(text(), 'Sua senha está incorreta. Confira-a.')]")) == 1 or
                            len(chrome.find_elements("//div[text()='A sua conta foi desativada por violar nossos termos: http://instagram.com/about/legal/terms/']")) == 1 or
                            len(chrome.find_elements("//div[text()='Houve um problema ao entrar no Instagram. Tente novamente em breve.']")) == 1 or
                            len(chrome.find_elements("//div[text()='Não foi possível se conectar ao Instagram. Verifique se você está conectado à Internet e tente novamente.']")) == 1
                            
                        ):
                            print('Conta com SMS')
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] SMS.', text_color='red')
                            window.Refresh()
                            break
                    if "challenge" in chrome.driver.current_url or "suspended" in chrome.driver.current_url or len(chrome.find_elements("//div[contains(text(), 'Sua senha está incorreta. Confira-a.')]")) == 1:
                        print('Conta com SMS')
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] SMS.', text_color='red')
                        window.Refresh()
                        break
                    if tentativa_log == 30:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tempo excedido', text_color='red')
                        window.Refresh()
                        raise Exception('Tempo excedido')
                    tentativa_log += 1
                    time.sleep(2)
                    if len(chrome.find_elements("//span[contains(text(), 'Página inicial')]")) == 1:
                        print('Conta criada com sucesso')
                        criou = True
                        time.sleep(4)
                        if len(chrome.find_elements("//span[text()='Permitir todos os cookies']")) == 1:
                            try:
                                chrome.driver.uc_click(
                                    "//span[text()='Permitir todos os cookies']", 5)
                                print('Cookies aceito')
                                time.sleep(5)
                            except:
                                print('Sem cookies')
                        troca_ip = 1
                        try:
                            conteudo = config['vpn']
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                text_color=('lime'))
                            window.Refresh()
                            contagem = contagem + 1
                            window['criadas'].update(contagem)
                            window.Refresh()
                            now = datetime.now()
                            now_brasilia = tz.localize(now)
                            timestamp = now_brasilia.strftime(
                                "%d/%m/%Y %H:%M:%S")
                            try:
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, num, timestamp, maquina,
                                        vpn_nav + ' - ' + f'FREESMS + NAV: {prov_atual}', local_vpn]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:F{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            except Exception as e:
                                print(e)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                tempo_aleatorio = random.randint(10, 40)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                time.sleep(tempo_aleatorio)
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, num, timestamp,
                                        maquina, vpn_nav + ' - ' + f'FREESMS + NAV: {prov_atual}', local_vpn]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:F{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            window['total'].update(num_rows)
                            random_number = random.random()

                            # Definir a chance desejada (10%)
                            chance = 0.2

                            # Verificar se o número aleatório está abaixo da chance
                            if random_number < chance and not user_mysql == "wn3":
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                    funcionamento, scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                sheet_name = 'relatorio_geral'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, num, timestamp, maquina,
                                        vpn_nav + ' - ' + f'FREESMS + NAV: {prov_atual}', local_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                        except Exception as e:
                            print(e)
                        break
            
        except:
            try:
                chrome.driver.quit()
            except:
                pass
            traceback.print_exc()


def creator_2NR_NAV():
    SPREADSHEET_ID = config['spreadsheet']
    conteudo = config['vpn']
    senha = gerar_senha(12)
    maquina = config['maquina']
    tentativa = False
    seguido = False
    regiao_vpn = 'Sem dados'
    app = "Nav"
    global vpn_nav
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    # Código que gera a saída
    import os
    from selenium.webdriver.common.by import By
    from selenium.webdriver.chrome.service import Service
    import time
    from selenium.common.exceptions import NoSuchElementException
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support.ui import Select
    import requests
    from selenium.webdriver.support import expected_conditions as EC
    import undetected_chromedriver as uc
    import traceback
    import string
    import subprocess
    import re
    import unicodedata
    import random
    import time
    import requests
    import hashlib
    import subprocess
    try:
        from seleniumbase import SB
    except:
        print('Instalando SeleniumBase')
        subprocess.run(
            ['pip', 'install', 'seleniumbase'])
        from seleniumbase import SB
    # verifica se o arquivo existe na pasta do bot

    try:
        from rich.console import Console
    except ModuleNotFoundError:
        import subprocess
        import sys

        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['pip', 'install', '-r', 'requirements.txt'])
        subprocess.run(['deactivate'], shell=True)
        from rich.console import Console
    import os
    import time
    try:
        import uiautomator2 as u2
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'uiautomator2==2.16.25'])
        subprocess.run(['deactivate'], shell=True)
        subprocess.run(['pip', 'install', '--upgrade', 'requests'])
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        import requests
        time.sleep(10)
        import uiautomator2 as u2
    d = u2.connect(f'{porta}')
    import requests
    import hashlib
    import subprocess
    from colorama import init, Fore, Back, Style
    from faker import Faker
    # teste
    init(autoreset=True)
    console = Console()
    from termcolor import colored

    from rich.console import Console
    from rich.panel import Panel
    from rich.text import Text
    from rich.rule import Rule

    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random
    from datetime import datetime
    import string
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import NoSuchElementException
    from mailtm import Email
    import re
    import logging
    import sys
    logger = logging.getLogger(__name__)

    handler = logging.FileHandler('log.txt')
    handler.setLevel(logging.ERROR)

    logger.addHandler(handler)
    file_path = './storage/recaptcha.crx'
    import zipfile

    if os.path.exists("./storage/recaptcha/"):
        result = f"A pasta 'recaptcha' já existe em '{file_path}'."
    else:
        # URL para download
        url = 'https://www.dropbox.com/scl/fi/ezzl75hi49jq9rq84vvpl/recaptcha.crx?rlkey=z2vyoo7rqc407l36atsjfajzg&st=cmpklgle&dl=1'

        # Fazendo o download do arquivo
        response = requests.get(url)
        if response.status_code == 200:
            with open(file_path, 'wb') as file:
                file.write(response.content)
            print("Arquivo 'recaptcha.crx' baixado e salvo em './storage/recaptcha.crx'.")
            # Caminho do arquivo original (altere para o seu caminho de arquivo)
            caminho_original = './storage/recaptcha.crx'
            novo_caminho = './storage/recaptcha.zip'

            # Renomear o arquivo
            os.rename(caminho_original, novo_caminho)

            # Caminho do arquivo zip
            caminho_zip = './storage/recaptcha.zip'

            # Diretório de destino para extrair
            diretorio_destino = './storage/recaptcha/'

            # Remover um arquivo anterior, se existir
            arquivo_antigo = './storage/recaptcha'
            if os.path.exists(arquivo_antigo):
                os.remove(arquivo_antigo)

            # Criar o diretório de destino se ele não existir
            if not os.path.exists(diretorio_destino):
                os.makedirs(diretorio_destino)

            # Extrair o arquivo zip
            with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                zip_ref.extractall(diretorio_destino)

            print("Arquivo extraído com sucesso!")
            os.remove('./storage/recaptcha.zip')

        else:
            result = "Não foi possível baixar o arquivo. Status Code: " + \
                str(response.status_code)

    

    def vpn_avast():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Avast', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop("com.avast.android.vpn")
            d.app_start("com.avast.android.vpn", ".app.wizard.WizardActivity")
            time.sleep(10)
        except Exception as e:
            print(e)
        abc = False

    def nenhuma_vpn():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.facebook.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        time.sleep(10)

    def vpn_hotspotshield():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HotspotShield',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('hotspotshield.android.vpn')
            d.app_start('hotspotshield.android.vpn')
        except Exception as e:
            print(e)
        d(resourceId='hotspotshield.android.vpn:id/tryAgainButton').click()
        time.sleep(5)
        d(resourceId='hotspotshield.android.vpn:id/btnVpnConnect').click()

        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_pia():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da PiaVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.privateinternetaccess.android')
            d.app_start('com.privateinternetaccess.android')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()
        time.sleep(3)
        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()

        abc = False

    def vpn_express():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da ExpressVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.expressvpn.vpn')
            d.app_start('com.expressvpn.vpn')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.expressvpn.vpn:id/obiButton').click()
        time.sleep(3)
        d(resourceId='com.expressvpn.vpn:id/obiButton').click()

        abc = False

    def vpn_nord():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da NordVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.nordvpn.android')
            time.sleep(5)
            d.app_start('com.nordvpn.android', use_monkey=True)
        except:
            pass
        time.sleep(10)
        time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_surf():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('com.surfshark.vpnclient.android')
            d.app_start('com.surfshark.vpnclient.android')
        except:
            pass
        time.sleep(15)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_better():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da BetterNet', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        try:
            d.app_stop('com.freevpnintouch')
            d.app_start('com.freevpnintouch')
        except:
            pass
        time.sleep(10)
        dialog = d(resourceId='com.freevpnintouch:id/dialogCtaPositive')
        connect = d(
            resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
        if dialog.exists:
            d(resourceId='com.freevpnintouch:id/dialogCtaPositive').click()
            time.sleep(3)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            # time.sleep(5)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
        while connect == 'CONNECT':
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            time.sleep(4)
            connect = d(
                resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            # WebDriverWait(driver, 20).until(
            # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        ip = '127.0.0.1:' + porta

        output = subprocess.check_output(
            ['adb', '-s', ip, 'shell', 'ifconfig'])

        # Verifica se a conexão VPN está ativa
        if not "tun0" in str(output):
            window['output'].print("Não conectado na BetterNet.")
            window.Refresh()
            try:
                connect = d(
                    resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
                d.app_stop('com.freevpnintouch')
                d.app_start('com.freevpnintouch')
                while connect == 'CONNECT':
                    d(resourceId='com.freevpnintouch:id/buttonConnect').click()
                    time.sleep(4)
                    connect = d(
                        resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            except:
                pass
        abc = False

    def vpn_cyberghost():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da CyberGhost', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('de.mobileconcepts.cyberghost')
            d.app_start('de.mobileconcepts.cyberghost')
        except:
            pass
        # time.sleep(3)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        rate = d(resourceId='de.mobileconcepts.cyberghost:id/rate_me_text')
        if rate.exists:
            d(resourceId='android:id/button2').click()
        time.sleep(2)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        abc = False

    def vpn_tunnelbear():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.tunnelbear.android')
            d.app_start("com.tunnelbear.android")
            while True:
                output = subprocess.check_output(
                    ['adb', '-s', porta, 'shell', 'ifconfig'])
                # print(str(output))
                if "tun0" in str(output):
                    print('Conectada')
                    break
                elif not "tun0" in str(output):
                    print('Reconectando')
                    try:
                        d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                        time.sleep(10)
                    except:
                        pass
        except Exception as e:
            print(e)
            pass

    def vpn_avg():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da AVG', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.avg.android.vpn')
            d.app_start("com.avg.android.vpn",
                        "com.avast.android.vpn.app.wizard.WizardActivity")
            regiao_vpn = d(
                resourceId='com.avg.android.vpn:id/location_title').get_text()

        except Exception as e:
            print(e)
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #               stderr=subprocess.DEVNULL, check=True, shell=True)

        time.sleep(30)

    def vpn_windscribe():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Windscribe', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)
            d.app_stop("com.windscribe.vpn")
            d.app_start("com.windscribe.vpn")
        except:
            pass
        d(resourceId='com.windscribe.vpn:id/on_off_button').click()
        time.sleep(10)
        primeiro = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_name').get_text()
        segundo = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_nick_name').get_text()
        regiao_vpn = primeiro + ' ' + segundo

    def vpn_hma():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HMA', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)

            d.app_stop("com.hidemyass.hidemyassprovpn")
            time.sleep(3)
            d.app_start('com.hidemyass.hidemyassprovpn',
                        'com.avast.android.vpn.activity.HmaOnboardingActivity')
        except:
            pass
        time.sleep(10)

    def gerar_id():
        chars = string.ascii_lowercase + string.digits
        android_id = ''.join(random.choice(chars) for i in range(16))
        return android_id

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    window.Refresh()

    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global transition_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass

    def gerar_id():
        chars = string.ascii_lowercase + string.digits
        android_id = ''.join(random.choice(chars) for i in range(16))
        return android_id
    gerar_id()
    android_id = gerar_id()
    subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    time.sleep(2)
    # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True, stdout=subprocess.DEVNULL,
    #               stderr=subprocess.DEVNULL)

    try:
        subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
    except Exception as e:
        pass

    window.Refresh()
    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando sistema inicializar.')
    window.Refresh()

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.')
    window.Refresh()

    d.implicitly_wait(30.0)
    d.set_fastinput_ime(True)
    if not os.path.exists('./erros'):
        os.makedirs('./erros')
    codigo_não_recebido_seguidos = 0
    try:
        conteudo = config['vpn']

        # Executa a função correspondente ao conteúdo do arquivo
        if conteudo == "AVG":
            vpn_avg()
        elif conteudo == "SurfShark":
            vpn_surf()
        elif conteudo == "Nenhuma":
            nenhuma_vpn()
        elif conteudo == "Avast":
            vpn_avast()
        elif conteudo == "ExpressVPN":
            vpn_express()
        elif conteudo == "PiaVPN":
            vpn_pia()
        elif conteudo == "TunnelBear":
            vpn_tunnelbear()
        elif conteudo == "BetterNet":
            vpn_better()
        elif conteudo == "CyberGhost":
            vpn_cyberghost()
        elif conteudo == "NordVPN":
            vpn_nord()
        elif conteudo == "HotspotShield":
            vpn_hotspotshield()
        elif conteudo == "WindscribeVPN":
            vpn_windscribe()
        elif conteudo == "HmaVPN":
            vpn_hma()
        else:
            window['output'].print(
                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
            window.Refresh()
    except Exception as e:
        raise Exception('skip')
        sms = True
    troca_ip = 1
    troca_ip_estatica = 0
    while parar is False:
        senha = gerar_senha(12)
        if parar is True:
            print('Parando Thread')
            break
        print(linha_ret)
        # if codigo_não_recebido_seguidos == 3:
        #    #tempo_aleatorio = random.randint(10, 40)
        #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] 3 códigos não recebidos seguidos.')
        #    window.Refresh()
        #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando 1 hora para voltar novamente.')
        #    window.Refresh()
        #    time.sleep(3600)
        #    codigo_não_recebido_seguidos = 0
        try:

            gerar_id()
            android_id = gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            window['output'].print(linha_ret)
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo 2NR')
            window.Refresh()

            try:
                scope = ["https://spreadsheets.google.com/feeds",
                         "https://www.googleapis.com/auth/drive"]
                creds = ServiceAccountCredentials.from_json_keyfile_name(
                    'credentials.json', scope)
                client = gspread.authorize(creds)
                #
                spreadsheet_id = config['spreadsheet']
                sheet_name = 'contas'
                # Insert user, password, and timestamp into first empty row
                sheet = client.open_by_key(
                    spreadsheet_id).worksheet(sheet_name)
                values = sheet.col_values(1)
                #
                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                rows = sheet.get_all_values()
                #
                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                regex = re.compile(r'\S+\s\S+')
                #
                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                num_rows = sum(1 for row in rows if regex.match(row[0]))
                window['total'].update(num_rows)
            except Exception as e:
                print(e)
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu algum erro ao acessar a planilha.')
                window.Refresh()
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Tentando novamente em 1 minuto.')
                window.Refresh()
                time.sleep(60)
                raise Exception('skip')

            try:
                subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except Exception as e:
                print(e)
                pass
            try:
                subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server.test',
                               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)
                subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, shell=True)
            except:
                pass
            window.Refresh()

            try:
                # time.sleep(10)

                gerar_id()
                android_id = gerar_id()
                subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                               shell=True)
                try:
                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.READ_CONTACTS',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.CAMERA',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.RECORD_AUDIO',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    try:
                        subprocess.run(
                            f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.ACCESS_NOTIFICATION_POLICY',
                            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    except:
                        pass

                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.POST_NOTIFICATIONS',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                except:
                    pass
                try:
                    d.app_start('pl.rs.sip.softphone.newapp')
                except:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu algum erro ao abrir o 2NR, tentando novamente.')
                    window.Refresh()
                time.sleep(3)
                scope = ["https://spreadsheets.google.com/feeds",
                         "https://www.googleapis.com/auth/drive"]
                creds = ServiceAccountCredentials.from_json_keyfile_name(
                    'credentials.json', scope)
                client = gspread.authorize(creds)

                spreadsheet_id = config['spreadsheet']
                sheet_name = config['2nr']

                sheet = client.open_by_key(
                    spreadsheet_id).worksheet(sheet_name)
                # Obtém todas as células
                cells = sheet.get_all_values()

                # Armazena as células que correspondem à condição
                matches = [cell for row in cells for cell in row if
                           re.match(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', cell)]

                # Armazena a lista de células correspondentes à condição em uma variável
                regex2nr = matches
                while len(regex2nr) == 0:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nenhuma conta do 2NR encontrada.\nTentando novamente em 5 min.')
                    window.Refresh()
                    scope = ["https://spreadsheets.google.com/feeds",
                            "https://www.googleapis.com/auth/drive"]
                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                        'credentials.json', scope)
                    client = gspread.authorize(creds)

                    spreadsheet_id = config['spreadsheet']

                    sheet_name = config['2nr']
                    sheet = client.open_by_key(
                        spreadsheet_id).worksheet(sheet_name)
                    # Insert user, password, and timestamp into first empty row
                    sheet = client.open_by_key(
                        spreadsheet_id).worksheet(sheet_name)
                    values = sheet.col_values(1)

                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                    rows = sheet.get_all_values()

                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                    regex = re.compile(r'\S+\s\S+')
                    sheet_name = config['2nr']
                    try:
                        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                        num_rows = sum(1 for row in rows if regex.match(row[0]))
                        window['total'].update(num_rows)
                    except:
                        pass
                    time.sleep(300)
                    cells = sheet.get_all_values()

                    # Armazena as células que correspondem à condição
                    matches = [cell for row in cells for cell in row if
                               re.match(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', cell)]

                    # Armazena a lista de células correspondentes à condição em uma variável
                    regex2nr = matches
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] {len(regex2nr)} conta(s) encontrada.')
                window.Refresh()
                time.sleep(3)
                try:
                    d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(timeout=60)
                except Exception as e:
                    print(e)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao clicar em login. Tentando novamente.')
                    window.Refresh()
                    subprocess.run(
                        f'uiautomator2 -s {porta} uninstall com.github.uiautomator',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    raise Exception('Ocorreu um erro ao clicar em login.')
                time.sleep(5)
                spreadsheet_id = config['spreadsheet']
                sheet_name = config['2nr']
                sheet = client.open_by_key(
                    spreadsheet_id).worksheet(sheet_name)
                # Obtém todas as células

                # Define a faixa de células para leitura
                first_linha = sheet.cell(1, 1).value

                # Divide a string em duas partes separadas por um espaço em branco
                partes = first_linha.split(' ')

                # Atribui a primeira parte (endereço de e-mail) à variável email2nr
                email2nr = partes[0]

                # Atribui a segunda parte (texto) à variável senha2nr
                senha2nr = partes[1]
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Email 2NR: {email2nr}')
                window.Refresh()
                d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email2nr)
                time.sleep(0.5)
                d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha2nr)
                time.sleep(0.5)
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                time.sleep(3)
                perm = d(resourceId='pl.rs.sip.softphone.newapp:id/messages')
                if perm.exists(timeout=30):
                    time.sleep(10)
                    pass
                else:
                    try:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Conta não existe.')
                        window.Refresh()
                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                            'credentials.json', scope)
                        client = gspread.authorize(creds)
                        # Abre a planilha e a planilha de uma determinada aba
                        spreadsheet_id = config['spreadsheet']
                        sheet_name = config['2nr']
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)

                        # Apaga a primeira célula da coluna A e desloca as células abaixo
                        sheet.delete_rows(1, 1)
                        try:
                            conteudo = config['vpn']

                            # Executa a função correspondente ao conteúdo do arquivo
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                        except Exception as e:
                            raise Exception('skip')
                            sms = True
                        raise Exception('skip')
                    except Exception as e:
                        print(e)
                    raise Exception('skip')
                
                if troca_ip_estatica == 2:
                    try:
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        print('2 IP Bloqueado seguidos, apagando número')
                        troca_ip_estatica = 0
                        time.sleep(3)
                    except Exception as e:
                        print(e)
                try:
                    qtd_num2 = d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[*]/androidx.appcompat.widget.LinearLayoutCompat/android.widget.LinearLayout/android.widget.TextView[1]')
                    qtd_num = qtd_num2.all()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] {len(qtd_num)} número(s) encontrado.')
                except Exception as e:
                    print(e)
                if len(qtd_num) == 0:
                    try:
                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                            'credentials.json', scope)
                        client = gspread.authorize(creds)
                        # Abre a planilha e a planilha de uma determinada aba
                        spreadsheet_id = config['spreadsheet']
                        sheet_name = config['2nr']
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)

                        # Apaga a primeira célula da coluna A e desloca as células abaixo
                        sheet.delete_rows(1, 1)
                    except Exception as e:
                        print(e)
                    continue
                window.Refresh()
                
                try:
                    num = d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat/android.widget.LinearLayout/android.widget.TextView[1]').get_text()
                    num = num.replace(' ', '')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Número: +48{num}')
                    window.Refresh()
                    email = num
                except Exception as e:
                    print(e)
                d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonSettings').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()

                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo navegador.')
                window.Refresh()

                nav_oculto = config6['navegador_oculto']
                usar_troca_ip = config6['usar_troca_ip']

                if dialog_values['-vpnlista-'] == 'SurfShark':
                    vpn_usada = 'surfshark'
                elif dialog_values['-vpnlista-'] == 'TouchVPN':
                    vpn_usada = 'touchvpn'
                elif dialog_values['-vpnlista-'] == 'CyberGhost':
                    vpn_usada = 'cyberghost'
                elif dialog_values['-vpnlista-'] == 'ZenMate':
                    vpn_usada = 'zenmate'
                elif dialog_values['-vpnlista-'] == 'UrbanVPN':
                    vpn_usada = 'urbanvpn'
                elif dialog_values['-vpnlista-'] == 'Troywell':
                    vpn_usada = 'troywell'
                elif dialog_values['-vpnlista-'] == 'VeePN':
                    vpn_usada = 'veepn'
                elif dialog_values['-vpnlista-'] == 'PlanetVPN':
                    vpn_usada = 'planetvpn'
                elif dialog_values['-vpnlista-'] == 'Aleatorio':
                    vpn_usada = random.choice(['TouchVPN', 'CyberGhost', 'VeePN', 'PlanetVPN', 'Troywell'])
                    vpn_nav = vpn_usada
                    window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] VPN Escolhida: {vpn_nav}.')
                    window.Refresh()

                if vpn_usada == 'urbanvpn':
                    file_path = './storage/urbanvpn.crx'
                    import zipfile

                    if os.path.exists("./storage/urbanvpn.crx"):
                        result = f"A pasta 'urbanvpn' já existe em '{file_path}'."
                    else:
                        # URL para download
                        url = 'https://www.dropbox.com/scl/fi/y6i5kltqi7vl20v7rc8fp/urbanvpn.crx?rlkey=goarhqxyvz7lgd9m1f2co4cf9&st=vvdo4oy2&dl=1'

                        # Fazendo o download do arquivo
                        response = requests.get(url)
                        if response.status_code == 200:
                            with open(file_path, 'wb') as file:
                                file.write(response.content)
                            print("Arquivo 'urbanvpn.crx' baixado e salvo em './storage/urbanvpn.crx'.")

                        else:
                            result = "Não foi possível baixar o arquivo. Status Code: " + \
                                str(response.status_code)
                            
                if not vpn_nav == "UrbanVPN":
                    with SB(uc=True, locale_code='pt-br', demo=False, headless=nav_oculto, incognito=True, extension_dir=rf'.\storage\recaptcha,{caminho_atual}\storage\{vpn_usada}') as chrome:
                        time.sleep(5)

                        if vpn_nav == 'SurfShark':
                            file_path = './storage/surfshark.crx'
                            import zipfile

                            if os.path.exists("./storage/surfshark/"):
                                result = f"A pasta 'surfshark' já existe em '{file_path}'."
                            else:
                                # URL para download
                                url = 'https://www.dropbox.com/scl/fi/e4f4h29zl5s5tywjp1ev2/surfshark.crx?rlkey=zb499vqpr8swexgd8yrsu6rvc&dl=1'

                                # Fazendo o download do arquivo
                                response = requests.get(url)
                                if response.status_code == 200:
                                    with open(file_path, 'wb') as file:
                                        file.write(response.content)
                                    print("Arquivo 'surfshark.crx' baixado e salvo em './storage/surfshark.crx'.")
                                    # Caminho do arquivo original (altere para o seu caminho de arquivo)
                                    caminho_original = './storage/surfshark.crx'
                                    novo_caminho = './storage/surfshark.zip'

                                    # Renomear o arquivo
                                    os.rename(caminho_original, novo_caminho)

                                    # Caminho do arquivo zip
                                    caminho_zip = './storage/surfshark.zip'

                                    # Diretório de destino para extrair
                                    diretorio_destino = './storage/surfshark/'

                                    # Remover um arquivo anterior, se existir
                                    arquivo_antigo = './storage/surfshark'
                                    if os.path.exists(arquivo_antigo):
                                        os.remove(arquivo_antigo)

                                    # Criar o diretório de destino se ele não existir
                                    if not os.path.exists(diretorio_destino):
                                        os.makedirs(diretorio_destino)

                                    # Extrair o arquivo zip
                                    with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                                        zip_ref.extractall(diretorio_destino)

                                    print("Arquivo extraído com sucesso!")
                                    os.remove('./storage/surfshark.zip')

                                else:
                                    result = "Não foi possível baixar o arquivo. Status Code: " + \
                                        str(response.status_code)
                            try:
                                
                                chrome.set_window_size(800, 800)
                                # Alternar para a nova aba
                                chrome.driver.switch_to.window(
                                    chrome.driver.window_handles[-1])

                                # Verificar se a URL está correta e fechar a aba
                                if chrome.driver.current_url == "https://surfshark.com/pt-br/download/chrome/onboarding":
                                    chrome.driver.close()

                                # Alternar de volta para a aba original
                                chrome.driver.switch_to.window(
                                    chrome.driver.window_handles[0])
                                chrome.open('chrome://extensions/')
                                extensoes = chrome.execute_script(
                                    'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                                )

                                id_extensao = None
                                for ext in extensoes:
                                    nome_ext = chrome.execute_script(
                                        'return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                                    if "Surf" in nome_ext:
                                        id_extensao = chrome.execute_script(
                                            'return arguments[0].getAttribute("id");', ext)
                                        break

                                if id_extensao:
                                    url_extensao = f'chrome-extension://{id_extensao}/index.html'
                                    # chrome.get(url_extensao)
                                    # print(f"Página da extensão aberta em {url_extensao}")
                                else:
                                    print("ID da extensão não encontrado")
                                # Continuar com outras operações na aba original, se necessário
                            except Exception as e:
                                print(e)
                            if os.path.exists(r'.\storage\cookies_surf.json'):
                                chrome.driver.uc_open_with_reconnect(
                                    'https://my.surfshark.com/auth/login', 4)
                                try:
                                    chrome.save_screenshot('erro_nav.png')
                                    chrome.switch_to_frame(
                                        'iframe[id^="cf-chl"]', timeout=1)
                                    print(chrome.driver.find_elements(
                                        By.XPATH, '//*[@id="challenge-stage"]/div/label/input'))
                                    # chrome.driver.uc_click('//*[@id="challenge-stage"]/div/label/input')
                                    chrome.driver.uc_click(
                                        'span')
                                    chrome.save_screenshot('erro_nav.png')
                                    # chrome.driver.execute_script("arguments[0].click();", chrome.driver.find_element(By.XPATH, '//*[@id="challenge-stage"]/div/label/input'))
                                except Exception as e:
                                    print('Sem Cloudflare')
                                with open(r'.\storage\cookies_surf.json', 'r') as file:
                                    cookies = json.load(file)

                                # Adiciona os cookies salvos ao navegador
                                for cookie in cookies:
                                    chrome.driver.add_cookie(cookie)

                                # Recarrega a página para usar os cookies
                                print('Adicionou os cookies')
                                time.sleep(2)
                                chrome.refresh()
                                time.sleep(2)
                                if chrome.driver.current_url == 'https://my.surfshark.com/home/dashboard':
                                    chrome.driver.get(url_extensao)
                                    chrome.wait_for_element(
                                        "//button[@data-test='login-in-button']").click()
                                    time.sleep(3)
                                elif 'https://my.surfshark.com/auth/login' in chrome.driver.current_url:
                                    try:
                                        chrome.driver.get(url_extensao)
                                        chrome.wait_for_element(
                                            "//button[@data-test='login-in-button']").click()

                                        time.sleep(5)
                                        nova_janela = chrome.driver.window_handles[-1]
                                        chrome.driver.switch_to.window(nova_janela)
                                        time.sleep(4)
                                        if chrome.driver.current_url == 'https://my.surfshark.com/account/extension-login-success':

                                            time.sleep(5)
                                            chrome.driver.close()
                                        nova_janela = chrome.driver.window_handles[0]
                                        chrome.driver.switch_to.window(nova_janela)

                                        time.sleep(3)
                                    except Exception as e:
                                        print(e)
                            else:
                                chrome.driver.switch_to.window(
                                    chrome.driver.window_handles[0])
                                import time
                                # Abre uma nova aba para a extensão (geralmente chrome-extension://<extension-id>/)
                                chrome.driver.get(url_extensao)
                                chrome.wait_for_element(
                                    "//button[@data-test='login-in-button']").click()
                                time.sleep(3)
                                janela_principal = chrome.driver.window_handles[0]
                                nova_janela = chrome.driver.window_handles[1]
                                chrome.driver.switch_to.window(nova_janela)
                                print(chrome.driver.current_url)
                                email_surf = emailvpn
                                senha_surf = senhavpn
                                try:
                                    chrome.save_screenshot('erro_nav.png')
                                    chrome.switch_to_frame(
                                        'iframe[id^="cf-chl"]', timeout=1)
                                    print(chrome.driver.find_elements(
                                        By.XPATH, '//*[@id="challenge-stage"]/div/label/input'))
                                    # chrome.driver.uc_click('//*[@id="challenge-stage"]/div/label/input')
                                    chrome.driver.uc_click(
                                        'span')
                                    chrome.save_screenshot('erro_nav.png')
                                    # chrome.driver.execute_script("arguments[0].click();", chrome.driver.find_element(By.XPATH, '//*[@id="challenge-stage"]/div/label/input'))
                                except Exception as e:
                                    print('Sem Cloudflare 2')
                                chrome.send_keys(
                                    "//input[@name='emailField']", email_surf)
                                chrome.send_keys(
                                    "//input[@name='passwordField']", senha_surf)
                                chrome.click(("//button[@id='loginSubmit']"))
                                time.sleep(10)
                                if chrome.driver.current_url == 'https://my.surfshark.com/account/extension-login-success':

                                    cookies = chrome.driver.get_cookies()

                                    # Guarde os cookies em um arquivo JSON
                                    with open(r'.\storage\cookies_surf.json', 'w') as file:
                                        json.dump(cookies, file)
                                else:
                                    print('Falha ao logar na surfshark')
                                chrome.driver.close()
                                chrome.driver.switch_to.window(janela_principal)

                            if 'https://my.surfshark.com/auth/login' in chrome.driver.current_url:
                                print('Falha ao logar na surfshark')
                                chrome.driver.switch_to.window(
                                    chrome.driver.window_handles[0])
                                import time
                                # Abre uma nova aba para a extensão (geralmente chrome-extension://<extension-id>/)
                                chrome.driver.get(url_extensao)
                                chrome.wait_for_element(
                                    "//button[@data-test='login-in-button']").click()
                                time.sleep(3)
                                janela_principal = chrome.driver.window_handles[0]
                                nova_janela = chrome.driver.window_handles[1]
                                chrome.driver.switch_to.window(nova_janela)
                                print(chrome.driver.current_url)
                                email_surf = 'americanplayer@protonmail.com'
                                senha_surf = 'Kotinha10@'
                                chrome.send_keys(
                                    "//input[@name='emailField']", email_surf)
                                chrome.send_keys(
                                    "//input[@name='passwordField']", senha_surf)
                                chrome.click(("//button[@id='loginSubmit']"))
                                time.sleep(10)
                                if chrome.driver.current_url == 'https://my.surfshark.com/account/extension-login-success':
                                    if os.path.exists(r'.\storage\cookies_surf.json'):
                                        # Apaga o arquivo
                                        os.remove(
                                            r'.\storage\cookies_surf.json')
                                        print(
                                            f"cookies_surf.json foi apagado com sucesso.")
                                    else:
                                        print(f"cookies_surf.json não existe.")
                                    cookies = chrome.driver.get_cookies()

                                    # Guarde os cookies em um arquivo JSON
                                    with open(r'.\storage\cookies_surf.json', 'w') as file:
                                        json.dump(cookies, file)
                                    chrome.driver.close()
                                    chrome.switch_to.window(janela_principal)
                                else:
                                    print('Falha ao logar na surfshark')
                            print('Logou com sucesso na surfshark')

                            locais = ['Canada', 'Australia', 'Netherlands', 'Poland', 'United Kingdom',
                                    'Germany', 'Africa', 'Japan', 'Indonesia', 'India', 'Denmark', 'France', 'USA']
                            local_vpn = random.choice(locais)
                            print(f'Regiao escolhida {local_vpn}')
                            chrome.driver.refresh()
                            time.sleep(5)
                            try:
                                chrome.send_keys(
                                    "//input[@data-test='location-search-input']", local_vpn)
                            except:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Erro ao logar na VPN.')
                                window.Refresh()
                                if os.path.exists(r'.\storage\cookies_surf.json'):
                                    # Apaga o arquivo
                                    os.remove(
                                        r'.\storage\cookies_surf.json')
                                    print(
                                        f"cookies_surf.json foi apagado com sucesso.")
                            chrome.click("//div[@data-test='location-title']")
                            try:
                                chrome.wait_for_element(
                                    "//button[@data-test='disconnect-button']")

                                print('VPN conectada')
                                time.sleep(5)
                            except Exception as e:
                                print(e)
                                
                        elif vpn_nav == 'TouchVPN':
                            file_path = './storage/touchvpn.crx'
                            import zipfile

                            if os.path.exists("./storage/touchvpn/"):
                                result = f"A pasta 'touchvpn' já existe em '{file_path}'."
                            else:
                                # URL para download
                                url = 'https://www.dropbox.com/scl/fi/xlfanzmvr46zd36ki8o6s/touchvpn.crx?rlkey=ue55t76a21aur82c9ecm9d5al&st=muc5temz&dl=1'

                                # Fazendo o download do arquivo
                                response = requests.get(url)
                                if response.status_code == 200:
                                    with open(file_path, 'wb') as file:
                                        file.write(response.content)
                                    print("Arquivo 'touchvpn.crx' baixado e salvo em './storage/touchvpn.crx'.")
                                    # Caminho do arquivo original (altere para o seu caminho de arquivo)
                                    caminho_original = './storage/touchvpn.crx'
                                    novo_caminho = './storage/touchvpn.zip'

                                    # Renomear o arquivo
                                    os.rename(caminho_original, novo_caminho)

                                    # Caminho do arquivo zip
                                    caminho_zip = './storage/touchvpn.zip'

                                    # Diretório de destino para extrair
                                    diretorio_destino = './storage/touchvpn/'

                                    # Remover um arquivo anterior, se existir
                                    arquivo_antigo = './storage/touchvpn'
                                    if os.path.exists(arquivo_antigo):
                                        os.remove(arquivo_antigo)

                                    # Criar o diretório de destino se ele não existir
                                    if not os.path.exists(diretorio_destino):
                                        os.makedirs(diretorio_destino)

                                    # Extrair o arquivo zip
                                    with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                                        zip_ref.extractall(diretorio_destino)

                                    print("Arquivo extraído com sucesso!")
                                    os.remove('./storage/touchvpn.zip')

                                else:
                                    result = "Não foi possível baixar o arquivo. Status Code: " + \
                                        str(response.status_code)
                            time.sleep(5)
                            chrome.driver.switch_to.window(
                                chrome.driver.window_handles[-1])
                            # Verificar se a URL está correta e fechar a aba
                            if chrome.driver.current_url == "https://www.touchvpn.net/":
                                chrome.driver.close()
                            # Alternar de volta para a aba original
                            chrome.driver.switch_to.window(
                                chrome.driver.window_handles[0])
                            chrome.open('chrome://extensions/')
                            extensoes = chrome.execute_script(
                                'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                            )

                            id_extensao = None
                            for ext in extensoes:
                                nome_ext = chrome.execute_script('return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                                if "Touch" in nome_ext:  # Substitua pelo nome da sua extensão
                                    id_extensao = chrome.execute_script('return arguments[0].getAttribute("id");', ext)
                                    break

                            if id_extensao:
                                # Use o ID da extensão para abrir a página da extensão
                                url_extensao = f'chrome-extension://{id_extensao}/panel/index.html'
                                chrome.driver.get(url_extensao)
                            else:
                                print("ID da extensão não encontrado")
                            chrome.wait_for_element("div[class=location]").click()
                            locais = ['United States', 'Canada', 'Germany', 'Netherlands', 'United Kingdom']
                            local_vpn = random.choice(locais)
                            print(local_vpn)
                            chrome.wait_for_element(f'''//div[contains(text(), '{local_vpn}')]/div[@class='flag']''').click()
                            chrome.wait_for_element("div[id=ConnectionButton]").click()
                            chrome.wait_for_element("div[id=AdBlocker]")
                            if chrome.find_elements("div[id=AdBlocker]"):
                                print('VPN Conectada')

                        elif vpn_nav == 'CyberGhost':
                            file_path = './storage/cyberghost.crx'
                            import zipfile

                            if os.path.exists("./storage/cyberghost/"):
                                result = f"A pasta 'cyberghost' já existe em '{file_path}'."
                            else:
                                # URL para download
                                url = 'https://www.dropbox.com/scl/fi/nw94zxsqdcyvs1x7i4r4e/cyberghost.crx?rlkey=162gv0ry8524g1mgt8gpf0n1c&st=vaj6u9r7&dl=1'

                                # Fazendo o download do arquivo
                                response = requests.get(url)
                                if response.status_code == 200:
                                    with open(file_path, 'wb') as file:
                                        file.write(response.content)
                                    print("Arquivo 'cyberghost.crx' baixado e salvo em './storage/cyberghost.crx'.")
                                    # Caminho do arquivo original (altere para o seu caminho de arquivo)
                                    caminho_original = './storage/cyberghost.crx'
                                    novo_caminho = './storage/cyberghost.zip'

                                    # Renomear o arquivo
                                    os.rename(caminho_original, novo_caminho)

                                    # Caminho do arquivo zip
                                    caminho_zip = './storage/cyberghost.zip'

                                    # Diretório de destino para extrair
                                    diretorio_destino = './storage/cyberghost/'

                                    # Remover um arquivo anterior, se existir
                                    arquivo_antigo = './storage/cyberghost'
                                    if os.path.exists(arquivo_antigo):
                                        os.remove(arquivo_antigo)

                                    # Criar o diretório de destino se ele não existir
                                    if not os.path.exists(diretorio_destino):
                                        os.makedirs(diretorio_destino)

                                    # Extrair o arquivo zip
                                    with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                                        zip_ref.extractall(diretorio_destino)

                                    print("Arquivo extraído com sucesso!")
                                    os.remove('./storage/cyberghost.zip')

                                else:
                                    result = "Não foi possível baixar o arquivo. Status Code: " + \
                                        str(response.status_code)
                            
                            chrome.open('chrome://extensions/')
                            extensoes = chrome.execute_script(
                                'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                            )

                            id_extensao = None
                            for ext in extensoes:
                                nome_ext = chrome.execute_script('return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                                if "CyberGhost" in nome_ext:
                                    id_extensao = chrome.execute_script('return arguments[0].getAttribute("id");', ext)
                                    break

                            if id_extensao:
                                url_extensao = f'chrome-extension://{id_extensao}/index.html'
                                chrome.driver.get(url_extensao)
                            else:
                                print("ID da extensão não encontrado")
                            
                            locais = ['Romania', 'Netherlands', 'Germany', 'United States']
                            local_vpn = random.choice(locais)
                            print(local_vpn)
                            if local_vpn == 'Romania':
                                pass
                            else:
                                chrome.wait_for_element("span[class=selected-country]").click()
                                chrome.wait_for_element(f"//span[normalize-space(text())='{local_vpn}']").click()
                            chrome.wait_for_element("div[class=spinner]").click()
                            while True:
                                if chrome.find_elements('//h4[text()="Connected"]'):
                                    print('VPN Conectada')
                                    break
                                elif chrome.find_elements('//h4[text()="connectPage.error"]'):
                                    chrome.wait_for_element("div[class=spinner]").click()
                                    chrome.wait_for_element('//h4[text()="Connected"]')
                                    
                        elif vpn_nav == 'ZenMate':
                            file_path = './storage/zenmate.crx'
                            import zipfile

                            if os.path.exists("./storage/zenmate/"):
                                result = f"A pasta 'zenmate' já existe em '{file_path}'."
                            else:
                                # URL para download
                                url = 'https://www.dropbox.com/scl/fi/ype15i0fln67zlxfjhsa7/zenmate.crx?rlkey=qc2wrm1zy8i63murehrgb16dr&st=7gkbc98m&dl=1'

                                # Fazendo o download do arquivo
                                response = requests.get(url)
                                if response.status_code == 200:
                                    with open(file_path, 'wb') as file:
                                        file.write(response.content)
                                    print("Arquivo 'zenmate.crx' baixado e salvo em './storage/zenmate.crx'.")
                                    # Caminho do arquivo original (altere para o seu caminho de arquivo)
                                    caminho_original = './storage/zenmate.crx'
                                    novo_caminho = './storage/zenmate.zip'

                                    # Renomear o arquivo
                                    os.rename(caminho_original, novo_caminho)

                                    # Caminho do arquivo zip
                                    caminho_zip = './storage/zenmate.zip'

                                    # Diretório de destino para extrair
                                    diretorio_destino = './storage/zenmate/'

                                    # Remover um arquivo anterior, se existir
                                    arquivo_antigo = './storage/zenmate'
                                    if os.path.exists(arquivo_antigo):
                                        os.remove(arquivo_antigo)

                                    # Criar o diretório de destino se ele não existir
                                    if not os.path.exists(diretorio_destino):
                                        os.makedirs(diretorio_destino)

                                    # Extrair o arquivo zip
                                    with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                                        zip_ref.extractall(diretorio_destino)

                                    print("Arquivo extraído com sucesso!")
                                    os.remove('./storage/zenmate.zip')

                                else:
                                    result = "Não foi possível baixar o arquivo. Status Code: " + \
                                        str(response.status_code)
                            
                            chrome.open('chrome://extensions/')
                            extensoes = chrome.execute_script(
                                'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                            )
                            id_extensao = None
                            for ext in extensoes:
                                nome_ext = chrome.execute_script('return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                                if "ZenMate" in nome_ext:
                                    id_extensao = chrome.execute_script('return arguments[0].getAttribute("id");', ext)
                                    break
                            if id_extensao:
                                url_extensao = f'chrome-extension://{id_extensao}/index.html'
                                chrome.driver.get(url_extensao)
                            else:
                                print("ID da extensão não encontrado")

                            locais = ['Germany', 'Romania', 'Singapore', 'United States']
                            local_vpn = random.choice(locais)
                            print(local_vpn)
                            if local_vpn == 'Germany':
                                local_zenmate = '#country-browsing-DE'
                            elif local_vpn == 'Romania':
                                local_zenmate = '#country-browsing-RO'
                            elif local_vpn == 'Singapore':
                                local_zenmate = '#country-browsing-SG'
                            elif local_vpn == 'United States':
                                local_zenmate = '#country-browsing-US'
                            while True:
                                if not chrome.find_elements("div[class=shield-container]"): 
                                    chrome.driver.get(url_extensao)
                                    time.sleep(2)
                                else:
                                    time.sleep(2)
                                    chrome.wait_for_element('//a[@routerlink="/servers"]').click()
                                    locais = ['Germnay', 'Romania', 'Singapore', 'United States']
                                    local_vpn = random.choice(locais)
                                    time.sleep(2)
                                    if not chrome.find_elements(f"{local_zenmate}") or chrome.find_elements('xpath', "//div[@class='alert alert-danger text-center mt-2' and not(@hidden)]"):
                                        chrome.wait_for_element('//a[@routerlink="/home"]').click()
                                        time.sleep(4)
                                        chrome.wait_for_element('//a[@routerlink="/servers"]').click()
                                    chrome.wait_for_element(f"{local_zenmate}").click()
                                    time.sleep(3)
                                    try:
                                        chrome.wait_for_element('div.proxy-status-container > div.pt-1.location-info > a')
                                    except:
                                        chrome.driver.get(url_extensao)
                                        chrome.wait_for_element('div.proxy-status-container > div.pt-1.location-info > a')
                                    if chrome.find_element('div.proxy-status-container > div.pt-1.location-info > a').text == 'Connected to':
                                        print('VPN Conectada')
                                        break
                        
                        elif vpn_nav == 'VeePN':
                            file_path = './storage/veepn.crx'
                            import zipfile

                            if os.path.exists("./storage/veepn/"):
                                result = f"A pasta 'veepn' já existe em '{file_path}'."
                            else:
                                # URL para download
                                url = 'https://www.dropbox.com/scl/fi/ube9dvmevvhhk5eqt32gt/veepn.crx?rlkey=yuzwpgst6vo0oohhtcsi7i65o&dl=1'

                                # Fazendo o download do arquivo
                                response = requests.get(url)
                                if response.status_code == 200:
                                    with open(file_path, 'wb') as file:
                                        file.write(response.content)
                                    print("Arquivo 'veepn.crx' baixado e salvo em './storage/veepn.crx'.")
                                    # Caminho do arquivo original (altere para o seu caminho de arquivo)
                                    caminho_original = './storage/veepn.crx'
                                    novo_caminho = './storage/veepn.zip'

                                    # Renomear o arquivo
                                    os.rename(caminho_original, novo_caminho)

                                    # Caminho do arquivo zip
                                    caminho_zip = './storage/veepn.zip'

                                    # Diretório de destino para extrair
                                    diretorio_destino = './storage/veepn/'

                                    # Remover um arquivo anterior, se existir
                                    arquivo_antigo = './storage/veepn'
                                    if os.path.exists(arquivo_antigo):
                                        os.remove(arquivo_antigo)

                                    # Criar o diretório de destino se ele não existir
                                    if not os.path.exists(diretorio_destino):
                                        os.makedirs(diretorio_destino)

                                    # Extrair o arquivo zip
                                    with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                                        zip_ref.extractall(diretorio_destino)

                                    print("Arquivo extraído com sucesso!")
                                    os.remove('./storage/veepn.zip')

                                else:
                                    result = "Não foi possível baixar o arquivo. Status Code: " + \
                                        str(response.status_code)
                            
                            chrome.open('chrome://extensions/')
                            extensoes = chrome.execute_script(
                                'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                            )

                            id_extensao = None
                            for ext in extensoes:
                                nome_ext = chrome.execute_script('return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                                if "Vee" in nome_ext:
                                    id_extensao = chrome.execute_script('return arguments[0].getAttribute("id");', ext)
                                    break

                            if id_extensao:
                                url_extensao = f'chrome-extension://{id_extensao}/html/foreground.html'
                                chrome.driver.get(url_extensao)
                            else:
                                print("ID da extensão não encontrado")
                            
                            chrome.driver.switch_to.window(
                                chrome.driver.window_handles[-1])
                            # Verificar se a URL está correta e fechar a aba
                            if "https://veepn.com" in chrome.driver.current_url:
                                chrome.driver.close()
                            # Alternar de volta para a aba original
                            chrome.driver.switch_to.window(
                                chrome.driver.window_handles[0])

                            chrome.wait_for_element("button.next").click()
                            chrome.wait_for_element("button.next").click()
                            if chrome.find_elements("div.footer-decline-text"):
                                chrome.wait_for_element("div.footer-decline-text").click()

                            locais = ['France', 'Netherlands','Singapore', 'London','Virginia', 'Oregon']
                            local_vpn = random.choice(locais)
                            print(local_vpn)
                            chrome.wait_for_element("div.current-region-upper-block").click()
                            chrome.wait_for_element("input.region-search-input").send_keys(local_vpn)
                            chrome.wait_for_element("div.radio.off", timeout=25).click()
                            chrome.wait_for_element('div[id=mainBtn]').click()
                            while True:
                                if chrome.find_element("div.description.fadeIn.linebreak").text == 'VPN is ON':
                                    print('VPN Conectada')
                                    break
                                elif chrome.find_element("div.description.fadeIn.linebreak").text == 'VPN is OFF':
                                    chrome.wait_for_element('div[id=mainBtn]').click()
                                elif chrome.find_elements("div.footer-decline-text"):
                                    chrome.wait_for_element("div.footer-decline-text").click()

                        elif vpn_nav == 'PlanetVPN':
                            file_path = './storage/planetvpn.crx'
                            import zipfile

                            if os.path.exists("./storage/planetvpn/"):
                                result = f"A pasta 'planetvpn' já existe em '{file_path}'."
                            else:
                                # URL para download
                                url = 'https://www.dropbox.com/scl/fi/5nkgxkdyd3hmbl2yezwpz/planetvpn.crx?rlkey=q67oe53sq6qoian2izabfxc5q&dl=1'

                                # Fazendo o download do arquivo
                                response = requests.get(url)
                                if response.status_code == 200:
                                    with open(file_path, 'wb') as file:
                                        file.write(response.content)
                                    print("Arquivo 'planetvpn.crx' baixado e salvo em './storage/planetvpn.crx'.")
                                    # Caminho do arquivo original (altere para o seu caminho de arquivo)
                                    caminho_original = './storage/planetvpn.crx'
                                    novo_caminho = './storage/planetvpn.zip'

                                    # Renomear o arquivo
                                    os.rename(caminho_original, novo_caminho)

                                    # Caminho do arquivo zip
                                    caminho_zip = './storage/planetvpn.zip'

                                    # Diretório de destino para extrair
                                    diretorio_destino = './storage/planetvpn/'

                                    # Remover um arquivo anterior, se existir
                                    arquivo_antigo = './storage/planetvpn'
                                    if os.path.exists(arquivo_antigo):
                                        os.remove(arquivo_antigo)

                                    # Criar o diretório de destino se ele não existir
                                    if not os.path.exists(diretorio_destino):
                                        os.makedirs(diretorio_destino)

                                    # Extrair o arquivo zip
                                    with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                                        zip_ref.extractall(diretorio_destino)

                                    print("Arquivo extraído com sucesso!")
                                    os.remove('./storage/planetvpn.zip')

                                else:
                                    result = "Não foi possível baixar o arquivo. Status Code: " + \
                                        str(response.status_code)
                            
                            chrome.open('chrome://extensions/')
                            extensoes = chrome.execute_script(
                                'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                            )

                            id_extensao = None
                            for ext in extensoes:
                                nome_ext = chrome.execute_script('return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                                if "Planet" in nome_ext:
                                    id_extensao = chrome.execute_script('return arguments[0].getAttribute("id");', ext)
                                    break

                            if id_extensao:
                                url_extensao = f'chrome-extension://{id_extensao}/popup.html'
                                chrome.driver.get(url_extensao)
                            else:
                                print("ID da extensão não encontrado")
                            
                            chrome.driver.switch_to.window(
                                chrome.driver.window_handles[-1])
                            # Verificar se a URL está correta e fechar a aba
                            if "https://freevpnplanet.com/" in chrome.driver.current_url:
                                chrome.driver.close()
                            # Alternar de volta para a aba original
                            chrome.driver.switch_to.window(
                                chrome.driver.window_handles[0])

                            chrome.wait_for_element("div.consent-button").click()
                            chrome.wait_for_element("div.select-country").click()
                            locais = ['Germany', 'United Kingdom', 'USA']
                            local_vpn = random.choice(locais)
                            print(local_vpn)
                            chrome.wait_for_element("input.search-input").send_keys(local_vpn)
                            chrome.wait_for_element("div.server-name").click()
                            time.sleep(1)
                            while True:
                                if chrome.find_elements("button.button.button-connected"):
                                    print('VPN Conectada')
                                    break
                                elif chrome.find_elements("button.button.button-disconnected"):
                                    chrome.find_element("button.button.button-disconnected").click()

                        elif vpn_nav == 'Troywell':
                            file_path = './storage/troywell.crx'
                            import zipfile

                            if os.path.exists("./storage/troywell/"):
                                result = f"A pasta 'troywell' já existe em '{file_path}'."
                            else:
                                # URL para download
                                url = 'https://www.dropbox.com/scl/fi/rn25p6mmg57pmikq8d2xu/troywell.crx?rlkey=wwmakky5j6952lisr19723vw7&dl=1'

                                # Fazendo o download do arquivo
                                response = requests.get(url)
                                if response.status_code == 200:
                                    with open(file_path, 'wb') as file:
                                        file.write(response.content)
                                    print("Arquivo 'troywell.crx' baixado e salvo em './storage/troywell.crx'.")
                                    # Caminho do arquivo original (altere para o seu caminho de arquivo)
                                    caminho_original = './storage/troywell.crx'
                                    novo_caminho = './storage/troywell.zip'

                                    # Renomear o arquivo
                                    os.rename(caminho_original, novo_caminho)

                                    # Caminho do arquivo zip
                                    caminho_zip = './storage/troywell.zip'

                                    # Diretório de destino para extrair
                                    diretorio_destino = './storage/troywell/'

                                    # Remover um arquivo anterior, se existir
                                    arquivo_antigo = './storage/troywell'
                                    if os.path.exists(arquivo_antigo):
                                        os.remove(arquivo_antigo)

                                    # Criar o diretório de destino se ele não existir
                                    if not os.path.exists(diretorio_destino):
                                        os.makedirs(diretorio_destino)

                                    # Extrair o arquivo zip
                                    with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                                        zip_ref.extractall(diretorio_destino)

                                    print("Arquivo extraído com sucesso!")
                                    os.remove('./storage/troywell.zip')

                                else:
                                    result = "Não foi possível baixar o arquivo. Status Code: " + \
                                        str(response.status_code)
                        
                            chrome.open('chrome://extensions/')
                            extensoes = chrome.execute_script(
                                'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                            )

                            id_extensao = None
                            for ext in extensoes:
                                nome_ext = chrome.execute_script('return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                                if "Troywell" in nome_ext:
                                    id_extensao = chrome.execute_script('return arguments[0].getAttribute("id");', ext)
                                    break

                            if id_extensao:
                                url_extensao = f'chrome-extension://{id_extensao}/popup.html'
                                chrome.driver.get(url_extensao)
                            else:
                                print("ID da extensão não encontrado")

                            try:
                                chrome.wait_for_element("div.button.analytics__button", timeout=2).click()
                            except:
                                chrome.driver.get(url_extensao)
                                chrome.wait_for_element("div.button.analytics__button").click()
                            chrome.wait_for_element("div.server-select__row").click()
                            time.sleep(2)
                            locais = ['Alemanha', 'Polônia', 'Holanda', 'Japão', 'Austrália', 'França', 'Noruega', 'África do Sul', 'Espanha', 'Canadá']
                            local_vpn = random.choice(locais)
                            print(local_vpn)
                            chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                            while True:
                                try:
                                    chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]").click()
                                    break
                                except:
                                    chrome.driver.get(url_extensao)
                                    chrome.wait_for_element("div.server-select__row").click()
                                    time.sleep(2)
                                    local_vpn = random.choice(locais)
                                    chrome.wait_for_element("input.search__input").clear()
                                    chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                                    chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]").click()

                            chrome.wait_for_element("div.connect-button").click()
                            try:
                                chrome.wait_for_element("div.connection-block__label")
                            except:
                                if chrome.find_elements("div.button.button_selected.connection-failed__button.connection-failed__button_blue"):
                                    chrome.find_element("div.button.button_selected.connection-failed__button.connection-failed__button_blue").click()
                                    chrome.wait_for_element("div.server-select__row").click()
                                    time.sleep(2)
                                    local_vpn = random.choice(locais)
                                    chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                                    chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]").click()
                                    chrome.wait_for_element("div.connect-button").click()
                                    chrome.wait_for_element("div.connection-block__label")
                            time.sleep(1)
                            while True:
                                if chrome.find_elements("div.connection-block__label"):
                                    print('VPN Conectada')
                                    break
                                elif chrome.find_elements("div.button.button_selected.connection-failed__button.connection-failed__button_blue"):
                                    chrome.find_element("div.button.button_selected.connection-failed__button.connection-failed__button_blue").click()
                                    chrome.wait_for_element("div.server-select__row").click()
                                    time.sleep(2)
                                    local_vpn = random.choice(locais)
                                    chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                                    chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]").click()
                                    chrome.wait_for_element("div.connect-button").click()
                                    chrome.wait_for_element("div.connection-block__label")


                        janela_principal = chrome.driver.window_handles[0]
                        chrome.driver.switch_to.window(janela_principal)
                        url = f"https://www.instagram.com/"
                        chrome.set_window_size(800, 800)
                        chrome.driver.uc_open_with_reconnect(url, 10)
                        # time.sleep(30000)
                        try:
                            chrome.driver.uc_click(
                                'button:contains("Permitir todos os cookies")', 5)
                            print('Cookies aceito')
                            cook = True
                            time.sleep(5)
                        except:
                            print('Sem cookies')
                            cook = False
                        try:
                            chrome.driver.uc_click(
                                "a[href='/accounts/emailsignup/']", 4)
                        except:
                            chrome.driver.refresh()
                            chrome.driver.uc_click("a[href='/accounts/emailsignup/']", 4)
                        lista_user = random.choices(range(0, 9), k=2)
                        lista_letras = random.choices(letras, k=2)
                        nomea = fake.first_name_male().replace(" ", "")
                        nome = unicodedata.normalize('NFKD', nomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        sobrenomea = fake.last_name().replace(" ", "").lower()
                        sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        nome_completo = nome + ' ' + sobrenome
                        nome_completo_s = nome + sobrenome
                        numeros_concatenados = ''.join(str(numero)
                                                    for numero in lista_user)
                        user_completo1 = nome_completo_s + '' + \
                            str(numeros_concatenados) + ''.join(lista_letras)
                        user_completo = random.randint(1, len(user_completo1))
                        string_with_dot = user_completo1[:user_completo] + \
                            '_' + user_completo1[user_completo:]
                        user_completo_antigo = string_with_dot.lower()
                        escolha = random.choice(["_", "."])
                        user_completo = nome + escolha + sobrenome + \
                            str(numeros_concatenados) + ''.join(lista_letras)

                        print(user_completo)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] User: {user_completo}')
                        window.Refresh()
                        senha = gerar_senha(12)
                        print(senha)
                        num = f'+48{num}'
                        chrome.type("//input[@name='fullName']", nome_completo)
                        time.sleep(random.uniform(0.5, 2))
                        chrome.wait_for_element("//input[@name='emailOrPhone']", timeout=30)
                        chrome.type("//input[@name='emailOrPhone']", num)
                        #for numero in num:
                        #    chrome.send_keys(
                        #        "//input[@name='emailOrPhone']", f'{numero}')
                        #    time.sleep(random.uniform(0.001, 0.05))
                        
                        
                        #for nome in nome_completo:
                        #    chrome.send_keys("//input[@name='fullName']", nome)
                        #    time.sleep(random.uniform(0.001, 0.05))
                        time.sleep(random.uniform(0.5, 2))
                        chrome.type("//input[@name='username']", user_completo)
                        #    for user in user_completo:
                        #        chrome.send_keys("//input[@name='username']", user)
                        #        time.sleep(random.uniform(0.001, 0.05))
                        time.sleep(random.uniform(0.5, 2))
                        chrome.type("//input[@name='password']", senha)
                        #    for password in senha:
                        #        chrome.send_keys("//input[@name='password']", password)
                        #        time.sleep(random.uniform(0.001, 0.05))
                        time.sleep(random.uniform(0.5, 2))
                        time.sleep(5)
                        chrome.driver.uc_click('''button[type='submit']''', 5)
                        ano = str(random.randint(1960, 2000))

                        if len(chrome.find_elements("//input[@name='emailOrPhone']")) == 1:
                            print('IP Bloqueado, procurando outro IP')
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] IP Bloqueado')
                            window.Refresh()

                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Procurando outro IP')
                            window.Refresh()
                            tentativa = 1
                            if vpn_nav == 'SurfShark':
                                while True:
                                    chrome.execute_script(
                                        "window.open('a', 'new_tab')")
                                    janela_principal = chrome.driver.window_handles[0]
                                    nova_janela = chrome.driver.window_handles[-1]
                                    chrome.driver.switch_to.window(nova_janela)
                                    chrome.driver.get(url_extensao)
                                    chrome.wait_for_element(
                                        "//button[@data-test='disconnect-button']").click()
                                    time.sleep(2)
                                    # locais = ['Canada', 'Australia', 'Netherlands']
                                    # local_vpn = random.choice(locais)
                                    chrome.send_keys(
                                        "//input[@data-test='location-search-input']", local_vpn)
                                    chrome.click("//div[@data-test='location-title']")
                                    try:
                                        chrome.wait_for_element(
                                            "//button[@data-test='disconnect-button']")

                                        print('VPN conectada')
                                        time.sleep(5)
                                    except:
                                        print('Não foi possivel conectar')
                                    chrome.driver.close()
                                    janela_principal = chrome.driver.window_handles[0]
                                    chrome.driver.switch_to.window(janela_principal)
                                    time.sleep(3)
                                    try:
                                        chrome.driver.uc_click(
                                            '''button[type='submit']''', 5)
                                    except:
                                        chrome.driver.uc_click(
                                            '''//button[@type='submit']''', 5)

                                    if len(chrome.find_elements("//select[@title='Ano:']")) == 1:
                                        print('IP aceito')
                                        break
                                    tentativa += 1
                                    if tentativa == 5:
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Não achou IP válido', text_color='red')
                                        window.Refresh()
                                        troca_ip_estatica += 1
                                        raise Exception("Não achou IP válido")
                            elif vpn_nav == 'TouchVPN':
                                while True:
                                    chrome.execute_script(
                                        "window.open('a', 'new_tab')")
                                    janela_principal = chrome.driver.window_handles[0]
                                    nova_janela = chrome.driver.window_handles[-1]
                                    chrome.driver.switch_to.window(nova_janela)
                                    chrome.driver.get(url_extensao)
                                    chrome.wait_for_element("div[id=ConnectionButton]").click()
                                    chrome.wait_for_element("div[class=location]")
                                    chrome.wait_for_element("div[id=ConnectionButton]").click()
                                    time.sleep(3)
                                    chrome.driver.close()
                                    janela_principal = chrome.driver.window_handles[0]
                                    chrome.driver.switch_to.window(janela_principal)
                                    time.sleep(3)
                                    try:
                                        chrome.driver.uc_click(
                                            '''button[type='submit']''', 5)
                                    except:
                                        chrome.driver.uc_click(
                                            '''//button[@type='submit']''', 5)

                                    if len(chrome.find_elements("//select[@title='Ano:']")) == 1:
                                        print('IP aceito')
                                        break
                                    tentativa += 1
                                    if tentativa == 5:
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Não achou IP válido', text_color='red')
                                        window.Refresh()
                                        troca_ip_estatica += 1
                                        raise Exception("Não achou IP válido")
                                    
                            elif vpn_nav == 'CyberGhost':
                                while True:
                                    chrome.execute_script(
                                        "window.open('a', 'new_tab')")
                                    janela_principal = chrome.driver.window_handles[0]
                                    nova_janela = chrome.driver.window_handles[-1]
                                    chrome.driver.switch_to.window(nova_janela)
                                    chrome.driver.get(url_extensao)
                                    chrome.wait_for_element("div[class=spinner]").click()
                                    chrome.wait_for_element('//h4[text()="Start a Connection"]')
                                    time.sleep(2)
                                    chrome.wait_for_element("div[class=spinner]").click()
                                    while True:
                                        if chrome.find_elements('//h4[text()="Connected"]'):
                                            print('VPN Conectada')
                                            break
                                        elif chrome.find_elements('//h4[text()="connectPage.error"]'):
                                            chrome.wait_for_element("div[class=spinner]").click()
                                            chrome.wait_for_element('//h4[text()="Connected"]')
                                    
                                    chrome.driver.close()
                                    janela_principal = chrome.driver.window_handles[0]
                                    chrome.driver.switch_to.window(janela_principal)
                                    time.sleep(3)
                                    try:
                                        chrome.driver.uc_click(
                                            '''button[type='submit']''', 5)
                                    except:
                                        chrome.driver.uc_click(
                                            '''//button[@type='submit']''', 5)

                                    if len(chrome.find_elements("//select[@title='Ano:']")) == 1:
                                        print('IP aceito')
                                        break
                                    tentativa += 1
                                    if tentativa == 5:
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Não achou IP válido', text_color='red')
                                        window.Refresh()
                                        troca_ip_estatica += 1
                                        raise Exception("Não achou IP válido")
                                    
                            elif vpn_nav == 'ZenMate':
                                while True:
                                    chrome.execute_script(
                                        "window.open('a', 'new_tab')")
                                    janela_principal = chrome.driver.window_handles[0]
                                    nova_janela = chrome.driver.window_handles[-1]
                                    chrome.driver.switch_to.window(nova_janela)
                                    chrome.driver.get(url_extensao)
                                    chrome.wait_for_element("div.shield-container.active").click()
                                    time.sleep(2)
                                    while True:

                                        if chrome.find_elements('body > app-root > main > app-campaign > app-image-campaign > div > div.header.white > a > i'):
                                            
                                            chrome.find_element('body > app-root > main > app-campaign > app-image-campaign > div > div.header.white > a > i').click()

                                        elif chrome.find_elements('body > app-root > main > app-home > app-rate-us > div > div > button'):
                                            
                                            try:
                                                chrome.find_element('body > app-root > main > app-home > app-rate-us > div > div > button').click()
                                            except:
                                                pass
                                            break
                                        
                                        elif chrome.find_elements('div.shield-container'):
                                            break

                                    chrome.wait_for_element("div.shield-container").click()
                                    time.sleep(2)
                                    while True:
                                        if chrome.find_element('div.proxy-status-container > div.pt-1.location-info > a').text == 'Connected to':
                                            print('VPN Conectada')
                                            break
                                    
                                    chrome.driver.close()
                                    janela_principal = chrome.driver.window_handles[0]
                                    chrome.driver.switch_to.window(janela_principal)
                                    time.sleep(3)
                                    try:
                                        chrome.driver.uc_click(
                                            '''button[type='submit']''', 5)
                                    except:
                                        chrome.driver.uc_click(
                                            '''//button[@type='submit']''', 5)

                                    if len(chrome.find_elements("//select[@title='Ano:']")) == 1:
                                        print('IP aceito')
                                        break
                                    tentativa += 1
                                    if tentativa == 5:
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Não achou IP válido', text_color='red')
                                        window.Refresh()
                                        troca_ip_estatica += 1
                                        raise Exception("Não achou IP válido")
                        
                            elif vpn_nav == 'VeePN':
                                while True:
                                    chrome.execute_script(
                                        "window.open('a', 'new_tab')")
                                    janela_principal = chrome.driver.window_handles[0]
                                    nova_janela = chrome.driver.window_handles[-1]
                                    chrome.driver.switch_to.window(nova_janela)
                                    chrome.driver.get(url_extensao)
                                    chrome.wait_for_element('div[id=mainBtn]').click()
                                    time.sleep(3)
                                    chrome.wait_for_element('div[id=mainBtn]').click()
                                    while True:
                                        if chrome.find_element("div.description.fadeIn.linebreak").text == 'VPN is ON':
                                            print('VPN Conectada')
                                            break
                                        elif chrome.find_element("div.description.fadeIn.linebreak").text == 'VPN is OFF':
                                            chrome.wait_for_element('div[id=mainBtn]').click()
                                        elif chrome.find_elements("div.footer-decline-text"):
                                            chrome.wait_for_element("div.footer-decline-text").click()

                                    
                                    chrome.driver.close()
                                    janela_principal = chrome.driver.window_handles[0]
                                    chrome.driver.switch_to.window(janela_principal)
                                    time.sleep(3)
                                    try:
                                        chrome.driver.uc_click(
                                            '''button[type='submit']''', 5)
                                    except:
                                        chrome.driver.uc_click(
                                            '''//button[@type='submit']''', 5)

                                    if len(chrome.find_elements("//select[@title='Ano:']")) == 1:
                                        print('IP aceito')
                                        break
                                    tentativa += 1
                                    if tentativa == 5:
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Não achou IP válido', text_color='red')
                                        window.Refresh()
                                        troca_ip_estatica += 1
                                        raise Exception("Não achou IP válido")
                            elif vpn_nav == 'PlanetVPN':
                                while True:
                                    chrome.execute_script(
                                        "window.open('a', 'new_tab')")
                                    janela_principal = chrome.driver.window_handles[0]
                                    nova_janela = chrome.driver.window_handles[-1]
                                    chrome.driver.switch_to.window(nova_janela)
                                    chrome.driver.get(url_extensao)

                                    chrome.wait_for_element('button.button.button-connected').click()
                                    time.sleep(2)
                                    chrome.wait_for_element('button.button.button-disconnected').click()
                                    time.sleep(1)
                                    while True:
                                        if chrome.find_elements("button.button.button-connected"):
                                            print('VPN Conectada')
                                            break
                                        elif chrome.find_elements("button.button.button-disconnected"):
                                            chrome.find_element("button.button.button-disconnected").click()

                                    
                                    chrome.driver.close()
                                    janela_principal = chrome.driver.window_handles[0]
                                    chrome.driver.switch_to.window(janela_principal)
                                    time.sleep(3)
                                    try:
                                        chrome.driver.uc_click(
                                            '''button[type='submit']''', 5)
                                    except:
                                        chrome.driver.uc_click(
                                            '''//button[@type='submit']''', 5)

                                    if len(chrome.find_elements("//select[@title='Ano:']")) == 1:
                                        print('IP aceito')
                                        break
                                    tentativa += 1
                                    if tentativa == 5:
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Não achou IP válido', text_color='red')
                                        window.Refresh()
                                        troca_ip_estatica += 1
                                        raise Exception("Não achou IP válido")

                            elif vpn_nav == 'Troywell':
                                while True:
                                    chrome.execute_script(
                                        "window.open('a', 'new_tab')")
                                    janela_principal = chrome.driver.window_handles[0]
                                    nova_janela = chrome.driver.window_handles[-1]
                                    chrome.driver.switch_to.window(nova_janela)
                                    chrome.driver.get(url_extensao)

                                    chrome.wait_for_element('div.connect-button').click()
                                    time.sleep(2)
                                    chrome.wait_for_element("div.server-select__row").click()
                                    time.sleep(2)
                                    chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                                    while True:
                                        try:
                                            chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]", timeout=4).click()
                                            break
                                        except:
                                            chrome.driver.get(url_extensao)
                                            time.sleep(2)
                                            chrome.wait_for_element("div.server-select__row").click()
                                            time.sleep(2)
                                            chrome.wait_for_element("input.search__input").clear()
                                            chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                                            chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]").click()

                                    chrome.wait_for_element("div.connect-button").click()
                                    try:
                                        chrome.wait_for_element("div.connection-block__label")
                                    except:
                                        if chrome.find_elements("div.button.button_selected.connection-failed__button.connection-failed__button_blue"):
                                            chrome.find_element("div.button.button_selected.connection-failed__button.connection-failed__button_blue").click()
                                            chrome.wait_for_element("div.server-select__row").click()
                                            time.sleep(2)
                                            chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                                            chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]").click()
                                            chrome.wait_for_element("div.connect-button").click()
                                            chrome.wait_for_element("div.connection-block__label")
                                    time.sleep(1)
                                    while True:
                                        if chrome.find_elements("div.connection-block__label"):
                                            print('VPN Conectada')
                                            break
                                        elif chrome.find_elements("div.button.button_selected.connection-failed__button.connection-failed__button_blue"):
                                            chrome.find_element("div.button.button_selected.connection-failed__button.connection-failed__button_blue").click()
                                            chrome.wait_for_element("div.server-select__row").click()
                                            time.sleep(2)
                                            chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                                            chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]").click()
                                            chrome.wait_for_element("div.connect-button").click()
                                            chrome.wait_for_element("div.connection-block__label")
                                    
                                    chrome.driver.close()
                                    janela_principal = chrome.driver.window_handles[0]
                                    chrome.driver.switch_to.window(janela_principal)
                                    time.sleep(3)
                                    try:
                                        chrome.driver.uc_click(
                                            '''button[type='submit']''', 5)
                                    except:
                                        chrome.driver.uc_click(
                                            '''//button[@type='submit']''', 5)

                                    if len(chrome.find_elements("//select[@title='Ano:']")) == 1:
                                        print('IP aceito')
                                        break
                                    tentativa += 1
                                    if tentativa == 5:
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Não achou IP válido', text_color='red')
                                        window.Refresh()
                                        troca_ip_estatica += 1
                                        raise Exception("Não achou IP válido")


                        try:
                            chrome.wait_for_element(
                                "//select[@title='Ano:']").send_keys(ano)
                        except:
                            print('IP Bloqueado')
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] IP Bloqueado ou Número bloqueado', text_color='red')
                            window.Refresh()

                        dia = str(random.randint(1, 28))
                        time.sleep(random.uniform(0.5, 2))
                        chrome.wait_for_element(
                            "//select[@title='Dia:']").send_keys(dia)
                        months = [
                            ("janeiro", 1),
                            ("fevereiro", 2),
                            ("março", 3),
                            ("abril", 4),
                            ("maio", 5),
                            ("junho", 6),
                            ("julho", 7),
                            ("agosto", 8),
                            ("setembro", 9),
                            ("outubro", 10),
                            ("novembro", 11),
                            ("dezembro", 12),
                        ]

                        random_month = random.choice(months)
                        month_text = random_month[0]

                        time.sleep(random.uniform(0.5, 2))
                        chrome.wait_for_element(
                            "//select[@title='Mês:']").send_keys(month_text)
                        time.sleep(2)
                        chrome.driver.uc_click('button:contains("Avançar")', 15)
                        if len(chrome.find_elements("//p[@id='ssfErrorAlert']")) == 1 or chrome.find_elements("//span[contains(text(), 'Não foi possível criar uma conta para você')]"):
                            print('IP Bloqueado ou Número bloqueado')
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] IP Bloqueado ou Número bloqueado', text_color='red')
                            window.Refresh()
                            d.app_start('pl.rs.sip.softphone.newapp')
                            time.sleep(5)
                            if d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').exists:
                                print('2NR deslogou')
                                d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(timeout=60)
                                time.sleep(5)

                                d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email2nr)
                                time.sleep(0.5)
                                d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha2nr)
                                time.sleep(0.5)
                                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                                time.sleep(3)
                            d.app_start('pl.rs.sip.softphone.newapp')
                            time.sleep(4)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                            time.sleep(1)
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                            window.Refresh()
                            raise Exception('skip')
                        captcha_element = chrome.find_elements(
                            "//input[@id='recaptcha-input']")
                        tentativas = 1
                        if len(captcha_element) == 1:
                            print('Resolvendo captcha')
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Resolvendo captcha')
                            window.Refresh()
                            while True:
                                try:
                                    # Check if the button is clickable
                                    button = WebDriverWait(chrome.driver, 3).until(EC.element_to_be_clickable(
                                        (By.XPATH, "//button[contains(text(), 'Avançar')]")))

                                    # Click the button once it's clickable
                                    chrome.driver.uc_click(
                                        'button:contains("Avançar")', 20)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Captcha resolvido')
                                    window.Refresh()
                                    break  # Exit the loop once the button is clicked

                                except Exception as e:
                                    print(f"Captcha ainda não resolvido")

                                    # Wait for a short interval before checking again
                                    time.sleep(2)
                                    tentativas += 1
                                    if tentativas == 40:
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Captcha não pode ser resolvido')
                                        window.Refresh()
                                        print('Captcha não pode ser resolvido')
                                        raise Exception(' ')
                        else:
                            print('Sem Captcha')
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                        window.Refresh()
                        troca_ip_estatica = 0
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(5)
                        if d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').exists:
                            print('2NR deslogou')
                            d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(timeout=60)
                            time.sleep(5)

                            d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email2nr)
                            time.sleep(0.5)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha2nr)
                            time.sleep(0.5)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                            time.sleep(3)

                        d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()

                        try:
                            cod = d(
                                resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                        except:
                            codigo_não_recebido_seguidos += 1
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                            window.Refresh()
                            d.app_start('pl.rs.sip.softphone.newapp')
                            time.sleep(4)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                            time.sleep(1)
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                            window.Refresh()
                            raise Exception(' ')
                        cod = cod.replace(' ', '')
                        codigo = re.sub('[^0-9]', '', cod)[:6]
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                        window.Refresh()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonSettings').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        codigo = cod
                        for codigo in cod:
                            chrome.send_keys(
                                "//input[@name='confirmationCode']", codigo)
                            time.sleep(random.uniform(0.1, 0.4))

                        time.sleep(random.uniform(0.5, 2))
                        chrome.driver.uc_click('button:contains("Confirmar")', 20)
                        tentativa_log = 0
                        while True:
                            if len(chrome.find_elements("//p[@id='phoneSignupConfirmErrorAlert']")) == 1:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Tentando relogar')
                                window.Refresh()
                                chrome.driver.uc_open_with_reconnect(url, 3)
                                try:
                                    chrome.driver.uc_click(
                                        'button:contains("Permitir todos os cookies")', 5)
                                    print('Cookies aceito')
                                    time.sleep(5)
                                except:
                                    print('Sem cookies')
                                for user in user_completo:
                                    chrome.send_keys(
                                        "//input[@name='username']", user)
                                    time.sleep(random.uniform(0.001, 0.05))
                                time.sleep(random.uniform(0.5, 2))
                                # chrome.type("//input[@name='password']", senha)
                                for password in senha:
                                    chrome.send_keys(
                                        "//input[@name='password']", password)
                                    time.sleep(random.uniform(0.001, 0.05))
                                time.sleep(2)
                                chrome.driver.uc_click(
                                    '''button[type='submit']''', 20)

                                if (
                                    "challenge" in chrome.driver.current_url or
                                    "suspended" in chrome.driver.current_url or
                                    len(chrome.find_elements("//div[contains(text(), 'Sua senha está incorreta. Confira-a.')]")) == 1 or
                                    len(chrome.find_elements("//div[text()='A sua conta foi desativada por violar nossos termos: http://instagram.com/about/legal/terms/']")) == 1 or
                                    len(chrome.find_elements("//div[text()='Houve um problema ao entrar no Instagram. Tente novamente em breve.']")) == 1 or
                                    len(chrome.find_elements("//div[text()='Não foi possível se conectar ao Instagram. Verifique se você está conectado à Internet e tente novamente.']")) == 1
                                ):
                                    print('Conta com SMS')
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] SMS.', text_color='red')
                                    window.Refresh()
                                    troca_ip += 1
                                    if troca_ip == 3:
                                        troca_ip = 1
                                        d.app_start('pl.rs.sip.softphone.newapp')
                                        time.sleep(5)
                                        if d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').exists:
                                            print('2NR deslogou')
                                            d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(
                                                timeout=60)
                                            time.sleep(5)

                                            d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(
                                                email2nr)
                                            time.sleep(0.5)
                                            d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(
                                                senha2nr)
                                            time.sleep(0.5)
                                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                                            time.sleep(3)
                                        d.app_start('pl.rs.sip.softphone.newapp')
                                        time.sleep(4)
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                                        time.sleep(1)
                                        d.xpath(
                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                                        window.Refresh()
                                        raise Exception('Número excluido')
                                    break
                            if "challenge" in chrome.driver.current_url or "suspended" in chrome.driver.current_url or len(chrome.find_elements("//div[contains(text(), 'Sua senha está incorreta. Confira-a.')]")) == 1:
                                print('Conta com SMS')
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] SMS.', text_color='red')
                                window.Refresh()
                                troca_ip += 1
                                if troca_ip == 3:
                                    troca_ip = 1
                                    d.app_start('pl.rs.sip.softphone.newapp')
                                    time.sleep(5)
                                    if d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').exists:
                                        print('2NR deslogou')
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(timeout=60)
                                        time.sleep(5)

                                        d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email2nr)
                                        time.sleep(0.5)
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha2nr)
                                        time.sleep(0.5)
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                                        time.sleep(3)
                                        d.app_start('pl.rs.sip.softphone.newapp')
                                        time.sleep(4)
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                                        time.sleep(1)
                                        d.xpath(
                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                                        window.Refresh()
                                        raise Exception('Número excluido')
                                break
                            if tentativa_log == 30:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Tempo excedido', text_color='red')
                                window.Refresh()
                                raise Exception('Tempo excedido')
                            tentativa_log += 1
                            time.sleep(2)
                            if len(chrome.find_elements("//span[contains(text(), 'Página inicial')]")) == 1:
                                print('Conta criada com sucesso')
                                time.sleep(4)
                                if len(chrome.find_elements("//span[text()='Permitir todos os cookies']")) == 1:
                                    try:
                                        chrome.driver.uc_click(
                                            "//span[text()='Permitir todos os cookies']", 5)
                                        print('Cookies aceito')
                                        time.sleep(5)
                                    except:
                                        print('Sem cookies')
                                troca_ip = 1
                                try:
                                    conteudo = config['vpn']
                                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                        text_color=('lime'))
                                    window.Refresh()
                                    contagem = contagem + 1
                                    window['criadas'].update(contagem)
                                    window.Refresh()
                                    now = datetime.now()
                                    now_brasilia = tz.localize(now)
                                    timestamp = now_brasilia.strftime(
                                        "%d/%m/%Y %H:%M:%S")
                                    try:
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                                            'credentials.json', scope)
                                        client = gspread.authorize(creds)

                                        spreadsheet_id = config['spreadsheet']
                                        sheet_name = 'contas'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, num, timestamp, maquina,
                                                vpn_nav + ' - ' + '2NR + NAV', local_vpn]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:F{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)

                                        rows = sheet.get_all_values()

                                        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                        regex = re.compile(r'\S+\s\S+')

                                        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                        num_rows = sum(
                                            1 for row in rows if regex.match(row[0]))
                                    except Exception as e:
                                        print(e)
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                        tempo_aleatorio = random.randint(10, 40)
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                        time.sleep(tempo_aleatorio)
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                                            'credentials.json', scope)
                                        client = gspread.authorize(creds)

                                        spreadsheet_id = config['spreadsheet']
                                        sheet_name = 'contas'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, num, timestamp,
                                                maquina, vpn_nav + ' - ' + '2NR + NAV', local_vpn]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:F{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)

                                        rows = sheet.get_all_values()

                                        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                        regex = re.compile(r'\S+\s\S+')

                                        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                        num_rows = sum(
                                            1 for row in rows if regex.match(row[0]))
                                    window['total'].update(num_rows)
                                    random_number = random.random()

                                    # Definir a chance desejada (10%)
                                    chance = 0.2

                                    # Verificar se o número aleatório está abaixo da chance
                                    if random_number < chance and not user_mysql == "wn3":
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                            funcionamento, scope)
                                        client = gspread.authorize(creds)

                                        spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                        sheet_name = 'relatorio_geral'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, num, timestamp, maquina,
                                                vpn_nav + ' - ' + '2NR + NAV', local_vpn, user_mysql]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:G{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)

                                except Exception as e:
                                    print(e)
                                
                                if config6['criar_por_cima']:
                                    chrome.driver.quit()
                                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Tentando criar por cima.')
                                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo instagram no emulador.')
                                    window.Refresh()
                                    d.app_start('com.instagram.android')
                                    d(text="Entrar").wait(timeout=60)
                                    time.sleep(2)
                                    d.set_fastinput_ime(True)
                                    d.settings['operation_delay'] = (.5, 1)
                                    d.settings['operation_delay_methods'] = ['click', 'swipe', 'drag', 'press', 'set_text']
                                    
                                    def escrever_devagar(element, text, delay=0.1):
                                        text_to_enter = ''
                                        element.clear_text()
                                        for char in text:
                                            text_to_enter += char
                                            element.set_text(text_to_enter)
                                            time.sleep(delay)

                                    escrever_devagar(d(className="android.widget.EditText", instance=0), user_completo, delay=0.2)
                                    #.set_text(user_completo)
                                    escrever_devagar(d(className="android.widget.EditText", instance=1), senha, delay=0.4)

                                    #.set_text(senha)
                                    d(text='Entrar').click()
                                    d(text="Agora não").click(timeout=60)
                                    d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=60)
                                    d(resourceId="com.instagram.android:id/netego_carousel_cta").click(timeout=60)
                                    if d(text="Não permitir acesso").wait(timeout=30):
                                        d(text="Não permitir acesso").click(timeout=60)
                                    seguir_sugeridos = 0
                                    while seguir_sugeridos < 10:
                                        d(resourceId="com.instagram.android:id/recommended_user_card_follow_button").click(timeout=60)
                                        d(resourceId="com.instagram.android:id/recommended_user_dismiss_button").click(timeout=60)
                                        time.sleep(0.5)
                                        seguir_sugeridos += 1

                                    d(resourceId="com.instagram.android:id/action_bar_button_back").click(timeout=10)
                                    d(resourceId="com.instagram.android:id/action_bar_title_chevron").click(timeout=30)
                                    d.xpath('/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout[2]/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.ListView/android.widget.LinearLayout[last()]/android.widget.FrameLayout/android.widget.ImageView').click(timeout=30)
                                    d(text="Criar nova conta").click(timeout=20)

                                    lista_user = random.choices(range(0, 9), k=2)
                                    lista_letras = random.choices(letras, k=2)
                                    nomea = fake.first_name_male().replace(" ", "")
                                    nome = unicodedata.normalize('NFKD', nomea).encode(
                                        'ASCII', 'ignore').decode('ASCII')
                                    sobrenomea = fake.last_name().replace(" ", "").lower()
                                    sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                                        'ASCII', 'ignore').decode('ASCII')
                                    nome_completo = nome + ' ' + sobrenome
                                    nome_completo_s = nome + sobrenome
                                    numeros_concatenados = ''.join(str(numero)
                                                                for numero in lista_user)
                                    user_completo1 = nome_completo_s + '' + \
                                        str(numeros_concatenados) + ''.join(lista_letras)
                                    user_completo = random.randint(1, len(user_completo1))
                                    string_with_dot = user_completo1[:user_completo] + \
                                        '_' + user_completo1[user_completo:]
                                    user_completo_antigo = string_with_dot.lower()
                                    escolha = random.choice(["_", "."])
                                    user_completo = nome + escolha + sobrenome + \
                                        str(numeros_concatenados) + ''.join(lista_letras)
                                    print(user_completo)
                                    window['output'].print(
                                        f'{linha_ret}')
                                    window.Refresh()
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] User: {user_completo}')
                                    window.Refresh()

                                    escrever_devagar(d(className="android.widget.EditText"), user_completo, delay=0.2)
                                    time.sleep(5)
                                    if d(text='EXCLUIR').exists:
                                        d.press("back")
                                    d(resourceId="com.instagram.android:id/button_text").click(timeout=20)

                                    try:
                                        senha = gerar_senha(12)
                                        print(senha)
                                        d(resourceId="com.instagram.android:id/password").wait(timeout=25)
                                        #d(resourceId="com.instagram.android:id/password").set_text(senha)
                                        escrever_devagar(d(resourceId="com.instagram.android:id/password"), senha, delay=0.2)

                                        d(text="Avançar").click(timeout=15)
                                        d(text="Adicionar novo telefone ou email").click(timeout=30)
                                        #ddi_insta = d(resourceId="com.instagram.android:id/country_code_picker").get_text(timeout=20)
                                        #ddi_bruto = re.findall(r'\d+', ddi_insta)
                                        #ddi = ''.join(ddi_bruto)
                                        num_insta = num.replace('+48', '')
                                        
                                        #num_insta = num_insta.replace(ddi, '')
                                        #d(text="Telefone").set_text(num_insta)
                                        escrever_devagar(d(className="android.widget.EditText"), num_insta, delay=0.2)

                                        d(text="Avançar").click(timeout=15)
                                        if d(text="Alterar número de telefone ou reenviar SMS").wait(timeout=10):
                                            d.app_start('pl.rs.sip.softphone.newapp')
                                            if d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').exists:
                                                print('2NR deslogou')
                                                d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(timeout=60)
                                                time.sleep(5)

                                                d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email2nr)
                                                time.sleep(0.5)
                                                d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha2nr)
                                                time.sleep(0.5)
                                                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                                                time.sleep(3)

                                            d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()

                                            try:
                                                try:
                                                    cod = d(
                                                        resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)
                                                except:
                                                    d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                                                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                                                    cod = d(
                                                        resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=5)

                                            except:
                                                codigo_não_recebido_seguidos += 1
                                                window['output'].print(
                                                    f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                                                window.Refresh()
                                                raise Exception(' ')
                                            cod = cod.replace(' ', '')
                                            codigo = re.sub('[^0-9]', '', cod)[:6]
                                            window['output'].print(
                                                f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                                            window.Refresh()
                                            escrever_devagar(d(className="android.widget.EditText"), codigo, delay=0.2)
                                            d(text="Avançar").click(timeout=10)
                                        try:
                                            d(text="Pular").wait(timeout=30)
                                        except:
                                            window['output'].print(
                                                f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                                            window.Refresh()
                                            try:
                                                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                                            stdout=subprocess.DEVNULL,
                                                            stderr=subprocess.DEVNULL, check=True, shell=True)

                                            except:
                                                pass

                                            conteudo = config['vpn']
                                            if conteudo == "AVG":
                                                vpn_avg()
                                            elif conteudo == "SurfShark":
                                                vpn_surf()
                                            elif conteudo == "Nenhuma":
                                                nenhuma_vpn()
                                            elif conteudo == "Avast":
                                                vpn_avast()
                                            elif conteudo == "ExpressVPN":
                                                vpn_express()
                                            elif conteudo == "PiaVPN":
                                                vpn_pia()
                                            elif conteudo == "TunnelBear":
                                                vpn_tunnelbear()
                                            elif conteudo == "BetterNet":
                                                vpn_better()
                                            elif conteudo == "CyberGhost":
                                                vpn_cyberghost()
                                            elif conteudo == "NordVPN":
                                                vpn_nord()
                                            elif conteudo == "HotspotShield":
                                                vpn_hotspotshield()
                                            elif conteudo == "WindscribeVPN":
                                                vpn_windscribe()
                                            elif conteudo == "HmaVPN":
                                                vpn_hma()
                                            else:
                                                window['output'].print(
                                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                                window.Refresh()
                                            raise Exception("Restrição")
                                        time.sleep(5)
                                        if d(text="Pular").wait(timeout=10):
                                            print('Conta criada')
                                            try:
                                                conteudo = config['vpn']
                                                window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                                    text_color=('lime'))
                                                window.Refresh()
                                                contagem = contagem + 1
                                                window['criadas'].update(contagem)
                                                window.Refresh()
                                                now = datetime.now()
                                                now_brasilia = tz.localize(now)
                                                timestamp = now_brasilia.strftime(
                                                    "%d/%m/%Y %H:%M:%S")
                                                try:
                                                    scope = ["https://spreadsheets.google.com/feeds",
                                                            "https://www.googleapis.com/auth/drive"]
                                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                                        'credentials.json', scope)
                                                    client = gspread.authorize(creds)

                                                    spreadsheet_id = config['spreadsheet']
                                                    sheet_name = 'contas'
                                                    # Insert user, password, and timestamp into first empty row
                                                    sheet = client.open_by_key(
                                                        spreadsheet_id).worksheet(sheet_name)
                                                    values = sheet.col_values(1)
                                                    last_row = len(values)
                                                    values = [user_completo + ' ' + senha, num, timestamp, maquina,
                                                            'CRIAÇÃO POR CIMA', local_vpn]
                                                    cell_list = sheet.range(
                                                        f'A{last_row + 1}:F{last_row + 1}')
                                                    for i, val in enumerate(values):
                                                        cell_list[i].value = val
                                                    sheet.update_cells(cell_list)

                                                    rows = sheet.get_all_values()

                                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                                    regex = re.compile(r'\S+\s\S+')

                                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                                    num_rows = sum(
                                                        1 for row in rows if regex.match(row[0]))
                                                except Exception as e:
                                                    print(e)
                                                    window['output'].print(
                                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                                    tempo_aleatorio = random.randint(10, 40)
                                                    window['output'].print(
                                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                                    time.sleep(tempo_aleatorio)
                                                    scope = ["https://spreadsheets.google.com/feeds",
                                                            "https://www.googleapis.com/auth/drive"]
                                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                                        'credentials.json', scope)
                                                    client = gspread.authorize(creds)

                                                    spreadsheet_id = config['spreadsheet']
                                                    sheet_name = 'contas'
                                                    # Insert user, password, and timestamp into first empty row
                                                    sheet = client.open_by_key(
                                                        spreadsheet_id).worksheet(sheet_name)
                                                    values = sheet.col_values(1)
                                                    last_row = len(values)
                                                    values = [user_completo + ' ' + senha, num, timestamp,
                                                            maquina, 'CRIAÇÃO POR CIMA', local_vpn]
                                                    cell_list = sheet.range(
                                                        f'A{last_row + 1}:F{last_row + 1}')
                                                    for i, val in enumerate(values):
                                                        cell_list[i].value = val
                                                    sheet.update_cells(cell_list)

                                                    rows = sheet.get_all_values()

                                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                                    regex = re.compile(r'\S+\s\S+')

                                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                                    num_rows = sum(
                                                        1 for row in rows if regex.match(row[0]))
                                                window['total'].update(num_rows)
                                                random_number = random.random()

                                                # Definir a chance desejada (10%)
                                                chance = 0.2

                                                # Verificar se o número aleatório está abaixo da chance
                                                if random_number < chance and not user_mysql == "wn3":
                                                    scope = ["https://spreadsheets.google.com/feeds",
                                                            "https://www.googleapis.com/auth/drive"]
                                                    creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                                        funcionamento, scope)
                                                    client = gspread.authorize(creds)

                                                    spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                                    sheet_name = 'relatorio_geral'
                                                    # Insert user, password, and timestamp into first empty row
                                                    sheet = client.open_by_key(
                                                        spreadsheet_id).worksheet(sheet_name)
                                                    values = sheet.col_values(1)
                                                    last_row = len(values)
                                                    values = [user_completo + ' ' + senha, num, timestamp, maquina,
                                                            'CRIAÇÃO POR CIMA', local_vpn, user_mysql]
                                                    cell_list = sheet.range(
                                                        f'A{last_row + 1}:G{last_row + 1}')
                                                    for i, val in enumerate(values):
                                                        cell_list[i].value = val
                                                    sheet.update_cells(cell_list)

                                            except Exception as e:
                                                print(e)
                                            d(text="Pular").click(timeout=20)
                                            d(text="Pular").click_exists(timeout=5)

                                            if d(text="Pública").wait(timeout=5):
                                                d(text="Pública").click()
                                                d(text="Pular").click(timeout=20)
                                        else:
                                            print("SMS")
                                            window['output'].print(
                                                f'[{datetime.now().strftime("%H:%M:%S")}] SMS.')
                                            window.Refresh()
                                            try:
                                                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                                            stdout=subprocess.DEVNULL,
                                                            stderr=subprocess.DEVNULL, check=True, shell=True)

                                            except:
                                                pass

                                            conteudo = config['vpn']
                                            if conteudo == "AVG":
                                                vpn_avg()
                                            elif conteudo == "SurfShark":
                                                vpn_surf()
                                            elif conteudo == "Nenhuma":
                                                nenhuma_vpn()
                                            elif conteudo == "Avast":
                                                vpn_avast()
                                            elif conteudo == "ExpressVPN":
                                                vpn_express()
                                            elif conteudo == "PiaVPN":
                                                vpn_pia()
                                            elif conteudo == "TunnelBear":
                                                vpn_tunnelbear()
                                            elif conteudo == "BetterNet":
                                                vpn_better()
                                            elif conteudo == "CyberGhost":
                                                vpn_cyberghost()
                                            elif conteudo == "NordVPN":
                                                vpn_nord()
                                            elif conteudo == "HotspotShield":
                                                vpn_hotspotshield()
                                            elif conteudo == "WindscribeVPN":
                                                vpn_windscribe()
                                            elif conteudo == "HmaVPN":
                                                vpn_hma()
                                            else:
                                                window['output'].print(
                                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                                window.Refresh()
                                            raise Exception("Restrição")
                                            
                                        d(text="Pular").wait(timeout=60)
                                        d(text="Pular").click(timeout=20)
                                        d(text="Pular").wait(timeout=60)
                                        d(text="Pular").click(timeout=20)
                                        d(resourceId="com.instagram.android:id/action_bar_button_action").click(timeout=30)

                                    except Exception as e:
                                        if d(text="Aguarde alguns minutos antes de tentar novamente."):
                                            print('Restrição')
                                        else:
                                            print(f"Algum erro: {e}")

                                    try:
                                        while True:
                                            d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=60)
                                            d(resourceId="com.instagram.android:id/action_bar_title_chevron").click(timeout=30)
                                            d.xpath('/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout[2]/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.ListView/android.widget.LinearLayout[last()]/android.widget.FrameLayout/android.widget.ImageView').click(timeout=30)
                                            d(text="Criar nova conta").click(timeout=20)

                                            lista_user = random.choices(range(0, 9), k=2)
                                            lista_letras = random.choices(letras, k=2)
                                            nomea = fake.first_name_male().replace(" ", "")
                                            nome = unicodedata.normalize('NFKD', nomea).encode(
                                                'ASCII', 'ignore').decode('ASCII')
                                            sobrenomea = fake.last_name().replace(" ", "").lower()
                                            sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                                                'ASCII', 'ignore').decode('ASCII')
                                            nome_completo = nome + ' ' + sobrenome
                                            nome_completo_s = nome + sobrenome
                                            numeros_concatenados = ''.join(str(numero)
                                                                        for numero in lista_user)
                                            user_completo1 = nome_completo_s + '' + \
                                                str(numeros_concatenados) + ''.join(lista_letras)
                                            user_completo = random.randint(1, len(user_completo1))
                                            string_with_dot = user_completo1[:user_completo] + \
                                                '_' + user_completo1[user_completo:]
                                            user_completo_antigo = string_with_dot.lower()
                                            escolha = random.choice(["_", "."])
                                            user_completo = nome + escolha + sobrenome + \
                                                str(numeros_concatenados) + ''.join(lista_letras)
                                            print(user_completo)
                                            window['output'].print(
                                                f'{linha_ret}')
                                            window.Refresh()
                                            window['output'].print(
                                                f'[{datetime.now().strftime("%H:%M:%S")}] User: {user_completo}')
                                            window.Refresh()
                                            d(resourceId="com.instagram.android:id/username").set_text(user_completo)
                                            time.sleep(5)
                                            d(resourceId="com.instagram.android:id/button_text").click(timeout=20)
                                            senha = gerar_senha(12)
                                            print(senha)
                                            d(resourceId="com.instagram.android:id/password").wait(timeout=25)
                                            d(resourceId="com.instagram.android:id/password").set_text(senha)
                                            d(text="Avançar").click(timeout=15)

                                            if d(text="Adicione sua data de nascimento").wait(timeout=5):
                                                d(text="Avançar").click()
                                                d(text="OK").click(timeout=5)
                                                d(text="Inserir idade").click(timeout=5)
                                                d(resourceId="com.instagram.android:id/entered_age").set_text(random.randint(18, 50))
                                                d(text="Avançar").click(timeout=5)
                                                


                                            d(text="Adicionar novo telefone ou email").click(timeout=30)
                                            ddi_insta = d(resourceId="com.instagram.android:id/country_code_picker").get_text(timeout=20)
                                            ddi_bruto = re.findall(r'\d+', ddi_insta)
                                            ddi = ''.join(ddi_bruto)
                                            num_insta = num.replace('+', '')
                                            num_insta = num_insta.replace(ddi, '')
                                            d(text="Telefone").set_text(num_insta)
                                            d(text="Avançar").click(timeout=15)
                                            try:
                                                d(text="Pular").wait(timeout=30)
                                            except:
                                                window['output'].print(
                                                f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                                                window.Refresh()
                                                try:
                                                    subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                                                stdout=subprocess.DEVNULL,
                                                                stderr=subprocess.DEVNULL, check=True, shell=True)

                                                except:
                                                    pass

                                                conteudo = config['vpn']
                                                if conteudo == "AVG":
                                                    vpn_avg()
                                                elif conteudo == "SurfShark":
                                                    vpn_surf()
                                                elif conteudo == "Nenhuma":
                                                    nenhuma_vpn()
                                                elif conteudo == "Avast":
                                                    vpn_avast()
                                                elif conteudo == "ExpressVPN":
                                                    vpn_express()
                                                elif conteudo == "PiaVPN":
                                                    vpn_pia()
                                                elif conteudo == "TunnelBear":
                                                    vpn_tunnelbear()
                                                elif conteudo == "BetterNet":
                                                    vpn_better()
                                                elif conteudo == "CyberGhost":
                                                    vpn_cyberghost()
                                                elif conteudo == "NordVPN":
                                                    vpn_nord()
                                                elif conteudo == "HotspotShield":
                                                    vpn_hotspotshield()
                                                elif conteudo == "WindscribeVPN":
                                                    vpn_windscribe()
                                                elif conteudo == "HmaVPN":
                                                    vpn_hma()
                                                else:
                                                    window['output'].print(
                                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                                    window.Refresh()
                                                raise Exception("Restrição")
                                            
                                            time.sleep(5)
                                            if d(text="Pular").wait(timeout=10):
                                                print('Conta criada')
                                                try:
                                                    conteudo = config['vpn']
                                                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                                        text_color=('lime'))
                                                    window.Refresh()
                                                    contagem = contagem + 1
                                                    window['criadas'].update(contagem)
                                                    window.Refresh()
                                                    now = datetime.now()
                                                    now_brasilia = tz.localize(now)
                                                    timestamp = now_brasilia.strftime(
                                                        "%d/%m/%Y %H:%M:%S")
                                                    try:
                                                        scope = ["https://spreadsheets.google.com/feeds",
                                                                "https://www.googleapis.com/auth/drive"]
                                                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                                                            'credentials.json', scope)
                                                        client = gspread.authorize(creds)

                                                        spreadsheet_id = config['spreadsheet']
                                                        sheet_name = 'contas'
                                                        # Insert user, password, and timestamp into first empty row
                                                        sheet = client.open_by_key(
                                                            spreadsheet_id).worksheet(sheet_name)
                                                        values = sheet.col_values(1)
                                                        last_row = len(values)
                                                        values = [user_completo + ' ' + senha, num, timestamp, maquina,
                                                                'CRIAÇÃO POR CIMA', local_vpn]
                                                        cell_list = sheet.range(
                                                            f'A{last_row + 1}:F{last_row + 1}')
                                                        for i, val in enumerate(values):
                                                            cell_list[i].value = val
                                                        sheet.update_cells(cell_list)

                                                        rows = sheet.get_all_values()

                                                        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                                        regex = re.compile(r'\S+\s\S+')

                                                        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                                        num_rows = sum(
                                                            1 for row in rows if regex.match(row[0]))
                                                    except Exception as e:
                                                        print(e)
                                                        window['output'].print(
                                                            f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                                        tempo_aleatorio = random.randint(10, 40)
                                                        window['output'].print(
                                                            f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                                        time.sleep(tempo_aleatorio)
                                                        scope = ["https://spreadsheets.google.com/feeds",
                                                                "https://www.googleapis.com/auth/drive"]
                                                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                                                            'credentials.json', scope)
                                                        client = gspread.authorize(creds)

                                                        spreadsheet_id = config['spreadsheet']
                                                        sheet_name = 'contas'
                                                        # Insert user, password, and timestamp into first empty row
                                                        sheet = client.open_by_key(
                                                            spreadsheet_id).worksheet(sheet_name)
                                                        values = sheet.col_values(1)
                                                        last_row = len(values)
                                                        values = [user_completo + ' ' + senha, num, timestamp,
                                                                maquina, 'CRIAÇÃO POR CIMA', local_vpn]
                                                        cell_list = sheet.range(
                                                            f'A{last_row + 1}:F{last_row + 1}')
                                                        for i, val in enumerate(values):
                                                            cell_list[i].value = val
                                                        sheet.update_cells(cell_list)

                                                        rows = sheet.get_all_values()

                                                        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                                        regex = re.compile(r'\S+\s\S+')

                                                        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                                        num_rows = sum(
                                                            1 for row in rows if regex.match(row[0]))
                                                    window['total'].update(num_rows)
                                                    random_number = random.random()

                                                    # Definir a chance desejada (10%)
                                                    chance = 0.2

                                                    # Verificar se o número aleatório está abaixo da chance
                                                    if random_number < chance and not user_mysql == "wn3":
                                                        scope = ["https://spreadsheets.google.com/feeds",
                                                                "https://www.googleapis.com/auth/drive"]
                                                        creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                                            funcionamento, scope)
                                                        client = gspread.authorize(creds)

                                                        spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                                        sheet_name = 'relatorio_geral'
                                                        # Insert user, password, and timestamp into first empty row
                                                        sheet = client.open_by_key(
                                                            spreadsheet_id).worksheet(sheet_name)
                                                        values = sheet.col_values(1)
                                                        last_row = len(values)
                                                        values = [user_completo + ' ' + senha, num, timestamp, maquina,
                                                                'CRIAÇÃO POR CIMA', local_vpn, user_mysql]
                                                        cell_list = sheet.range(
                                                            f'A{last_row + 1}:G{last_row + 1}')
                                                        for i, val in enumerate(values):
                                                            cell_list[i].value = val
                                                        sheet.update_cells(cell_list)

                                                except Exception as e:
                                                    print(e)
                                                d(text="Pular").click(timeout=20)
                                                d(text="Pular").click_exists(timeout=5)

                                                if d(text="Pública").wait(timeout=5):
                                                    d(text="Pública").click()
                                                    d(text="Pular").click(timeout=20)
                                            else:
                                                print("SMS")
                                                window['output'].print(
                                                    f'[{datetime.now().strftime("%H:%M:%S")}] SMS')
                                                window.Refresh()
                                                try:
                                                    subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                                                stdout=subprocess.DEVNULL,
                                                                stderr=subprocess.DEVNULL, check=True, shell=True)

                                                except:
                                                    pass

                                                conteudo = config['vpn']
                                                if conteudo == "AVG":
                                                    vpn_avg()
                                                elif conteudo == "SurfShark":
                                                    vpn_surf()
                                                elif conteudo == "Nenhuma":
                                                    nenhuma_vpn()
                                                elif conteudo == "Avast":
                                                    vpn_avast()
                                                elif conteudo == "ExpressVPN":
                                                    vpn_express()
                                                elif conteudo == "PiaVPN":
                                                    vpn_pia()
                                                elif conteudo == "TunnelBear":
                                                    vpn_tunnelbear()
                                                elif conteudo == "BetterNet":
                                                    vpn_better()
                                                elif conteudo == "CyberGhost":
                                                    vpn_cyberghost()
                                                elif conteudo == "NordVPN":
                                                    vpn_nord()
                                                elif conteudo == "HotspotShield":
                                                    vpn_hotspotshield()
                                                elif conteudo == "WindscribeVPN":
                                                    vpn_windscribe()
                                                elif conteudo == "HmaVPN":
                                                    vpn_hma()
                                                else:
                                                    window['output'].print(
                                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                                    window.Refresh()
                                                raise Exception("Restrição")
                                                
                                            d(text="Pular").wait(timeout=60)
                                            d(text="Pular").click(timeout=20)
                                            d(text="Pular").wait(timeout=60)
                                            d(text="Pular").click(timeout=20)
                                            d(resourceId="com.instagram.android:id/action_bar_button_action").click(timeout=30)

                                    except Exception as e:
                                        print(f"Algum erro no processo de criação por cima: {e}")


                                break
                else:
                    with SB(uc=False, demo=False, locale_code='pt-br', headless=nav_oculto, incognito=True, extension_dir=rf'.\storage\recaptcha', extension_zip=rf'{caminho_atual}\storage\{vpn_usada}.crx') as chrome:
                        time.sleep(5)

                        if vpn_usada == 'urbanvpn':
                            file_path = './storage/urbanvpn.crx'
                            import zipfile

                            if os.path.exists("./storage/urbanvpn.crx"):
                                result = f"A pasta 'urbanvpn' já existe em '{file_path}'."
                            else:
                                # URL para download
                                url = 'https://www.dropbox.com/scl/fi/y6i5kltqi7vl20v7rc8fp/urbanvpn.crx?rlkey=goarhqxyvz7lgd9m1f2co4cf9&st=vvdo4oy2&dl=1'

                                # Fazendo o download do arquivo
                                response = requests.get(url)
                                if response.status_code == 200:
                                    with open(file_path, 'wb') as file:
                                        file.write(response.content)
                                    print("Arquivo 'urbanvpn.crx' baixado e salvo em './storage/urbanvpn.crx'.")

                                else:
                                    result = "Não foi possível baixar o arquivo. Status Code: " + \
                                        str(response.status_code)
                            
                            time.sleep(3)
                            
                            chrome.open('chrome://extensions/')
                            extensoes = chrome.execute_script(
                                'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                            )

                            id_extensao = None
                            for ext in extensoes:
                                nome_ext = chrome.execute_script('return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                                if "Urban" in nome_ext:  # Substitua pelo nome da sua extensão
                                    id_extensao = chrome.execute_script('return arguments[0].getAttribute("id");', ext)
                                    break

                            if id_extensao:
                                # Use o ID da extensão para abrir a página da extensão
                                url_extensao = f'chrome-extension://{id_extensao}/popup/index.html'
                                
                            else:
                                print("ID da extensão não encontrado")
                            
                            chrome.driver.get(url_extensao)
                            while True:
                                if chrome.driver.window_handles[0] == chrome.driver.window_handles[-1]:
                                    pass
                                elif chrome.driver.window_handles[0] != chrome.driver.window_handles[-1]:
                                    chrome.driver.switch_to.window(
                                        chrome.driver.window_handles[-1])
                                    # Verificar se a URL está correta e fechar a aba
                                    if "https://www.urban-vpn.com/" in chrome.driver.current_url:
                                        chrome.driver.close()
                                    # Alternar de volta para a aba original
                                    chrome.driver.switch_to.window(
                                        chrome.driver.window_handles[0])
                                    break
                            chrome.wait_for_element('button.button.button--pink.consent-text-controls__action').click()
                            time.sleep(0.5)
                            chrome.wait_for_element('button.button.button--pink.consent-text-controls__action').click()
                            locais = ['Australia', 'Germany', 'United Kingdom', 'United States', 'Belgium', 'Brazil', 'Canada', 'Denmark', 'France', 'India', 'Indonesia', 'Japan', 'Luxembourg', 'Poland', 'Portugal', 'Romania', 'Singapore', 'Africa', 'Sweden', 'Switzerland', 'Turkey', 'Spain']
                            local_vpn = random.choice(locais)
                            print(local_vpn)
                            chrome.wait_for_element('input[class=select-location__input]').send_keys(local_vpn)
                            chrome.wait_for_element('li[class=locations__item]').click()
                            time.sleep(3)
                            if chrome.find_elements('span.timer.main-page__timer'):
                                while True:
                                    cronometro = chrome.find_element('span.timer.main-page__timer').text
                                    cronometro = cronometro.replace(" :", "")
                                    cronometro = cronometro.replace(" ", "")
                                    #print(cronometro)
                                    if int(cronometro) > 000000:
                                        print('VPN Conectada')
                                        break

                        janela_principal = chrome.driver.window_handles[0]
                        chrome.driver.switch_to.window(janela_principal)
                        url = f"https://www.instagram.com/"
                        chrome.set_window_size(800, 800)
                        chrome.driver.get(url)
                        time.sleep(5)
                        try:
                            chrome.wait_for_element('button:contains("Permitir todos os cookies")').click()
                            print('Cookies aceito')
                            time.sleep(5)
                            chrome.driver.refresh()
                            #chrome.wait_for_element_not_present('button:contains("Permitir todos os cookies")').click()
                        except:
                            print('Sem cookies')
                        chrome.wait_for_element(
                            "a[href='/accounts/emailsignup/']", timeout=60).click()

                        lista_user = random.choices(range(0, 9), k=2)
                        lista_letras = random.choices(letras, k=2)
                        nomea = fake.first_name_male().replace(" ", "")
                        nome = unicodedata.normalize('NFKD', nomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        sobrenomea = fake.last_name().replace(" ", "").lower()
                        sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        nome_completo = nome + ' ' + sobrenome
                        nome_completo_s = nome + sobrenome
                        numeros_concatenados = ''.join(str(numero)
                                                    for numero in lista_user)
                        user_completo1 = nome_completo_s + '' + \
                            str(numeros_concatenados) + ''.join(lista_letras)
                        user_completo = random.randint(1, len(user_completo1))
                        string_with_dot = user_completo1[:user_completo] + \
                            '_' + user_completo1[user_completo:]
                        user_completo_antigo = string_with_dot.lower()
                        escolha = random.choice(["_", "."])
                        user_completo = nome + escolha + sobrenome + \
                            str(numeros_concatenados) + ''.join(lista_letras)

                        print(user_completo)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] User: {user_completo}')
                        window.Refresh()
                        senha = gerar_senha(12)
                        print(senha)
                        num = f'+48{num}'
                        chrome.type("//input[@name='emailOrPhone']", num)
                        #for numero in num:
                        #    chrome.send_keys(
                        #        "//input[@name='emailOrPhone']", f'{numero}')
                        #    time.sleep(random.uniform(0.001, 0.05))
                        time.sleep(random.uniform(0.5, 2))
                        chrome.type("//input[@name='fullName']", nome_completo)
                        #for nome in nome_completo:
                        #    chrome.send_keys("//input[@name='fullName']", nome)
                        #    time.sleep(random.uniform(0.001, 0.05))
                        time.sleep(random.uniform(0.5, 2))
                        chrome.type("//input[@name='username']", user_completo)
                        #    for user in user_completo:
                        #        chrome.send_keys("//input[@name='username']", user)
                        #        time.sleep(random.uniform(0.001, 0.05))
                        time.sleep(random.uniform(0.5, 2))
                        chrome.type("//input[@name='password']", senha)
                        #    for password in senha:
                        #        chrome.send_keys("//input[@name='password']", password)
                        #        time.sleep(random.uniform(0.001, 0.05))
                        time.sleep(random.uniform(0.5, 2))
                        time.sleep(5)
                        chrome.wait_for_element('''button[type='submit']''').click()
                        ano = str(random.randint(1960, 2000))
                        try:
                            chrome.wait_for_element(
                                "//select[@title='Ano:']", timeout=15)
                        except:
                            pass
                        if len(chrome.find_elements("//input[@name='emailOrPhone']")) == 1:
                            print('IP Bloqueado, procurando outro IP')
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] IP Bloqueado')
                            window.Refresh()

                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Procurando outro IP')
                            window.Refresh()
                            tentativa = 1
                        
                                    
                            if vpn_nav == 'UrbanVPN':
                                while True:
                                    chrome.execute_script(
                                        "window.open('a', 'new_tab')")
                                    janela_principal = chrome.driver.window_handles[0]
                                    nova_janela = chrome.driver.window_handles[-1]
                                    chrome.driver.switch_to.window(nova_janela)
                                    chrome.driver.get(url_extensao)
                                    time.sleep(1)
                                    if chrome.find_elements("#app > div > div.simple-layout.rate-us-page > div.simple-layout__header > div"):
                                        chrome.find_element("#app > div > div.simple-layout.rate-us-page > div.simple-layout__header > div").click()
                                        
                                    chrome.wait_for_element('div.play-button.play-button--pause').click()
                                    time.sleep(0.5)
                                    chrome.driver.get(url_extensao)
                                    time.sleep(2)
                                    if chrome.find_elements("#app > div > div.simple-layout.rate-us-page > div.simple-layout__header > div"):
                                        chrome.find_element("#app > div > div.simple-layout.rate-us-page > div.simple-layout__header > div").click()

                                    chrome.wait_for_element('div.play-button.play-button--play').click()
                                    time.sleep(0.5)
                                    if chrome.find_elements('span.timer.main-page__timer'):
                                        while True:
                                            cronometro = chrome.find_element('span.timer.main-page__timer').text
                                            cronometro = cronometro.replace(" :", "")
                                            cronometro = cronometro.replace(" ", "")
                                            #print(cronometro)
                                            if int(cronometro) > 000000:
                                                print('VPN Conectada')
                                                break
                                    
                                    chrome.driver.close()
                                    janela_principal = chrome.driver.window_handles[0]
                                    chrome.driver.switch_to.window(janela_principal)
                                    time.sleep(3)
                                    try:
                                        chrome.wait_for_element(
                                            '''button[type='submit']''').click()
                                    except:
                                        chrome.wait_for_element(
                                            '''//button[@type='submit']''').click()
                                    time.sleep(10)
                                    if len(chrome.find_elements("//select[@title='Ano:']")) == 1:
                                        print('IP aceito')
                                        break
                                    tentativa += 1
                                    if tentativa == 5:
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Não achou IP válido', text_color='red')
                                        window.Refresh()
                                        chrome.driver.quit()
                                        raise Exception("Não achou IP válido")
                        

                        try:
                            chrome.wait_for_element(
                                "//select[@title='Ano:']").send_keys(ano)
                        except:
                            print('IP Bloqueado')
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] IP Bloqueado ou Número bloqueado', text_color='red')
                            window.Refresh()
                            chrome.driver.quit()

                        dia = str(random.randint(1, 28))
                        time.sleep(random.uniform(0.5, 2))
                        chrome.wait_for_element(
                            "//select[@title='Dia:']").send_keys(dia)
                        months = [
                            ("janeiro", 1),
                            ("fevereiro", 2),
                            ("março", 3),
                            ("abril", 4),
                            ("maio", 5),
                            ("junho", 6),
                            ("julho", 7),
                            ("agosto", 8),
                            ("setembro", 9),
                            ("outubro", 10),
                            ("novembro", 11),
                            ("dezembro", 12),
                        ]

                        random_month = random.choice(months)
                        month_text = random_month[0]

                        time.sleep(random.uniform(0.5, 2))
                        chrome.wait_for_element(
                            "//select[@title='Mês:']").send_keys(month_text)
                        time.sleep(2)
                        chrome.wait_for_element('button:contains("Avançar")').click()
                        time.sleep(10)
                        if len(chrome.find_elements("//p[@id='ssfErrorAlert']")) == 1:
                            print('IP Bloqueado ou Número bloqueado')
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] IP Bloqueado ou Número bloqueado', text_color='red')
                            window.Refresh()
                            d.app_start('pl.rs.sip.softphone.newapp')
                            time.sleep(5)
                            if d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').exists:
                                print('2NR deslogou')
                                d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(timeout=60)
                                time.sleep(5)

                                d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email2nr)
                                time.sleep(0.5)
                                d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha2nr)
                                time.sleep(0.5)
                                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                                time.sleep(3)
                            d.app_start('pl.rs.sip.softphone.newapp')
                            time.sleep(4)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                            time.sleep(1)
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                            window.Refresh()
                            chrome.driver.quit()
                            raise Exception('skip')
                        captcha_element = chrome.find_elements(
                            "//input[@id='recaptcha-input']")
                        tentativas = 1
                        if len(captcha_element) == 1:
                            print('Resolvendo captcha')
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Resolvendo captcha')
                            window.Refresh()
                            while True:
                                try:
                                    # Check if the button is clickable
                                    button = WebDriverWait(chrome.driver, 3).until(EC.element_to_be_clickable(
                                        (By.XPATH, "//button[contains(text(), 'Avançar')]")))

                                    # Click the button once it's clickable
                                    chrome.wait_for_element('button:contains("Avançar")').click()
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Captcha resolvido')
                                    window.Refresh()
                                    break  # Exit the loop once the button is clicked

                                except Exception as e:
                                    print(f"Captcha ainda não resolvido")

                                    # Wait for a short interval before checking again
                                    time.sleep(2)
                                    tentativas += 1
                                    if tentativas == 40:
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Captcha não pode ser resolvido')
                                        window.Refresh()
                                        print('Captcha não pode ser resolvido')
                                        raise Exception(' ')
                        else:
                            print('Sem Captcha')
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(5)
                        if d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').exists:
                            print('2NR deslogou')
                            d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(timeout=60)
                            time.sleep(5)

                            d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email2nr)
                            time.sleep(0.5)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha2nr)
                            time.sleep(0.5)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                            time.sleep(3)

                        d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()

                        try:
                            try:
                                cod = d(
                                    resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)
                            except:
                                d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                                d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                                cod = d(
                                    resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=5)

                        except:
                            codigo_não_recebido_seguidos += 1
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                            window.Refresh()
                            d.app_start('pl.rs.sip.softphone.newapp')
                            time.sleep(4)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                            time.sleep(1)
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                            window.Refresh()
                            chrome.driver.quit()
                            raise Exception(' ')
                        cod = cod.replace(' ', '')
                        codigo = re.sub('[^0-9]', '', cod)[:6]
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                        window.Refresh()
                        codigo = cod
                        for codigo in cod:
                            chrome.send_keys(
                                "//input[@name='confirmationCode']", codigo)
                            time.sleep(random.uniform(0.1, 0.4))

                        time.sleep(random.uniform(0.5, 2))
                        chrome.wait_for_element('button:contains("Confirmar")').click()
                        time.sleep(15)
                        while True:
                            if len(chrome.find_elements("//p[@id='phoneSignupConfirmErrorAlert']")) == 1:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Tentando relogar')
                                window.Refresh()
                                chrome.driver.get(url)
                                try:
                                    chrome.wait_for_element(
                                        'button:contains("Permitir todos os cookies")').click()
                                    print('Cookies aceito')
                                    time.sleep(5)
                                except:
                                    print('Sem cookies')
                                for user in user_completo:
                                    chrome.send_keys(
                                        "//input[@name='username']", user)
                                    time.sleep(random.uniform(0.001, 0.05))
                                time.sleep(random.uniform(0.5, 2))
                                # chrome.type("//input[@name='password']", senha)
                                for password in senha:
                                    chrome.send_keys(
                                        "//input[@name='password']", password)
                                    time.sleep(random.uniform(0.001, 0.05))
                                time.sleep(2)
                                chrome.wait_for_element(
                                    '''button[type='submit']''').click()
                                time.sleep(20)

                                if (
                                    "challenge" in chrome.driver.current_url or
                                    "suspended" in chrome.driver.current_url or
                                    len(chrome.find_elements("//div[contains(text(), 'Sua senha está incorreta. Confira-a.')]")) == 1 or
                                    len(chrome.find_elements("//div[text()='A sua conta foi desativada por violar nossos termos: http://instagram.com/about/legal/terms/']")) == 1 or
                                    len(chrome.find_elements("//div[text()='Houve um problema ao entrar no Instagram. Tente novamente em breve.']")) == 1 or
                                    len(chrome.find_elements("//div[text()='Não foi possível se conectar ao Instagram. Verifique se você está conectado à Internet e tente novamente.']")) == 1
                                ):
                                    print('Conta com SMS')
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] SMS.', text_color='red')
                                    window.Refresh()
                                    troca_ip += 1
                                    if troca_ip == 3:
                                        troca_ip = 1
                                        d.app_start('pl.rs.sip.softphone.newapp')
                                        time.sleep(5)
                                        if d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').exists:
                                            print('2NR deslogou')
                                            d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(
                                                timeout=60)
                                            time.sleep(5)

                                            d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(
                                                email2nr)
                                            time.sleep(0.5)
                                            d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(
                                                senha2nr)
                                            time.sleep(0.5)
                                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                                            time.sleep(3)
                                        d.app_start('pl.rs.sip.softphone.newapp')
                                        time.sleep(4)
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                                        time.sleep(1)
                                        d.xpath(
                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                                        window.Refresh()
                                        chrome.driver.quit()
                                        raise Exception('Número excluido')
                                    break
                            if "challenge" in chrome.driver.current_url or "suspended" in chrome.driver.current_url or len(chrome.find_elements("//div[contains(text(), 'Sua senha está incorreta. Confira-a.')]")) == 1:
                                print('Conta com SMS')
                                chrome.driver.quit()
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] SMS.', text_color='red')
                                window.Refresh()
                                troca_ip += 1
                                if troca_ip == 3:
                                    troca_ip = 1
                                    d.app_start('pl.rs.sip.softphone.newapp')
                                    time.sleep(5)
                                    if d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').exists:
                                        print('2NR deslogou')
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(timeout=60)
                                        time.sleep(5)

                                        d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email2nr)
                                        time.sleep(0.5)
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha2nr)
                                        time.sleep(0.5)
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                                        time.sleep(3)
                                        d.app_start('pl.rs.sip.softphone.newapp')
                                        time.sleep(4)
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                                        time.sleep(1)
                                        d.xpath(
                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                                        window.Refresh()
                                        chrome.driver.quit()
                                        raise Exception('Número excluido')
                                break
                            if len(chrome.find_elements("//span[contains(text(), 'Página inicial')]")) == 1:
                                print('Conta criada com sucesso')
                                time.sleep(4)
                                if len(chrome.find_elements("//span[text()='Permitir todos os cookies']")) == 1:
                                    try:
                                        chrome.wait_for_element(
                                            "//span[text()='Permitir todos os cookies']").click()
                                        print('Cookies aceito')
                                        time.sleep(5)
                                    except:
                                        print('Sem cookies')
                                troca_ip = 1
                                chrome.driver.quit()
                                try:
                                    conteudo = config['vpn']
                                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                        text_color=('lime'))
                                    window.Refresh()
                                    contagem = contagem + 1
                                    window['criadas'].update(contagem)
                                    window.Refresh()
                                    now = datetime.now()
                                    now_brasilia = tz.localize(now)
                                    timestamp = now_brasilia.strftime(
                                        "%d/%m/%Y %H:%M:%S")
                                    try:
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                                            'credentials.json', scope)
                                        client = gspread.authorize(creds)

                                        spreadsheet_id = config['spreadsheet']
                                        sheet_name = 'contas'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, num, timestamp, maquina,
                                                vpn_nav + ' - ' + '2NR + NAV', local_vpn]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:F{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)

                                        rows = sheet.get_all_values()

                                        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                        regex = re.compile(r'\S+\s\S+')

                                        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                        num_rows = sum(
                                            1 for row in rows if regex.match(row[0]))
                                    except Exception as e:
                                        print(e)
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                        tempo_aleatorio = random.randint(10, 40)
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                        time.sleep(tempo_aleatorio)
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                                            'credentials.json', scope)
                                        client = gspread.authorize(creds)

                                        spreadsheet_id = config['spreadsheet']
                                        sheet_name = 'contas'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, num, timestamp,
                                                maquina, vpn_nav + ' - ' + '2NR + NAV', local_vpn]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:F{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)

                                        rows = sheet.get_all_values()

                                        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                        regex = re.compile(r'\S+\s\S+')

                                        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                        num_rows = sum(
                                            1 for row in rows if regex.match(row[0]))
                                    window['total'].update(num_rows)
                                    random_number = random.random()

                                    # Definir a chance desejada (10%)
                                    chance = 0.2

                                    # Verificar se o número aleatório está abaixo da chance
                                    if random_number < chance and not user_mysql == "wn3":
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                            funcionamento, scope)
                                        client = gspread.authorize(creds)

                                        spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                        sheet_name = 'relatorio_geral'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, num, timestamp, maquina,
                                                vpn_nav + ' - ' + '2NR + NAV', local_vpn, user_mysql]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:G{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)

                                except Exception as e:
                                    print(e)
                                    try:
                                        chrome.driver.quit()
                                    except:
                                        pass
                                break
            except:
                try:
                    chrome.driver.quit()
                except:
                    pass
                traceback.print_exc()
        except:
            traceback.print_exc()
            try:
                chrome.driver.quit()
            except:
                pass


def instaface_criarinsta():
    global parar
    global chrome
    dados_brutos = f"""
        {texto_digitado}
    """
    import email
    from selenium import webdriver
    from selenium.webdriver.common.by import By
    from selenium.webdriver.chrome.service import Service
    from webdriver_manager.chrome import ChromeDriverManager
    import time
    import traceback
    import random
    import base64
    import re
    from email.header import decode_header
    import requests
    import unicodedata
    from faker import Faker
    fake = Faker('pt_BR')
    from selenium.common.exceptions import NoSuchElementException
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support.ui import Select
    from selenium.webdriver.support import expected_conditions as EC
    import undetected_chromedriver as uc
    try:
        with open("config.json", "r") as f:
            config = json.load(f)
    except FileNotFoundError:
        config = {}
    try:
        with open("configuracoes\\config4.json", "r") as f:
            config4 = json.load(f)
    except FileNotFoundError:
        config4 = {}
    SPREADSHEET_ID = config['spreadsheet']
    # try:
    #    conteudo = config4['metodo']
    # except Exception as e:
    #    print(config4['metodo'])
    #    print(e)
    #    pass
    senha = gerar_senha(12)
    maquina = config['maquina']
    email = 'InstaFace'
    tentativa = False
    seguido = False
    global sms
    linha_ret = '_________________________________________________\n'
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    import os
    import time
    import requests
    import hashlib
    import subprocess
    import os
    import time
    from selenium.webdriver.remote.webelement import WebElement
    import zipfile

    def digitar_como_humano(elemento: WebElement, texto: str, min_delay=0.1, max_delay=0.2):
        """
        Digita o texto em um elemento da página, simulando digitação humana.

        :param elemento: O elemento do Selenium onde o texto será digitado.
        :param texto: O texto a ser digitado no elemento.
        :param min_delay: Atraso mínimo entre as teclas, em segundos.
        :param max_delay: Atraso máximo entre as teclas, em segundos.
        """
        for char in texto:
            elemento.send_keys(char)
            time.sleep(random.uniform(min_delay, max_delay))

    def baixar_arquivo(url, caminho_arquivo, pasta_destino):
        # Verifica e cria a pasta destino, se necessário
        if os.path.exists(pasta_destino):
            return
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Baixando navegador...')
        window.Refresh()
        # Se a pasta não existir, cria a pasta destino
        os.makedirs(pasta_destino)

        # Continua com o download do arquivo
        resposta = requests.get(url, stream=True)
        tamanho_total = int(resposta.headers.get('content-length', 0))

        with open(caminho_arquivo, 'wb') as file:
            for dados in resposta.iter_content(chunk_size=4096):
                file.write(dados)

        # Extrai o arquivo
        with zipfile.ZipFile(caminho_arquivo, 'r') as zip_ref:
            zip_ref.extractall(pasta_destino)

        # Apaga o arquivo zip após a extração
        os.remove(caminho_arquivo)
        print("\nDownload e extração concluídos.")

    url = 'https://www.dropbox.com/scl/fi/9juftou3q4k4kj2o7mzhq/chrome-win.zip?rlkey=84n9pwxouhu9punpcjg32onbz&dl=1'
    caminho_arquivo = './storage/driver/driver.zip'
    pasta_destino = './storage/driver/'

    baixar_arquivo(url, caminho_arquivo, pasta_destino)

    # Dividindo a string em linhas e, em seguida, cada linha em email e senha
    lista_contas = [linha.split()
                    for linha in dados_brutos.strip().split('\n') if linha]

    for conta in lista_contas:
        if parar is True:
            print('parou')
            break
        tentativa_restricao_fb = 0
        passar_conta = False
        tentativa = 1
        total_contas_criadas_fb = 0
        while passar_conta is False and parar is False:
            try:
                window['output'].print(linha_ret)
                window.Refresh()
                email_fb, senha_fb = conta
                print(email_fb)
                print(senha_fb)
                url = f"https://instagram.com/"

                chromedriver_path = '.\\chrome-win\\chromedriver.exe'
                chrome_options = uc.ChromeOptions()
                # chrome_options.add_argument("--blink-settings=imagesEnabled=false")
                chrome_options.add_argument("--disable-gpu")
                chrome_options.add_argument("--no-sandbox")
                chrome_options.add_argument("--lang=pt-BR")
                chrome_options.add_argument("--disable-notifications")
                chrome_options.add_argument("--disable-popup-blocking")
                chrome_options.add_argument("--disable-save-password-bubble")

                chrome_options.add_experimental_option("prefs", {
                    "credentials_enable_service": False,
                    "profile.password_manager_enabled": False,
                    "profile.default_content_setting_values.notifications": 2
                })
                # chrome_options.page_load_strategy = 'eager'
                chrome_options.binary_location = '.\\storage\\driver\\chrome.exe'
                # Configurando o Selenium para usar o Chrome Driver local
                service = Service(executable_path=chromedriver_path)

                chrome = uc.Chrome(
                    service=service, options=chrome_options, headless=navvisivel, version_main=116)
                chrome.get(url)
                chrome.set_window_size(1920, 1080)
                try:
                    captcha_click = WebDriverWait(chrome, 6).until(EC.element_to_be_clickable(
                        (By.XPATH, "//button[contains(text(), 'Permitir todos os cookies')]")))
                    chrome.execute_script(
                        "arguments[0].click();", captcha_click)
                except:
                    pass
                fb_click = WebDriverWait(chrome, 10).until(
                    EC.element_to_be_clickable((By.XPATH, "//button[contains(.,'Entrar com o Facebook')]")))
                chrome.execute_script("arguments[0].click();", fb_click)
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Logando em {email_fb}')
                window.Refresh()
                try:
                    captcha_click = WebDriverWait(chrome, 6).until(
                        EC.element_to_be_clickable((By.XPATH, "//button[@title='Permitir todos os cookies']")))
                    chrome.execute_script(
                        "arguments[0].click();", captcha_click)
                except:
                    pass
                digit_email_fb = WebDriverWait(chrome, 10).until(
                    EC.element_to_be_clickable((By.ID, "email")))
                digitar_como_humano(digit_email_fb, email_fb)
                digit_senha_fb = WebDriverWait(chrome, 10).until(
                    EC.element_to_be_clickable((By.ID, "pass")))
                digitar_como_humano(digit_senha_fb, senha_fb)
                WebDriverWait(chrome, 10).until(
                    EC.element_to_be_clickable((By.ID, "loginbutton"))).click()
                instagram_existe = False
                while True:
                    time.sleep(10)
                    disclosure = chrome.find_elements(By.XPATH,
                                                      "//button[contains(text(), 'Sim, terminar de adicionar')]")
                    if 'checkpoint' in chrome.current_url or 'suspended' in chrome.current_url:
                        print('SMS')
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] SMS', text_color='red')
                        window.Refresh()
                        passar_conta = True
                        raise Exception('')
                    elif 'dialog' in chrome.current_url and not 'https://www.facebook.com/login/device-based/regular/login/?login_attempt' in chrome.current_url:
                        WebDriverWait(chrome, 10).until(
                            EC.element_to_be_clickable((By.NAME, "__CONFIRM__"))).click()
                        break
                    elif len(disclosure) == 1:
                        break
                    elif chrome.current_url == 'https://www.instagram.com/':
                        print('Conta já tem instagram')
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Conta já possui instagram')
                        window.Refresh()
                        instagram_existe = True
                        break
                    elif 'https://www.facebook.com/login/device-based/regular/login/?login_attempt' in chrome.current_url:
                        tentativa_restricao_fb += 1
                        print('Tentando novamente')
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando novamente')
                        window.Refresh()
                        chrome.back()
                        WebDriverWait(chrome, 10).until(
                            EC.element_to_be_clickable((By.ID, "pass"))).send_keys(senha_fb)
                        WebDriverWait(chrome, 10).until(
                            EC.element_to_be_clickable((By.ID, "loginbutton"))).click()

                        if tentativa_restricao_fb == 2:
                            print('Não foi possivel utilizar essa conta')
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Não foi possivel utilizar essa conta')
                            window.Refresh()
                            passar_conta = True
                            raise Exception('')
                        else:
                            pass
                    elif len(chrome.find_elements(By.CSS_SELECTOR, "div[data-visualcompletion='loading-state']")) == 1:
                        if tentativa == 2:
                            print('Não foi possivel utilizar essa conta')
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Não foi possivel utilizar essa conta')
                            window.Refresh()
                            print('teste')
                            passar_conta = True
                            raise Exception('')
                        tentativa = 2
                        try:
                            seletor_do_spinner = "div[data-visualcompletion='loading-state']"
                            # Espera até que o elemento de carregamento não esteja mais visível na página
                            WebDriverWait(chrome, 10).until(
                                EC.invisibility_of_element_located(
                                    (By.CSS_SELECTOR, seletor_do_spinner))
                            )
                        except:
                            print(
                                "O tempo de espera excedeu enquanto esperava que o spinner de carregamento desaparecesse.")
                    elif len(WebDriverWait(chrome, 6).until(EC.presence_of_all_elements_located(
                            (By.XPATH, "//button[@title='Permitir todos os cookies']")))) == 1:

                        try:
                            captcha_click = WebDriverWait(chrome, 6).until(
                                EC.element_to_be_clickable((By.XPATH, "//button[@title='Permitir todos os cookies']")))
                            chrome.execute_script(
                                "arguments[0].click();", captcha_click)
                        except:
                            pass

                if instagram_existe is False:
                    letras = 'abcdefghijklmnopqrstuvwxyz'
                    lista_user = random.choices(range(0, 9), k=2)
                    lista_letras = random.choices(letras, k=1)
                    nomea = fake.first_name_male().replace(" ", "")
                    nome = unicodedata.normalize('NFKD', nomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    sobrenomea = fake.last_name().replace(" ", "").lower()
                    sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    nome_completo = nome + ' ' + sobrenome
                    nome_completo_s = nome + sobrenome
                    numeros_concatenados = ''.join(
                        str(numero) for numero in lista_user)
                    user_completo1 = nome_completo_s + '' + \
                        str(numeros_concatenados) + ''.join(lista_letras)
                    user_completo = random.randint(1, len(user_completo1))
                    string_with_dot = user_completo1[:user_completo] + \
                        '_' + user_completo1[user_completo:]
                    user_completo_antigo = string_with_dot.lower()
                    escolha = random.choice(["_", "."])
                    user_completo = nome + escolha + sobrenome + \
                        str(numeros_concatenados) + ''.join(lista_letras)
                    time.sleep(5)
                    while not 'disclosure' in chrome.current_url:
                        chrome.get("https://www.instagram.com/")
                        WebDriverWait(chrome, 35).until(EC.element_to_be_clickable((By.XPATH,
                                                                                    "/html/body/div[2]/div/div/div[1]/div/div/div/div[1]/section/main/article/div[2]/div[1]/div[2]/form/div/div[last()]/button"))).click()
                        time.sleep(5)
                        if len(chrome.find_elements(By.NAME, "__CONFIRM__")) == 1:
                            chrome.find_element(By.NAME, "__CONFIRM__").click()
                        time.sleep(10)

                    WebDriverWait(chrome, 10).until(EC.element_to_be_clickable(
                        (By.XPATH, "//button[contains(text(), 'Sim, terminar de adicionar')]"))).click()

                    from requests.auth import HTTPBasicAuth
                    # Substitua com as suas credenciais e dados
                    lista_letras_email = random.choices(letras, k=9)
                    email_string = ''.join(lista_letras_email)
                    cpanel_user = 'wnmailsh'
                    cpanel_password = 'V.5k7lV3l8PB*q'
                    cpanel_domain = 'mi3-ss120.a2hosting.com'
                    email_user = email_string
                    email_domain = 'wnmail.shop'
                    email_password = senha
                    quota = 1  # 0 para ilimitada, ou defina um limite específico

                    # URL para a função add_pop da API UAPI
                    url = f'https://{cpanel_domain}:2083/execute/Email/add_pop'
                    params = {
                        'email': email_user,
                        'domain': email_domain,
                        'password': email_password,
                        'quota': quota,
                        'send_welcome_email': 0,  # Altere para 1 se quiser enviar um e-mail de boas-vindas
                        'skip_update_db': 1
                    }

                    # Faça a solicitação para a API
                    response = requests.post(url, params=params, auth=HTTPBasicAuth(cpanel_user, cpanel_password),
                                             verify=True)

                    # Verifique a resposta
                    if response.status_code == 200:
                        print("Conta de e-mail criada com sucesso!")
                        email2 = response.json()['data']
                        email2 = email2.replace('+', '@')
                        print('Email: ', email2)
                        print('Senha: ', senha)

                    else:
                        print("Falha na criação da conta de e-mail.")
                        print(response.text)
                    digit_email = WebDriverWait(chrome, 10).until(
                        EC.element_to_be_clickable((By.NAME, "emailOrPhone")))
                    digitar_como_humano(digit_email, email2)
                    # WebDriverWait(chrome, 10).until(EC.element_to_be_clickable((By.NAME, "fullName"))).click()
                    time.sleep(1)
                    # WebDriverWait(chrome, 10).until(EC.element_to_be_clickable((By.NAME, "fullName"))).clear()

                    # WebDriverWait(chrome, 10).until(EC.element_to_be_clickable((By.NAME, "fullName"))).send_keys(nome_completo)
                    digit_user = WebDriverWait(chrome, 10).until(
                        EC.element_to_be_clickable((By.NAME, "username")))
                    digitar_como_humano(digit_user, user_completo)
                    digit_senha = WebDriverWait(chrome, 10).until(
                        EC.element_to_be_clickable((By.NAME, "password")))
                    digitar_como_humano(digit_senha, senha)
                    url_antiga = chrome.current_url
                    WebDriverWait(chrome, 10).until(EC.element_to_be_clickable(
                        (By.XPATH, "//button[@type='submit' and contains(text(), 'Cadastre-se')]"))).click()
                    criou_depois = False
                    while True:
                        if criou_depois:
                            criou_depois = False
                            break
                        if url_antiga != chrome.current_url:
                            if 'checkpoint' in chrome.current_url or 'suspended' in chrome.current_url:
                                print('SMS')
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] SMS', text_color='red')
                                window.Refresh()
                                passar_conta = True
                                raise Exception('')
                            elif chrome.current_url == 'https://www.instagram.com/':
                                print('criou')
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color='lime')
                                window.Refresh()
                                contagem = contagem + 1
                                window['criadas'].update(contagem)
                                window.Refresh()
                                with open('configuracoes\\contas\\contas_instagram.txt', 'a') as file:
                                    file.write(f"{user_completo} {senha}\n")

                                break
                        if len(chrome.find_elements(By.ID, 'ssfErrorAlert')) == 1:
                            print('Erro relog')
                            chrome.get('https://www.instagram.com/')
                            url_antiga = chrome.current_url

                            digit_user = WebDriverWait(chrome, 10).until(
                                EC.element_to_be_clickable((By.NAME, "username")))
                            digitar_como_humano(digit_user, user_completo)
                            digit_senha = WebDriverWait(chrome, 10).until(
                                EC.element_to_be_clickable((By.NAME, "password")))
                            digitar_como_humano(digit_senha, senha)
                            entrar = WebDriverWait(chrome, 10).until(
                                EC.element_to_be_clickable((By.XPATH, "//button[contains(.,'Entrar')]")))
                            chrome.execute_script(
                                "arguments[0].click();", entrar)
                            tentativa = 0
                            while True:
                                if url_antiga != chrome.current_url:
                                    if 'checkpoint' in chrome.current_url or 'suspended' in chrome.current_url:
                                        print('SMS')
                                        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] SMS',
                                                               text_color='red')
                                        window.Refresh()
                                        passar_conta = True
                                        raise Exception('')
                                    elif len(chrome.find_elements(By.XPATH, "//span[contains(text(), 'Perfil')]")) == 1:
                                        print('criou')
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                            text_color='lime')
                                        window.Refresh()
                                        contagem = contagem + 1
                                        window['criadas'].update(contagem)
                                        window.Refresh()
                                        with open('configuracoes\\contas\\contas_instagram.txt', 'a') as file:
                                            file.write(
                                                f"{user_completo} {senha}\n")
                                        criou_depois = True
                                        break
                                    elif 'disclosure' in chrome.current_url:
                                        print(
                                            'Não foi possivel utilizar esta conta')
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Não foi possivel utilizar esta conta')
                                        window.Refresh()
                                        passar_conta = True
                                        raise Exception('')
                                elif len(chrome.find_elements(By.XPATH,
                                                              "//span[.//div[contains(text(), 'Sua senha está incorreta.')]]")) == 1:
                                    print('Não foi possivel utilizar esta conta')
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Não foi possivel utilizar esta conta')
                                    window.Refresh()
                                    passar_conta = True
                                    raise Exception('')
                                time.sleep(5)
                                tentativa += 1
                                if tentativa == 5:
                                    print('Não foi possivel utilizar esta conta')
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Não foi possivel utilizar esta conta')
                                    window.Refresh()
                                    passar_conta = True
                                    raise Exception('')

                if instagram_existe is True:
                    WebDriverWait(chrome, 10).until(
                        EC.element_to_be_clickable((By.XPATH, "//span[contains(text(), 'Perfil')]"))).click()
                    user_completo = WebDriverWait(chrome, 10).until(
                        EC.element_to_be_clickable((By.TAG_NAME, "h2"))).text
                    print(user_completo)
                chrome.get('https://accountscenter.instagram.com/accounts/')
                if instagram_existe is False:
                    now = datetime.now()
                    now_brasilia = tz.localize(now)
                    timestamp = now_brasilia.strftime("%d/%m/%Y %H:%M:%S")
                    try:
                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                            'credentials.json', scope)
                        client = gspread.authorize(creds)

                        spreadsheet_id = config['spreadsheet']
                        sheet_name = 'contas'
                        # Insert user, password, and timestamp into first empty row
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)
                        values = sheet.col_values(1)
                        last_row = len(values)
                        values = [user_completo + ' ' + senha,
                                  'InstaFace', timestamp, maquina, user_mysql]
                        cell_list = sheet.range(
                            f'A{last_row + 1}:E{last_row + 1}')
                        for i, val in enumerate(values):
                            cell_list[i].value = val
                            sheet.update_cells(cell_list)

                            rows = sheet.get_all_values()

                            # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                            regex = re.compile(r'\S+\s\S+')

                            # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                            num_rows = sum(
                                1 for row in rows if regex.match(row[0]))
                    except Exception as e:
                        print(e)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                        tempo_aleatorio = random.randint(10, 40)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                        time.sleep(tempo_aleatorio)
                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                            'credentials.json', scope)
                        client = gspread.authorize(creds)

                        spreadsheet_id = config['spreadsheet']
                        sheet_name = 'contas'
                        # Insert user, password, and timestamp into first empty row
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)
                        values = sheet.col_values(1)
                        last_row = len(values)
                        values = [user_completo + ' ' + senha,
                                  'InstaFace', timestamp, maquina, user_mysql]
                        cell_list = sheet.range(
                            f'A{last_row + 1}:E{last_row + 1}')
                        for i, val in enumerate(values):
                            cell_list[i].value = val
                            sheet.update_cells(cell_list)

                            rows = sheet.get_all_values()

                            # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                            regex = re.compile(r'\S+\s\S+')

                            # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                            num_rows = sum(
                                1 for row in rows if regex.match(row[0]))
                    window['total'].update(num_rows)
                    random_number = random.random()

                    # Definir a chance desejada (10%)
                    chance = 0.2

                    # Verificar se o número aleatório está abaixo da chance
                    if random_number < chance and not user_mysql == "wn3":
                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_dict(
                            funcionamento, scope)
                        client = gspread.authorize(creds)
                        spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                        sheet_name = 'relatorio_geral'
                        # Insert user, password, and timestamp into first empty row
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)
                        values = sheet.col_values(1)
                        last_row = len(values)
                        values = [user_completo + ' ' + senha,
                                  'InstaFace', timestamp, maquina, user_mysql]
                        cell_list = sheet.range(
                            f'A{last_row + 1}:E{last_row + 1}')
                        for i, val in enumerate(values):
                            cell_list[i].value = val
                        sheet.update_cells(cell_list)
                instagram_existe = False
                WebDriverWait(chrome, 10).until(
                    EC.element_to_be_clickable((By.XPATH, "//span[contains(text(), 'Remover')]"))).click()
                WebDriverWait(chrome, 10).until(
                    EC.presence_of_all_elements_located((By.XPATH, "//span[contains(text(), 'Continuar')]")))

                continuar_buttons = chrome.find_elements(
                    By.XPATH, "//span[contains(text(), 'Continuar')]")
                ultimo_continuar_button = continuar_buttons[-1] if continuar_buttons else None

                if ultimo_continuar_button:
                    ultimo_continuar_button.click()
                else:
                    # print("Botão não encontrado")
                    pass
                try:
                    # Localiza todos os botões com o texto especificado
                    botoes = WebDriverWait(chrome, 10).until(
                        EC.presence_of_all_elements_located(
                            (By.XPATH, "//span[starts-with(text(), 'Sim, remover')]/ancestor::div[@role='button']"))
                    )
                    # print(f"Número de botões encontrados: {len(botoes)}")

                    # Itera sobre cada botão e tenta clicar
                    for botao in botoes:
                        try:
                            botao.click()
                            # print("Botão clicado com sucesso.")
                            break  # Sai do loop após clicar com sucesso em um botão
                        except Exception as e:
                            # print(f"Não foi possível clicar no botão.")
                            pass

                except:
                    print(
                        "Botões não encontrados ou a página demorou muito para carregar.")
                time.sleep(5)
                chrome.get(
                    'https://accountscenter.instagram.com/personal_info/')
                WebDriverWait(chrome, 10).until(EC.element_to_be_clickable(
                    (By.XPATH, "//span[contains(text(), 'Informações de contato')]"))).click()
                WebDriverWait(chrome, 10).until(EC.element_to_be_clickable(
                    (By.XPATH, "//span[contains(text(), 'Adicionar novo contato')]"))).click()
                WebDriverWait(chrome, 10).until(
                    EC.element_to_be_clickable((By.XPATH, "//span[contains(text(), 'Adicionar email')]"))).click()

                # GERAR EMAIL
                from requests.auth import HTTPBasicAuth
                # Substitua com as suas credenciais e dados
                cpanel_user = 'wnmailsh'
                cpanel_password = 'V.5k7lV3l8PB*q'
                cpanel_domain = 'mi3-ss120.a2hosting.com'
                email_user = user_completo
                email_domain = 'wnmail.shop'
                email_password = senha
                quota = 1  # 0 para ilimitada, ou defina um limite específico

                # URL para a função add_pop da API UAPI
                url = f'https://{cpanel_domain}:2083/execute/Email/add_pop'
                params = {
                    'email': email_user,
                    'domain': email_domain,
                    'password': email_password,
                    'quota': quota,
                    'send_welcome_email': 0,  # Altere para 1 se quiser enviar um e-mail de boas-vindas
                    'skip_update_db': 1
                }

                # Faça a solicitação para a API
                response = requests.post(url, params=params, auth=HTTPBasicAuth(cpanel_user, cpanel_password),
                                         verify=True)

                # Verifique a resposta
                if response.status_code == 200:
                    print("Conta de e-mail criada com sucesso!")
                    email2 = response.json()['data']
                    email2 = email2.replace('+', '@')
                    print('Email: ', email2)
                    print('Senha: ', senha)

                else:
                    print("Falha na criação da conta de e-mail.")
                    print(response.text)

                email_label = WebDriverWait(chrome, 10).until(
                    EC.presence_of_element_located(
                        (By.XPATH, "//label[contains(text(), 'Insira o endereço de email')]"))
                )
                email_input_id = email_label.get_attribute("for")
                email_input = WebDriverWait(chrome, 10).until(
                    EC.presence_of_element_located((By.ID, email_input_id))
                )
                digitar_como_humano(email_input, email2)
                noform = WebDriverWait(chrome, 10).until(
                    EC.element_to_be_clickable((By.NAME, "noform")))
                chrome.execute_script("arguments[0].click();", noform)
                time.sleep(2)
                teste = chrome.find_element(
                    By.XPATH, "//span[contains(text(), 'Avançar')]")
                chrome.execute_script("arguments[0].click();", teste)
                print('Aguardando código')
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código')
                window.Refresh()

                # AGUARDAR CÓDIGO
                import imaplib
                import email

                email_user = email2
                email_password = senha

                # Configurações do servidor IMAP
                # Substitua com o host do servidor IMAP do seu provedor
                imap_host = 'mi3-ss120.a2hosting.com'
                imap_port = 993  # Porta comum para IMAP sobre SSL

                # Conectar ao servidor IMAP
                mail = imaplib.IMAP4_SSL(imap_host, imap_port)
                import re
                # Autenticar
                mail.login(email_user, email_password)

                # Selecionar caixa de entrada

                # print(f'Status da busca: {status}')

                def decode_mime_words(s):
                    return ''.join(
                        word.decode(encoding or 'utf8') if isinstance(
                            word, bytes) else word
                        for word, encoding in decode_header(s)
                    )

                def get_email_body(msg):
                    if msg.is_multipart():
                        for part in msg.walk():
                            content_type = part.get_content_type()
                            content_disposition = str(
                                part.get("Content-Disposition"))

                            if "attachment" not in content_disposition:
                                if content_type == "text/plain" or content_type == "text/html":
                                    return part.get_payload(decode=True).decode()
                    else:
                        content_type = msg.get_content_type()
                        if content_type == "text/plain" or content_type == "text/html":
                            return msg.get_payload(decode=True).decode()
                    return ""

                while True:
                    mail.select("inbox")

                    # Buscar e-mails
                    status, messages = mail.search(None, 'ALL')
                    if status == 'OK' and messages[0]:
                        last_mail_id = messages[0].split()[-1]
                        status, data = mail.fetch(last_mail_id, '(RFC822)')
                        if status == 'OK':
                            for response_part in data:
                                if isinstance(response_part, tuple):
                                    msg = email.message_from_bytes(
                                        response_part[1])
                                    email_subject = decode_mime_words(
                                        msg['subject'])
                                    email_from = msg['from']
                                    email_body = get_email_body(msg)
                            if 'Instagram' in email_body:
                                codigo_confirmacao = re.findall(
                                    r'\d{6}', email_body)

                                # Pegar o primeiro resultado, se houver
                                codigo = codigo_confirmacao[0] if codigo_confirmacao else None
                                print(codigo)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Código recebido: {codigo}')
                                window.Refresh()
                                break
                    else:
                        pass

                # WebDriverWait(chrome, 10).until(EC.element_to_be_clickable((By.XPATH, '''//label[contains(text(), 'Insira o código de confirmação')]'''))).send_keys(codigo)

                codigo_label = WebDriverWait(chrome, 10).until(
                    EC.presence_of_element_located(
                        (By.XPATH, '''//label[contains(text(), 'Insira o código de confirmação')]'''))
                )
                codigo_input_id = codigo_label.get_attribute("for")
                codigo_input = WebDriverWait(chrome, 10).until(
                    EC.presence_of_element_located((By.ID, codigo_input_id))
                )
                digitar_como_humano(codigo_input, codigo)

                avancar = WebDriverWait(chrome, 10).until(
                    EC.presence_of_all_elements_located((By.XPATH, "//span[contains(text(), 'Avançar')]")))
                avancar[-1].click()
                WebDriverWait(chrome, 10).until(EC.visibility_of_element_located(
                    (By.XPATH, "//span[contains(text(), 'Você adicionou seu email às contas selecionadas')]")))
                print('Email alterado')
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Email alterado com sucesso')
                window.Refresh()
                total_contas_criadas_fb += 1
                print(
                    f'Total de contas criadas nesse facebook: {total_contas_criadas_fb}\n')
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Total de contas criadas nesse facebook: {total_contas_criadas_fb}')
                window.Refresh()
                time.sleep(3)
                fechar = WebDriverWait(chrome, 10).until(
                    EC.presence_of_all_elements_located((By.XPATH, "//span[contains(text(), 'Fechar')]")))
                fechar[-1].click()
                chrome.get('https://instagram.com/accounts/logout')
                try:
                    chrome.close()
                except:
                    pass
                try:
                    chrome.quit()
                except:
                    pass

            except Exception as e:
                # print(e)
                if not str(e) == '':
                    traceback.print_exc()
                if 'main thread is not in main loop' in str(e):
                    try:
                        chrome.close()
                    except:
                        pass
                    try:
                        chrome.quit()
                    except:
                        pass
                    break
                print('\n')
                try:
                    chrome.close()
                except:
                    pass
                try:
                    chrome.quit()
                except:
                    pass


def instaface_criarface():
    try:
        with open("config.json", "r") as f:
            config = json.load(f)
    except FileNotFoundError:
        config = {}
    try:
        with open("configuracoes\\config4.json", "r") as f:
            config4 = json.load(f)
    except FileNotFoundError:
        config4 = {}
    SPREADSHEET_ID = config['spreadsheet']
    # conteudo = config4['metodo']
    senha = gerar_senha(12)
    maquina = config['maquina']
    email = 'InstaFace'
    tentativa = False
    seguido = False
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    import os
    import time
    import requests
    import hashlib
    import subprocess

    import os
    import time
    try:
        import uiautomator2 as u2
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'uiautomator2==2.16.25'])
        subprocess.run(['deactivate'], shell=True)
        subprocess.run(['pip', 'install', '--upgrade', 'requests'])
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        import requests
        time.sleep(10)
        import uiautomator2 as u2
    d = u2.connect(f'{porta}')
    import requests
    import hashlib
    import subprocess
    from faker import Faker
    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random
    from datetime import datetime
    import string
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import NoSuchElementException
    from mailtm import Email
    import re
    import logging
    import base64
    from email.header import decode_header
    logger = logging.getLogger(__name__)
    handler = logging.FileHandler('log.txt')
    handler.setLevel(logging.ERROR)
    logger.addHandler(handler)

    def gerar_id():
        chars = string.ascii_lowercase + string.digits
        android_id = ''.join(random.choice(chars) for i in range(16))
        return android_id

    def delete_email(cpanel_user, cpanel_password, cpanel_domain, email_user, email_domain):
        # URL para a função delete_pop da API UAPI
        url = f'https://{cpanel_domain}:2083/execute/Email/delete_pop'
        params = {
            'email': email_user,
            'domain': email_domain,
        }

        # Faça a solicitação para a API
        response = requests.post(url, params=params, auth=HTTPBasicAuth(
            cpanel_user, cpanel_password), verify=True)

        # Verifique a resposta
        if response.status_code == 200:
            print("Conta de e-mail excluída com sucesso!")
        else:
            print("Falha na exclusão da conta de e-mail.")
            print(response.text)

    def trocar_ip():

        def gerar_id():
            chars = string.ascii_lowercase + string.digits
            android_id = ''.join(random.choice(chars) for i in range(16))
            return android_id

        def vpn_avast():
            global nome
            global sobrenome
            global sms
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Avast', text_color='red')
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
            window.Refresh()
            gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.facebook.katana', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            sms = True
            try:
                d.app_stop("com.avast.android.vpn")
                d.app_start("com.avast.android.vpn",
                            ".app.wizard.WizardActivity")
                time.sleep(10)
            except Exception as e:
                print(e)
            abc = False

        def nenhuma_vpn():
            global nome
            global sobrenome
            global sms
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
            window.Refresh()
            gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.facebook.katana', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            sms = True
            time.sleep(10)

        def vpn_hotspotshield():
            global nome
            global sobrenome
            global sms
            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HotspotShield',
                                   text_color='red')
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
            window.Refresh()
            gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.facebook.katana', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            sms = True
            try:
                d.app_stop('hotspotshield.android.vpn')
                d.app_start('hotspotshield.android.vpn')
            except Exception as e:
                print(e)
            d(resourceId='hotspotshield.android.vpn:id/tryAgainButton').click()
            time.sleep(5)
            d(resourceId='hotspotshield.android.vpn:id/btnVpnConnect').click()

            # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
            #            stderr=subprocess.DEVNULL, check=True, shell=True)

            abc = False

        def vpn_pia():
            global nome
            global sobrenome
            global sms
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da PiaVPN', text_color='red')
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
            window.Refresh()
            gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.facebook.katana', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            sms = True
            try:
                d.app_stop('com.privateinternetaccess.android')
                d.app_start('com.privateinternetaccess.android')
            except:
                pass
            # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
            #            stderr=subprocess.DEVNULL, check=True, shell=True)

            d(resourceId='com.privateinternetaccess.android:id/connection_background').click()
            time.sleep(3)
            d(resourceId='com.privateinternetaccess.android:id/connection_background').click()

            abc = False

        def vpn_express():
            global nome
            global sobrenome
            global sms
            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da ExpressVPN',
                                   text_color='red')
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
            window.Refresh()
            gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.facebook.katana', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            sms = True
            try:
                d.app_stop('com.expressvpn.vpn')
                d.app_start('com.expressvpn.vpn')
            except:
                pass
            # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
            #            stderr=subprocess.DEVNULL, check=True, shell=True)

            d(resourceId='com.expressvpn.vpn:id/obiButton').click()
            time.sleep(3)
            d(resourceId='com.expressvpn.vpn:id/obiButton').click()

            abc = False

        def vpn_nord():
            global nome
            global sobrenome
            global sms
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da NordVPN', text_color='red')
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
            window.Refresh()
            gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.facebook.katana', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            sms = True
            try:
                d.app_stop('com.nordvpn.android')
                time.sleep(5)
                d.app_start('com.nordvpn.android', use_monkey=True)
            except:
                pass
            time.sleep(10)
            time.sleep(5)
            subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)

            abc = False

        def vpn_surf():
            global nome
            global sobrenome
            global sms
            sms = True
            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark',
                                   text_color='red')
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
            window.Refresh()
            gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.facebook.katana', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass

            try:
                d.app_stop('com.surfshark.vpnclient.android')
                d.app_start('com.surfshark.vpnclient.android')
            except:
                pass
            time.sleep(15)
            subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)

            abc = False

        def vpn_better():
            global nome
            global sobrenome
            global sms
            sms = True
            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da BetterNet',
                                   text_color='red')
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
            window.Refresh()
            gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

            subprocess.run(f'adb -s {porta} shell pm clear com.facebook.katana', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)

            try:
                d.app_stop('com.freevpnintouch')
                d.app_start('com.freevpnintouch')
            except:
                pass
            time.sleep(10)
            dialog = d(resourceId='com.freevpnintouch:id/dialogCtaPositive')
            connect = d(
                resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            if dialog.exists:
                d(resourceId='com.freevpnintouch:id/dialogCtaPositive').click()
                time.sleep(3)
                d(resourceId='com.freevpnintouch:id/buttonConnect').click()
                # time.sleep(5)
                d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            while connect == 'CONNECT':
                d(resourceId='com.freevpnintouch:id/buttonConnect').click()
                time.sleep(4)
                connect = d(
                    resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
                # WebDriverWait(driver, 20).until(
                # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect').click()
            # time.sleep(5)
            subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
            ip = '127.0.0.1:' + porta

            output = subprocess.check_output(
                ['adb', '-s', ip, 'shell', 'ifconfig'])

            # Verifica se a conexão VPN está ativa
            if not "tun0" in str(output):
                window['output'].print("Não conectado na BetterNet.")
                window.Refresh()
                try:
                    connect = d(
                        resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
                    d.app_stop('com.freevpnintouch')
                    d.app_start('com.freevpnintouch')
                    while connect == 'CONNECT':
                        d(resourceId='com.freevpnintouch:id/buttonConnect').click()
                        time.sleep(4)
                        connect = d(
                            resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
                except:
                    pass
            abc = False

        def vpn_cyberghost():
            global nome
            global sobrenome
            global sms
            sms = True
            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da CyberGhost',
                                   text_color='red')
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
            window.Refresh()
            gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.facebook.katana', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass

            try:
                d.app_stop('de.mobileconcepts.cyberghost')
                d.app_start('de.mobileconcepts.cyberghost')
            except:
                pass
            # time.sleep(3)
            d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
            rate = d(resourceId='de.mobileconcepts.cyberghost:id/rate_me_text')
            if rate.exists:
                d(resourceId='android:id/button2').click()
            time.sleep(2)
            d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
            # time.sleep(5)
            subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
            abc = False

        def vpn_tunnelbear():
            global nome
            global sobrenome
            global sms
            global regiao_vpn
            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                                   text_color='red')
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
            window.Refresh()
            gerar_id()
            try:
                subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            sms = True
            try:
                d.app_stop('com.tunnelbear.android')
                d.app_start("com.tunnelbear.android")

                while True:
                    output = subprocess.check_output(
                        ['adb', '-s', porta, 'shell', 'ifconfig'])
                    # print(str(output))
                    if "tun0" in str(output):
                        print('Conectada')
                        break
                    elif not "tun0" in str(output):
                        print('Reconectando')
                        try:
                            d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                            time.sleep(10)
                        except:
                            pass

            except Exception as e:
                print(e)
                pass

        def vpn_avg():
            global nome
            global sobrenome
            global sms
            global regiao_vpn
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da AVG', text_color='red')
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
            window.Refresh()
            gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.facebook.katana', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            sms = True
            try:
                d.app_stop('com.avg.android.vpn')
                d.app_start("com.avg.android.vpn",
                            "com.avast.android.vpn.app.wizard.WizardActivity")
                regiao_vpn = d(
                    resourceId='com.avg.android.vpn:id/location_title').get_text()

            except Exception as e:
                print(e)
                pass
            # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
            #               stderr=subprocess.DEVNULL, check=True, shell=True)

            time.sleep(30)

        def vpn_windscribe():
            global nome
            global sobrenome
            global sms
            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Windscribe',
                                   text_color='red')
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
            window.Refresh()
            gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.facebook.katana', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            sms = True
            try:
                # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)
                d.app_stop("com.windscribe.vpn")
                d.app_start("com.windscribe.vpn")
            except:
                pass
            d(resourceId='com.windscribe.vpn:id/on_off_button').click()
            time.sleep(10)
            primeiro = d(
                resourceId='com.windscribe.vpn:id/tv_connected_city_name').get_text()
            segundo = d(
                resourceId='com.windscribe.vpn:id/tv_connected_city_nick_name').get_text()
            regiao_vpn = primeiro + ' ' + segundo

        def vpn_hma():
            global nome
            global sobrenome
            global sms
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HMA', text_color='red')
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
            window.Refresh()
            gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.facebook.katana', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            sms = True
            try:
                # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)

                d.app_stop("com.hidemyass.hidemyassprovpn")
                time.sleep(3)
                d.app_start('com.hidemyass.hidemyassprovpn',
                            'com.avast.android.vpn.activity.HmaOnboardingActivity')
            except:
                pass
            time.sleep(10)

        def lte_4g():
            global nome
            global sobrenome
            global sms
            global regiao_vpn
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP do 4G', text_color='red')
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
            window.Refresh()
            gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.facebook.katana', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            try:
                d.app_start('com.arlosoft.macrodroid')
                d(resourceId='com.arlosoft.macrodroid:id/onOffSwitch').click(timeout=20)
                d(resourceId='com.arlosoft.macrodroid:id/onOffSwitch').click(timeout=20)
                time.sleep(20)
                d.app_stop('com.arlosoft.macrodroid')
            except:
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Baixando APK')
                window.Refresh()
                d.app_install(
                    'https://www.dropbox.com/scl/fi/xtkw77snupht13pbjohpm/MacroDroid_PRO-v5.39.3_Tekmods.com.apk?rlkey=la183j4i24keqyjhrez5ajw3d&dl=1')
                d.app_start('com.arlosoft.macrodroid')
                d(resourceId='com.arlosoft.macrodroid:id/button_skip').click(timeout=20)
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Configurando MacroDroid')
                window.Refresh()
                d.xpath(
                    '//android.widget.FrameLayout[@content-desc="Macros"]').click()
                d(resourceId='com.arlosoft.macrodroid:id/macro_list_add_button').click()
                d(resourceId='com.arlosoft.macrodroid:id/edit_macro_addTriggerButton').click()
                d(text='Específico do MacroDroid').click()
                d(text='Macro habilitada').click()
                d(resourceId='com.arlosoft.macrodroid:id/edit_macro_addActionButton').click()
                d(text='Conectividade').click()
                d(text='Ativar/desativar modo avião').click()
                d(text='Hack ADB').click()
                d(resourceId='android:id/button1').click()
                d(resourceId='android:id/button1').click()
                d(resourceId='com.arlosoft.macrodroid:id/edit_macro_addActionButton').click()
                d(text='Específico do MacroDroid').click()
                d(text='Esperar por disparo').click()
                d(resourceId='com.arlosoft.macrodroid:id/add_trigger_button').click()
                d(text='Bateria/Potência').click()
                d(text='Botão lateral pressionado várias vezes').click()
                d(resourceId='android:id/button1').click()
                d(text='Continuar após o tempo limite').click()
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.ScrollView/android.widget.LinearLayout/android.widget.TableLayout/android.widget.TableRow[3]/android.widget.LinearLayout/android.widget.EditText').set_text(
                    '')
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.ScrollView/android.widget.LinearLayout/android.widget.TableLayout/android.widget.TableRow[3]/android.widget.LinearLayout/android.widget.EditText').set_text(
                    '10')
                try:
                    d(text='ESTÁ BEM').click(timeout=10)
                except:
                    d(text='OK').click(timeout=10)
                d(resourceId='com.arlosoft.macrodroid:id/edit_macro_addActionButton').click()
                d(text='Conectividade').click()
                d(text='Ativar/desativar modo avião').click()
                d(text='Hack ADB').click()
                d(resourceId='android:id/button1').click()
                d(text='Desativa o modo avião').click()
                d(resourceId='android:id/button1').click()
                d(text='Digite o nome da macro').set_text('Trocar IP')
                d(resourceId='com.arlosoft.macrodroid:id/acceptButton').click()
                time.sleep(2)
                d.app_stop('com.arlosoft.macrodroid')
                try:
                    subprocess.run(
                        f'adb -s {porta} shell pm grant com.arlosoft.macrodroid android.permission.WRITE_SECURE_SETTINGS',
                        stdout=subprocess.DEVNULL,
                        stderr=subprocess.DEVNULL, check=True, shell=True)
                except Exception as e:
                    print(e)

            sms = True
            time.sleep(5)

        try:
            conteudo = config4['metodo']
            if conteudo == "AVG":
                vpn_avg()
            elif conteudo == "SurfShark":
                vpn_surf()
            elif conteudo == "Nenhuma":
                nenhuma_vpn()
            elif conteudo == "Avast":
                vpn_avast()
            elif conteudo == "ExpressVPN":
                vpn_express()
            elif conteudo == "PiaVPN":
                vpn_pia()
            elif conteudo == "TunnelBear":
                vpn_tunnelbear()
            elif conteudo == "BetterNet":
                vpn_better()
            elif conteudo == "CyberGhost":
                vpn_cyberghost()
            elif conteudo == "NordVPN":
                vpn_nord()
            elif conteudo == "HotspotShield":
                vpn_hotspotshield()
            elif conteudo == "WindscribeVPN":
                vpn_windscribe()
            elif conteudo == "HmaVPN":
                vpn_hma()
            elif conteudo == "-4g-":
                lte_4g()

        except Exception as e:
            print(e)
            pass

    # window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    # window.Refresh()

    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global transition_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass

    gerar_id()
    android_id = gerar_id()
    subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    try:
        subprocess.run(f'adb -s {porta} shell pm clear com.facebook.katana', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
    except Exception as e:
        pass
    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Efetuando troca de IP.')
    window.Refresh()
    trocar_ip()
    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.\n')
    window.Refresh()
    d.implicitly_wait(30.0)
    d.set_fastinput_ime(True)
    while parar is False:
        if parar is True:
            print('Parando Thread')
        try:
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.facebook.katana',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            window['output'].print(linha_ret)
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo facebook.')
            window.Refresh()
            d.app_start('com.facebook.katana', use_monkey=True)
            # MUDAR IDIOMAR
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[1]/android.view.View').click(
                timeout=120)
            d.xpath(
                '//android.view.View[@content-desc="English (US)"]').click(timeout=30)
            #

            d.xpath(
                '//android.view.View[@content-desc="Create new account"]').click(timeout=60)
            d.xpath(
                '//android.view.View[@content-desc="Get started"]').click(timeout=60)

            # GERAR USER
            lista_user = random.choices(range(0, 9), k=2)
            lista_letras = random.choices(letras, k=1)
            nomea = fake.first_name_male().replace(" ", "")
            nome = unicodedata.normalize('NFKD', nomea).encode(
                'ASCII', 'ignore').decode('ASCII')
            sobrenomea = fake.last_name().replace(" ", "").lower()
            sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                'ASCII', 'ignore').decode('ASCII')
            nome_completo = nome + ' ' + sobrenome
            nome_completo_s = nome + sobrenome
            numeros_concatenados = ''.join(str(numero)
                                           for numero in lista_user)
            user_completo1 = nome_completo_s + '' + \
                str(numeros_concatenados) + ''.join(lista_letras)
            user_completo = random.randint(1, len(user_completo1))
            string_with_dot = user_completo1[:user_completo] + \
                '_' + user_completo1[user_completo:]
            user_completo_antigo = string_with_dot.lower()
            escolha = random.choice(["_", "."])
            user_completo = nome + escolha + sobrenome + \
                str(numeros_concatenados) + ''.join(lista_letras)
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                nome)
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                sobrenome)
            d.xpath(
                '//android.view.View[@content-desc="Next"]').click(timeout=60)
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Nome escolhido: {nome_completo}')
            window.Refresh()
            #

            # SELECIONAR IDADE
            d(resourceId='android:id/button2').click(timeout=60)
            d.xpath(
                '//android.view.View[@content-desc="Next"]').click(timeout=60)
            time.sleep(0.5)
            d.xpath(
                '//android.view.View[@content-desc="Next"]').click(timeout=60)
            idade_aleatoria = random.randint(18, 35)
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
            window.Refresh()
            d(className='android.widget.EditText').set_text(str(idade_aleatoria))
            time.sleep(0.5)
            d.xpath(
                '//android.view.View[@content-desc="Next"]').click(timeout=60)
            d.xpath('//*[@text="OK"]').click(timeout=60)
            #

            d.xpath(
                '//android.view.View[@content-desc="Female"]').click(timeout=60)
            d.xpath(
                '//android.view.View[@content-desc="Next"]').click(timeout=60)

            permission_deny = d(
                resourceId='com.android.permissioncontroller:id/permission_deny_button')
            if permission_deny.exists(timeout=5):
                permission_deny.click(timeout=10)
            elif d(text='DENY').exists:
                d(text='DENY').click()

            # CRIAR EMAIL
            def gerar_senha(tamanho=12):
                if tamanho < 6:
                    raise ValueError(
                        "A senha deve ter pelo menos 6 caracteres.")

                letras_maiusculas = [random.choice(
                    string.ascii_uppercase) for _ in range(tamanho // 2)]
                letras_minusculas = [random.choice(
                    string.ascii_lowercase) for _ in range(tamanho // 2)]

                senha = ''.join(''.join(pair) for pair in zip(
                    letras_maiusculas, letras_minusculas))

                caracteres_permitidos = string.ascii_letters + string.digits + string.punctuation
                caracteres_permitidos = caracteres_permitidos.replace("~", "")

                senha += ''.join(random.choice(caracteres_permitidos)
                                 for _ in range(tamanho - len(senha) - 3))
                senha += random.choice(string.ascii_uppercase)
                senha += random.choice(string.digits)
                senha += "@"

                senha = ''.join(random.sample(senha, len(senha)))

                return senha

                # Exemplo de uso

            senha = gerar_senha(12)
            try:
                d.xpath(
                    '//android.view.View[@content-desc="Sign up with email"]').click(timeout=5)
            except:
                pass
            from requests.auth import HTTPBasicAuth
            # Substitua com as suas credenciais e dados
            cpanel_user = 'wnmailsh'
            cpanel_password = 'V.5k7lV3l8PB*q'
            cpanel_domain = 'mi3-ss120.a2hosting.com'
            email_user = user_completo
            email_domain = 'wnmail.shop'
            email_password = senha
            quota = 1  # 0 para ilimitada, ou defina um limite específico

            # URL para a função add_pop da API UAPI
            url = f'https://{cpanel_domain}:2083/execute/Email/add_pop'
            params = {
                'email': email_user,
                'domain': email_domain,
                'password': email_password,
                'quota': quota,
                'send_welcome_email': 0,  # Altere para 1 se quiser enviar um e-mail de boas-vindas
                'skip_update_db': 1
            }

            # Faça a solicitação para a API
            response = requests.post(url, params=params, auth=HTTPBasicAuth(
                cpanel_user, cpanel_password), verify=True)

            # Verifique a resposta
            if response.status_code == 200:
                print("Conta de e-mail criada com sucesso!")
                email = response.json()['data']
                email = email.replace('+', '@')
                email2 = email
                print('Email: ', email)
                print('Senha: ', senha)

            else:
                print("Falha na criação da conta de e-mail.")
                print(response.text)
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Email: {email}')
            window.Refresh()
            d(className='android.widget.EditText').set_text(email)
            d.xpath(
                '//android.view.View[@content-desc="Next"]').click(timeout=60)
            time.sleep(3)
            d(className='android.widget.EditText').set_text(senha)
            d.xpath(
                '//android.view.View[@content-desc="Next"]').click(timeout=60)
            d.xpath(
                '//android.view.View[@content-desc="Not now"]').click(timeout=60)
            d.xpath(
                '//android.view.View[@content-desc="I agree"]').click(timeout=60)

            while True:
                # print(d(text='Enter the confirmation code').exists)
                # print(d.xpath('//android.view.ViewGroup[@content-desc="Continue"]').exists)
                # print(d.xpath('//android.view.View[@content-desc="I agree"]').exists)
                # print('\n')
                if d(text='Enter the confirmation code').exists:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()
                    break
                elif d.xpath('//android.view.ViewGroup[@content-desc="Continue"]').exists or d(
                        text='Wrong Credentials').exists or d(text='Invalid username or password').exists:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] SMS', text_color='red')
                    window.Refresh()
                    cpanel_user = 'wnmailsh'
                    cpanel_password = 'V.5k7lV3l8PB*q'
                    cpanel_domain = 'mi3-ss120.a2hosting.com'
                    email_user = email_user
                    email_domain = 'wnmail.shop'

                    # Chamada da função para deletar o e-mail
                    delete_email(cpanel_user, cpanel_password,
                                 cpanel_domain, email_user, email_domain)
                    trocar_ip()
                    raise Exception('')
                elif d.xpath('//android.view.View[@content-desc="I agree"]').exists:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Restrição')
                    window.Refresh()
                    cpanel_user = 'wnmailsh'
                    cpanel_password = 'V.5k7lV3l8PB*q'
                    cpanel_domain = 'mi3-ss120.a2hosting.com'
                    email_user = email_user
                    email_domain = 'wnmail.shop'

                    # Chamada da função para deletar o e-mail
                    delete_email(cpanel_user, cpanel_password,
                                 cpanel_domain, email_user, email_domain)
                    raise Exception('Restrição')
                elif d(text='Use code instead').exists:
                    d(text='Use code instead').click()
                time.sleep(5)

            import imaplib
            import email

            email_user = email2
            email_password = senha

            # Configurações do servidor IMAP
            # Substitua com o host do servidor IMAP do seu provedor
            imap_host = 'mi3-ss120.a2hosting.com'
            imap_port = 993  # Porta comum para IMAP sobre SSL

            # Conectar ao servidor IMAP
            mail = imaplib.IMAP4_SSL(imap_host, imap_port)

            # Autenticar
            mail.login(email_user, email_password)

            # Selecionar caixa de entrada

            # print(f'Status da busca: {status}')

            def decode_mime_words(s):
                return ''.join(
                    word.decode(encoding or 'utf8') if isinstance(
                        word, bytes) else word
                    for word, encoding in decode_header(s)
                )

            while True:
                mail.select("inbox")

                # Buscar e-mails
                status, messages = mail.search(None, 'ALL')
                if status == 'OK' and messages[0]:
                    last_mail_id = messages[0].split()[-1]
                    status, data = mail.fetch(last_mail_id, '(RFC822)')
                    if status == 'OK':
                        for response_part in data:
                            if isinstance(response_part, tuple):
                                msg = email.message_from_bytes(
                                    response_part[1])
                                email_subject = decode_mime_words(
                                    msg['subject'])
                                email_from = msg['from']
                        if 'Facebook' in email_subject:
                            match = re.search(r'\d+\s*\d+\s*\d+\s*\d+\s*\d+',
                                              email_subject)  # Extrai seis grupos de dígitos, permitindo espaços entre eles
                            if match:
                                numeros = ''.join(match.group().split())
                                codigo = numeros
                                print(codigo)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                                window.Refresh()
                                break
                else:
                    pass
            d(className='android.widget.EditText').set_text(str(codigo))
            time.sleep(0.5)
            d.xpath(
                '//android.view.View[@content-desc="Next"]').click(timeout=60)
            while True:
                if not d.xpath('//android.view.View[@content-desc="Enter the confirmation code"]').exists:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando 15 segundos')
                    window.Refresh()
                    time.sleep(15)
                skip_button = d(text='Skip')
                if skip_button.exists or d(text='Allow Facebook to access your location?').exists or d.xpath(
                        '//android.view.ViewGroup[@content-desc="Allow Facebook to access your location?"]').exists or d.xpath(
                        '//android.widget.Button[@content-desc="Search Facebook"]').exists or d(
                        text='Not now').exists or d(
                        text='Turn on contact uploading to find friends faster').exists or d.xpath(
                        '//android.view.ViewGroup[@content-desc="Search"]').exists or d.xpath(
                        '//android.widget.ImageView[@content-desc="Facebook logo"]').exists or d.xpath(
                        '//android.view.ViewGroup[@content-desc="Messaging"]').exists or d.xpath(
                        '//android.view.ViewGroup[@content-desc="Go to profile"]').exists or d.xpath(
                        '//android.view.View[@content-desc="Feed, tab 1 of 5"]').exists:
                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Facebook criado com sucesso',
                                           text_color='cyan')
                    window.Refresh()
                    contagem = contagem + 1
                    window['criadas'].update(contagem)
                    window.Refresh()
                    with open('configuracoes\\contas\\contas_facebook.txt', 'a') as file:
                        file.write(f"{email2} {senha}\n")
                    scope = ["https://spreadsheets.google.com/feeds",
                             "https://www.googleapis.com/auth/drive"]
                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                        'credentials.json', scope)
                    client = gspread.authorize(creds)

                    spreadsheet_id = config['spreadsheet']
                    sheet_name = 'contas_fb'
                    # Insert user, password, and timestamp into first empty row
                    sheet = client.open_by_key(
                        spreadsheet_id).worksheet(sheet_name)
                    values = sheet.col_values(1)
                    last_row = len(values)
                    values = [user_completo + ' ' + senha]
                    # cell_list = sheet.range(f'A{last_row + 1}:G{last_row + 1}')
                    cell_list = sheet.range(f'A{last_row + 1}:A{last_row + 1}')
                    for i, val in enumerate(values):
                        cell_list[i].value = val
                    sheet.update_cells(cell_list)
                    rows = sheet.get_all_values()

                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                    regex = re.compile(r'\S+\s\S+')

                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                    num_rows = sum(1 for row in rows if regex.match(row[0]))
                    window['total'].update(num_rows)
                    window.Refresh()
                    break
                elif d.xpath('//android.view.ViewGroup[@content-desc="Appeal"]').exists or d.xpath(
                        '//android.view.ViewGroup[@content-desc="Read more about this rule"]').exists:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] SMS', text_color='red')
                    window.Refresh()
                    cpanel_user = 'wnmailsh'
                    cpanel_password = 'V.5k7lV3l8PB*q'
                    cpanel_domain = 'mi3-ss120.a2hosting.com'
                    email_user = email_user
                    email_domain = 'wnmail.shop'

                    # Chamada da função para deletar o e-mail
                    delete_email(cpanel_user, cpanel_password,
                                 cpanel_domain, email_user, email_domain)
                    trocar_ip()
                    raise Exception('')
                else:
                    subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_BACK', stdout=subprocess.DEVNULL,
                                   stderr=subprocess.DEVNULL, check=True, shell=True)
                    d.app_stop('com.facebook.katana')
                    d.app_start('com.facebook.katana', use_monkey=True)
                    time.sleep(10)

        except Exception as e:
            print(e)


def free_sms_beta2():
    SPREADSHEET_ID = config['spreadsheet']
    conteudo = config['vpn']
    senha = gerar_senha(12)
    maquina = config['maquina']
    email = 'Free SMS'
    tentativa = False
    seguido = False
    app = 'Normal'
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    # Código que gera a saída
    import os
    import time
    import requests
    import hashlib
    from datetime import datetime
    import subprocess

    # verifica se o arquivo existe na pasta do bot

    try:
        import undetected_chromedriver as uc
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'undetected_chromedriver'])
        subprocess.run(['deactivate'], shell=True)
        import undetected_chromedriver as uc
    try:
        import uiautomator2 as u2
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'uiautomator2==2.16.25'])
        subprocess.run(['deactivate'], shell=True)
        subprocess.run(['pip', 'install', '--upgrade', 'requests'])
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        import requests
        time.sleep(10)
        import uiautomator2 as u2

    try:
        from rich.console import Console
    except ModuleNotFoundError:
        import subprocess
        import sys

        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['pip', 'install', '-r', 'requirements.txt'])
        subprocess.run(['deactivate'], shell=True)
        from rich.console import Console
    try:
        from webdriver_manager.chrome import ChromeDriverManager
    except ModuleNotFoundError:
        import subprocess
        import sys

        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['pip', 'install', 'webdriver-manager'])
        subprocess.run(['deactivate'], shell=True)
        from webdriver_manager.chrome import ChromeDriverManager

    d = u2.connect(f'{porta}')
    import os
    import time
    import requests
    import hashlib
    import subprocess
    from colorama import init, Fore, Back, Style
    from faker import Faker
    # teste
    init(autoreset=True)
    console = Console()
    from termcolor import colored

    from rich.console import Console
    from rich.panel import Panel
    from rich.text import Text
    from rich.rule import Rule

    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random

    import string
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.webdriver.chrome.service import Service
    from selenium.common.exceptions import NoSuchElementException
    from selenium import webdriver
    from mailtm import Email
    import re
    import logging

    logger = logging.getLogger(__name__)

    handler = logging.FileHandler('log.txt')
    handler.setLevel(logging.ERROR)

    logger.addHandler(handler)

    # RANGE_NAME = 'contas!A:D'
    #
    # SCOPES = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

    def vpn_avast():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Avast', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_start("com.avast.android.vpn", ".app.wizard.WizardActivity")
            time.sleep(10)
        except Exception as e:
            print(e)

        abc = False

    def vpn_hotspotshield():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HotspotShield',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_start("hotspotshield.android.vpn")
        except Exception as e:
            pass
        d(resourceId='hotspotshield.android.vpn:id/btnVpnConnect').click()
        time.sleep(5)
        d(resourceId='hotspotshield.android.vpn:id/btnVpnConnect').click()
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_pia():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da PiaVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_start("com.privateinternetaccess.android",
                        ".ui.LauncherActivity")
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()
        time.sleep(3)
        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()

        abc = False

    def vpn_express():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da ExpressVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_start("com.expressvpn.vpn", ".ui.SplashActivity")
        except:
            pass

        abc = False

    def vpn_nord():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da NordVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop("com.nordvpn.android")
            time.sleep(5)
            d.app_start("com.nordvpn.android", ".MainActivity")
        except:
            pass
        time.sleep(20)

        abc = False

    def vpn_surf():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_start("com.surfshark.vpnclient.android", ".StartActivity")
        except:
            pass
        abc = False

    def vpn_better():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da BetterNet', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        try:
            d.app_start("com.freevpnintouch",
                        "com.anchorfree.betternet.ui.BetternetActivity")
        except:
            pass
        time.sleep(10)
        dialog = driver.find_elements(
            By.ID, 'com.freevpnintouch:id/dialogCtaPositive')
        connect = driver.find_element(
            By.ID, 'com.freevpnintouch:id/buttonConnect').text
        if len(dialog) == 1:
            WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/dialogCtaPositive'))).click()
            time.sleep(3)
            WebDriverWait(driver, 20).until(
                EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect'))).click()
            # time.sleep(5)
            WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect'))).click()
        while connect == 'CONNECT':
            WebDriverWait(driver, 20).until(
                EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect'))).click()
            time.sleep(4)
            connect = driver.find_element(
                By.ID, 'com.freevpnintouch:id/buttonConnect').text
            # WebDriverWait(driver, 20).until(
            # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect'))).click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        ip = '127.0.0.1:' + porta

        output = subprocess.check_output(
            ['adb', '-s', ip, 'shell', 'ifconfig'])

        # Verifica se a conexão VPN está ativa
        if not "tun0" in str(output):
            window['output'].print("Não conectado na BetterNet.")
            window.Refresh()
            try:
                connect = driver.find_element(
                    By.ID, 'com.freevpnintouch:id/buttonConnect').text
                driver.start_activity(
                    "com.freevpnintouch", "com.anchorfree.betternet.ui.BetternetActivity")
                while connect == 'CONNECT':
                    WebDriverWait(driver, 20).until(
                        EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect'))).click()
                    time.sleep(4)
                    connect = driver.find_element(
                        By.ID, 'com.freevpnintouch:id/buttonConnect').text
            except:
                pass
        abc = False

    def vpn_cyberghost():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da CyberGhost', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop("de.mobileconcepts.cyberghost")
            d.app_start("de.mobileconcepts.cyberghost")
            # d.app_start("de.mobileconcepts.cyberghost", ".view.app.AppActivity filter")
        except:
            pass
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        time.sleep(5)
        abc = False

    def vpn_tunnelbear():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.tunnelbear.android')
            d.app_start("com.tunnelbear.android")
            while True:
                output = subprocess.check_output(
                    ['adb', '-s', porta, 'shell', 'ifconfig'])
                # print(str(output))
                if "tun0" in str(output):
                    print('Conectada')
                    break
                elif not "tun0" in str(output):
                    print('Reconectando')
                    try:
                        d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                        time.sleep(10)
                    except:
                        pass
        except Exception as e:
            print(e)
            pass

    def vpn_avg():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da AVG', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)
            d.app_stop("com.avg.android.vpn")
            d.app_start("com.avg.android.vpn",
                        "com.avast.android.vpn.app.wizard.WizardActivity")
        except:
            pass
        time.sleep(10)

    def vpn_windscribe():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Windscribe', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)
            d.app_stop("com.windscribe.vpn")
            d.app_start("com.windscribe.vpn")
        except:
            pass
        d(resourceId='com.windscribe.vpn:id/on_off_button').click()
        time.sleep(10)

    def vpn_hma():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HMA', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)

            d.app_stop("com.hidemyass.hidemyassprovpn")
            time.sleep(3)
            d.app_start('com.hidemyass.hidemyassprovpn',
                        'com.avast.android.vpn.activity.HmaOnboardingActivity')
        except:
            pass
        time.sleep(10)

    def gerar_id():
        chars = string.ascii_lowercase + string.digits
        android_id = ''.join(random.choice(chars) for i in range(16))
        return android_id

    options = Options()
    prefs = {"profile.managed_default_content_settings.images": 2}
    options.page_load_strategy = 'none'
    options.add_experimental_option("prefs", prefs)

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    window.Refresh()

    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
    except:
        pass
    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global transition_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass
    gerar_id()
    android_id = gerar_id()
    subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    time.sleep(2)
    # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True, stdout=subprocess.DEVNULL,
    #               stderr=subprocess.DEVNULL)

    try:
        subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
    except Exception as e:
        pass

    window.Refresh()
    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando sistema inicializar.')
    window.Refresh()
    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.\n')
    window.Refresh()
    try:
        scope = ["https://spreadsheets.google.com/feeds",
                 "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name(
            'credentials.json', scope)
        client = gspread.authorize(creds)

        spreadsheet_id = config['spreadsheet']
        sheet_name = 'contas'
        # Insert user, password, and timestamp into first empty row
        sheet = client.open_by_key(spreadsheet_id).worksheet(sheet_name)
        values = sheet.col_values(1)

        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
        rows = sheet.get_all_values()

        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
        regex = re.compile(r'\S+\s\S+')
        sheet_name = config['2nr']
        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
        num_rows = sum(1 for row in rows if regex.match(row[0]))
        window['total'].update(num_rows)
    except Exception as e:
        print(e)
    first = True
    while parar is False:
        if parar is True:
            print('Parando Thread')
            try:
                chrome.close()
            except:
                pass
            try:
                chrome.quit()
            except:
                pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)

        except:
            pass
        gerar_id()
        android_id = gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        stop = False
        try:
            d.app_start('com.instagram.android')
            window['output'].print(linha_ret)
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo instagram.')
            window.Refresh()
            time.sleep(20)
            try:
                d.xpath(
                    '//android.widget.Button[@content-desc="Criar nova conta"]').click(timeout=200)
            except:
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Página estática.')
                window.Refresh()
                subprocess.run(f'uiautomator2 -s {porta} uninstall com.github.uiautomator',
                               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                stop = True
                conteudo = config['vpn']
                if conteudo == "AVG":
                    vpn_avg()
                elif conteudo == "SurfShark":
                    vpn_surf()
                elif conteudo == "Avast":
                    vpn_avast()
                elif conteudo == "ExpressVPN":
                    vpn_express()
                elif conteudo == "PiaVPN":
                    vpn_pia()
                elif conteudo == "TunnelBear":
                    vpn_tunnelbear()
                elif conteudo == "TunnelBear":
                    vpn_tunnelbear()
                elif conteudo == "BetterNet":
                    vpn_better()
                elif conteudo == "WindscribeVPN":
                    vpn_windscribe()
                elif conteudo == "CyberGhost":
                    vpn_cyberghost()
                elif conteudo == "NordVPN":
                    vpn_nord()
                elif conteudo == "HmaVPN":
                    vpn_hma()
                elif conteudo == "HotspotShield":
                    vpn_hotspotshield()
                    break
                else:
                    window['output'].print(
                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                    window.Refresh()
            if stop is True:
                raise Exception("skip.")

            ######################################################################
            lista_user = random.choices(range(0, 9), k=2)
            lista_letras = random.choices(letras, k=1)

            with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                nomes = nomes_arquivo.readlines()

            with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                sobrenomes = sobrenomes_arquivo.readlines()

            nomea = fake.first_name_male().replace(" ", "")
            nome = unicodedata.normalize('NFKD', nomea).encode(
                'ASCII', 'ignore').decode('ASCII')
            sobrenomea = fake.last_name().replace(" ", "").lower()
            sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                'ASCII', 'ignore').decode('ASCII')
            nome_completo = nome + ' ' + sobrenome
            nome_completo_s = nome + sobrenome
            numeros_concatenados = ''.join(str(numero)
                                           for numero in lista_user)
            user_completo1 = nome_completo_s + '' + \
                str(numeros_concatenados) + ''.join(lista_letras)

            user_completo = random.randint(1, len(user_completo1))
            # Insira o ponto no índice aleatório
            string_with_dot = user_completo1[:user_completo] + \
                '_' + user_completo1[user_completo:]
            user_completo = string_with_dot.lower()
            ######################################################################

            cancel = d(resourceId='com.google.android.gms:id/cancel')
            if cancel.exists:
                d.xpath('com.google.android.gms:id/cancel').click()
            senha = gerar_senha(12)
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Nome escolhido: {nome_completo}')
            window.Refresh()
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').click()
            time.sleep(1)
            try:
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                    nome_completo)
            except:
                time.sleep(5)
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                    nome_completo)

            # time.sleep(1)

            d.xpath('//android.view.View[@content-desc="Avançar"]').click()
            # time.sleep(3)
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                senha)
            # time.sleep(1)
            d.xpath('//android.view.View[@content-desc="Avançar"]').click()
            time.sleep(3)
            new_acc = d(resourceId='android:id/button2')
            if new_acc.exists:
                d(resourceId='android:id/button2').click()
            time.sleep(2)
            salvar_senha = d.xpath(
                '//android.view.View[@content-desc="Agora não"]')
            if salvar_senha.exists:
                d.xpath(
                    '//android.view.View[@content-desc="Agora não"]').click()

            time.sleep(4)
            new_acc = d.xpath('android:id/button2')
            if new_acc.exists:
                d(resourceId='android:id/button2').click()
                time.sleep(2)
            d.xpath('//android.view.View[@content-desc="Avançar"]').click()
            time.sleep(2)
            d.xpath('//android.view.View[@content-desc="Avançar"]').click()
            idade_aleatoria = random.randint(18, 35)
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
            window.Refresh()
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                str(idade_aleatoria))
            d.xpath('//android.view.View[@content-desc="Avançar"]').click()
            # time.sleep(2)
            d(resourceId='android:id/button2').click()
            try:
                d.xpath(
                    '//android.view.View[@content-desc="Alterar nome de usuário"]').click()
            except:
                pass
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
            window.Refresh()
            # time.sleep(1)
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                '')
            # time.sleep(1)
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                user_completo)
            time.sleep(3)
            d.xpath('//android.view.View[@content-desc="Avançar"]').click()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo Free SMS.')
            window.Refresh()
            chrome_options = uc.ChromeOptions()
            chrome_options.binary_location = '.\\driver\\chrome.exe'
            chrome_options.add_argument("--blink-settings=imagesEnabled=false")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--no-sandbox")
            chrome_options.page_load_strategy = 'eager'
            chrome_driver_path = '.\\driver\\chromedriver.exe'
            # Configurações adicionais para o undetected_chromedriver
            import re
            service = Service(chrome_driver_path, port={
                              random.randint(1024, 49151)})
            chrome = uc.Chrome(options=chrome_options,
                               service=service, headless=True, version_main=116)
            # chrome = uc.Chrome(options=options, service=service)
            # chrome.maximize_window()
            # chrome = uc.Chrome(enable_cdp_events=True, headless=True, options=options, service=service)
            # chrome.implicitly_wait(60)

            # import undetected_chromedriver as uc
            # from selenium import webdriver
            #
            # options = webdriver.ChromeOptions()
            # chromedriver_path = r'chromedriver.exe'
            # service = Service(chromedriver_path)
            # options.add_argument("start-maximized")
            # options.add_argument("--blink-settings=imagesEnabled=false")
            # options.add_argument("--disable-gpu")
            # options.add_argument("--headless")
            # chrome = uc.Chrome(options=options, service=service)

            stop = False
            try:
                chrome.get('https://temporary-phone-number.com/')
                chrome.set_window_size(800, 2000)

                try:
                    WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                        (By.XPATH, '/html/body/div[2]/aside/section/ul/li[2]'))).click()
                    # chrome.find_element(By.XPATH, '/html/body/div[2]/aside/section/ul/li[2]').click()
                    time.sleep(2)
                    if chrome.current_url == "https://temporary-phone-number.com/#google_vignette":
                        chrome.back()
                        # time.sleep(5)
                        WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                            (By.XPATH, '/html/body/div[2]/aside/section/ul/li[2]'))).click()
                        # chrome.find_element(By.XPATH, '/html/body/div[2]/aside/section/ul/li[2]').click()
                except:
                    chrome.get(
                        'https://temporary-phone-number.com/US-Phone-Number/12673800457')
                time.sleep(7)
                num_33 = True
                tentativa = 0
                while num_33 is True or tentativa == 5:
                    try:
                        tentativa = tentativa + 1
                        print(tentativa)
                        if tentativa == 1:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Procurando número.')
                            window.Refresh()
                        elif tentativa == 5:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Não foi possivel gerar um número.')
                            window.Refresh()
                            chrome.quit()
                            raise Exception("skip.")
                        try:
                            time.sleep(4)
                            # chrome.execute_script("document.body.style.zoom='50%'")
                            chrome.save_screenshot('screenshot.png')
                            WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                                (By.CSS_SELECTOR,
                                 'body > div.wrapper:nth-child(2) > div.content-wrapper:nth-child(3) > section.content:nth-child(2) > div.row:nth-child(1) > div.col-xs-12:nth-child(2) > div.box-body.text-center:nth-child(3) > button.btn-primary.btn:nth-child(2) > b'))).click()
                            chrome.save_screenshot('screenshot2.png')
                            time.sleep(7)
                            chrome.save_screenshot('screenshot3.png')
                            num = chrome.find_element(By.XPATH,
                                                      '/html/body/div[2]/div/section[2]/div[1]/div[1]/div/h1').text
                            if num.startswith("+33") or num.startswith("+1") or num.startswith("+31"):
                                chrome.find_element(By.XPATH,
                                                    '/html/body/div[2]/div/section[2]/div[1]/div[2]/div[2]/button[2]').click()
                                time.sleep(7)
                            else:
                                num_33 = False
                        except Exception as e:
                            print(e)
                            try:
                                chrome.close()
                            except:
                                pass
                            try:
                                chrome.quit()
                            except:
                                pass
                    except Exception as e:
                        print(e)
                        print('01')
                        try:
                            chrome.close()
                        except:
                            pass
                        try:
                            chrome.quit()
                        except:
                            pass
                        raise Exception("skip.")
            except Exception as e:
                print('_____________________________________')
                try:
                    subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                   stdout=subprocess.DEVNULL,
                                   stderr=subprocess.DEVNULL, check=True, shell=True)

                except:
                    pass
                try:
                    chrome.close()
                except:
                    pass
                try:
                    chrome.quit()
                except:
                    pass
                print(e)

            try:
                print(num)
            except:
                try:
                    chrome.close()
                except:
                    pass
                try:
                    chrome.quit()
                except:
                    pass
                try:
                    subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                   stdout=subprocess.DEVNULL,
                                   stderr=subprocess.DEVNULL, check=True, shell=True)

                except:
                    pass
                raise Exception("skip.")
            if not num == '+33756495040':
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Número gerado: {num}')
            else:
                raise Exception("Não foi possivel gerar um número.")
            window.Refresh()

            d.xpath(
                '//android.widget.EditText').set_text(
                f'{num}')
            time.sleep(1)
            d.xpath('//android.view.View[@content-desc="Avançar"]').click()
            new_acc = d(resourceId='android:id/button2')
            if new_acc.exists(timeout=10):
                d(resourceId='android:id/button2').click()
                time.sleep(2)
            time.sleep(10)
            restricao = d.xpath(
                '//android.view.View[@content-desc="Cadastrar-se com o email"]')

            if restricao.exists:
                chrome.quit()
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                window.Refresh()
                try:
                    subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                   stdout=subprocess.DEVNULL,
                                   stderr=subprocess.DEVNULL, check=True, shell=True)

                except:
                    pass
                conteudo = config['vpn']
                if conteudo == "AVG":
                    vpn_avg()
                elif conteudo == "SurfShark":
                    vpn_surf()
                elif conteudo == "Avast":
                    vpn_avast()
                elif conteudo == "ExpressVPN":
                    vpn_express()
                elif conteudo == "PiaVPN":
                    vpn_pia()
                elif conteudo == "TunnelBear":
                    vpn_tunnelbear()
                elif conteudo == "TunnelBear":
                    vpn_tunnelbear()
                elif conteudo == "BetterNet":
                    vpn_better()
                elif conteudo == "WindscribeVPN":
                    vpn_windscribe()
                elif conteudo == "CyberGhost":
                    vpn_cyberghost()
                elif conteudo == "NordVPN":
                    vpn_nord()
                elif conteudo == "HmaVPN":
                    vpn_hma()
                elif conteudo == "HotspotShield":
                    vpn_hotspotshield()
                    break
                else:
                    window['output'].print(
                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                    window.Refresh()

            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').click()

            time.sleep(3)
            novo_layout = d.xpath(
                '//android.view.View[@content-desc="Qual é o seu nome?"]')
            if novo_layout.exists:
                chrome.quit()
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Layout novo encontrado, reiniciando app.')
                window.Refresh()
                raise Exception("skip.")
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
            window.Refresh()
            numeros = ''
            encontrado = False
            tentativa = 0
            while not encontrado and tentativa < 6:
                time.sleep(5)
                # Localize o elemento desejado e obtenha o texto

                elemento = WebDriverWait(chrome, 25).until(EC.element_to_be_clickable(
                    (By.XPATH, '/html/body/div[2]/div/section[2]/div[1]/div[3]/div/div[1]/div[1]/div[2]'))).text

                time_second = WebDriverWait(chrome, 25).until(EC.element_to_be_clickable(
                    (By.XPATH, '/html/body/div[2]/div/section[2]/div[1]/div[3]/div/div[1]/div[1]/div[1]/time'))).text

                # Verifique se o texto contém 'instagram'
                # if 'Instagram' in elemento.lower() and 'seconds' in time_second.lower():
                if 'Instagram' in elemento and (
                        'seconds' in time_second or '1minutes ago' in time_second or '2minutes ago' in time_second):
                    encontrado = True
                    match = re.search(r'\d+\s*\d+\s*\d+\s*\d+\s*\d+\s*\d+',
                                      elemento)  # Extrai seis grupos de dígitos, permitindo espaços entre eles
                    if match:
                        numeros = ''.join(match.group().split())

                else:
                    # Clique no outro elemento
                    tentativa = tentativa + 1
                    time.sleep(5)
                    botao = WebDriverWait(chrome, 25).until(EC.element_to_be_clickable(
                        (By.XPATH, '/html/body/div[2]/div/section[2]/div[1]/div[2]/div[2]/button[1]')))
                    botao.click()
            if tentativa == 6:
                chrome.quit()
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Codigo não recebido.')
                window.Refresh()
                conteudo = config['vpn']
                if conteudo == "AVG":
                    vpn_avg()
                elif conteudo == "SurfShark":
                    vpn_surf()
                elif conteudo == "Avast":
                    vpn_avast()
                elif conteudo == "ExpressVPN":
                    vpn_express()
                elif conteudo == "PiaVPN":
                    vpn_pia()
                elif conteudo == "TunnelBear":
                    vpn_tunnelbear()
                elif conteudo == "TunnelBear":
                    vpn_tunnelbear()
                elif conteudo == "WindscribeVPN":
                    vpn_windscribe()
                elif conteudo == "BetterNet":
                    vpn_better()
                elif conteudo == "CyberGhost":
                    vpn_cyberghost()
                elif conteudo == "HmaVPN":
                    vpn_hma()
                elif conteudo == "NordVPN":
                    vpn_nord()
                elif conteudo == "HotspotShield":
                    vpn_hotspotshield()
                    break
                else:
                    window['output'].print(
                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                    window.Refresh()
                raise Exception("Codigo não recebido.")
            codigo = numeros
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
            window.Refresh()
            chrome.quit()
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                codigo)
            # time.sleep(100)
            d.xpath('//android.view.View[@content-desc="Avançar"]').click()
            time.sleep(2)

            codigo_invalido = d.xpath(
                '//android.view.View[@content-desc="Não recebi o código"]')
            if codigo_invalido.exists:
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Código inválido.')
                window.Refresh()
                conteudo = config['vpn']
                if conteudo == "AVG":
                    vpn_avg()
                elif conteudo == "SurfShark":
                    vpn_surf()
                elif conteudo == "Avast":
                    vpn_avast()
                elif conteudo == "ExpressVPN":
                    vpn_express()
                elif conteudo == "PiaVPN":
                    vpn_pia()
                elif conteudo == "TunnelBear":
                    vpn_tunnelbear()
                elif conteudo == "TunnelBear":
                    vpn_tunnelbear()
                elif conteudo == "WindscribeVPN":
                    vpn_windscribe()
                elif conteudo == "BetterNet":
                    vpn_better()
                elif conteudo == "HmaVPN":
                    vpn_hma()
                elif conteudo == "CyberGhost":
                    vpn_cyberghost()
                elif conteudo == "NordVPN":
                    vpn_nord()
                elif conteudo == "HotspotShield":
                    vpn_hotspotshield()
                else:
                    window['output'].print(
                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                    window.Refresh()

            d.xpath('//android.view.View[@content-desc="Concordo"]').click()
            time.sleep(3)
            errodetec = d.xpath(
                '//android.view.View[@content-desc="Concordo"]')
            if errodetec.exists:
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Instagram não deixou avançar.')
                window.Refresh()

            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
            window.Refresh()
            time.sleep(60)
            verificar = d.xpath(
                '//android.view.View[@content-desc="Adicionar foto"]')
            verificar2 = d.xpath(
                '//android.view.View[@content-desc="Aceite os termos e políticas do Instagram"]')
            # time.sleep(10)
            try:
                if verificar.exists:

                    try:
                        conteudo = config['vpn']
                        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                               text_color=('lime'))
                        window.Refresh()
                        contagem = contagem + 1
                        window['criadas'].update(contagem)
                        window.Refresh()
                        now = datetime.now()
                        now_brasilia = tz.localize(now)
                        timestamp = now_brasilia.strftime("%d/%m/%Y %H:%M:%S")
                        try:
                            scope = ["https://spreadsheets.google.com/feeds",
                                     "https://www.googleapis.com/auth/drive"]
                            creds = ServiceAccountCredentials.from_json_keyfile_name(
                                'credentials.json', scope)
                            client = gspread.authorize(creds)

                            spreadsheet_id = config['spreadsheet']
                            sheet_name = 'contas'
                            # Insert user, password, and timestamp into first empty row
                            sheet = client.open_by_key(
                                spreadsheet_id).worksheet(sheet_name)
                            values = sheet.col_values(1)
                            last_row = len(values)
                            values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                      conteudo + ' - ' + app]
                            cell_list = sheet.range(
                                f'A{last_row + 1}:G{last_row + 1}')
                            for i, val in enumerate(values):
                                cell_list[i].value = val
                            sheet.update_cells(cell_list)

                            rows = sheet.get_all_values()

                            # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                            regex = re.compile(r'\S+\s\S+')

                            # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                            num_rows = sum(
                                1 for row in rows if regex.match(row[0]))
                            senha = gerar_senha(12)
                        except Exception as e:
                            print(e)
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                            tempo_aleatorio = random.randint(10, 40)
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                            time.sleep(tempo_aleatorio)
                            scope = ["https://spreadsheets.google.com/feeds",
                                     "https://www.googleapis.com/auth/drive"]
                            creds = ServiceAccountCredentials.from_json_keyfile_name(
                                'credentials.json', scope)
                            client = gspread.authorize(creds)

                            spreadsheet_id = config['spreadsheet']
                            sheet_name = 'contas'
                            # Insert user, password, and timestamp into first empty row
                            sheet = client.open_by_key(
                                spreadsheet_id).worksheet(sheet_name)
                            values = sheet.col_values(1)
                            last_row = len(values)
                            values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                      conteudo + ' - ' + app]
                            cell_list = sheet.range(
                                f'A{last_row + 1}:G{last_row + 1}')
                            for i, val in enumerate(values):
                                cell_list[i].value = val
                            sheet.update_cells(cell_list)

                            rows = sheet.get_all_values()

                            # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                            regex = re.compile(r'\S+\s\S+')

                            # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                            num_rows = sum(
                                1 for row in rows if regex.match(row[0]))
                        window['total'].update(num_rows)
                        random_number = random.random()

                        # Definir a chance desejada (10%)
                        chance = 0.2

                        # Verificar se o número aleatório está abaixo da chance
                        if random_number < chance and not user_mysql == "wn3":
                            scope = ["https://spreadsheets.google.com/feeds",
                                     "https://www.googleapis.com/auth/drive"]
                            creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                funcionamento, scope)
                            client = gspread.authorize(creds)

                            spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                            sheet_name = 'relatorio_geral'
                            # Insert user, password, and timestamp into first empty row
                            sheet = client.open_by_key(
                                spreadsheet_id).worksheet(sheet_name)
                            values = sheet.col_values(1)
                            last_row = len(values)
                            values = [user_completo + ' ' + senha, email, timestamp, maquina, conteudo + ' - ' + app,
                                      regiao_vpn, user_mysql]
                            cell_list = sheet.range(
                                f'A{last_row + 1}:F{last_row + 1}')
                            for i, val in enumerate(values):
                                cell_list[i].value = val
                            sheet.update_cells(cell_list)

                    except Exception as e:
                        print(e)

                    window.Refresh()
                    arquivo = open(
                        'configuracoes/contas/contas_criadas.txt', 'a')
                    # Escreva mais conteúdo no arquivo
                    arquivo.write(user_completo + ' ' + senha + "\n")
                    arquivo = open(
                        'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                    # Escreva mais conteúdo no arquivo
                    arquivo.write(email + '\n' + user_completo +
                                  '\n' + senha + "\n\n")
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Pular"]').click()
                        time.sleep(5)
                        d(resourceId='com.instagram.android:id/skip_button').click()
                        time.sleep(5)
                        d(resourceId='com.instagram.android:id/negative_button').click()
                        time.sleep(5)
                        d(resourceId='com.instagram.android:id/skip_button').click()
                        time.sleep(5)
                        try:
                            d.xpath(
                                '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                        except:
                            time.sleep(2)
                            d.xpath(
                                '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                        time.sleep(5)
                        try:
                            d(resourceId='com.instagram.android:id/button_text').click()
                        except:
                            pass
                        time.sleep(5)
                        try:
                            d(resourceId='com.instagram.android:id/profile_tab').click()
                        except:
                            time.sleep(5)
                            d(resourceId='com.instagram.android:id/tab_avatar').click()
                        sms = False
                    except Exception as e:
                        d.app_stop("com.instagram.android")
                        time.sleep(1)
                        d.app_start("com.instagram.android")
                        sms = False
                        print(e)
                        pass

                elif verificar2.exists:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Verificando novamente...')
                    window.Refresh()
                    d.app_stop("com.instagram.android")
                    time.sleep(1)
                    d.app_start("com.instagram.android")
                    if d.xpath('//android.widget.FrameLayout[@content-desc="Perfil"]/android.view.ViewGroup').exists(
                            timeout=60):
                        try:
                            conteudo = config['vpn']
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                   text_color=('lime'))
                            window.Refresh()
                            contagem = contagem + 1
                            window['criadas'].update(contagem)
                            window.Refresh()
                            now = datetime.now()
                            now_brasilia = tz.localize(now)
                            timestamp = now_brasilia.strftime(
                                "%d/%m/%Y %H:%M:%S")
                            try:
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                          conteudo + ' - ' + app]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            except Exception as e:
                                print(e)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                tempo_aleatorio = random.randint(10, 40)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                time.sleep(tempo_aleatorio)
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                          conteudo + ' - ' + app]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            window['total'].update(num_rows)
                            random_number = random.random()

                            # Definir a chance desejada (10%)
                            chance = 0.2

                            # Verificar se o número aleatório está abaixo da chance
                            if random_number < chance and not user_mysql == "wn3":
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                    funcionamento, scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                sheet_name = 'relatorio_geral'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                          conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:F{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)
                        except Exception as e:
                            print(e)
                    else:
                        try:
                            conteudo = config['vpn']

                            # Executa a função correspondente ao conteúdo do arquivo
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                        except:
                            sms = True
                else:

                    try:
                        conteudo = config['vpn']

                        # Executa a função correspondente ao conteúdo do arquivo
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                    except:
                        sms = True
                        continue
            except Exception as e:
                print(e)
                if conteudo == "AVG":
                    vpn_avg()
                elif conteudo == "Avast":
                    vpn_avast()
                elif conteudo == "CyberGhost":
                    vpn_cyberghost()
                elif conteudo == "PiaVPN":
                    vpn_pia()
                elif conteudo == "TunnelBear":
                    vpn_tunnelbear()
                elif conteudo == "TunnelBear":
                    vpn_tunnelbear()
                elif conteudo == "ExpressVPN":
                    vpn_express()
                elif conteudo == "SurfShark":
                    vpn_surf()
                elif conteudo == "WindscribeVPN":
                    vpn_windscribe()
                elif conteudo == "HmaVPN":
                    vpn_hma()
                elif conteudo == "BetterNet":
                    vpn_better()
                elif conteudo == "NordVPN":
                    vpn_nord()
                elif conteudo == "HotspotShield":
                    vpn_hotspotshield()
                else:
                    window['output'].print(
                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                    window.Refresh()
                sms = True
            while sms is False:
                senha = gerar_senha(12)
                try:
                    time.sleep(3)
                    d(resourceId='com.instagram.android:id/profile_tab').click()

                    window['output'].print(linha_ret)
                    window.Refresh()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Criação de outro perfil.')
                    window.Refresh()
                    seguido = False
                    # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True)
                    # Clicar no botão de perfil

                    time.sleep(3)
                    d(resourceId='com.instagram.android:id/action_bar_title_chevron').click()
                    time.sleep(2)
                    # Clicar em perfis
                    try:
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout[2]/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.ListView/android.widget.LinearLayout[last()]/android.widget.FrameLayout/android.widget.ImageView').click()
                    except Exception as e:
                        print(e)
                        print('Erro aq')
                        time.sleep(200)
                    # Clicar em adicionar conta
                    time.sleep(4)
                    d.xpath(
                        '//android.widget.Button[@content-desc="Criar nova conta"]').click()

                    time.sleep(3)
                    # Gerar nome de usuário, digitar no campo e clicar em avançae
                    lista_user = random.choices(range(0, 9), k=2)
                    lista_letras = random.choices(letras, k=1)

                    with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                        nomes = nomes_arquivo.readlines()

                    with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                        sobrenomes = sobrenomes_arquivo.readlines()

                    nomea = fake.first_name_male().replace(" ", "")
                    nome = unicodedata.normalize('NFKD', nomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    sobrenomea = fake.last_name().replace(" ", "").lower()
                    sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    nome_completo = nome + sobrenome
                    numeros_concatenados = ''.join(
                        str(numero) for numero in lista_user)
                    user_completo1 = nome_completo + '' + \
                        str(numeros_concatenados) + ''.join(lista_letras)

                    user_completo = random.randint(1, len(user_completo1))
                    # Insira o ponto no índice aleatório
                    string_with_dot = user_completo1[:user_completo] + \
                        '_' + user_completo1[user_completo:]
                    user_completo = string_with_dot.lower()
                    print(user_completo)

                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: ' + user_completo)
                    window.Refresh()
                    d(resourceId='com.instagram.android:id/username').set_text(user_completo)
                    time.sleep(3)
                    d(resourceId='com.instagram.android:id/button_text').click()
                    # Digitar senha e avançar
                    time.sleep(3)
                    try:
                        d(resourceId='com.instagram.android:id/password').set_text(senha)
                    except:
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                                break
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()

                        except:
                            sms = True
                    d(resourceId='com.instagram.android:id/button_text').click()
                    # Clicar em concluir cadastro
                    time.sleep(3)
                    d(resourceId='com.instagram.android:id/button_text').click()

                    time.sleep(4)
                    feedback = d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.View')
                    if feedback.exists:
                        sms = True

                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
                    window.Refresh()
                    # WebDriverWait(driver, 40).until(EC.visibility_of_element_located)(((By.XPATH,
                    #                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')))
                    time.sleep(30)
                    verificar = d(
                        resourceId='com.instagram.android:id/connect_text')
                    if verificar.exists:
                        try:
                            conteudo = config['vpn']
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                   text_color=('lime'))
                            window.Refresh()
                            contagem += 1
                            window['criadas'].update(contagem)
                            window.Refresh()
                            now = datetime.now()
                            now_brasilia = tz.localize(now)
                            timestamp = now_brasilia.strftime(
                                "%d/%m/%Y %H:%M:%S")

                            try:
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                          conteudo + ' - ' + app]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            except Exception as e:
                                print(e)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                tempo_aleatorio = random.randint(10, 40)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                time.sleep(tempo_aleatorio)
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                          conteudo + ' - ' + app]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            window['total'].update(num_rows)

                            random_number = random.random()

                            # Definir a chance desejada (10%)
                            chance = 0.2

                            # Verificar se o número aleatório está abaixo da chance
                            if random_number < chance and not user_mysql == "wn3":
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                    funcionamento, scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                sheet_name = 'relatorio_geral'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                          conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:F{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                        except:
                            pass

                        window.Refresh()
                        arquivo = open(
                            'configuracoes/contas/contas_criadas.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(user_completo + ' ' + senha + "\n")
                        arquivo = open(
                            'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(
                            email + '\n' + user_completo + '\n' + senha + "\n\n")
                        window.Refresh()
                        d(resourceId='com.instagram.android:id/skip_button').click()
                        time.sleep(1)
                        d(resourceId='com.instagram.android:id/negative_button').click()
                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/skip_button').click()
                        time.sleep(1)
                        try:
                            d.xpath(
                                '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                        except:
                            d(resourceId='com.instagram.android:id/skip_button').click()
                            d.xpath(
                                '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()

                        time.sleep(1)
                        time.sleep(3)
                        try:
                            d(resourceId='com.instagram.android:id/profile_tab').click()
                        except:
                            d(resourceId='com.instagram.android:id/button_text').click()
                            d(resourceId='com.instagram.android:id/profile_tab').click()
                        sms = False

                    else:
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()

                        except Exception as e:
                            print(e)
                            print(1)
                            sms = True
                            try:
                                chrome.close()
                            except:
                                pass
                            try:
                                chrome.quit()
                            except:
                                pass
                            pass
                except Exception as e:
                    print(e)
                    print(2)
                    try:
                        chrome.close()
                    except:
                        pass
                    try:
                        chrome.quit()
                    except:
                        pass
                    sms = True
                    pass

        except Exception as e:
            logger.error('Ocorreu um erro: %s', e)
            print(3)
            try:
                chrome.close()
            except:
                pass
            try:
                chrome.quit()
            except:
                pass
            print(e)
            pass


def free_sms():
    SPREADSHEET_ID = config['spreadsheet']
    conteudo = config['vpn']
    senha = gerar_senha(12)
    maquina = config['maquina']
    email = 'Free SMS'
    tentativa = False
    seguido = False
    app = 'Normal'
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    # Código que gera a saída
    import os
    import time
    import requests
    import hashlib
    import subprocess

    # verifica se o arquivo existe na pasta do bot

    try:
        import undetected_chromedriver as uc
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'undetected_chromedriver'])
        subprocess.run(['deactivate'], shell=True)
        import undetected_chromedriver as uc

    try:
        from rich.console import Console
    except ModuleNotFoundError:
        import subprocess
        import sys

        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['pip', 'install', '-r', 'requirements.txt'])
        subprocess.run(['deactivate'], shell=True)
        from rich.console import Console
    import os
    import time
    import requests
    import hashlib
    import subprocess
    from colorama import init, Fore, Back, Style
    from faker import Faker

    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random
    from datetime import datetime
    import string
    try:
        import uiautomator2 as u2
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'uiautomator2==2.16.25'])
        subprocess.run(['deactivate'], shell=True)
        subprocess.run(['pip', 'install', '--upgrade', 'requests'])
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        import requests
        time.sleep(10)
        import uiautomator2 as u2
    d = u2.connect(f'{porta}')
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.webdriver.chrome.service import Service
    from selenium.common.exceptions import NoSuchElementException
    from mailtm import Email
    import re
    import logging

    logger = logging.getLogger(__name__)

    handler = logging.FileHandler('log.txt')
    handler.setLevel(logging.ERROR)

    logger.addHandler(handler)

    # RANGE_NAME = 'contas!A:D'
    #
    # SCOPES = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

    def vpn_avast():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Avast', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop("com.avast.android.vpn")
            d.app_start("com.avast.android.vpn", ".app.wizard.WizardActivity")
            time.sleep(10)
        except Exception as e:
            print(e)
        abc = False

    def nenhuma_vpn():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.facebook.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        time.sleep(10)

    def vpn_hotspotshield():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HotspotShield',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('hotspotshield.android.vpn')
            d.app_start('hotspotshield.android.vpn')
        except Exception as e:
            print(e)
        d(resourceId='hotspotshield.android.vpn:id/tryAgainButton').click()
        time.sleep(5)
        d(resourceId='hotspotshield.android.vpn:id/btnVpnConnect').click()

        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_pia():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da PiaVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.privateinternetaccess.android')
            d.app_start('com.privateinternetaccess.android')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()
        time.sleep(3)
        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()

        abc = False

    def vpn_express():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da ExpressVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.expressvpn.vpn')
            d.app_start('com.expressvpn.vpn')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.expressvpn.vpn:id/obiButton').click()
        time.sleep(3)
        d(resourceId='com.expressvpn.vpn:id/obiButton').click()

        abc = False

    def vpn_nord():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da NordVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.nordvpn.android')
            time.sleep(5)
            d.app_start('com.nordvpn.android', use_monkey=True)
        except:
            pass
        time.sleep(10)
        time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_surf():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('com.surfshark.vpnclient.android')
            d.app_start('com.surfshark.vpnclient.android')
        except:
            pass
        time.sleep(15)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_better():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da BetterNet', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        try:
            d.app_stop('com.freevpnintouch')
            d.app_start('com.freevpnintouch')
        except:
            pass
        time.sleep(10)
        dialog = d(resourceId='com.freevpnintouch:id/dialogCtaPositive')
        connect = d(
            resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
        if dialog.exists:
            d(resourceId='com.freevpnintouch:id/dialogCtaPositive').click()
            time.sleep(3)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            # time.sleep(5)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
        while connect == 'CONNECT':
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            time.sleep(4)
            connect = d(
                resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            # WebDriverWait(driver, 20).until(
            # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        ip = '127.0.0.1:' + porta

        output = subprocess.check_output(
            ['adb', '-s', ip, 'shell', 'ifconfig'])

        # Verifica se a conexão VPN está ativa
        if not "tun0" in str(output):
            window['output'].print("Não conectado na BetterNet.")
            window.Refresh()
            try:
                connect = d(
                    resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
                d.app_stop('com.freevpnintouch')
                d.app_start('com.freevpnintouch')
                while connect == 'CONNECT':
                    d(resourceId='com.freevpnintouch:id/buttonConnect').click()
                    time.sleep(4)
                    connect = d(
                        resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            except:
                pass
        abc = False

    def vpn_cyberghost():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da CyberGhost', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('de.mobileconcepts.cyberghost')
            d.app_start('de.mobileconcepts.cyberghost')
        except:
            pass
        # time.sleep(3)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        rate = d(resourceId='de.mobileconcepts.cyberghost:id/rate_me_text')
        if rate.exists:
            d(resourceId='android:id/button2').click()
        time.sleep(2)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        abc = False

    def vpn_tunnelbear():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.tunnelbear.android')
            d.app_start("com.tunnelbear.android")
            while True:
                output = subprocess.check_output(
                    ['adb', '-s', porta, 'shell', 'ifconfig'])
                # print(str(output))
                if "tun0" in str(output):
                    print('Conectada')
                    break
                elif not "tun0" in str(output):
                    print('Reconectando')
                    try:
                        d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                        time.sleep(10)
                    except:
                        pass
        except Exception as e:
            print(e)
            pass

    def vpn_avg():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da AVG', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.avg.android.vpn')
            d.app_start("com.avg.android.vpn",
                        "com.avast.android.vpn.app.wizard.WizardActivity")
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #               stderr=subprocess.DEVNULL, check=True, shell=True)

        time.sleep(30)

    def vpn_windscribe():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Windscribe', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)
            d.app_stop("com.windscribe.vpn")
            d.app_start("com.windscribe.vpn")
        except:
            pass
        d(resourceId='com.windscribe.vpn:id/on_off_button').click()
        time.sleep(10)

    def vpn_hma():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HMA', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)

            d.app_stop("com.hidemyass.hidemyassprovpn")
            time.sleep(3)
            d.app_start('com.hidemyass.hidemyassprovpn',
                        'com.avast.android.vpn.activity.HmaOnboardingActivity')
        except:
            pass
        time.sleep(10)

    def gerar_id():
        chars = string.ascii_lowercase + string.digits
        android_id = ''.join(random.choice(chars) for i in range(16))
        return android_id

    options = Options()
    prefs = {"profile.managed_default_content_settings.images": 2}
    options.page_load_strategy = 'none'
    options.add_experimental_option("prefs", prefs)

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    window.Refresh()

    console = Console()

    device = [
        {'name': 'Bluestacks1', 'port': porta, 'udid': f'{porta}'},
    ]
    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server.test', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass
    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global transition_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass
    gerar_id()
    android_id = gerar_id()
    subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    time.sleep(2)
    # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True, stdout=subprocess.DEVNULL,
    #               stderr=subprocess.DEVNULL)

    try:
        subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
    except Exception as e:
        pass

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Efetuando troca de IP.')
    window.Refresh()
    try:
        conteudo = config['vpn']
        if conteudo == "AVG":
            vpn_avg()
        elif conteudo == "SurfShark":
            vpn_surf()
        elif conteudo == "Nenhuma":
            nenhuma_vpn()
        elif conteudo == "Avast":
            vpn_avast()
        elif conteudo == "ExpressVPN":
            vpn_express()
        elif conteudo == "PiaVPN":
            vpn_pia()
        elif conteudo == "TunnelBear":
            vpn_tunnelbear()
        elif conteudo == "BetterNet":
            vpn_better()
        elif conteudo == "CyberGhost":
            vpn_cyberghost()
        elif conteudo == "NordVPN":
            vpn_nord()
        elif conteudo == "HotspotShield":
            vpn_hotspotshield()
        elif conteudo == "WindscribeVPN":
            vpn_windscribe()
        elif conteudo == "HmaVPN":
            vpn_hma()
        else:
            window['output'].print(
                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
            window.Refresh()

    except Exception as e:
        pass

    window.Refresh()
    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando sistema inicializar.')
    window.Refresh()

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.\n')
    window.Refresh()
    d.implicitly_wait(30.0)
    d.set_fastinput_ime(True)
    while parar is False:
        if parar is True:
            print('Parando Thread')
            break
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)

            scope = ["https://spreadsheets.google.com/feeds",
                     "https://www.googleapis.com/auth/drive"]
            creds = ServiceAccountCredentials.from_json_keyfile_name(
                'credentials.json', scope)
            client = gspread.authorize(creds)

            spreadsheet_id = config['spreadsheet']
            sheet_name = 'contas'
            # Insert user, password, and timestamp into first empty row
            sheet = client.open_by_key(spreadsheet_id).worksheet(sheet_name)
            values = sheet.col_values(1)

            # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
            rows = sheet.get_all_values()

            # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
            regex = re.compile(r'\S+\s\S+')
            sheet_name = config['2nr']
            # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
            num_rows = sum(1 for row in rows if regex.match(row[0]))
            window['total'].update(num_rows)
        except Exception as e:
            print(e)
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu algum erro ao acessar a planilha.')
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Tentando novamente em 1 minuto.')
            window.Refresh()
            time.sleep(60)
            raise Exception('skip')
        first = True
        while True:
            if first is False:
                try:
                    driver.quit()
                except:
                    pass
                try:
                    comando = f"adb disconnect {porta}"
                    subprocess.run(comando, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True,
                                   shell=True)
                    time.sleep(5)
                    subprocess.run(f"adb connect {porta}", stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL,
                                   check=True, shell=True)

                except:
                    pass
                time.sleep(10)
            first = False
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)

            except:
                pass
            gerar_id()
            android_id = gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            try:

                try:

                    d.app_start('com.instagram.android')
                    window['output'].print(linha_ret)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo instagram.')
                    window.Refresh()
                    d.xpath(
                        '//android.widget.Button[@content-desc="Criar nova conta"]').click(timeout=120)

                    time.sleep(6)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo Free SMS.')
                    window.Refresh()
                    chromedriver_path = 'storage\\driver\\driver.exe'
                    service = Service(chromedriver_path)
                    options = uc.ChromeOptions()
                    options.add_argument("--start-maximized")
                    options.add_argument("--disable-gpu")
                    # Configurações adicionais para o undetected_chromedriver
                    chrome = uc.Chrome(options=options, service=service)
                    try:
                        chrome.get('https://temporary-phone-number.com/')
                        chrome.set_window_size(800, 2000)
                        time.sleep(10)

                        try:
                            WebDriverWait(chrome, 30).until(
                                EC.element_to_be_clickable(
                                    (By.XPATH, '/html/body/div[2]/aside/section/ul/li[2]'))).click()
                            time.sleep(2)
                            print('0')
                            if chrome.current_url == "https://temporary-phone-number.com/#google_vignette":
                                chrome.back()
                                WebDriverWait(chrome, 30).until(EC.element_to_be_clickable(
                                    (By.XPATH, '/html/body/div[2]/aside/section/ul/li[2]'))).click()
                        except:
                            chrome.get(
                                'https://temporary-phone-number.com/US-Phone-Number/12673800457')
                        print('0.8')
                        time.sleep(13)
                        num_33 = True
                        while num_33 is True:
                            try:
                                chrome.find_element(By.XPATH,
                                                    '/html/body/div[2]/div/section[2]/div[1]/div[2]/div[2]/button[2]').click()
                                time.sleep(7)
                                num = chrome.find_element(By.XPATH,
                                                          '/html/body/div[2]/div/section[2]/div[1]/div[1]/div/h1').text
                                if num.startswith("+33") or num.startswith("+1"):
                                    chrome.find_element(By.XPATH,
                                                        '/html/body/div[2]/div/section[2]/div[1]/div[2]/div[2]/button[2]').click()
                                    time.sleep(7)
                                else:
                                    num_33 = False
                            except:
                                chrome.quit()
                                driver.quit()
                    except Exception as e:
                        print('_____________________________________')
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        print(e)
                    print('1')
                    if len(novo_layout) == 1:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Layout novo encontrado, reiniciando app.')
                        window.Refresh()
                        chrome.quit()
                        raise Exception("skip.")

                    try:
                        print(num)
                    except:
                        chrome.quit()
                        driver.quit()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        raise Exception("skip.")
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Número gerado: {num}')
                    window.Refresh()

                    WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '//android.widget.EditText'))).send_keys(
                        f'{num}')
                    time.sleep(1)
                    WebDriverWait(driver, 30).until(
                        EC.element_to_be_clickable((By.XPATH, '//android.view.View[@content-desc="Avançar"]'))).click()

                    time.sleep(10)
                    restricao = driver.find_elements(By.XPATH,
                                                     '//android.view.View[@content-desc="Cadastrar-se com o email"]')

                    if len(restricao) == 1:
                        chrome.quit()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                            break
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        driver.quit()

                    WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH,
                                                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText'))).click()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(3)
                    numeros = ''
                    encontrado = False
                    tentativa = 0
                    while not encontrado and tentativa < 6:
                        time.sleep(5)
                        # Localize o elemento desejado e obtenha o texto
                        elemento = chrome.find_element(By.XPATH,
                                                       '/html/body/div[2]/div/section[2]/div[1]/div[3]/div/div[1]/div[1]/div[2]').text
                        time_second = chrome.find_element(By.XPATH,
                                                          '/html/body/div[2]/div/section[2]/div[1]/div[3]/div/div[1]/div[1]/div[1]/time').text

                        # Verifique se o texto contém 'instagram'
                        # if 'Instagram' in elemento.lower() and 'seconds' in time_second.lower():
                        if 'Instagram' in elemento and (
                                'seconds' in time_second or '1 min ago' in time_second or '2 mins ago' in time_second):
                            encontrado = True
                            match = re.search(r'\d+\s*\d+\s*\d+\s*\d+\s*\d+\s*\d+',
                                              elemento)  # Extrai seis grupos de dígitos, permitindo espaços entre eles
                            if match:
                                numeros = ''.join(match.group().split())

                        else:
                            # Clique no outro elemento
                            tentativa = tentativa + 1
                            time.sleep(10)
                            botao = chrome.find_element(By.XPATH,
                                                        '/html/body/div[2]/div/section[2]/div[1]/div[2]/div[2]/button[1]')
                            botao.click()
                    if tentativa == 6:
                        chrome.quit()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Codigo não recebido.')
                        window.Refresh()
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                            break
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        driver.quit()
                        raise Exception("Codigo não recebido.")
                    codigo = numeros
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    chrome.quit()
                    WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText'))).send_keys(
                        codigo)
                    # time.sleep(100)
                    WebDriverWait(driver, 30).until(
                        EC.element_to_be_clickable((By.XPATH, '//android.view.View[@content-desc="Avançar"]'))).click()
                    time.sleep(4)

                    codigo_invalido = driver.find_elements(By.XPATH,
                                                           '//android.view.View[@content-desc="Não recebi o código"]')
                    if len(codigo_invalido) == 1:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código inválido.')
                        window.Refresh()
                        #
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()

                    ######################################################################
                    lista_user = random.choices(range(0, 9), k=2)
                    lista_letras = random.choices(letras, k=1)

                    with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                        nomes = nomes_arquivo.readlines()

                    with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                        sobrenomes = sobrenomes_arquivo.readlines()

                    nomea = fake.first_name_male().replace(" ", "")
                    nome = unicodedata.normalize('NFKD', nomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    sobrenomea = fake.last_name().replace(" ", "").lower()
                    sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    nome_completo = nome + ' ' + sobrenome
                    nome_completo_s = nome + sobrenome
                    numeros_concatenados = ''.join(
                        str(numero) for numero in lista_user)
                    user_completo = nome_completo_s + '' + \
                        str(numeros_concatenados) + ''.join(lista_letras)
                    ######################################################################

                    cancel = driver.find_elements(
                        By.ID, 'com.google.android.gms:id/cancel')
                    if len(cancel) == 1:
                        driver.find_element(
                            By.ID, 'com.google.android.gms:id/cancel').click()
                    senha = gerar_senha(12)
                    WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText'))).send_keys(
                        nome_completo)
                    time.sleep(1)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nome escolhido: {nome_completo}')
                    window.Refresh()
                    WebDriverWait(driver, 30).until(
                        EC.element_to_be_clickable((By.XPATH, '//android.view.View[@content-desc="Avançar"]'))).click()
                    time.sleep(10)
                    WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText'))).send_keys(
                        senha)
                    time.sleep(1)
                    WebDriverWait(driver, 30).until(
                        EC.element_to_be_clickable((By.XPATH, '//android.view.View[@content-desc="Avançar"]'))).click()
                    time.sleep(5)
                    new_acc = driver.find_elements(By.ID, 'android:id/button2')
                    if len(new_acc) == 1:
                        driver.find_element(
                            By.ID, 'android:id/button2').click()
                    time.sleep(2)
                    salvar_senha = driver.find_elements(
                        By.XPATH, '//android.view.View[@content-desc="Agora não"]')
                    if len(salvar_senha) == 1:
                        driver.find_element(
                            By.XPATH, '//android.view.View[@content-desc="Agora não"]').click()

                    time.sleep(3)
                    new_acc = driver.find_elements(By.ID, 'android:id/button2')
                    if len(new_acc) == 1:
                        driver.find_element(
                            By.ID, 'android:id/button2').click()
                        time.sleep(2)
                    WebDriverWait(driver, 30).until(
                        EC.element_to_be_clickable((By.XPATH, '//android.view.View[@content-desc="Avançar"]'))).click()
                    time.sleep(2)
                    WebDriverWait(driver, 30).until(
                        EC.element_to_be_clickable((By.XPATH, '//android.view.View[@content-desc="Avançar"]'))).click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText'))).send_keys(
                        idade_aleatoria)
                    WebDriverWait(driver, 30).until(
                        EC.element_to_be_clickable((By.XPATH, '//android.view.View[@content-desc="Avançar"]'))).click()
                    time.sleep(2)
                    WebDriverWait(driver, 30).until(EC.element_to_be_clickable(
                        (By.ID, 'android:id/button2'))).click()
                    try:
                        WebDriverWait(driver, 10).until(EC.element_to_be_clickable(
                            (By.XPATH, '//android.view.View[@content-desc="Alterar nome de usuário"]'))).click()
                    except:
                        pass
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                    window.Refresh()
                    time.sleep(3)
                    WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText'))).clear()
                    time.sleep(2)
                    WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText'))).send_keys(
                        user_completo)
                    time.sleep(3)
                    WebDriverWait(driver, 30).until(
                        EC.element_to_be_clickable((By.XPATH, '//android.view.View[@content-desc="Avançar"]'))).click()
                    WebDriverWait(driver, 30).until(
                        EC.element_to_be_clickable((By.XPATH, '//android.view.View[@content-desc="Concordo"]'))).click()
                    time.sleep(3)
                    errodetec = driver.find_elements(
                        By.XPATH, '//android.view.View[@content-desc="Concordo"]')
                    if len(errodetec) == 1:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Instagram não deixou avançar.')
                        window.Refresh()

                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
                    window.Refresh()
                    time.sleep(20)
                    verificar = driver.find_elements(
                        By.XPATH, '//android.view.View[@content-desc="Adicionar foto"]')
                    # time.sleep(10)
                    try:
                        if len(verificar) == 1:
                            try:
                                conteudo = config['vpn']
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                                window.Refresh()
                                contagem = contagem + 1
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")

                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                          conteudo + ' - ' + app]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                                window['total'].update(num_rows)
                                time.sleep(4)
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                    funcionamento, scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                sheet_name = 'relatorio_geral'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                          conteudo + ' - ' + app, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:F{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                            except Exception as e:
                                print(e)

                            window.Refresh()
                            arquivo = open(
                                'configuracoes/contas/contas_criadas.txt', 'a')
                            # Escreva mais conteúdo no arquivo
                            arquivo.write(user_completo + ' ' + senha + "\n")
                            arquivo = open(
                                'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                            # Escreva mais conteúdo no arquivo
                            arquivo.write(
                                email + '\n' + user_completo + '\n' + senha + "\n\n")
                            try:
                                WebDriverWait(driver, 30).until(EC.element_to_be_clickable(
                                    (By.XPATH, '//android.view.View[@content-desc="Pular"]'))).click()
                                time.sleep(5)
                                WebDriverWait(driver, 30).until(
                                    EC.element_to_be_clickable((By.ID, 'com.instagram.android:id/skip_button'))).click()
                                time.sleep(5)
                                WebDriverWait(driver, 30).until(
                                    EC.element_to_be_clickable(
                                        (By.ID, 'com.instagram.android:id/negative_button'))).click()
                                time.sleep(5)
                                WebDriverWait(driver, 30).until(
                                    EC.element_to_be_clickable((By.ID, 'com.instagram.android:id/skip_button'))).click()
                                time.sleep(5)
                                try:
                                    WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                                '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView'))).click()
                                except:
                                    time.sleep(2)
                                    WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                                '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView'))).click()
                                time.sleep(5)
                                try:
                                    WebDriverWait(driver, 5).until(
                                        EC.element_to_be_clickable(
                                            (By.ID, 'com.instagram.android:id/button_text'))).click()
                                except:
                                    pass
                                time.sleep(5)
                                try:
                                    WebDriverWait(driver, 30).until(
                                        EC.element_to_be_clickable(
                                            (By.ID, 'com.instagram.android:id/profile_tab'))).click()
                                except:
                                    time.sleep(5)
                                    WebDriverWait(driver, 30).until(
                                        EC.element_to_be_clickable(
                                            (By.ID, 'com.instagram.android:id/tab_avatar'))).click()
                                sms = False
                            except:
                                pass
                        else:
                            try:
                                driver.terminate_app('com.instagram.android')
                            except:
                                pass
                            time.sleep(3)
                            driver.activate_app('com.instagram.android')
                            time.sleep(10)
                            verificar = driver.find_elements(
                                By.ID, 'com.instagram.android:id/profile_tab')
                            if len(verificar) == 1:
                                try:
                                    conteudo = config['vpn']
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                        text_color=('lime'))
                                    window.Refresh()
                                    contagem += 1
                                    window['criadas'].update(contagem)
                                    window.Refresh()
                                    now = datetime.now()
                                    now_brasilia = tz.localize(now)
                                    timestamp = now_brasilia.strftime(
                                        "%d/%m/%Y %H:%M:%S")

                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                              conteudo + ' - ' + app]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                    window['total'].update(num_rows)
                                    time.sleep(4)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                        funcionamento, scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                    sheet_name = 'relatorio_geral'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                              conteudo + ' - ' + app, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:F{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                except:
                                    pass

                                window.Refresh()
                                arquivo = open(
                                    'configuracoes/contas/contas_criadas.txt', 'a')
                                # Escreva mais conteúdo no arquivo
                                arquivo.write(user_completo +
                                              ' ' + senha + "\n")
                                arquivo = open(
                                    'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                                # Escreva mais conteúdo no arquivo
                                arquivo.write(
                                    email + '\n' + user_completo + '\n' + senha + "\n\n")
                                try:
                                    try:
                                        WebDriverWait(driver, 30).until(EC.element_to_be_clickable(
                                            (By.ID, 'com.instagram.android:id/profile_tab'))).click()
                                    except:
                                        time.sleep(2)
                                        WebDriverWait(driver, 30).until(EC.element_to_be_clickable(
                                            (By.ID, 'com.instagram.android:id/tab_avatar'))).click()
                                    sms = False
                                except:
                                    pass
                            else:

                                try:
                                    conteudo = config['vpn']

                                    # Executa a função correspondente ao conteúdo do arquivo
                                    if conteudo == "AVG":
                                        vpn_avg()
                                    elif conteudo == "Avast":
                                        vpn_avast()
                                    elif conteudo == "CyberGhost":
                                        vpn_cyberghost()
                                    elif conteudo == "PiaVPN":
                                        vpn_pia()
                                    elif conteudo == "TunnelBear":
                                        vpn_tunnelbear()
                                    elif conteudo == "ExpressVPN":
                                        vpn_express()
                                    elif conteudo == "SurfShark":
                                        vpn_surf()
                                    elif conteudo == "BetterNet":
                                        vpn_better()
                                    elif conteudo == "NordVPN":
                                        vpn_nord()
                                    elif conteudo == "HotspotShield":
                                        vpn_hotspotshield()
                                    else:
                                        window['output'].print(
                                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                        window.Refresh()
                                    driver.quit()
                                except:
                                    sms = True
                                    driver.quit()
                                    continue
                    except Exception as e:
                        print(e)
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        sms = True
                        driver.quit()
                    while sms is False:
                        senha = gerar_senha(12)
                        try:
                            time.sleep(3)
                            WebDriverWait(driver, 30).until(
                                EC.element_to_be_clickable((By.ID, 'com.instagram.android:id/profile_tab'))).click()

                            window['output'].print(linha_ret)
                            window.Refresh()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Criação de outro perfil.')
                            window.Refresh()
                            seguido = False
                            # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True)
                            # Clicar no botão de perfil

                            time.sleep(3)
                            WebDriverWait(driver, 15).until(EC.element_to_be_clickable((By.ID,
                                                                                        'com.instagram.android:id/action_bar_title_chevron'))).click()
                            time.sleep(2)
                            # Clicar em perfis
                            try:
                                WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH,
                                                                                                  '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout[2]/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.ListView/android.widget.LinearLayout[last()]/android.widget.FrameLayout/android.widget.ImageView'))).click()
                            except Exception as e:
                                print(e)
                                print('Erro aq')
                                time.sleep(200)
                            # Clicar em adicionar conta
                            WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                                              '//android.widget.Button[@content-desc="Criar nova conta"]'))).click()

                            time.sleep(3)
                            # Gerar nome de usuário, digitar no campo e clicar em avançae
                            lista_user = random.choices(range(0, 9), k=2)
                            lista_letras = random.choices(letras, k=1)

                            with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                                nomes = nomes_arquivo.readlines()

                            with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                                sobrenomes = sobrenomes_arquivo.readlines()

                            nomea = fake.first_name_male().replace(" ", "")
                            nome = unicodedata.normalize('NFKD', nomea).encode(
                                'ASCII', 'ignore').decode('ASCII')
                            sobrenomea = fake.last_name().replace(" ", "").lower()
                            sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode('ASCII', 'ignore').decode(
                                'ASCII')
                            nome_completo = nome + sobrenome
                            numeros_concatenados = ''.join(
                                str(numero) for numero in lista_user)
                            user_completo = nome_completo + '' + \
                                str(numeros_concatenados) + \
                                ''.join(lista_letras)

                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: ' + user_completo)
                            window.Refresh()
                            WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.ID,
                                                                                              'com.instagram.android:id/username'))).send_keys(
                                user_completo)
                            time.sleep(3)
                            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.ID,
                                                                                        'com.instagram.android:id/button_text'))).click()
                            # Digitar senha e avançar
                            time.sleep(3)
                            try:
                                WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.ID,
                                                                                                  'com.instagram.android:id/password'))).send_keys(
                                    senha)
                            except:
                                try:
                                    conteudo = config['vpn']
                                    if conteudo == "AVG":
                                        vpn_avg()
                                    elif conteudo == "SurfShark":
                                        vpn_surf()
                                    elif conteudo == "Avast":
                                        vpn_avast()
                                    elif conteudo == "ExpressVPN":
                                        vpn_express()
                                    elif conteudo == "PiaVPN":
                                        vpn_pia()
                                    elif conteudo == "TunnelBear":
                                        vpn_tunnelbear()
                                    elif conteudo == "BetterNet":
                                        vpn_better()
                                    elif conteudo == "CyberGhost":
                                        vpn_cyberghost()
                                    elif conteudo == "NordVPN":
                                        vpn_nord()
                                    elif conteudo == "HotspotShield":
                                        vpn_hotspotshield()
                                        break
                                    else:
                                        window['output'].print(
                                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                        window.Refresh()

                                except:
                                    sms = True
                            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.ID,
                                                                                        'com.instagram.android:id/button_text'))).click()
                            # Clicar em concluir cadastro
                            time.sleep(3)
                            WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.ID,
                                                                                              'com.instagram.android:id/button_text'))).click()

                            time.sleep(4)
                            feedback = driver.find_elements(By.XPATH,
                                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.View')
                            if len(feedback) == 1:
                                sms = True

                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
                            window.Refresh()
                            # WebDriverWait(driver, 40).until(EC.visibility_of_element_located)(((By.XPATH,
                            #                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')))
                            time.sleep(20)
                            verificar = driver.find_elements(By.ID,
                                                             'com.instagram.android:id/connect_text')
                            if len(verificar) == 1:
                                try:
                                    conteudo = config['vpn']
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                        text_color=('lime'))
                                    window.Refresh()
                                    contagem += 1
                                    window['criadas'].update(contagem)
                                    window.Refresh()
                                    now = datetime.now()
                                    now_brasilia = tz.localize(now)
                                    timestamp = now_brasilia.strftime(
                                        "%d/%m/%Y %H:%M:%S")

                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                              conteudo + ' - ' + app]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                    window['total'].update(num_rows)
                                    time.sleep(4)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                        funcionamento, scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                    sheet_name = 'relatorio_geral'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                              conteudo + ' - ' + app, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:F{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                except:
                                    pass

                                window.Refresh()
                                arquivo = open(
                                    'configuracoes/contas/contas_criadas.txt', 'a')
                                # Escreva mais conteúdo no arquivo
                                arquivo.write(user_completo +
                                              ' ' + senha + "\n")
                                arquivo = open(
                                    'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                                # Escreva mais conteúdo no arquivo
                                arquivo.write(
                                    email + '\n' + user_completo + '\n' + senha + "\n\n")
                                window.Refresh()
                                WebDriverWait(driver, 30).until(
                                    EC.element_to_be_clickable((By.ID, 'com.instagram.android:id/skip_button'))).click()
                                time.sleep(1)
                                WebDriverWait(driver, 30).until(
                                    EC.element_to_be_clickable(
                                        (By.ID, 'com.instagram.android:id/negative_button'))).click()
                                time.sleep(3)
                                WebDriverWait(driver, 30).until(
                                    EC.element_to_be_clickable((By.ID, 'com.instagram.android:id/skip_button'))).click()
                                time.sleep(1)
                                try:
                                    WebDriverWait(driver, 6).until(EC.element_to_be_clickable((By.XPATH,
                                                                                               '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView'))).click()
                                except:
                                    WebDriverWait(driver, 30).until(
                                        EC.element_to_be_clickable(
                                            (By.ID, 'com.instagram.android:id/skip_button'))).click()
                                    WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH,
                                                                                                '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView'))).click()

                                time.sleep(1)
                                time.sleep(3)
                                try:
                                    WebDriverWait(driver, 10).until(
                                        EC.element_to_be_clickable(
                                            (By.ID, 'com.instagram.android:id/profile_tab'))).click()
                                except:
                                    WebDriverWait(driver, 30).until(
                                        EC.element_to_be_clickable(
                                            (By.ID, 'com.instagram.android:id/button_text'))).click()
                                    WebDriverWait(driver, 10).until(
                                        EC.element_to_be_clickable(
                                            (By.ID, 'com.instagram.android:id/profile_tab'))).click()
                                sms = False

                            else:
                                try:
                                    conteudo = config['vpn']
                                    if conteudo == "AVG":
                                        vpn_avg()
                                    elif conteudo == "SurfShark":
                                        vpn_surf()
                                    elif conteudo == "Avast":
                                        vpn_avast()
                                    elif conteudo == "ExpressVPN":
                                        vpn_express()
                                    elif conteudo == "PiaVPN":
                                        vpn_pia()
                                    elif conteudo == "TunnelBear":
                                        vpn_tunnelbear()
                                    elif conteudo == "BetterNet":
                                        vpn_better()
                                    elif conteudo == "CyberGhost":
                                        vpn_cyberghost()
                                    elif conteudo == "NordVPN":
                                        vpn_nord()
                                    elif conteudo == "HotspotShield":
                                        vpn_hotspotshield()
                                        break
                                    else:
                                        window['output'].print(
                                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                        window.Refresh()

                                except Exception as e:
                                    sms = True
                                    driver.quit()
                                    pass
                        except Exception as e:
                            sms = True
                            driver.quit()
                            pass

                except Exception as e:
                    try:
                        chrome.quit()
                        driver.quit()
                    except:
                        pass
                    print(e)
                    pass

            except Exception as e:
                try:
                    chrome.quit()
                    driver.quit()
                except:
                    pass
                print(e)
                pass


def temporary_phone_number_com():
    SPREADSHEET_ID = config['spreadsheet']
    conteudo = config['vpn']
    senha = gerar_senha(12)
    maquina = config['maquina']
    tentativa = False
    seguido = False
    regiao_vpn = 'Sem dados'
    if config['email'] == '-2nr-' and config['app'] == '-instalite-':
        app = 'Lite'
    elif config['email'] == '-2nr-' and config['app'] == '-insta-':
        app = 'Normal'
    else:
        app = "Normal"
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    # Código que gera a saída
    import os
    import time
    import requests
    import hashlib
    import subprocess

    # verifica se o arquivo existe na pasta do bot

    try:
        from rich.console import Console
    except ModuleNotFoundError:
        import subprocess
        import sys

        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['pip', 'install', '-r', 'requirements.txt'])
        subprocess.run(['deactivate'], shell=True)
        from rich.console import Console
    import os
    import time
    try:
        import uiautomator2 as u2
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'uiautomator2==2.16.25'])
        subprocess.run(['deactivate'], shell=True)
        subprocess.run(['pip', 'install', '--upgrade', 'requests'])
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        import requests
        time.sleep(10)
        import uiautomator2 as u2
    d = u2.connect(f'{porta}')
    import requests
    import hashlib
    import subprocess
    from colorama import init, Fore, Back, Style
    from faker import Faker
    # teste
    init(autoreset=True)
    console = Console()
    from termcolor import colored

    from rich.console import Console
    from rich.panel import Panel
    from rich.text import Text
    from rich.rule import Rule

    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random
    from datetime import datetime
    import string
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import NoSuchElementException
    from mailtm import Email
    import re
    import logging

    logger = logging.getLogger(__name__)

    handler = logging.FileHandler('log.txt')
    handler.setLevel(logging.ERROR)

    logger.addHandler(handler)
    file_path = './storage/adblock.crx'
    import zipfile

    def baixar_arquivo(url, caminho_arquivo, pasta_destino):
        # Verifica e cria a pasta destino, se necessário
        if os.path.exists(pasta_destino):
            return
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Baixando navegador...')
        window.Refresh()
        # Se a pasta não existir, cria a pasta destino
        os.makedirs(pasta_destino)

        # Continua com o download do arquivo
        resposta = requests.get(url, stream=True)
        tamanho_total = int(resposta.headers.get('content-length', 0))

        with open(caminho_arquivo, 'wb') as file:
            for dados in resposta.iter_content(chunk_size=4096):
                file.write(dados)

        # Extrai o arquivo
        with zipfile.ZipFile(caminho_arquivo, 'r') as zip_ref:
            zip_ref.extractall(pasta_destino)

        # Apaga o arquivo zip após a extração
        os.remove(caminho_arquivo)
        print("\nDownload e extração concluídos.")

    url = 'https://www.dropbox.com/scl/fi/9juftou3q4k4kj2o7mzhq/chrome-win.zip?rlkey=84n9pwxouhu9punpcjg32onbz&dl=1'
    caminho_arquivo = './storage/driver/driver.zip'
    pasta_destino = './storage/driver/'

    baixar_arquivo(url, caminho_arquivo, pasta_destino)
    if os.path.exists("./storage/adblock/"):
        result = f"A pasta 'adblock' já existe em '{file_path}'."
    else:
        # URL para download
        url = 'https://www.dropbox.com/scl/fi/2tu2g6ulqwr2xk20kut1x/adblock.crx?rlkey=55rysc1sspa7t81ldybg8t6iy&dl=1'

        # Fazendo o download do arquivo
        response = requests.get(url)
        if response.status_code == 200:
            with open(file_path, 'wb') as file:
                file.write(response.content)
            print("Arquivo 'adblock.crx' baixado e salvo em './storage/adblock.crx'.")
            # Caminho do arquivo original (altere para o seu caminho de arquivo)
            caminho_original = './storage/adblock.crx'
            novo_caminho = './storage/adblock.zip'

            # Renomear o arquivo
            os.rename(caminho_original, novo_caminho)

            # Caminho do arquivo zip
            caminho_zip = './storage/adblock.zip'

            # Diretório de destino para extrair
            diretorio_destino = './storage/adblock/'

            # Remover um arquivo anterior, se existir
            arquivo_antigo = './storage/adblock'
            if os.path.exists(arquivo_antigo):
                os.remove(arquivo_antigo)

            # Criar o diretório de destino se ele não existir
            if not os.path.exists(diretorio_destino):
                os.makedirs(diretorio_destino)

            # Extrair o arquivo zip
            with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                zip_ref.extractall(diretorio_destino)

            print("Arquivo extraído com sucesso!")
            os.remove('./storage/adblock.zip')

        else:
            result = "Não foi possível baixar o arquivo. Status Code: " + \
                str(response.status_code)

    # RANGE_NAME = 'contas!A:D'
    #
    # SCOPES = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

    def vpn_avast():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Avast', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop("com.avast.android.vpn")
            d.app_start("com.avast.android.vpn", ".app.wizard.WizardActivity")
            time.sleep(10)
        except Exception as e:
            print(e)
        abc = False

    def nenhuma_vpn():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.facebook.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        time.sleep(10)

    def vpn_hotspotshield():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HotspotShield',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('hotspotshield.android.vpn')
            d.app_start('hotspotshield.android.vpn')
        except Exception as e:
            print(e)
        d(resourceId='hotspotshield.android.vpn:id/tryAgainButton').click()
        time.sleep(5)
        d(resourceId='hotspotshield.android.vpn:id/btnVpnConnect').click()

        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_pia():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da PiaVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.privateinternetaccess.android')
            d.app_start('com.privateinternetaccess.android')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()
        time.sleep(3)
        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()

        abc = False

    def vpn_express():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da ExpressVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.expressvpn.vpn')
            d.app_start('com.expressvpn.vpn')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.expressvpn.vpn:id/obiButton').click()
        time.sleep(3)
        d(resourceId='com.expressvpn.vpn:id/obiButton').click()

        abc = False

    def vpn_nord():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da NordVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.nordvpn.android')
            time.sleep(5)
            d.app_start('com.nordvpn.android', use_monkey=True)
        except:
            pass
        time.sleep(10)
        time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_surf():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('com.surfshark.vpnclient.android')
            d.app_start('com.surfshark.vpnclient.android')
        except:
            pass
        time.sleep(15)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_better():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da BetterNet', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        try:
            d.app_stop('com.freevpnintouch')
            d.app_start('com.freevpnintouch')
        except:
            pass
        time.sleep(10)
        dialog = d(resourceId='com.freevpnintouch:id/dialogCtaPositive')
        connect = d(
            resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
        if dialog.exists:
            d(resourceId='com.freevpnintouch:id/dialogCtaPositive').click()
            time.sleep(3)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            # time.sleep(5)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
        while connect == 'CONNECT':
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            time.sleep(4)
            connect = d(
                resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            # WebDriverWait(driver, 20).until(
            # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        ip = '127.0.0.1:' + porta

        output = subprocess.check_output(
            ['adb', '-s', ip, 'shell', 'ifconfig'])

        # Verifica se a conexão VPN está ativa
        if not "tun0" in str(output):
            window['output'].print("Não conectado na BetterNet.")
            window.Refresh()
            try:
                connect = d(
                    resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
                d.app_stop('com.freevpnintouch')
                d.app_start('com.freevpnintouch')
                while connect == 'CONNECT':
                    d(resourceId='com.freevpnintouch:id/buttonConnect').click()
                    time.sleep(4)
                    connect = d(
                        resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            except:
                pass
        abc = False

    def vpn_cyberghost():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da CyberGhost', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('de.mobileconcepts.cyberghost')
            d.app_start('de.mobileconcepts.cyberghost')
        except:
            pass
        # time.sleep(3)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        rate = d(resourceId='de.mobileconcepts.cyberghost:id/rate_me_text')
        if rate.exists:
            d(resourceId='android:id/button2').click()
        time.sleep(2)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        abc = False

    def vpn_tunnelbear():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.tunnelbear.android')
            d.app_start("com.tunnelbear.android")
            while True:
                output = subprocess.check_output(
                    ['adb', '-s', porta, 'shell', 'ifconfig'])
                # print(str(output))
                if "tun0" in str(output):
                    print('Conectada')
                    break
                elif not "tun0" in str(output):
                    print('Reconectando')
                    try:
                        d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                        time.sleep(10)
                    except:
                        pass
        except Exception as e:
            print(e)
            pass

    def vpn_avg():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da AVG', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.avg.android.vpn')
            d.app_start("com.avg.android.vpn",
                        "com.avast.android.vpn.app.wizard.WizardActivity")
            regiao_vpn = d(
                resourceId='com.avg.android.vpn:id/location_title').get_text()

        except Exception as e:
            print(e)
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #               stderr=subprocess.DEVNULL, check=True, shell=True)

        time.sleep(30)

    def vpn_windscribe():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Windscribe', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)
            d.app_stop("com.windscribe.vpn")
            d.app_start("com.windscribe.vpn")
        except:
            pass
        d(resourceId='com.windscribe.vpn:id/on_off_button').click()
        time.sleep(10)
        primeiro = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_name').get_text()
        segundo = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_nick_name').get_text()
        regiao_vpn = primeiro + ' ' + segundo

    def vpn_hma():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HMA', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)

            d.app_stop("com.hidemyass.hidemyassprovpn")
            time.sleep(3)
            d.app_start('com.hidemyass.hidemyassprovpn',
                        'com.avast.android.vpn.activity.HmaOnboardingActivity')
        except:
            pass
        time.sleep(10)

    def gerar_id():
        chars = string.ascii_lowercase + string.digits
        android_id = ''.join(random.choice(chars) for i in range(16))
        return android_id

    options = Options()
    prefs = {"profile.managed_default_content_settings.images": 2}
    options.page_load_strategy = 'none'
    options.add_experimental_option("prefs", prefs)

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    window.Refresh()

    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global transition_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass
    gerar_id()
    android_id = gerar_id()
    subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    time.sleep(2)
    # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True, stdout=subprocess.DEVNULL,
    #               stderr=subprocess.DEVNULL)

    try:
        subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
    except Exception as e:
        pass

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Efetuando troca de IP.')
    window.Refresh()
    try:
        conteudo = config['vpn']
        if conteudo == "AVG":
            vpn_avg()
        elif conteudo == "SurfShark":
            vpn_surf()
        elif conteudo == "Nenhuma":
            nenhuma_vpn()
        elif conteudo == "Avast":
            vpn_avast()
        elif conteudo == "ExpressVPN":
            vpn_express()

        elif conteudo == "PiaVPN":
            vpn_pia()
        elif conteudo == "TunnelBear":
            vpn_tunnelbear()
        elif conteudo == "BetterNet":
            vpn_better()
        elif conteudo == "CyberGhost":
            vpn_cyberghost()
        elif conteudo == "NordVPN":
            vpn_nord()
        elif conteudo == "HotspotShield":
            vpn_hotspotshield()
        elif conteudo == "WindscribeVPN":
            vpn_windscribe()
        elif conteudo == "HmaVPN":
            vpn_hma()
        else:
            window['output'].print(
                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
            window.Refresh()

    except Exception as e:
        print(e)
        pass

    window.Refresh()

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.\n')
    window.Refresh()
    try:
        scope = ["https://spreadsheets.google.com/feeds",
                 "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name(
            'credentials.json', scope)
        client = gspread.authorize(creds)

        spreadsheet_id = config['spreadsheet']
        sheet_name = 'contas'
        # Insert user, password, and timestamp into first empty row
        sheet = client.open_by_key(spreadsheet_id).worksheet(sheet_name)
        values = sheet.col_values(1)

        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
        rows = sheet.get_all_values()

        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
        regex = re.compile(r'\S+\s\S+')
        sheet_name = config['2nr']
        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
        num_rows = sum(1 for row in rows if regex.match(row[0]))
        window['total'].update(num_rows)
    except Exception as e:
        print(e)
    d.implicitly_wait(30.0)
    d.set_fastinput_ime(True)
    if not os.path.exists('./erros'):
        os.makedirs('./erros')
    codigo_não_recebido_seguidos = 0
    while parar is False:
        senha = gerar_senha(12)
        if parar is True:
            print('Parando Thread')
            try:
                chrome.close()
            except:
                pass
            try:
                chrome.quit()
            except:
                pass
            break
        # if codigo_não_recebido_seguidos == 3:
        #    #tempo_aleatorio = random.randint(10, 40)
        #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] 3 códigos não recebidos seguidos.')
        #    window.Refresh()
        #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando 1 hora para voltar novamente.')
        #    window.Refresh()
        #    time.sleep(3600)
        #    codigo_não_recebido_seguidos = 0
        try:
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)

            except:
                pass
            try:
                subprocess.run(
                    f'adb -s {porta} shell pm grant com.instagram.android android.permission.READ_CONTACTS',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            gerar_id()
            android_id = gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            window['output'].print(linha_ret)
            window.Refresh()
            try:
                subprocess.run(
                    f'adb -s {porta} shell pm grant com.instagram.android android.permission.READ_CONTACTS',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                subprocess.run(
                    f'adb -s {porta} shell pm grant com.instagram.android android.permission.CAMERA',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                subprocess.run(
                    f'adb -s {porta} shell pm grant com.instagram.android android.permission.RECORD_AUDIO',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                try:
                    subprocess.run(
                        f'adb -s {porta} shell pm grant com.instagram.android android.permission.ACCESS_NOTIFICATION_POLICY',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                except:
                    pass

                subprocess.run(
                    f'adb -s {porta} shell pm grant com.instagram.android android.permission.POST_NOTIFICATIONS',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            try:
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo instagram.')
                window.Refresh()
                d.app_start('com.instagram.android')
                try:
                    d.xpath(
                        '//android.widget.Button[@content-desc="Criar nova conta"]').click(timeout=120)
                except:
                    conteudo = config['vpn']
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Pagina Estática.')
                    window.Refresh()
                    if conteudo == "AVG":
                        vpn_avg()
                    elif conteudo == "SurfShark":
                        vpn_surf()
                    elif conteudo == "Nenhuma":
                        nenhuma_vpn()
                    elif conteudo == "Avast":
                        vpn_avast()
                    elif conteudo == "ExpressVPN":
                        vpn_express()
                    elif conteudo == "PiaVPN":
                        vpn_pia()
                    elif conteudo == "TunnelBear":
                        vpn_tunnelbear()
                    elif conteudo == "BetterNet":
                        vpn_better()
                    elif conteudo == "CyberGhost":
                        vpn_cyberghost()
                    elif conteudo == "NordVPN":
                        vpn_nord()
                    elif conteudo == "HotspotShield":
                        vpn_hotspotshield()
                    elif conteudo == "WindscribeVPN":
                        vpn_windscribe()
                    elif conteudo == "HmaVPN":
                        vpn_hma()
                    else:
                        window['output'].print(
                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                        window.Refresh()
                    raise Exception('skip')
                # time.sleep(6)
                # novo_layout = d.xpath('//android.view.View[@content-desc="Qual é o seu nome?"]')
                # if len(novo_layout) == 1:
                #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Layout novo encontrado, reiniciando app.')
                #    window.Refresh()
                #    raise Exception("skip.")

                ######################################################################
                lista_user = random.choices(range(0, 9), k=2)
                lista_letras = random.choices(letras, k=1)

                with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                    nomes = nomes_arquivo.readlines()

                with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                    sobrenomes = sobrenomes_arquivo.readlines()

                nomea = fake.first_name_male().replace(" ", "")
                nome = unicodedata.normalize('NFKD', nomea).encode(
                    'ASCII', 'ignore').decode('ASCII')
                sobrenomea = fake.last_name().replace(" ", "").lower()
                sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                    'ASCII', 'ignore').decode('ASCII')
                nome_completo = nome + ' ' + sobrenome
                nome_completo_s = nome + sobrenome
                numeros_concatenados = ''.join(
                    str(numero) for numero in lista_user)
                user_completo1 = nome_completo_s + '' + \
                    str(numeros_concatenados) + ''.join(lista_letras)

                user_completo = random.randint(1, len(user_completo1))
                # Insira o ponto no índice aleatório
                string_with_dot = user_completo1[:user_completo] + \
                    '_' + user_completo1[user_completo:]
                user_completo_antigo = string_with_dot.lower()

                escolha = random.choice(["_", "."])
                user_completo = nome + escolha + sobrenome + \
                    str(numeros_concatenados) + ''.join(lista_letras)
                ######################################################################
                time.sleep(10)
                layout1 = d.xpath(
                    '//android.view.View[@content-desc="Crie um nome de usuário"]')
                layout2 = d(resourceId='android:id/button2')
                layout3 = d.xpath(
                    '//android.view.View[@content-desc="Qual é o número do seu celular?"]')
                layout3v2 = d.xpath(
                    '//android.view.View[@content-desc="Qual é seu número de celular ou email?"]')
                layout4 = d.xpath(
                    '//android.view.View[@content-desc="Crie uma senha"]')
                if layout1.exists:
                    layout_usado = 'layout1'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout1 novo encontrado.')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(4)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=20.0)
                    except Exception as e:
                        print(e)
                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)

                elif layout2.exists:
                    layout_usado = 'layout2'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout2 novo encontrado.')
                    window.Refresh()
                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(4)
                    d.xpath(
                        '//android.widget.Button[@content-desc="Avançar"]/android.view.ViewGroup').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.Button[@content-desc="Avançar"]/android.view.ViewGroup').click()
                    time.sleep(5)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=10.0)
                    except Exception as e:
                        pass

                elif layout3.exists or layout3v2.exists:
                    layout_usado = 'layout3'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout3 novo encontrado.')
                    window.Refresh()
                    try:
                        from selenium import webdriver
                        from selenium.webdriver.common.by import By
                        from selenium.webdriver.chrome.service import Service
                        try:
                            import undetected_chromedriver as uc
                        except:
                            subprocess.run(
                                ['venv/scripts/activate.bat'], shell=True)
                            subprocess.run(
                                ['pip', 'install', 'undetected_chromedriver'])
                            import undetected_chromedriver as uc
                        import time
                        from selenium.webdriver.support.ui import WebDriverWait
                        from selenium.webdriver.support import expected_conditions as EC
                        url = 'https://temporary-phone-number.com/'
                        chromedriver_path = '.\\storage\\driver\\chromedriver.exe'
                        chrome_options = uc.ChromeOptions()
                        # chrome_options.add_argument("--blink-settings=imagesEnabled=false")
                        chrome_options.add_argument("--disable-gpu")
                        chrome_options.add_argument('--ignore-ssl-errors=yes')
                        chrome_options.add_argument(
                            '--ignore-certificate-errors')
                        chrome_options.add_argument("--no-sandbox")
                        chrome_options.binary_location = '.\\storage\\driver\\chrome.exe'
                        # chrome_options.add_extension('.\\storage\\adblock.crx')
                        chrome_options.add_argument(
                            f"--load-extension={caminho_atual}\\storage\\adblock\\")
                        chrome_options.page_load_strategy = 'eager'
                        # Configurando o Selenium para usar o Chrome Driver local
                        service = Service(executable_path=chromedriver_path)
                        chrome = uc.Chrome(
                            service=service, headless=True, version_main=116, options=chrome_options)
                        chrome.get(url)
                        chrome.set_window_size(1920, 1080)
                        chrome.execute_script("document.body.style.zoom='50%'")
                        lista = ['2', '3', '4', '5', '6', '7', '8', '9', '11', '12', '13', '14', '15', '16', '17',
                                 '18' '20']
                        numero_escolhido = random.choice(lista)
                        chrome.execute_script("window.scrollBy(0, 10);")
                        try:
                            teste = WebDriverWait(chrome, 5).until(EC.element_to_be_clickable(
                                (By.XPATH, f'/html/body/div[*]/div/section[*]/div[*]/div[{numero_escolhido}]/a')))
                            # /html/body/div[2]/div/section[2]/div[1]/div[4]/a
                        except:
                            chrome.refresh()
                            teste = WebDriverWait(chrome, 5).until(EC.element_to_be_clickable(
                                (By.XPATH, f'/html/body/div[*]/div/section[*]/div[*]/div[{numero_escolhido}]/a')))

                        chrome.execute_script("window.scrollBy(0, 10);")
                        chrome.execute_script("window.scrollBy(0, 2);")
                        chrome.execute_script("arguments[0].click();", teste)

                        chrome.execute_script("document.body.style.zoom='50%'")

                        num = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                            (By.CLASS_NAME, 'btn1'))).text
                        time.sleep(5)
                        try:
                            botao_fechar = WebDriverWait(chrome, 5).until(
                                EC.presence_of_element_located(
                                    (By.CSS_SELECTOR, "div.fc-ab-root button.fc-close"))
                            )
                            chrome.execute_script(
                                "arguments[0].click();", botao_fechar)
                        except:
                            pass
                        print(num)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número: {num}')
                        window.Refresh()
                    except Exception as e:
                        print(e)

                        if not str(e) == '':
                            traceback.print_exc()
                        raise Exception('erro no navegador')

                        pass
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        try:
                            chrome.close()
                        except:
                            pass
                        try:
                            chrome.quit()
                        except:
                            pass
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    time.sleep(3)
                    selecionar_sms = d.xpath(
                        '//android.view.View[@content-desc="Enviar código por SMS"]')
                    if selecionar_sms.exists:
                        selecionar_sms.click()
                        time.sleep(1)
                        d.xpath(
                            '//android.view.View[@content-desc="Enviar código"]').click()

                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    encontrado = False
                    tentativa = 0
                    try:
                        while not encontrado and tentativa < 6:

                            chrome.execute_script(
                                "document.body.style.zoom='50%'")

                            try:
                                botao_fechar = WebDriverWait(chrome, 5).until(
                                    EC.presence_of_element_located(
                                        (By.CSS_SELECTOR, "div.fc-ab-root button.fc-close"))
                                )
                                chrome.execute_script(
                                    "arguments[0].click();", botao_fechar)
                            except:
                                pass
                            elemento = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                                (By.CLASS_NAME, 'direct-chat-text'))).text

                            time_second = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                                (By.CLASS_NAME, 'timeago.direct-chat-timestamp.pull-left'))).text

                            numeros = ''
                            if 'Instagram' in elemento and (
                                    'seconds' in time_second or '1 min ago' in time_second or '2 mins ago' in time_second):
                                encontrado = True
                                match = re.search(r'\d+\s*\d+\s*\d+\s*\d+\s*\d+\s*\d+',
                                                  elemento)  # Extrai seis grupos de dígitos, permitindo espaços entre eles
                                if match:
                                    numeros = ''.join(match.group().split())
                            else:
                                # Clique no outro elemento
                                tentativa = tentativa + 1
                                chrome.refresh()
                                time.sleep(5)
                                chrome.execute_script(
                                    "document.body.style.zoom='50%'")
                                time.sleep(3)
                    except Exception as e:
                        print(e)
                        print('erro')
                        chrome.quit()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Algum erro')
                        window.Refresh()
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                            break
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception("Algum erro")
                        try:
                            chrome.close()
                        except:
                            pass
                        try:
                            chrome.quit()
                        except:
                            pass
                    if tentativa == 6:
                        chrome.quit()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Codigo não recebido.')
                        window.Refresh()
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                            break
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception("Codigo não recebido.")
                    codigo = numeros
                    print(numeros)
                    try:
                        chrome.close()
                    except:
                        pass
                    try:
                        chrome.quit()
                    except:
                        pass
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=10.0)
                    except Exception as e:
                        print(e)
                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        nome_completo)
                    time.sleep(1)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nome escolhido: {nome_completo}')
                    window.Refresh()
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                    window.Refresh()
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        '')
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(3)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(3)

                elif layout4.exists:
                    layout_usado = 'layout4'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout4 novo encontrado.')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.Button[@content-desc="Avançar"]/android.view.ViewGroup').click()
                    time.sleep(4)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=20.0)
                    except Exception as e:
                        print(e)
                    time.sleep(4)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                    window.Refresh()
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        '')
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(3)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)

                else:
                    layout_usado = 'layout_normal'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout normal encontrado.')
                    window.Refresh()
                    # raise Exception('Manutenção.')
                    cancel = d(resourceId='com.google.android.gms:id/cancel')
                    if cancel.exists(timeout=10):
                        d(resourceId='com.google.android.gms:id/cancel').click()
                    senha = gerar_senha(12)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        nome_completo)
                    time.sleep(1)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nome escolhido: {nome_completo}')
                    window.Refresh()
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=20.0)
                    except Exception as e:
                        print(e)
                    # salvar_senha = d.xpath('//android.view.View[@content-desc="Agora não"]')
                    # if salvar_senha.exists:
                    #    d.xpath('//android.view.View[@content-desc="Agora não"]').click()

                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Alterar nome de usuário"]').click(timeout=5)
                    except:
                        pass
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                    window.Refresh()
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        '')
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(3)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(3)
                    try:
                        from selenium import webdriver
                        from selenium.webdriver.common.by import By
                        from selenium.webdriver.chrome.service import Service
                        try:
                            import undetected_chromedriver as uc
                        except:
                            subprocess.run(
                                ['venv/scripts/activate.bat'], shell=True)
                            subprocess.run(
                                ['pip', 'install', 'undetected_chromedriver'])
                            import undetected_chromedriver as uc
                        import time
                        from selenium.webdriver.support.ui import WebDriverWait
                        from selenium.webdriver.support import expected_conditions as EC
                        url = 'https://temporary-phone-number.com/'
                        chromedriver_path = '.\\storage\\driver\\chromedriver.exe'
                        chrome_options = uc.ChromeOptions()
                        # chrome_options.add_argument("--blink-settings=imagesEnabled=false")
                        chrome_options.add_argument("--disable-gpu")
                        chrome_options.add_argument('--ignore-ssl-errors=yes')
                        chrome_options.add_argument(
                            '--ignore-certificate-errors')
                        chrome_options.add_argument("--no-sandbox")
                        chrome_options.binary_location = '.\\storage\\driver\\chrome.exe'
                        # chrome_options.add_extension('.\\storage\\adblock.crx')
                        chrome_options.add_argument(
                            f"--load-extension={caminho_atual}\\storage\\adblock\\")
                        chrome_options.page_load_strategy = 'eager'
                        # Configurando o Selenium para usar o Chrome Driver local
                        service = Service(executable_path=chromedriver_path)
                        chrome = uc.Chrome(
                            service=service, headless=True, version_main=116, options=chrome_options)
                        chrome.get(url)
                        chrome.set_window_size(1920, 1080)
                        chrome.execute_script("document.body.style.zoom='50%'")
                        lista = ['2', '3', '4', '5', '6', '7', '8', '9', '11', '12', '13', '14', '15', '16', '17',
                                 '18' '20']
                        numero_escolhido = random.choice(lista)
                        chrome.execute_script("window.scrollBy(0, 10);")
                        try:
                            teste = WebDriverWait(chrome, 5).until(EC.element_to_be_clickable(
                                (By.XPATH, f'/html/body/div[*]/div/section[*]/div[*]/div[{numero_escolhido}]/a')))
                            # /html/body/div[2]/div/section[2]/div[1]/div[4]/a
                        except:
                            chrome.refresh()
                            teste = WebDriverWait(chrome, 5).until(EC.element_to_be_clickable(
                                (By.XPATH, f'/html/body/div[*]/div/section[*]/div[*]/div[{numero_escolhido}]/a')))

                        chrome.execute_script("window.scrollBy(0, 10);")
                        chrome.execute_script("window.scrollBy(0, 2);")
                        chrome.execute_script("arguments[0].click();", teste)

                        chrome.execute_script("document.body.style.zoom='50%'")

                        num = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                            (By.CLASS_NAME, 'btn1'))).text
                        time.sleep(5)
                        try:
                            botao_fechar = WebDriverWait(chrome, 5).until(
                                EC.presence_of_element_located(
                                    (By.CSS_SELECTOR, "div.fc-ab-root button.fc-close"))
                            )
                            chrome.execute_script(
                                "arguments[0].click();", botao_fechar)
                        except:
                            pass
                        print(num)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número: {num}')
                        window.Refresh()
                    except Exception as e:
                        print(e)

                        if not str(e) == '':
                            traceback.print_exc()
                        raise Exception('erro no navegador')
                        pass
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        try:
                            chrome.close()
                        except:
                            pass
                        try:
                            chrome.quit()
                        except:
                            pass
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    time.sleep(3)
                    selecionar_sms = d.xpath(
                        '//android.view.View[@content-desc="Enviar código por SMS"]')
                    if selecionar_sms.exists:
                        selecionar_sms.click()
                        time.sleep(1)
                        d.xpath(
                            '//android.view.View[@content-desc="Enviar código"]').click()

                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    encontrado = False
                    tentativa = 0
                    try:
                        while not encontrado and tentativa < 6:

                            chrome.execute_script(
                                "document.body.style.zoom='50%'")

                            try:
                                botao_fechar = WebDriverWait(chrome, 5).until(
                                    EC.presence_of_element_located(
                                        (By.CSS_SELECTOR, "div.fc-ab-root button.fc-close"))
                                )
                                chrome.execute_script(
                                    "arguments[0].click();", botao_fechar)
                            except:
                                pass
                            elemento = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                                (By.CLASS_NAME, 'direct-chat-text'))).text

                            time_second = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                                (By.CLASS_NAME, 'timeago.direct-chat-timestamp.pull-left'))).text

                            numeros = ''
                            if 'Instagram' in elemento and (
                                    'seconds' in time_second or '1 min ago' in time_second or '2 mins ago' in time_second):
                                encontrado = True
                                match = re.search(r'\d+\s*\d+\s*\d+\s*\d+\s*\d+\s*\d+',
                                                  elemento)  # Extrai seis grupos de dígitos, permitindo espaços entre eles
                                if match:
                                    numeros = ''.join(match.group().split())
                            else:
                                # Clique no outro elemento
                                tentativa = tentativa + 1
                                chrome.refresh()
                                time.sleep(5)
                                chrome.execute_script(
                                    "document.body.style.zoom='50%'")
                                time.sleep(3)
                    except Exception as e:
                        print(e)
                        print('erro')
                        chrome.quit()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Algum erro')
                        window.Refresh()
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                            break
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception("Algum erro")
                        try:
                            chrome.close()
                        except:
                            pass
                        try:
                            chrome.quit()
                        except:
                            pass
                    if tentativa == 6:
                        chrome.quit()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Codigo não recebido.')
                        window.Refresh()
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                            break
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception("Codigo não recebido.")
                    codigo = numeros
                    print(numeros)
                    try:
                        chrome.close()
                    except:
                        pass
                    try:
                        chrome.quit()
                    except:
                        pass
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)

                codigo_invalido = d.xpath(
                    '//android.view.View[@content-desc="Não recebi o código"]')
                d.xpath(
                    '//android.view.View[@content-desc="Concordo"]').click()
                time.sleep(5)
                errodetec = d.xpath(
                    '//android.view.View[@content-desc="Concordo"]')
                if errodetec.exists:
                    d.xpath(
                        '//android.view.View[@content-desc="Concordo"]').click()
                    time.sleep(5)

                errodetec = d.xpath(
                    '//android.view.View[@content-desc="Concordo"]')
                if errodetec.exists:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Instagram não deixou avançar.')
                    window.Refresh()

                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
                window.Refresh()
                time.sleep(45)
                verificar = d.xpath(
                    '//android.view.View[@content-desc="Adicionar foto"]')
                verificar2 = d.xpath(
                    '//android.view.View[@content-desc="Aceite os termos e políticas do Instagram"]')
                email = f"{num} - temporary-phone-number.com"
                try:
                    if verificar.exists:
                        try:
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                   text_color=('lime'))
                            window.Refresh()
                            seguido = False
                            contagem += 1
                            window['criadas'].update(contagem)
                            window.Refresh()
                            now = datetime.now()
                            now_brasilia = tz.localize(now)
                            timestamp = now_brasilia.strftime(
                                "%d/%m/%Y %H:%M:%S")
                            try:
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                          conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            except Exception as e:
                                print(e)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                tempo_aleatorio = random.randint(10, 40)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                time.sleep(tempo_aleatorio)
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                          conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            window['total'].update(num_rows)
                            random_number = random.random()

                            # Definir a chance desejada (10%)
                            chance = 0.2

                            # Verificar se o número aleatório está abaixo da chance
                            if random_number < chance and not user_mysql == "wn3":
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                    funcionamento, scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                sheet_name = 'relatorio_geral'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                          conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)
                        except Exception as e:
                            print(e)
                            pass
                        window.Refresh()
                        arquivo = open(
                            'configuracoes/contas/contas_criadas.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(user_completo + ' ' + senha + "\n")
                        arquivo = open(
                            'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(
                            email + '\n' + user_completo + '\n' + senha + "\n\n")
                        try:
                            d.xpath(
                                '//android.view.View[@content-desc="Pular"]').click()
                            time.sleep(2)
                            d(resourceId='com.instagram.android:id/skip_button').click()
                            time.sleep(2)
                            d(resourceId='com.instagram.android:id/negative_button').click()
                            time.sleep(2)
                            d(resourceId='com.instagram.android:id/skip_button').click()
                            skip_button = d(
                                resourceId='com.instagram.android:id/skip_button')
                            time.sleep(2)
                            if skip_button.exists:
                                d(resourceId='com.instagram.android:id/skip_button').click()
                            time.sleep(4)
                            try:
                                element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                target_text = "Seguir"

                                # Encontre todos os elementos que correspondem ao ID fornecido
                                elements = d(resourceId=element_id)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Seguindo sugeridos...')
                                window.Refresh()
                                time.sleep(5)
                                for element in elements:
                                    if element.get_text() == target_text:
                                        element.click()
                                        time.sleep(1)
                                try:
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                except:
                                    pass
                            except Exception as e:
                                print(e)
                                time.sleep(2)
                                element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                target_text = "Seguir"

                                # Encontre todos os elementos que correspondem ao ID fornecido
                                elements = d(resourceId=element_id)
                                # window['output'].print("Seguindo sugeridos...")
                                window.Refresh()
                                for element in elements:
                                    if element.get_text() == target_text:
                                        element.click()
                                        time.sleep(1)
                                d.xpath(
                                    '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                            time.sleep(1)
                            try:
                                d(resourceId='com.instagram.android:id/button_text').click(timeout=10)
                            except:
                                try:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                except:
                                    time.sleep(2)
                                    try:
                                        d(resourceId='com.instagram.android:id/tab_avatar').click()
                                    except:
                                        d.app_stop("com.instagram.android")
                                        time.sleep(1)
                                        d.app_start("com.instagram.android")
                                        time.sleep(30)
                                        try:
                                            pagina_login = d.xpath(
                                                '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                            if pagina_login.exists:
                                                pagina_login.click()
                                                time.sleep(5)
                                                d.xpath(
                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                                    senha)
                                                pagina_login.click()
                                                time.sleep(3)
                                                d.xpath(
                                                    '//android.view.View[@content-desc="Agora não"]').click()
                                            else:
                                                d(resourceId='com.instagram.android:id/profile_tab').click()
                                        except:
                                            time.sleep(2)
                                            pagina_login = d.xpath(
                                                '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                            if pagina_login.exists:
                                                pagina_login.click()
                                                time.sleep(5)
                                                d.xpath(
                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                                    senha)
                                                pagina_login.click()
                                                time.sleep(3)
                                                d.xpath(
                                                    '//android.view.View[@content-desc="Agora não"]').click()
                                            else:
                                                d(resourceId='com.instagram.android:id/tab_avatar').click()

                            sms = False
                        except Exception as e:
                            d.app_stop("com.instagram.android")
                            time.sleep(1)
                            d.app_start("com.instagram.android")
                            time.sleep(40)
                            try:
                                pagina_login = d.xpath(
                                    '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                if pagina_login.exists:
                                    pagina_login.click()
                                    time.sleep(5)
                                    d.xpath(
                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                        senha)
                                    pagina_login.click()
                                else:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                            except:
                                time.sleep(2)
                                pagina_login = d.xpath(
                                    '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                if pagina_login.exists:
                                    pagina_login.click()
                                    time.sleep(5)
                                    d.xpath(
                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                        senha)
                                    pagina_login.click()
                                else:
                                    d(resourceId='com.instagram.android:id/tab_avatar').click()
                    elif verificar2.exists:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Verificando novamente...')
                        window.Refresh()
                        d.app_stop("com.instagram.android")
                        time.sleep(1)
                        d.app_start("com.instagram.android")

                        if d.xpath('//android.view.View[@content-desc="Esqueceu a senha?"]').exists(timeout=60):
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                user_completo)
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                senha)
                            d.xpath(
                                '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup').click()
                            d.xpath(
                                '//android.view.View[@content-desc="Agora não"]').click()

                        verificar3 = d.xpath(
                            '//android.widget.FrameLayout[@content-desc="Perfil"]/android.view.ViewGroup')
                        time.sleep(40)
                        if verificar3.exists:
                            try:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                                window.Refresh()
                                contagem = contagem + 1
                                sms = False
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")
                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                              conteudo + ' - ' + app]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                              conteudo + ' - ' + app]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                window['total'].update(num_rows)
                                random_number = random.random()

                                # Definir a chance desejada (10%)
                                chance = 0.2

                                # Verificar se o número aleatório está abaixo da chance
                                if random_number < chance and not user_mysql == "wn3":
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                        funcionamento, scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                    sheet_name = 'relatorio_geral'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)
                            except Exception as e:
                                print(e)
                        else:

                            try:
                                conteudo = config['vpn']

                                # Executa a função correspondente ao conteúdo do arquivo
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                            except Exception as e:
                                raise Exception('skip')
                                sms = True
                                continue
                    else:
                        verificar = d(
                            resourceId='com.instagram.android:id/profile_tab')
                        if verificar.exists:
                            try:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                                window.Refresh()
                                seguido = False
                                contagem += 1
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")
                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                window['total'].update(num_rows)
                                random_number = random.random()

                                # Definir a chance desejada (10%)
                                chance = 0.2

                                # Verificar se o número aleatório está abaixo da chance
                                if random_number < chance and not user_mysql == "wn3":
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                        funcionamento, scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                    sheet_name = 'relatorio_geral'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)
                            except Exception as e:
                                print(e)
                                pass
                            window.Refresh()
                            arquivo = open(
                                'configuracoes/contas/contas_criadas.txt', 'a')
                            # Escreva mais conteúdo no arquivo
                            arquivo.write(user_completo + ' ' + senha + "\n")
                            arquivo = open(
                                'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                            # Escreva mais conteúdo no arquivo
                            arquivo.write(
                                email + '\n' + user_completo + '\n' + senha + "\n\n")
                            try:
                                d.xpath(
                                    '//android.view.View[@content-desc="Pular"]').click()
                                time.sleep(2)
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(2)
                                d(resourceId='com.instagram.android:id/negative_button').click()
                                time.sleep(2)
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(4)
                                try:
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Seguindo sugeridos...')
                                    window.Refresh()
                                    time.sleep(5)
                                    for element in elements:
                                        if element.get_text() == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                except Exception as e:
                                    print(e)
                                    time.sleep(2)
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window['output'].print(
                                        "Seguindo sugeridos...")
                                    window.Refresh()
                                    for element in elements:
                                        if element.get_text() == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                time.sleep(1)
                                try:
                                    d(resourceId='com.instagram.android:id/button_text').click()
                                except:
                                    pass
                                time.sleep(3)
                                try:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                except:
                                    time.sleep(2)
                                    d(resourceId='com.instagram.android:id/tab_avatar').click()
                                sms = False
                            except Exception as e:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Reabrindo Instagram.')
                                window.Refresh()
                                d.app_stop('com.instagram.android')
                                d.app_start('com.instagram.android')
                                time.sleep(20)
                                pass
                        else:
                            try:
                                chrome.close()
                            except:
                                pass
                            try:
                                chrome.quit()
                            except:
                                pass
                            try:
                                conteudo = config['vpn']

                                # Executa a função correspondente ao conteúdo do arquivo
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                            except Exception as e:
                                raise Exception('skip')
                                continue
                except Exception as e:
                    print(e)
                    try:
                        chrome.close()
                    except:
                        pass
                    try:
                        chrome.quit()
                    except:
                        pass
                    if conteudo == "AVG":
                        vpn_avg()
                    elif conteudo == "SurfShark":
                        vpn_surf()
                    elif conteudo == "Nenhuma":
                        nenhuma_vpn()
                    elif conteudo == "Avast":
                        vpn_avast()
                    elif conteudo == "ExpressVPN":
                        vpn_express()
                    elif conteudo == "PiaVPN":
                        vpn_pia()
                    elif conteudo == "TunnelBear":
                        vpn_tunnelbear()
                    elif conteudo == "BetterNet":
                        vpn_better()
                    elif conteudo == "CyberGhost":
                        vpn_cyberghost()
                    elif conteudo == "NordVPN":
                        vpn_nord()
                    elif conteudo == "HotspotShield":
                        vpn_hotspotshield()
                    elif conteudo == "WindscribeVPN":
                        vpn_windscribe()
                    elif conteudo == "HmaVPN":
                        vpn_hma()
                    else:
                        window['output'].print(
                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                        window.Refresh()
                    sms = True
                    raise Exception('skip')
                while sms is False:
                    senha = gerar_senha(12)
                    try:
                        time.sleep(3)
                        try:
                            d(resourceId='com.instagram.android:id/profile_tab').click(timeout=120)
                        except:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu algum erro nesta conta.')
                            window.Refresh()
                            raise Exception('Erro na conta')
                        window['output'].print(linha_ret)
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Criação de outro perfil.')
                        window.Refresh()
                        seguido = False
                        # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True)
                        # Clicar no botão de perfil

                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/action_bar_title_chevron').click()
                        time.sleep(2)
                        # Clicar em perfis
                        try:
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout[2]/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.ListView/android.widget.LinearLayout[last()]/android.widget.FrameLayout/android.widget.ImageView').click()
                        except Exception as e:
                            print(e)
                            print('Erro aq')
                            time.sleep(200)
                        # Clicar em adicionar conta
                        d.xpath(
                            '//android.widget.Button[@content-desc="Criar nova conta"]').click()

                        time.sleep(3)
                        # Gerar nome de usuário, digitar no campo e clicar em avançae
                        lista_user = random.choices(range(0, 9), k=2)
                        lista_letras = random.choices(letras, k=1)

                        with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                            nomes = nomes_arquivo.readlines()

                        with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                            sobrenomes = sobrenomes_arquivo.readlines()

                        nomea = fake.first_name_male().replace(" ", "")
                        nome = unicodedata.normalize('NFKD', nomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        sobrenomea = fake.last_name().replace(" ", "").lower()
                        sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        nome_completo = nome + sobrenome
                        numeros_concatenados = ''.join(
                            str(numero) for numero in lista_user)
                        user_completo1 = nome_completo + '' + \
                            str(numeros_concatenados) + ''.join(lista_letras)

                        user_completo = random.randint(1, len(user_completo1))
                        # Insira o ponto no índice aleatório
                        string_with_dot = user_completo1[:user_completo] + \
                            '_' + user_completo1[user_completo:]
                        user_completo_antigo = string_with_dot.lower()

                        escolha = random.choice(["_", "."])
                        user_completo = nome + escolha + sobrenome + \
                            str(numeros_concatenados) + ''.join(lista_letras)
                        print(user_completo)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: ' + user_completo)
                        window.Refresh()
                        d(resourceId='com.instagram.android:id/username').set_text(
                            user_completo)
                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/button_text').click()
                        # Digitar senha e avançar
                        time.sleep(3)
                        try:
                            d(resourceId='com.instagram.android:id/password').set_text(
                                senha)
                        except:
                            try:
                                conteudo = config['vpn']
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()

                            except Exception as e:
                                raise Exception('skip')
                        d(resourceId='com.instagram.android:id/button_text').click()
                        # Clicar em concluir cadastro
                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/button_text').click()

                        time.sleep(4)
                        feedback = d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.View')
                        if feedback.exists:
                            sms = True

                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
                        window.Refresh()
                        # WebDriverWait(driver, 40).until(EC.visibility_of_element_located)(((By.XPATH,
                        #                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')

                        verificar = d(
                            resourceId='com.instagram.android:id/connect_text')
                        if verificar.exists(timeout=60):
                            time.sleep(20)
                            verificar = d(
                                resourceId='com.instagram.android:id/connect_text')
                        if verificar.exists:
                            try:
                                conteudo = config['vpn']
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                                window.Refresh()
                                contagem += 1
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")

                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))

                                window['total'].update(num_rows)
                                try:
                                    random_number = random.random()

                                    # Definir a chance desejada (10%)
                                    chance = 0.2

                                    # Verificar se o número aleatório está abaixo da chance
                                    if random_number < chance and not user_mysql == "wn3":
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                 "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                            funcionamento, scope)
                                        client = gspread.authorize(creds)

                                        spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                        sheet_name = 'relatorio_geral'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                                  conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:G{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)
                                except:
                                    pass

                                window.Refresh()
                                arquivo = open(
                                    'configuracoes/contas/contas_criadas.txt', 'a')
                                # Escreva mais conteúdo no arquivo
                                arquivo.write(user_completo +
                                              ' ' + senha + "\n")
                                arquivo = open(
                                    'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                                # Escreva mais conteúdo no arquivo
                                arquivo.write(
                                    email + '\n' + user_completo + '\n' + senha + "\n\n")
                                window.Refresh()
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(1)
                                d(resourceId='com.instagram.android:id/negative_button').click()
                                time.sleep(3)
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(1)
                                try:
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Seguindo sugeridos...')
                                    window.Refresh()
                                    for element in elements:
                                        if element.get_text() == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                except Exception as e:
                                    print(e)
                                    d(resourceId='com.instagram.android:id/skip_button').click()
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window.Refresh()
                                    for element in elements:
                                        if element.text == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()

                                time.sleep(1)
                                time.sleep(3)
                                try:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                except Exception as e:
                                    print(e)
                                    d(resourceId='com.instagram.android:id/button_text').click()
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                sms = False
                            except Exception as e:
                                print(e)

                        else:
                            try:
                                try:
                                    chrome.close()
                                except:
                                    pass
                                try:
                                    chrome.quit()
                                except:
                                    pass
                                conteudo = config['vpn']
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()

                            except Exception as e:
                                sms = True
                                try:
                                    chrome.close()
                                except:
                                    pass
                                try:
                                    chrome.quit()
                                except:
                                    pass
                                if not str(e) == '':
                                    traceback.print_exc()
                                if not e == 'skip' or not e == 'Manutenção.':
                                    try:
                                        d.screenshot(
                                            f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                                    except Exception as e:
                                        print(e)
                                        pass
                    except Exception as e:
                        print(e)
                        try:
                            chrome.close()
                        except:
                            pass
                        try:
                            chrome.quit()
                        except:
                            pass
                        if not str(e) == '':
                            traceback.print_exc()
                        if not e == 'skip' or not e == 'Manutenção.':
                            try:
                                d.screenshot(
                                    f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                            except Exception as e:
                                print(e)
                                pass
                        sms = True

            except Exception as e:
                print(e)
                try:
                    chrome.close()
                except:
                    pass
                try:
                    chrome.quit()
                except:
                    pass
                if not str(e) == '':
                    traceback.print_exc()
                if not e == 'skip' or not e == 'Manutenção.':
                    try:
                        d.screenshot(
                            f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                    except Exception as e:
                        print(e)
                        pass

        except Exception as e:
            print(e)
            try:
                chrome.close()
            except:
                pass
            try:
                chrome.quit()
            except:
                pass
            if not str(e) == '':
                traceback.print_exc()
            if not e == 'skip' or not e == 'Manutenção.':
                try:
                    d.screenshot(
                        f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                except Exception as e:
                    print(e)
                    pass

            pass


def insta_5sim_normal():
    import subprocess
    import time
    try:
        with open("config.json", "r") as f:
            config = json.load(f)
    except FileNotFoundError:
        config = {}
    try:
        with open("configuracoes\\config5.json", "r") as f:
            config5 = json.load(f)
    except FileNotFoundError:
        config5 = {}
    fivesimapi = config5['5simapi']
    try:
        from fivesim import FiveSim
    except:
        subprocess.run(['pip', 'install', '5sim-python'])
        time.sleep(5)
        from fivesim import FiveSim
    print(f'Token 5sim: {fivesimapi}')
    SPREADSHEET_ID = config['spreadsheet']
    conteudo = config['vpn']
    senha = gerar_senha(12)
    maquina = config['maquina']
    tentativa = False
    seguido = False
    regiao_vpn = 'Sem dados'
    if config['app'] == '-instalite-':
        app = 'Lite'
    elif config['app'] == '-insta-':
        app = 'Normal'
    else:
        app = "Normal"
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    # Código que gera a saída
    import os
    import time
    import requests
    import hashlib
    import os
    try:
        import uiautomator2 as u2
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'uiautomator2==2.16.25'])
        subprocess.run(['deactivate'], shell=True)
        subprocess.run(['pip', 'install', '--upgrade', 'requests'])
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        import requests
        time.sleep(10)
        import uiautomator2 as u2
    d = u2.connect(f'{porta}')
    import requests
    import hashlib
    import subprocess
    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random
    from datetime import datetime
    import string
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import NoSuchElementException
    from mailtm import Email
    import re

    def trocar_ip():

        def gerar_id():
            chars = string.ascii_lowercase + string.digits
            android_id = ''.join(random.choice(chars) for i in range(16))
            return android_id

        def vpn_avast():
            global nome
            global sobrenome
            global sms
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Avast', text_color='red')
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
            window.Refresh()
            gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.facebook.katana', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            sms = True
            try:
                d.app_stop("com.avast.android.vpn")
                d.app_start("com.avast.android.vpn",
                            ".app.wizard.WizardActivity")
                time.sleep(10)
            except Exception as e:
                print(e)
            abc = False

        def nenhuma_vpn():
            global nome
            global sobrenome
            global sms
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
            window.Refresh()
            gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.facebook.katana', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            sms = True
            time.sleep(10)

        def vpn_hotspotshield():
            global nome
            global sobrenome
            global sms
            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HotspotShield',
                                   text_color='red')
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
            window.Refresh()
            gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.facebook.katana', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            sms = True
            try:
                d.app_stop('hotspotshield.android.vpn')
                d.app_start('hotspotshield.android.vpn')
            except Exception as e:
                print(e)
            d(resourceId='hotspotshield.android.vpn:id/tryAgainButton').click()
            time.sleep(5)
            d(resourceId='hotspotshield.android.vpn:id/btnVpnConnect').click()

            # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
            #            stderr=subprocess.DEVNULL, check=True, shell=True)

            abc = False

        def vpn_pia():
            global nome
            global sobrenome
            global sms
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da PiaVPN', text_color='red')
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
            window.Refresh()
            gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.facebook.katana', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            sms = True
            try:
                d.app_stop('com.privateinternetaccess.android')
                d.app_start('com.privateinternetaccess.android')
            except:
                pass
            # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
            #            stderr=subprocess.DEVNULL, check=True, shell=True)

            d(resourceId='com.privateinternetaccess.android:id/connection_background').click()
            time.sleep(3)
            d(resourceId='com.privateinternetaccess.android:id/connection_background').click()

            abc = False

        def vpn_express():
            global nome
            global sobrenome
            global sms
            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da ExpressVPN',
                                   text_color='red')
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
            window.Refresh()
            gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.facebook.katana', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            sms = True
            try:
                d.app_stop('com.expressvpn.vpn')
                d.app_start('com.expressvpn.vpn')
            except:
                pass
            # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
            #            stderr=subprocess.DEVNULL, check=True, shell=True)

            d(resourceId='com.expressvpn.vpn:id/obiButton').click()
            time.sleep(3)
            d(resourceId='com.expressvpn.vpn:id/obiButton').click()

            abc = False

        def vpn_nord():
            global nome
            global sobrenome
            global sms
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da NordVPN', text_color='red')
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
            window.Refresh()
            gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.facebook.katana', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            sms = True
            try:
                d.app_stop('com.nordvpn.android')
                time.sleep(5)
                d.app_start('com.nordvpn.android', use_monkey=True)
            except:
                pass
            time.sleep(10)
            time.sleep(5)
            subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)

            abc = False

        def vpn_surf():
            global nome
            global sobrenome
            global sms
            sms = True
            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark',
                                   text_color='red')
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
            window.Refresh()
            gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.facebook.katana', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass

            try:
                d.app_stop('com.surfshark.vpnclient.android')
                d.app_start('com.surfshark.vpnclient.android')
            except:
                pass
            time.sleep(15)
            subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)

            abc = False

        def vpn_better():
            global nome
            global sobrenome
            global sms
            sms = True
            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da BetterNet',
                                   text_color='red')
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
            window.Refresh()
            gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

            subprocess.run(f'adb -s {porta} shell pm clear com.facebook.katana', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)

            try:
                d.app_stop('com.freevpnintouch')
                d.app_start('com.freevpnintouch')
            except:
                pass
            time.sleep(10)
            dialog = d(resourceId='com.freevpnintouch:id/dialogCtaPositive')
            connect = d(
                resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            if dialog.exists:
                d(resourceId='com.freevpnintouch:id/dialogCtaPositive').click()
                time.sleep(3)
                d(resourceId='com.freevpnintouch:id/buttonConnect').click()
                # time.sleep(5)
                d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            while connect == 'CONNECT':
                d(resourceId='com.freevpnintouch:id/buttonConnect').click()
                time.sleep(4)
                connect = d(
                    resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
                # WebDriverWait(driver, 20).until(
                # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect').click()
            # time.sleep(5)
            subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
            ip = '127.0.0.1:' + porta

            output = subprocess.check_output(
                ['adb', '-s', ip, 'shell', 'ifconfig'])

            # Verifica se a conexão VPN está ativa
            if not "tun0" in str(output):
                window['output'].print("Não conectado na BetterNet.")
                window.Refresh()
                try:
                    connect = d(
                        resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
                    d.app_stop('com.freevpnintouch')
                    d.app_start('com.freevpnintouch')
                    while connect == 'CONNECT':
                        d(resourceId='com.freevpnintouch:id/buttonConnect').click()
                        time.sleep(4)
                        connect = d(
                            resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
                except:
                    pass
            abc = False

        def vpn_cyberghost():
            global nome
            global sobrenome
            global sms
            sms = True
            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da CyberGhost',
                                   text_color='red')
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
            window.Refresh()
            gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.facebook.katana', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass

            try:
                d.app_stop('de.mobileconcepts.cyberghost')
                d.app_start('de.mobileconcepts.cyberghost')
            except:
                pass
            # time.sleep(3)
            d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
            rate = d(resourceId='de.mobileconcepts.cyberghost:id/rate_me_text')
            if rate.exists:
                d(resourceId='android:id/button2').click()
            time.sleep(2)
            d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
            # time.sleep(5)
            subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
            abc = False

        def vpn_tunnelbear():
            global nome
            global sobrenome
            global sms
            global regiao_vpn
            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                                   text_color='red')
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
            window.Refresh()
            gerar_id()
            try:
                subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            sms = True
            try:
                d.app_stop('com.tunnelbear.android')
                d.app_start("com.tunnelbear.android")

                while True:
                    output = subprocess.check_output(
                        ['adb', '-s', porta, 'shell', 'ifconfig'])
                    # print(str(output))
                    if "tun0" in str(output):
                        print('Conectada')
                        break
                    elif not "tun0" in str(output):
                        print('Reconectando')
                        try:
                            d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                            time.sleep(10)
                        except:
                            pass

            except Exception as e:
                print(e)
                pass

        def vpn_avg():
            global nome
            global sobrenome
            global sms
            global regiao_vpn
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da AVG', text_color='red')
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
            window.Refresh()
            gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.facebook.katana', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            sms = True
            try:
                d.app_stop('com.avg.android.vpn')
                d.app_start("com.avg.android.vpn",
                            "com.avast.android.vpn.app.wizard.WizardActivity")
                regiao_vpn = d(
                    resourceId='com.avg.android.vpn:id/location_title').get_text()

            except Exception as e:
                print(e)
                pass
            # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
            #               stderr=subprocess.DEVNULL, check=True, shell=True)

            time.sleep(30)

        def vpn_windscribe():
            global nome
            global sobrenome
            global sms
            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Windscribe',
                                   text_color='red')
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
            window.Refresh()
            gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.facebook.katana', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            sms = True
            try:
                # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)
                d.app_stop("com.windscribe.vpn")
                d.app_start("com.windscribe.vpn")
            except:
                pass
            d(resourceId='com.windscribe.vpn:id/on_off_button').click()
            time.sleep(10)
            primeiro = d(
                resourceId='com.windscribe.vpn:id/tv_connected_city_name').get_text()
            segundo = d(
                resourceId='com.windscribe.vpn:id/tv_connected_city_nick_name').get_text()
            regiao_vpn = primeiro + ' ' + segundo

        def vpn_hma():
            global nome
            global sobrenome
            global sms
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HMA', text_color='red')
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
            window.Refresh()
            gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.facebook.katana', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            sms = True
            try:
                # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)

                d.app_stop("com.hidemyass.hidemyassprovpn")
                time.sleep(3)
                d.app_start('com.hidemyass.hidemyassprovpn',
                            'com.avast.android.vpn.activity.HmaOnboardingActivity')
            except:
                pass
            time.sleep(10)

        def lte_4g():
            global nome
            global sobrenome
            global sms
            global regiao_vpn
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP do 4G', text_color='red')
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
            window.Refresh()
            gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.facebook.katana', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            try:
                d.app_start('com.arlosoft.macrodroid')
                d(resourceId='com.arlosoft.macrodroid:id/onOffSwitch').click(timeout=20)
                d(resourceId='com.arlosoft.macrodroid:id/onOffSwitch').click(timeout=20)
                time.sleep(20)
                d.app_stop('com.arlosoft.macrodroid')
            except:
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Baixando APK')
                window.Refresh()
                d.app_install(
                    'https://www.dropbox.com/scl/fi/xtkw77snupht13pbjohpm/MacroDroid_PRO-v5.39.3_Tekmods.com.apk?rlkey=la183j4i24keqyjhrez5ajw3d&dl=1')
                d.app_start('com.arlosoft.macrodroid')
                d(resourceId='com.arlosoft.macrodroid:id/button_skip').click(timeout=20)
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Configurando MacroDroid')
                window.Refresh()
                d.xpath(
                    '//android.widget.FrameLayout[@content-desc="Macros"]').click()
                d(resourceId='com.arlosoft.macrodroid:id/macro_list_add_button').click()
                d(resourceId='com.arlosoft.macrodroid:id/edit_macro_addTriggerButton').click()
                d(text='Específico do MacroDroid').click()
                d(text='Macro habilitada').click()
                d(resourceId='com.arlosoft.macrodroid:id/edit_macro_addActionButton').click()
                d(text='Conectividade').click()
                d(text='Ativar/desativar modo avião').click()
                d(text='Hack ADB').click()
                d(resourceId='android:id/button1').click()
                d(resourceId='android:id/button1').click()
                d(resourceId='com.arlosoft.macrodroid:id/edit_macro_addActionButton').click()
                d(text='Específico do MacroDroid').click()
                d(text='Esperar por disparo').click()
                d(resourceId='com.arlosoft.macrodroid:id/add_trigger_button').click()
                d(text='Bateria/Potência').click()
                d(text='Botão lateral pressionado várias vezes').click()
                d(resourceId='android:id/button1').click()
                d(text='Continuar após o tempo limite').click()
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.ScrollView/android.widget.LinearLayout/android.widget.TableLayout/android.widget.TableRow[3]/android.widget.LinearLayout/android.widget.EditText').set_text(
                    '')
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.ScrollView/android.widget.LinearLayout/android.widget.TableLayout/android.widget.TableRow[3]/android.widget.LinearLayout/android.widget.EditText').set_text(
                    '10')
                try:
                    d(text='ESTÁ BEM').click(timeout=10)
                except:
                    d(text='OK').click(timeout=10)
                d(resourceId='com.arlosoft.macrodroid:id/edit_macro_addActionButton').click()
                d(text='Conectividade').click()
                d(text='Ativar/desativar modo avião').click()
                d(text='Hack ADB').click()
                d(resourceId='android:id/button1').click()
                d(text='Desativa o modo avião').click()
                d(resourceId='android:id/button1').click()
                d(text='Digite o nome da macro').set_text('Trocar IP')
                d(resourceId='com.arlosoft.macrodroid:id/acceptButton').click()
                time.sleep(2)
                d.app_stop('com.arlosoft.macrodroid')
                try:
                    subprocess.run(
                        f'adb -s {porta} shell pm grant com.arlosoft.macrodroid android.permission.WRITE_SECURE_SETTINGS',
                        stdout=subprocess.DEVNULL,
                        stderr=subprocess.DEVNULL, check=True, shell=True)
                except Exception as e:
                    print(e)

            sms = True
            time.sleep(5)

        try:
            conteudo = config['vpn']
            if conteudo == "AVG":
                vpn_avg()
            elif conteudo == "SurfShark":
                vpn_surf()
            elif conteudo == "Nenhuma":
                nenhuma_vpn()
            elif conteudo == "Avast":
                vpn_avast()
            elif conteudo == "ExpressVPN":
                vpn_express()
            elif conteudo == "PiaVPN":
                vpn_pia()
            elif conteudo == "TunnelBear":
                vpn_tunnelbear()
            elif conteudo == "BetterNet":
                vpn_better()
            elif conteudo == "CyberGhost":
                vpn_cyberghost()
            elif conteudo == "NordVPN":
                vpn_nord()
            elif conteudo == "HotspotShield":
                vpn_hotspotshield()
            elif conteudo == "WindscribeVPN":
                vpn_windscribe()
            elif conteudo == "HmaVPN":
                vpn_hma()
            elif conteudo == "-4g-":
                lte_4g()

        except Exception as e:
            print(e)
            pass

    def gerar_id():
        chars = string.ascii_lowercase + string.digits
        android_id = ''.join(random.choice(chars) for i in range(16))
        return android_id

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    window.Refresh()

    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global transition_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass
    gerar_id()
    android_id = gerar_id()
    subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    time.sleep(2)
    # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True, stdout=subprocess.DEVNULL,
    #               stderr=subprocess.DEVNULL)

    try:
        subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
    except Exception as e:
        pass

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Efetuando troca de IP.')
    window.Refresh()
    trocar_ip()
    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.\n')
    window.Refresh()
    try:
        scope = ["https://spreadsheets.google.com/feeds",
                 "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name(
            'credentials.json', scope)
        client = gspread.authorize(creds)

        spreadsheet_id = config['spreadsheet']
        sheet_name = 'contas'
        # Insert user, password, and timestamp into first empty row
        sheet = client.open_by_key(spreadsheet_id).worksheet(sheet_name)
        values = sheet.col_values(1)

        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
        rows = sheet.get_all_values()

        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
        regex = re.compile(r'\S+\s\S+')
        sheet_name = config['2nr']
        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
        num_rows = sum(1 for row in rows if regex.match(row[0]))
        window['total'].update(num_rows)
    except Exception as e:
        print(e)
    d.implicitly_wait(30.0)
    d.set_fastinput_ime(True)
    if not os.path.exists('./erros'):
        os.makedirs('./erros')
    codigo_não_recebido_seguidos = 0
    tentativa = False
    ultimo_cod = '000000'
    tentar_num_novamente = False
    while parar is False:
        senha = gerar_senha(12)
        if parar is True:
            print('Parando Thread')
            break

        try:

            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)

            except:
                pass
            try:
                subprocess.run(
                    f'adb -s {porta} shell pm grant com.instagram.android android.permission.READ_CONTACTS',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            gerar_id()
            android_id = gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            window['output'].print(linha_ret)
            window.Refresh()
            try:
                client = FiveSim(fivesimapi)
                try:
                    saldo = client.get_balance()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Saldo: {saldo["balance"]}')
                    window.Refresh()
                except Exception as e:
                    print('Verifique seu token')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Verifique seu token.')
                    window.Refresh()
                    raise Exception('')
                print(f'''Saldo: {saldo['balance']}''')
                precos_instagram_russia = client.price_requests_by_country_and_product(country='russia',
                                                                                       product='instagram')
                operadoras_disponiveis = {}
                for operadora, detalhes in precos_instagram_russia['russia']['instagram'].items():
                    if detalhes['cost'] == 1 and detalhes['count'] > 0:
                        operadoras_disponiveis[operadora] = detalhes['count']
                print(
                    "Operadoras disponíveis com custo 1 e quantidade de números disponíveis:")
                operadora_rnd = []
                for operadora, quantidade in operadoras_disponiveis.items():
                    print(
                        f"Operadora: {operadora}, Quantidade de números disponíveis: {quantidade}")
                    operadora_rnd.append(operadora)
                operadora = random.choice(operadora_rnd)
                print(operadora)
            except Exception as e:
                print(e)
                raise Exception('')
            try:
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo instagram.')
                window.Refresh()
                d.app_start('com.instagram.android')
                try:
                    d.xpath(
                        '//android.widget.Button[@content-desc="Criar nova conta"]').click(timeout=120)
                except:

                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Pagina Estática.')
                    window.Refresh()
                    trocar_ip()
                    raise Exception('skip')
                # time.sleep(6)
                # novo_layout = d.xpath('//android.view.View[@content-desc="Qual é o seu nome?"]')
                # if len(novo_layout) == 1:
                #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Layout novo encontrado, reiniciando app.')
                #    window.Refresh()
                #    raise Exception("skip.")

                ######################################################################
                lista_user = random.choices(range(0, 9), k=2)
                lista_letras = random.choices(letras, k=1)

                with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                    nomes = nomes_arquivo.readlines()

                with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                    sobrenomes = sobrenomes_arquivo.readlines()

                nomea = fake.first_name_male().replace(" ", "")
                nome = unicodedata.normalize('NFKD', nomea).encode(
                    'ASCII', 'ignore').decode('ASCII')
                sobrenomea = fake.last_name().replace(" ", "").lower()
                sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                    'ASCII', 'ignore').decode('ASCII')
                nome_completo = nome + ' ' + sobrenome
                nome_completo_s = nome + sobrenome
                numeros_concatenados = ''.join(
                    str(numero) for numero in lista_user)
                user_completo1 = nome_completo_s + '' + \
                    str(numeros_concatenados) + ''.join(lista_letras)

                user_completo = random.randint(1, len(user_completo1))
                # Insira o ponto no índice aleatório
                string_with_dot = user_completo1[:user_completo] + \
                    '_' + user_completo1[user_completo:]
                user_completo_antigo = string_with_dot.lower()

                escolha = random.choice(["_", "."])
                user_completo = nome + escolha + sobrenome + \
                    str(numeros_concatenados) + ''.join(lista_letras)
                ######################################################################
                time.sleep(10)
                layout1 = d.xpath(
                    '//android.view.View[@content-desc="Crie um nome de usuário"]')
                layout2 = d(resourceId='android:id/button2')
                layout3 = d.xpath(
                    '//android.view.View[@content-desc="Qual é o número do seu celular?"]')
                layout3v2 = d.xpath(
                    '//android.view.View[@content-desc="Qual é seu número de celular ou email?"]')
                layout4 = d.xpath(
                    '//android.view.View[@content-desc="Crie uma senha"]')
                if layout1.exists:
                    layout_usado = 'layout1'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout1 novo encontrado.')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(4)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=20.0)
                    except Exception as e:
                        print(e)
                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        trocar_ip()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            trocar_ip()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            trocar_ip()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)

                elif layout2.exists:
                    layout_usado = 'layout2'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout2 novo encontrado.')
                    window.Refresh()
                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        trocar_ip()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            trocar_ip()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            trocar_ip()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(4)
                    d.xpath(
                        '//android.widget.Button[@content-desc="Avançar"]/android.view.ViewGroup').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.Button[@content-desc="Avançar"]/android.view.ViewGroup').click()
                    time.sleep(5)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=10.0)
                    except Exception as e:
                        pass

                elif layout3.exists or layout3v2.exists:

                    layout_usado = 'layout3'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout3 novo encontrado.')
                    window.Refresh()
                    if tentar_num_novamente is False:
                        try:
                            resultado = client.buy_number(
                                country='russia', operator=operadora, product='instagram')
                            print(resultado)
                            num = resultado['phone']
                            id = resultado.get('id')
                        except Exception as e:
                            if 'not enough user balance' in str(e):
                                print('Sem saldo')
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Sem saldo.')
                                window.Refresh()
                                raise Exception('Sem saldo')
                            else:
                                print(e)
                    else:
                        print('Utilizando mesmo número')
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Utilizando mesmo número.')
                        window.Refresh()

                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Número: {num}')
                    window.Refresh()
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'{num}')
                    time.sleep(0.5)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=5):
                        d(resourceId='android:id/button2').click()
                        time.sleep(3)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        tentar_num_novamente = False
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        tentativa = False
                        client.cancel_order(order_id=id)
                        trocar_ip()
                        raise Exception('Restrição')
                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentar_num_novamente = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        tentativa = True
                        trocar_ip()
                        raise Exception('Restrição')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    time.sleep(3)
                    selecionar_sms = d.xpath(
                        '//android.view.View[@content-desc="Enviar código por SMS"]')
                    if selecionar_sms.exists:
                        selecionar_sms.click()
                        time.sleep(1)
                        d.xpath(
                            '//android.view.View[@content-desc="Enviar código"]').click()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    encontrado = False
                    tentativa_sms = 0
                    try:
                        while True:
                            url = f'https://5sim.net/v1/user/check/{id}'

                            # Cabeçalhos para a requisição
                            headers = {
                                'Authorization': f'Bearer {fivesimapi}',
                                'Accept': 'application/json',
                            }

                            # Fazer a requisição para obter SMS
                            response = requests.get(url, headers=headers)

                            # Verificar se a requisição foi bem-sucedida
                            # Verificar se a requisição foi bem-sucedida
                            if response.status_code == 200:
                                data = response.json()
                                # Substitua 'sms' pela chave correta se a estrutura de resposta for diferente
                                if 'sms' in data and data['sms'] and data['sms'] != ultimo_cod:
                                    last_sms = data['sms'][-1]['text']

                                    # Usar regex para encontrar todas as sequências de dígitos no texto
                                    matches = re.findall(r'\d+', last_sms)
                                    if matches:
                                        # Concatenar todas as sequências de dígitos e pegar os primeiros 6
                                        all_digits = ''.join(matches)
                                        extracted_code = all_digits[:6]
                                        print(extracted_code)
                                        break
                                    else:
                                        print(
                                            "Não foram encontrados dígitos no SMS.")
                                else:
                                    print("Nenhum SMS recebido")
                            else:
                                print("Erro ao fazer requisição para a API:",
                                      response.status_code)
                            time.sleep(10)
                            if tentativa_sms == 10:
                                client.cancel_order(order_id=id)
                                raise Exception('Código não recebido')
                            tentativa_sms += 1
                    except Exception as e:
                        print(e)
                        tentar_num_novamente = False
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido')
                        window.Refresh()
                        trocar_ip()
                        raise Exception('Código não recebido')

                    codigo = extracted_code
                    ultimo_cod = data['sms']
                    print(codigo)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    time.sleep(2)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(5)
                    try:
                        d.xpath('//android.widget.Button[@content-desc="Agora não"]/android.view.ViewGroup').click(
                            timeout=10)
                        print('clicou')
                    except Exception as e:
                        print('erro agora nao')
                        print(e)
                        d.xpath(
                            '//android.widget.Button[@content-desc="Agora não"]/android.view.ViewGroup').click()
                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        nome_completo)
                    time.sleep(1)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nome escolhido: {nome_completo}')
                    window.Refresh()
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                    window.Refresh()
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        '')
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(3)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(3)

                elif layout4.exists:
                    layout_usado = 'layout4'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout4 novo encontrado.')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.Button[@content-desc="Avançar"]/android.view.ViewGroup').click()
                    time.sleep(4)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=20.0)
                    except Exception as e:
                        print(e)
                    time.sleep(4)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                    window.Refresh()
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        '')
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(3)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        trocar_ip()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            trocar_ip()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            trocar_ip()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)

                else:
                    layout_usado = 'layout_normal'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout normal encontrado.')
                    window.Refresh()
                    # raise Exception('Manutenção.')
                    cancel = d(resourceId='com.google.android.gms:id/cancel')
                    if cancel.exists(timeout=10):
                        d(resourceId='com.google.android.gms:id/cancel').click()
                    senha = gerar_senha(12)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        nome_completo)
                    time.sleep(1)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nome escolhido: {nome_completo}')
                    window.Refresh()
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=20.0)
                    except Exception as e:
                        print(e)
                    # salvar_senha = d.xpath('//android.view.View[@content-desc="Agora não"]')
                    # if salvar_senha.exists:
                    #    d.xpath('//android.view.View[@content-desc="Agora não"]').click()

                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Alterar nome de usuário"]').click(timeout=5)
                    except:
                        pass
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                    window.Refresh()
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        '')
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(3)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(3)
                    if tentar_num_novamente is False:
                        try:
                            resultado = client.buy_number(
                                country='russia', operator=operadora, product='instagram')
                            print(resultado)
                            num = resultado['phone']
                            id = resultado.get('id')
                        except Exception as e:
                            if 'not enough user balance' in str(e):
                                print('Sem saldo')
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Sem saldo.')
                                window.Refresh()
                                raise Exception('Sem saldo')
                            else:
                                print(e)
                    else:
                        print('Utilizando mesmo número')
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Utilizando mesmo número.')
                        window.Refresh()

                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Número: {num}')
                    window.Refresh()
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        tentar_num_novamente = False
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        tentativa = False
                        client.cancel_order(order_id=id)
                        trocar_ip()
                        raise Exception('Restrição')
                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentar_num_novamente = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        tentativa = True
                        trocar_ip()
                        raise Exception('Restrição')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    time.sleep(3)
                    selecionar_sms = d.xpath(
                        '//android.view.View[@content-desc="Enviar código por SMS"]')
                    if selecionar_sms.exists:
                        selecionar_sms.click()
                        time.sleep(1)
                        d.xpath(
                            '//android.view.View[@content-desc="Enviar código"]').click()

                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    encontrado = False
                    tentativa_sms = 0
                    try:
                        while True:
                            url = f'https://5sim.net/v1/user/check/{id}'

                            # Cabeçalhos para a requisição
                            headers = {
                                'Authorization': f'Bearer {fivesimapi}',
                                'Accept': 'application/json',
                            }

                            # Fazer a requisição para obter SMS
                            response = requests.get(url, headers=headers)

                            # Verificar se a requisição foi bem-sucedida
                            # Verificar se a requisição foi bem-sucedida
                            if response.status_code == 200:
                                data = response.json()
                                # Substitua 'sms' pela chave correta se a estrutura de resposta for diferente
                                if 'sms' in data and data['sms'] and data['sms'] != ultimo_cod:
                                    last_sms = data['sms'][-1]['text']

                                    # Usar regex para encontrar todas as sequências de dígitos no texto
                                    matches = re.findall(r'\d+', last_sms)
                                    if matches:
                                        # Concatenar todas as sequências de dígitos e pegar os primeiros 6
                                        all_digits = ''.join(matches)
                                        extracted_code = all_digits[:6]
                                        print(extracted_code)
                                        break
                                    else:
                                        print(
                                            "Não foram encontrados dígitos no SMS.")
                                else:
                                    print("Nenhum SMS recebido")
                            else:
                                print("Erro ao fazer requisição para a API:",
                                      response.status_code)
                            time.sleep(10)
                            if tentativa_sms == 10:
                                client.cancel_order(order_id=id)
                                raise Exception('Código não recebido')
                            tentativa_sms += 1
                    except Exception as e:
                        print(e)
                        tentar_num_novamente = False
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido')
                        window.Refresh()
                        trocar_ip()
                        raise Exception('Código não recebido')

                    codigo = extracted_code
                    ultimo_cod = data['sms']
                    print(codigo)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    time.sleep(2)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)

                codigo_invalido = d.xpath(
                    '//android.view.View[@content-desc="Não recebi o código"]')
                d.xpath(
                    '//android.view.View[@content-desc="Concordo"]').click()
                time.sleep(5)
                errodetec = d.xpath(
                    '//android.view.View[@content-desc="Concordo"]')
                if errodetec.exists:
                    d.xpath(
                        '//android.view.View[@content-desc="Concordo"]').click()
                    time.sleep(5)

                errodetec = d.xpath(
                    '//android.view.View[@content-desc="Concordo"]')
                if errodetec.exists:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Instagram não deixou avançar.')
                    window.Refresh()

                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
                window.Refresh()
                time.sleep(45)
                verificar = d.xpath(
                    '//android.view.View[@content-desc="Adicionar foto"]')
                verificar2 = d.xpath(
                    '//android.view.View[@content-desc="Aceite os termos e políticas do Instagram"]')
                email = f"{num} - 5sim.net"
                try:
                    if verificar.exists:
                        try:
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                   text_color=('lime'))
                            window.Refresh()
                            tentar_num_novamente = True
                            seguido = False
                            contagem += 1
                            window['criadas'].update(contagem)
                            window.Refresh()
                            now = datetime.now()
                            now_brasilia = tz.localize(now)
                            timestamp = now_brasilia.strftime(
                                "%d/%m/%Y %H:%M:%S")
                            try:
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                          conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            except Exception as e:
                                print(e)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                tempo_aleatorio = random.randint(10, 40)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                time.sleep(tempo_aleatorio)
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                          conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            window['total'].update(num_rows)
                            random_number = random.random()

                            # Definir a chance desejada (10%)
                            chance = 0.2

                            # Verificar se o número aleatório está abaixo da chance
                            if random_number < chance and not user_mysql == "wn3":
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                    funcionamento, scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                sheet_name = 'relatorio_geral'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                          conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)
                        except Exception as e:
                            print(e)
                            pass
                        window.Refresh()
                        arquivo = open(
                            'configuracoes/contas/contas_criadas.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(user_completo + ' ' + senha + "\n")
                        arquivo = open(
                            'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(
                            email + '\n' + user_completo + '\n' + senha + "\n\n")
                        try:
                            d.xpath(
                                '//android.view.View[@content-desc="Pular"]').click()
                            time.sleep(2)
                            d(resourceId='com.instagram.android:id/skip_button').click()
                            time.sleep(2)
                            d(resourceId='com.instagram.android:id/negative_button').click()
                            time.sleep(2)
                            d(resourceId='com.instagram.android:id/skip_button').click()
                            skip_button = d(
                                resourceId='com.instagram.android:id/skip_button')
                            time.sleep(2)
                            if skip_button.exists:
                                d(resourceId='com.instagram.android:id/skip_button').click()
                            time.sleep(4)
                            try:
                                element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                target_text = "Seguir"

                                # Encontre todos os elementos que correspondem ao ID fornecido
                                elements = d(resourceId=element_id)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Seguindo sugeridos...')
                                window.Refresh()
                                time.sleep(5)
                                for element in elements:
                                    if element.get_text() == target_text:
                                        element.click()
                                        time.sleep(1)
                                try:
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                except:
                                    pass
                            except Exception as e:
                                print(e)
                                time.sleep(2)
                                element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                target_text = "Seguir"

                                # Encontre todos os elementos que correspondem ao ID fornecido
                                elements = d(resourceId=element_id)
                                # window['output'].print("Seguindo sugeridos...")
                                window.Refresh()
                                for element in elements:
                                    if element.get_text() == target_text:
                                        element.click()
                                        time.sleep(1)
                                d.xpath(
                                    '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                            time.sleep(1)
                            try:
                                d(resourceId='com.instagram.android:id/button_text').click(timeout=10)
                            except:
                                try:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                except:
                                    time.sleep(2)
                                    try:
                                        d(resourceId='com.instagram.android:id/tab_avatar').click()
                                    except:
                                        d.app_stop("com.instagram.android")
                                        time.sleep(1)
                                        d.app_start("com.instagram.android")
                                        time.sleep(30)
                                        try:
                                            pagina_login = d.xpath(
                                                '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                            if pagina_login.exists:
                                                pagina_login.click()
                                                time.sleep(5)
                                                d.xpath(
                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                                    senha)
                                                pagina_login.click()
                                                time.sleep(3)
                                                d.xpath(
                                                    '//android.view.View[@content-desc="Agora não"]').click()
                                            else:
                                                d(resourceId='com.instagram.android:id/profile_tab').click()
                                        except:
                                            time.sleep(2)
                                            pagina_login = d.xpath(
                                                '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                            if pagina_login.exists:
                                                pagina_login.click()
                                                time.sleep(5)
                                                d.xpath(
                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                                    senha)
                                                pagina_login.click()
                                                time.sleep(3)
                                                d.xpath(
                                                    '//android.view.View[@content-desc="Agora não"]').click()
                                            else:
                                                d(resourceId='com.instagram.android:id/tab_avatar').click()

                            sms = False
                        except Exception as e:
                            d.app_stop("com.instagram.android")
                            time.sleep(1)
                            d.app_start("com.instagram.android")
                            time.sleep(40)
                            try:
                                pagina_login = d.xpath(
                                    '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                if pagina_login.exists:
                                    pagina_login.click()
                                    time.sleep(5)
                                    d.xpath(
                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                        senha)
                                    pagina_login.click()
                                else:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                            except:
                                time.sleep(2)
                                pagina_login = d.xpath(
                                    '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                if pagina_login.exists:
                                    pagina_login.click()
                                    time.sleep(5)
                                    d.xpath(
                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                        senha)
                                    pagina_login.click()
                                else:
                                    d(resourceId='com.instagram.android:id/tab_avatar').click()
                    elif verificar2.exists:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Verificando novamente...')
                        window.Refresh()
                        d.app_stop("com.instagram.android")
                        time.sleep(1)
                        d.app_start("com.instagram.android")

                        if d.xpath('//android.view.View[@content-desc="Esqueceu a senha?"]').exists(timeout=60):
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                user_completo)
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                senha)
                            d.xpath(
                                '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup').click()
                            d.xpath(
                                '//android.view.View[@content-desc="Agora não"]').click()

                        verificar3 = d.xpath(
                            '//android.widget.FrameLayout[@content-desc="Perfil"]/android.view.ViewGroup')
                        time.sleep(40)
                        if verificar3.exists:
                            try:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                                window.Refresh()
                                tentar_num_novamente = True
                                contagem = contagem + 1
                                sms = False
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")
                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                              conteudo + ' - ' + app]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                              conteudo + ' - ' + app]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                window['total'].update(num_rows)
                                random_number = random.random()

                                # Definir a chance desejada (10%)
                                chance = 0.2

                                # Verificar se o número aleatório está abaixo da chance
                                if random_number < chance and not user_mysql == "wn3":
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                        funcionamento, scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                    sheet_name = 'relatorio_geral'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)
                            except Exception as e:
                                print(e)
                        else:

                            try:
                                trocar_ip()
                            except Exception as e:
                                raise Exception('skip')
                                sms = True
                                continue
                    else:
                        verificar = d(
                            resourceId='com.instagram.android:id/profile_tab')
                        if verificar.exists:
                            try:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                                window.Refresh()
                                seguido = False
                                tentar_num_novamente = True
                                contagem += 1
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")
                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                window['total'].update(num_rows)
                                random_number = random.random()

                                # Definir a chance desejada (10%)
                                chance = 0.2

                                # Verificar se o número aleatório está abaixo da chance
                                if random_number < chance and not user_mysql == "wn3":
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                        funcionamento, scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                    sheet_name = 'relatorio_geral'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)
                            except Exception as e:
                                print(e)
                                pass
                            window.Refresh()
                            arquivo = open(
                                'configuracoes/contas/contas_criadas.txt', 'a')
                            # Escreva mais conteúdo no arquivo
                            arquivo.write(user_completo + ' ' + senha + "\n")
                            arquivo = open(
                                'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                            # Escreva mais conteúdo no arquivo
                            arquivo.write(
                                email + '\n' + user_completo + '\n' + senha + "\n\n")
                            try:
                                d.xpath(
                                    '//android.view.View[@content-desc="Pular"]').click()
                                time.sleep(2)
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(2)
                                d(resourceId='com.instagram.android:id/negative_button').click()
                                time.sleep(2)
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(4)
                                try:
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Seguindo sugeridos...')
                                    window.Refresh()
                                    time.sleep(5)
                                    for element in elements:
                                        if element.get_text() == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                except Exception as e:
                                    print(e)
                                    time.sleep(2)
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window['output'].print(
                                        "Seguindo sugeridos...")
                                    window.Refresh()
                                    for element in elements:
                                        if element.get_text() == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                time.sleep(1)
                                try:
                                    d(resourceId='com.instagram.android:id/button_text').click()
                                except:
                                    pass
                                time.sleep(3)
                                try:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                except:
                                    time.sleep(2)
                                    d(resourceId='com.instagram.android:id/tab_avatar').click()
                                sms = False
                            except Exception as e:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Reabrindo Instagram.')
                                window.Refresh()
                                d.app_stop('com.instagram.android')
                                d.app_start('com.instagram.android')
                                time.sleep(20)
                                pass
                        else:
                            tentar_num_novamente = True
                            try:
                                trocar_ip()
                            except Exception as e:
                                raise Exception('skip')
                                continue
                except Exception as e:
                    print(e)
                    trocar_ip()
                    sms = True
                    raise Exception('skip')
                while sms is False:
                    senha = gerar_senha(12)
                    try:
                        time.sleep(3)
                        try:
                            d(resourceId='com.instagram.android:id/profile_tab').click(timeout=120)
                        except:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu algum erro nesta conta.')
                            window.Refresh()
                            raise Exception('Erro na conta')
                        window['output'].print(linha_ret)
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Criação de outro perfil.')
                        window.Refresh()
                        seguido = False
                        # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True)
                        # Clicar no botão de perfil

                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/action_bar_title_chevron').click()
                        time.sleep(2)
                        # Clicar em perfis
                        try:
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout[2]/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.ListView/android.widget.LinearLayout[last()]/android.widget.FrameLayout/android.widget.ImageView').click()
                        except Exception as e:
                            print(e)
                            print('Erro aq')
                            time.sleep(200)
                        # Clicar em adicionar conta
                        d.xpath(
                            '//android.widget.Button[@content-desc="Criar nova conta"]').click()

                        time.sleep(3)
                        # Gerar nome de usuário, digitar no campo e clicar em avançae
                        lista_user = random.choices(range(0, 9), k=2)
                        lista_letras = random.choices(letras, k=1)

                        with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                            nomes = nomes_arquivo.readlines()

                        with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                            sobrenomes = sobrenomes_arquivo.readlines()

                        nomea = fake.first_name_male().replace(" ", "")
                        nome = unicodedata.normalize('NFKD', nomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        sobrenomea = fake.last_name().replace(" ", "").lower()
                        sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        nome_completo = nome + sobrenome
                        numeros_concatenados = ''.join(
                            str(numero) for numero in lista_user)
                        user_completo1 = nome_completo + '' + \
                            str(numeros_concatenados) + ''.join(lista_letras)

                        user_completo = random.randint(1, len(user_completo1))
                        # Insira o ponto no índice aleatório
                        string_with_dot = user_completo1[:user_completo] + \
                            '_' + user_completo1[user_completo:]
                        user_completo_antigo = string_with_dot.lower()

                        escolha = random.choice(["_", "."])
                        user_completo = nome + escolha + sobrenome + \
                            str(numeros_concatenados) + ''.join(lista_letras)
                        print(user_completo)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: ' + user_completo)
                        window.Refresh()
                        d(resourceId='com.instagram.android:id/username').set_text(
                            user_completo)
                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/button_text').click()
                        # Digitar senha e avançar
                        time.sleep(3)
                        try:
                            d(resourceId='com.instagram.android:id/password').set_text(
                                senha)
                        except:
                            try:
                                trocar_ip()

                            except Exception as e:
                                raise Exception('skip')
                        d(resourceId='com.instagram.android:id/button_text').click()
                        # Clicar em concluir cadastro
                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/button_text').click()

                        time.sleep(4)
                        feedback = d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.View')
                        if feedback.exists:
                            sms = True

                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
                        window.Refresh()
                        # WebDriverWait(driver, 40).until(EC.visibility_of_element_located)(((By.XPATH,
                        #                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')

                        verificar = d(
                            resourceId='com.instagram.android:id/connect_text')
                        if verificar.exists(timeout=60):
                            time.sleep(20)
                            verificar = d(
                                resourceId='com.instagram.android:id/connect_text')
                        if verificar.exists:
                            try:
                                conteudo = config['vpn']
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                                window.Refresh()
                                contagem += 1
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")

                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))

                                window['total'].update(num_rows)
                                try:
                                    random_number = random.random()

                                    # Definir a chance desejada (10%)
                                    chance = 0.2

                                    # Verificar se o número aleatório está abaixo da chance
                                    if random_number < chance and not user_mysql == "wn3":
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                 "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                            funcionamento, scope)
                                        client = gspread.authorize(creds)

                                        spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                        sheet_name = 'relatorio_geral'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                                  conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:G{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)
                                except:
                                    pass

                                window.Refresh()
                                arquivo = open(
                                    'configuracoes/contas/contas_criadas.txt', 'a')
                                # Escreva mais conteúdo no arquivo
                                arquivo.write(user_completo +
                                              ' ' + senha + "\n")
                                arquivo = open(
                                    'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                                # Escreva mais conteúdo no arquivo
                                arquivo.write(
                                    email + '\n' + user_completo + '\n' + senha + "\n\n")
                                window.Refresh()
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(1)
                                d(resourceId='com.instagram.android:id/negative_button').click()
                                time.sleep(3)
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(1)
                                try:
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Seguindo sugeridos...')
                                    window.Refresh()
                                    for element in elements:
                                        if element.get_text() == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                except Exception as e:
                                    print(e)
                                    d(resourceId='com.instagram.android:id/skip_button').click()
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window.Refresh()
                                    for element in elements:
                                        if element.text == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()

                                time.sleep(1)
                                time.sleep(3)
                                try:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                except Exception as e:
                                    print(e)
                                    d(resourceId='com.instagram.android:id/button_text').click()
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                sms = False
                            except Exception as e:
                                print(e)

                        else:
                            try:
                                conteudo = config['vpn']
                                trocar_ip()

                            except Exception as e:
                                sms = True
                                if not str(e) == '':
                                    traceback.print_exc()
                                if not e == 'skip' or not e == 'Manutenção.':
                                    try:
                                        d.screenshot(
                                            f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                                    except Exception as e:
                                        print(e)
                                        pass
                    except Exception as e:
                        print(e)
                        if not str(e) == '':
                            traceback.print_exc()
                        if not e == 'skip' or not e == 'Manutenção.':
                            try:
                                d.screenshot(
                                    f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                            except Exception as e:
                                print(e)
                                pass
                        sms = True

            except Exception as e:
                print(e)
                if not str(e) == '':
                    traceback.print_exc()
                if not e == 'skip' or not e == 'Manutenção.':
                    try:
                        d.screenshot(
                            f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                    except Exception as e:
                        print(e)
                        pass

        except Exception as e:
            print(e)
            if not str(e) == '':
                traceback.print_exc()
            if not e == 'skip' or not e == 'Manutenção.':
                try:
                    d.screenshot(
                        f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                except Exception as e:
                    print(e)
                    pass

            pass


def smstome_com():
    SPREADSHEET_ID = config['spreadsheet']
    conteudo = config['vpn']
    senha = gerar_senha(12)
    maquina = config['maquina']
    tentativa = False
    seguido = False
    regiao_vpn = 'Sem dados'
    if config['email'] == '-2nr-' and config['app'] == '-instalite-':
        app = 'Lite'
    elif config['email'] == '-2nr-' and config['app'] == '-insta-':
        app = 'Normal'
    else:
        app = "Normal"
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    # Código que gera a saída
    import os
    import time
    import requests
    import hashlib
    import subprocess

    # verifica se o arquivo existe na pasta do bot

    try:
        from rich.console import Console
    except ModuleNotFoundError:
        import subprocess
        import sys

        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['pip', 'install', '-r', 'requirements.txt'])
        subprocess.run(['deactivate'], shell=True)
        from rich.console import Console
    import os
    import time
    try:
        import uiautomator2 as u2
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'uiautomator2==2.16.25'])
        subprocess.run(['deactivate'], shell=True)
        subprocess.run(['pip', 'install', '--upgrade', 'requests'])
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        import requests
        time.sleep(10)
        import uiautomator2 as u2
    d = u2.connect(f'{porta}')
    import requests
    import hashlib
    import subprocess
    from colorama import init, Fore, Back, Style
    from faker import Faker
    # teste
    init(autoreset=True)
    console = Console()
    from termcolor import colored

    from rich.console import Console
    from rich.panel import Panel
    from rich.text import Text
    from rich.rule import Rule

    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random
    from datetime import datetime
    import string
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import NoSuchElementException
    from mailtm import Email
    import re
    import logging

    logger = logging.getLogger(__name__)

    handler = logging.FileHandler('log.txt')
    handler.setLevel(logging.ERROR)

    logger.addHandler(handler)
    file_path = './storage/adblock.crx'
    import zipfile

    def baixar_arquivo(url, caminho_arquivo, pasta_destino):
        # Verifica e cria a pasta destino, se necessário
        if os.path.exists(pasta_destino):
            return
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Baixando navegador...')
        window.Refresh()
        # Se a pasta não existir, cria a pasta destino
        os.makedirs(pasta_destino)

        # Continua com o download do arquivo
        resposta = requests.get(url, stream=True)
        tamanho_total = int(resposta.headers.get('content-length', 0))

        with open(caminho_arquivo, 'wb') as file:
            for dados in resposta.iter_content(chunk_size=4096):
                file.write(dados)

        # Extrai o arquivo
        with zipfile.ZipFile(caminho_arquivo, 'r') as zip_ref:
            zip_ref.extractall(pasta_destino)

        # Apaga o arquivo zip após a extração
        os.remove(caminho_arquivo)
        print("\nDownload e extração concluídos.")

    url = 'https://www.dropbox.com/scl/fi/9juftou3q4k4kj2o7mzhq/chrome-win.zip?rlkey=84n9pwxouhu9punpcjg32onbz&dl=1'
    caminho_arquivo = './storage/driver/driver.zip'
    pasta_destino = './storage/driver/'

    baixar_arquivo(url, caminho_arquivo, pasta_destino)
    if os.path.exists("./storage/adblock/"):
        result = f"A pasta 'adblock' já existe em '{file_path}'."
    else:
        # URL para download
        url = 'https://www.dropbox.com/scl/fi/2tu2g6ulqwr2xk20kut1x/adblock.crx?rlkey=55rysc1sspa7t81ldybg8t6iy&dl=1'

        # Fazendo o download do arquivo
        response = requests.get(url)
        if response.status_code == 200:
            with open(file_path, 'wb') as file:
                file.write(response.content)
            print("Arquivo 'adblock.crx' baixado e salvo em './storage/adblock.crx'.")
            # Caminho do arquivo original (altere para o seu caminho de arquivo)
            caminho_original = './storage/adblock.crx'
            novo_caminho = './storage/adblock.zip'

            # Renomear o arquivo
            os.rename(caminho_original, novo_caminho)

            # Caminho do arquivo zip
            caminho_zip = './storage/adblock.zip'

            # Diretório de destino para extrair
            diretorio_destino = './storage/adblock/'

            # Remover um arquivo anterior, se existir
            arquivo_antigo = './storage/adblock'
            if os.path.exists(arquivo_antigo):
                os.remove(arquivo_antigo)

            # Criar o diretório de destino se ele não existir
            if not os.path.exists(diretorio_destino):
                os.makedirs(diretorio_destino)

            # Extrair o arquivo zip
            with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                zip_ref.extractall(diretorio_destino)

            print("Arquivo extraído com sucesso!")
            os.remove('./storage/adblock.zip')

        else:
            result = "Não foi possível baixar o arquivo. Status Code: " + \
                str(response.status_code)

    def vpn_avast():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Avast', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop("com.avast.android.vpn")
            d.app_start("com.avast.android.vpn", ".app.wizard.WizardActivity")
            time.sleep(10)
        except Exception as e:
            print(e)
        abc = False

    def nenhuma_vpn():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.facebook.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        time.sleep(10)

    def vpn_hotspotshield():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HotspotShield',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('hotspotshield.android.vpn')
            d.app_start('hotspotshield.android.vpn')
        except Exception as e:
            print(e)
        d(resourceId='hotspotshield.android.vpn:id/tryAgainButton').click()
        time.sleep(5)
        d(resourceId='hotspotshield.android.vpn:id/btnVpnConnect').click()

        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_pia():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da PiaVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.privateinternetaccess.android')
            d.app_start('com.privateinternetaccess.android')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()
        time.sleep(3)
        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()

        abc = False

    def vpn_express():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da ExpressVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.expressvpn.vpn')
            d.app_start('com.expressvpn.vpn')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.expressvpn.vpn:id/obiButton').click()
        time.sleep(3)
        d(resourceId='com.expressvpn.vpn:id/obiButton').click()

        abc = False

    def vpn_nord():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da NordVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.nordvpn.android')
            time.sleep(5)
            d.app_start('com.nordvpn.android', use_monkey=True)
        except:
            pass
        time.sleep(10)
        time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_surf():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('com.surfshark.vpnclient.android')
            d.app_start('com.surfshark.vpnclient.android')
        except:
            pass
        time.sleep(15)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_better():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da BetterNet', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        try:
            d.app_stop('com.freevpnintouch')
            d.app_start('com.freevpnintouch')
        except:
            pass
        time.sleep(10)
        dialog = d(resourceId='com.freevpnintouch:id/dialogCtaPositive')
        connect = d(
            resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
        if dialog.exists:
            d(resourceId='com.freevpnintouch:id/dialogCtaPositive').click()
            time.sleep(3)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            # time.sleep(5)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
        while connect == 'CONNECT':
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            time.sleep(4)
            connect = d(
                resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            # WebDriverWait(driver, 20).until(
            # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        ip = '127.0.0.1:' + porta

        output = subprocess.check_output(
            ['adb', '-s', ip, 'shell', 'ifconfig'])

        # Verifica se a conexão VPN está ativa
        if not "tun0" in str(output):
            window['output'].print("Não conectado na BetterNet.")
            window.Refresh()
            try:
                connect = d(
                    resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
                d.app_stop('com.freevpnintouch')
                d.app_start('com.freevpnintouch')
                while connect == 'CONNECT':
                    d(resourceId='com.freevpnintouch:id/buttonConnect').click()
                    time.sleep(4)
                    connect = d(
                        resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            except:
                pass
        abc = False

    def vpn_cyberghost():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da CyberGhost', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('de.mobileconcepts.cyberghost')
            d.app_start('de.mobileconcepts.cyberghost')
        except:
            pass
        # time.sleep(3)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        rate = d(resourceId='de.mobileconcepts.cyberghost:id/rate_me_text')
        if rate.exists:
            d(resourceId='android:id/button2').click()
        time.sleep(2)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        abc = False

    def vpn_tunnelbear():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.tunnelbear.android')
            d.app_start("com.tunnelbear.android")
            while True:
                output = subprocess.check_output(
                    ['adb', '-s', porta, 'shell', 'ifconfig'])
                # print(str(output))
                if "tun0" in str(output):
                    print('Conectada')
                    break
                elif not "tun0" in str(output):
                    print('Reconectando')
                    try:
                        d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                        time.sleep(10)
                    except:
                        pass
        except Exception as e:
            print(e)
            pass

    def vpn_avg():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da AVG', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.avg.android.vpn')
            d.app_start("com.avg.android.vpn",
                        "com.avast.android.vpn.app.wizard.WizardActivity")
            regiao_vpn = d(
                resourceId='com.avg.android.vpn:id/location_title').get_text()

        except Exception as e:
            print(e)
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #               stderr=subprocess.DEVNULL, check=True, shell=True)

        time.sleep(30)

    def vpn_windscribe():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Windscribe', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)
            d.app_stop("com.windscribe.vpn")
            d.app_start("com.windscribe.vpn")
        except:
            pass
        d(resourceId='com.windscribe.vpn:id/on_off_button').click()
        time.sleep(10)
        primeiro = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_name').get_text()
        segundo = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_nick_name').get_text()
        regiao_vpn = primeiro + ' ' + segundo

    def vpn_hma():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HMA', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)

            d.app_stop("com.hidemyass.hidemyassprovpn")
            time.sleep(3)
            d.app_start('com.hidemyass.hidemyassprovpn',
                        'com.avast.android.vpn.activity.HmaOnboardingActivity')
        except:
            pass
        time.sleep(10)

    def gerar_id():
        chars = string.ascii_lowercase + string.digits
        android_id = ''.join(random.choice(chars) for i in range(16))
        return android_id

    options = Options()
    prefs = {"profile.managed_default_content_settings.images": 2}
    options.page_load_strategy = 'none'
    options.add_experimental_option("prefs", prefs)

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    window.Refresh()

    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global transition_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass
    gerar_id()
    android_id = gerar_id()
    subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    time.sleep(2)
    # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True, stdout=subprocess.DEVNULL,
    #               stderr=subprocess.DEVNULL)

    try:
        subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
    except Exception as e:
        pass

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Efetuando troca de IP.')
    window.Refresh()
    try:
        conteudo = config['vpn']
        if conteudo == "AVG":
            vpn_avg()
        elif conteudo == "SurfShark":
            vpn_surf()
        elif conteudo == "Nenhuma":
            nenhuma_vpn()
        elif conteudo == "Avast":
            vpn_avast()
        elif conteudo == "ExpressVPN":
            vpn_express()

        elif conteudo == "PiaVPN":
            vpn_pia()
        elif conteudo == "TunnelBear":
            vpn_tunnelbear()
        elif conteudo == "BetterNet":
            vpn_better()
        elif conteudo == "CyberGhost":
            vpn_cyberghost()
        elif conteudo == "NordVPN":
            vpn_nord()
        elif conteudo == "HotspotShield":
            vpn_hotspotshield()
        elif conteudo == "WindscribeVPN":
            vpn_windscribe()
        elif conteudo == "HmaVPN":
            vpn_hma()
        else:
            window['output'].print(
                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
            window.Refresh()

    except Exception as e:
        print(e)
        pass

    window.Refresh()

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.\n')
    window.Refresh()
    try:
        scope = ["https://spreadsheets.google.com/feeds",
                 "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name(
            'credentials.json', scope)
        client = gspread.authorize(creds)

        spreadsheet_id = config['spreadsheet']
        sheet_name = 'contas'
        # Insert user, password, and timestamp into first empty row
        sheet = client.open_by_key(spreadsheet_id).worksheet(sheet_name)
        values = sheet.col_values(1)

        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
        rows = sheet.get_all_values()

        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
        regex = re.compile(r'\S+\s\S+')
        sheet_name = config['2nr']
        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
        num_rows = sum(1 for row in rows if regex.match(row[0]))
        window['total'].update(num_rows)
    except Exception as e:
        print(e)
    d.implicitly_wait(30.0)
    d.set_fastinput_ime(True)
    if not os.path.exists('./erros'):
        os.makedirs('./erros')
    codigo_não_recebido_seguidos = 0
    while parar is False:
        senha = gerar_senha(12)
        if parar is True:
            print('Parando Thread')
            try:
                chrome.close()
            except:
                pass
            try:
                chrome.quit()
            except:
                pass
            break
        # if codigo_não_recebido_seguidos == 3:
        #    #tempo_aleatorio = random.randint(10, 40)
        #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] 3 códigos não recebidos seguidos.')
        #    window.Refresh()
        #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando 1 hora para voltar novamente.')
        #    window.Refresh()
        #    time.sleep(3600)
        #    codigo_não_recebido_seguidos = 0
        try:
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)

            except:
                pass
            try:
                subprocess.run(
                    f'adb -s {porta} shell pm grant com.instagram.android android.permission.READ_CONTACTS',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            gerar_id()
            android_id = gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            window['output'].print(linha_ret)
            window.Refresh()
            try:
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo instagram.')
                window.Refresh()
                d.app_start('com.instagram.android')
                try:
                    d.xpath(
                        '//android.widget.Button[@content-desc="Criar nova conta"]').click(timeout=120)
                except:
                    conteudo = config['vpn']
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Pagina Estática.')
                    window.Refresh()
                    if conteudo == "AVG":
                        vpn_avg()
                    elif conteudo == "SurfShark":
                        vpn_surf()
                    elif conteudo == "Nenhuma":
                        nenhuma_vpn()
                    elif conteudo == "Avast":
                        vpn_avast()
                    elif conteudo == "ExpressVPN":
                        vpn_express()
                    elif conteudo == "PiaVPN":
                        vpn_pia()
                    elif conteudo == "TunnelBear":
                        vpn_tunnelbear()
                    elif conteudo == "BetterNet":
                        vpn_better()
                    elif conteudo == "CyberGhost":
                        vpn_cyberghost()
                    elif conteudo == "NordVPN":
                        vpn_nord()
                    elif conteudo == "HotspotShield":
                        vpn_hotspotshield()
                    elif conteudo == "WindscribeVPN":
                        vpn_windscribe()
                    elif conteudo == "HmaVPN":
                        vpn_hma()
                    else:
                        window['output'].print(
                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                        window.Refresh()
                    raise Exception('skip')
                # time.sleep(6)
                # novo_layout = d.xpath('//android.view.View[@content-desc="Qual é o seu nome?"]')
                # if len(novo_layout) == 1:
                #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Layout novo encontrado, reiniciando app.')
                #    window.Refresh()
                #    raise Exception("skip.")

                ######################################################################
                lista_user = random.choices(range(0, 9), k=2)
                lista_letras = random.choices(letras, k=1)

                with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                    nomes = nomes_arquivo.readlines()

                with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                    sobrenomes = sobrenomes_arquivo.readlines()

                nomea = fake.first_name_male().replace(" ", "")
                nome = unicodedata.normalize('NFKD', nomea).encode(
                    'ASCII', 'ignore').decode('ASCII')
                sobrenomea = fake.last_name().replace(" ", "").lower()
                sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                    'ASCII', 'ignore').decode('ASCII')
                nome_completo = nome + ' ' + sobrenome
                nome_completo_s = nome + sobrenome
                numeros_concatenados = ''.join(
                    str(numero) for numero in lista_user)
                user_completo1 = nome_completo_s + '' + \
                    str(numeros_concatenados) + ''.join(lista_letras)

                user_completo = random.randint(1, len(user_completo1))
                # Insira o ponto no índice aleatório
                string_with_dot = user_completo1[:user_completo] + \
                    '_' + user_completo1[user_completo:]
                user_completo_antigo = string_with_dot.lower()

                escolha = random.choice(["_", "."])
                user_completo = nome + escolha + sobrenome + \
                    str(numeros_concatenados) + ''.join(lista_letras)
                ######################################################################
                time.sleep(10)
                layout1 = d.xpath(
                    '//android.view.View[@content-desc="Crie um nome de usuário"]')
                layout2 = d(resourceId='android:id/button2')
                layout3 = d.xpath(
                    '//android.view.View[@content-desc="Qual é o número do seu celular?"]')
                layout3v2 = d.xpath(
                    '//android.view.View[@content-desc="Qual é seu número de celular ou email?"]')
                layout4 = d.xpath(
                    '//android.view.View[@content-desc="Crie uma senha"]')
                if layout1.exists:
                    layout_usado = 'layout1'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout1 novo encontrado.')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(4)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=20.0)
                    except Exception as e:
                        print(e)
                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)

                elif layout2.exists:
                    layout_usado = 'layout2'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout2 novo encontrado.')
                    window.Refresh()
                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(4)
                    d.xpath(
                        '//android.widget.Button[@content-desc="Avançar"]/android.view.ViewGroup').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.Button[@content-desc="Avançar"]/android.view.ViewGroup').click()
                    time.sleep(5)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=10.0)
                    except Exception as e:
                        pass

                elif layout3.exists or layout3v2.exists:
                    layout_usado = 'layout3'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout3 novo encontrado.')
                    window.Refresh()
                    try:
                        from selenium import webdriver
                        from selenium.webdriver.common.by import By
                        from selenium.webdriver.chrome.service import Service
                        try:
                            import undetected_chromedriver as uc
                        except:
                            subprocess.run(
                                ['venv/scripts/activate.bat'], shell=True)
                            subprocess.run(
                                ['pip', 'install', 'undetected_chromedriver'])
                            import undetected_chromedriver as uc
                        import time
                        from selenium.webdriver.support.ui import WebDriverWait
                        from selenium.webdriver.support import expected_conditions as EC
                        url = 'https://smstome.com/'
                        chromedriver_path = '.\\storage\\driver\\chromedriver.exe'
                        chrome_options = uc.ChromeOptions()
                        # chrome_options.add_argument("--blink-settings=imagesEnabled=false")
                        chrome_options.add_argument("--disable-gpu")
                        chrome_options.add_argument('--ignore-ssl-errors=yes')
                        chrome_options.add_argument(
                            '--ignore-certificate-errors')
                        chrome_options.add_argument("--no-sandbox")
                        chrome_options.binary_location = '.\\storage\\driver\\chrome.exe'
                        # chrome_options.add_extension('.\\storage\\adblock.crx')
                        chrome_options.add_argument(
                            f"--load-extension={caminho_atual}\\storage\\adblock\\")
                        chrome_options.page_load_strategy = 'eager'
                        # Configurando o Selenium para usar o Chrome Driver local
                        service = Service(executable_path=chromedriver_path)
                        chrome = uc.Chrome(
                            service=service, headless=True, version_main=116, options=chrome_options)
                        chrome.get(url)
                        chrome.set_window_size(1920, 1080)
                        chrome.execute_script("document.body.style.zoom='50%'")

                        time.sleep(5)
                        chrome.refresh()
                        chrome.execute_script("document.body.style.zoom='50%'")
                        while True:
                            rnd = random.randint(1, 9)
                            if rnd == 1 or rnd == 2 or rnd == 8:
                                rnd = random.randint(1, 9)
                            else:
                                break
                        print(rnd)
                        paises = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                            (By.XPATH, f'/html/body/main/header/section/div/div[2]/ul/li[{rnd}]/a')))
                        chrome.execute_script("arguments[0].click();", paises)
                        time.sleep(3)
                        if 'google_vignette' in chrome.current_url:
                            chrome.refresh()
                            paises = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                                (By.XPATH, f'/html/body/main/header/section/div/div[2]/ul/li[{rnd}]/a')))
                            chrome.execute_script(
                                "arguments[0].click();", paises)
                        chrome.execute_script("document.body.style.zoom='33%'")
                        try:
                            botao_fechar = WebDriverWait(chrome, 5).until(
                                EC.presence_of_element_located(
                                    (By.XPATH, '//button[@aria-label="Allow ads"]'))
                            )
                            chrome.execute_script(
                                "arguments[0].click();", botao_fechar)
                        except:
                            pass
                        num_pag = WebDriverWait(chrome, 15).until(
                            EC.presence_of_element_located(
                                (By.XPATH, '/html/body/main/section/div[8]/div/a[13]'))
                        ).text
                        num_pag = int(num_pag) - 1
                        num_pag = random.randint(1, int(num_pag))
                        print(num_pag)
                        url_agora = chrome.current_url
                        chrome.get(f'{url_agora}?page={num_pag}')
                        chrome.execute_script("document.body.style.zoom='50%'")
                        numero_de_elementos = random.randint(1, 7)
                        rnd2 = random.randint(1, 3)
                        try:
                            print(numero_de_elementos, rnd2)
                            elem = WebDriverWait(chrome, 15).until(
                                EC.presence_of_element_located((By.XPATH,
                                                                f'/html/body/main/section/div[{numero_de_elementos}]/div[{rnd2}]/div/div/div[3]/a'))
                            )
                            chrome.execute_script(
                                "arguments[0].click();", elem)

                        except:
                            elem = WebDriverWait(chrome, 15).until(
                                EC.presence_of_element_located((By.XPATH,
                                                                f'/html/body/main/section/div[{numero_de_elementos}]/div[1]/div/div/div[3]/a'))
                            )
                            chrome.execute_script(
                                "arguments[0].click();", elem)
                        chrome.execute_script("document.body.style.zoom='50%'")
                        num = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                            (By.XPATH, '/html/body/main/header/section/h1/small/b'))).text
                        print(num)

                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número: {num}')
                        window.Refresh()
                    except Exception as e:
                        print(e)

                        if not str(e) == '':
                            traceback.print_exc()
                        raise Exception('erro no navegador')
                        pass
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        try:
                            chrome.close()
                        except:
                            pass
                        try:
                            chrome.quit()
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    time.sleep(3)
                    selecionar_sms = d.xpath(
                        '//android.view.View[@content-desc="Enviar código por SMS"]')
                    if selecionar_sms.exists:
                        selecionar_sms.click()
                        time.sleep(1)
                        d.xpath(
                            '//android.view.View[@content-desc="Enviar código"]').click()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    encontrado = False
                    tentativa = 0
                    try:
                        while not encontrado and tentativa < 6:

                            chrome.execute_script(
                                "document.body.style.zoom='50%'")

                            elemento = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                                (By.XPATH, '/html/body/main/section/div[1]/table/tbody/tr[1]/td[3]'))).text
                            print(elemento)
                            # print(elemento)
                            time_second = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                                (By.XPATH, '/html/body/main/section/div[1]/table/tbody/tr[1]/td[2]'))).text
                            print(time_second)
                            # print(time_second)
                            if 'Instagram' in elemento and (
                                    'seconds' in time_second or '1 minute ago' in time_second or '2 minutes ago' in time_second):
                                encontrado = True
                                match = re.search(r'\d+\s*\d+\s*\d+\s*\d+\s*\d+\s*\d+',
                                                  elemento)  # Extrai seis grupos de dígitos, permitindo espaços entre eles
                                if match:
                                    numeros = ''.join(match.group().split())

                            else:
                                # Clique no outro elemento
                                tentativa = tentativa + 1
                                chrome.refresh()
                                time.sleep(7)
                                chrome.execute_script(
                                    "document.body.style.zoom='50%'")
                    except Exception as e:
                        print(e)
                        print('erro')
                        chrome.quit()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Algum erro')
                        window.Refresh()
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                            break
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception("Algum erro")
                        try:
                            chrome.close()
                        except:
                            pass
                        try:
                            chrome.quit()
                        except:
                            pass
                    if tentativa == 6:
                        chrome.quit()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Codigo não recebido.')
                        window.Refresh()
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                            break
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception("Codigo não recebido.")
                    codigo = numeros
                    print(numeros)
                    try:
                        chrome.close()
                    except:
                        pass
                    try:
                        chrome.quit()
                    except:
                        pass
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    time.sleep(2)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=10.0)
                    except Exception as e:
                        print(e)
                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        nome_completo)
                    time.sleep(1)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nome escolhido: {nome_completo}')
                    window.Refresh()
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                    window.Refresh()
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        '')
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(3)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(3)

                elif layout4.exists:
                    layout_usado = 'layout4'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout4 novo encontrado.')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.Button[@content-desc="Avançar"]/android.view.ViewGroup').click()
                    time.sleep(4)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=20.0)
                    except Exception as e:
                        print(e)
                    time.sleep(4)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                    window.Refresh()
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        '')
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(3)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)

                else:
                    layout_usado = 'layout_normal'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout normal encontrado.')
                    window.Refresh()
                    # raise Exception('Manutenção.')
                    cancel = d(resourceId='com.google.android.gms:id/cancel')
                    if cancel.exists(timeout=10):
                        d(resourceId='com.google.android.gms:id/cancel').click()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        nome_completo)
                    time.sleep(1)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nome escolhido: {nome_completo}')
                    window.Refresh()
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=20.0)
                    except Exception as e:
                        print(e)
                    # salvar_senha = d.xpath('//android.view.View[@content-desc="Agora não"]')
                    # if salvar_senha.exists:
                    #    d.xpath('//android.view.View[@content-desc="Agora não"]').click()

                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Alterar nome de usuário"]').click(timeout=5)
                    except:
                        pass
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                    window.Refresh()
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        '')
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(3)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(3)
                    try:
                        from selenium import webdriver
                        from selenium.webdriver.common.by import By
                        from selenium.webdriver.chrome.service import Service
                        try:
                            import undetected_chromedriver as uc
                        except:
                            subprocess.run(
                                ['venv/scripts/activate.bat'], shell=True)
                            subprocess.run(
                                ['pip', 'install', 'undetected_chromedriver'])
                            import undetected_chromedriver as uc
                        import time
                        from selenium.webdriver.support.ui import WebDriverWait
                        from selenium.webdriver.support import expected_conditions as EC
                        url = 'https://smstome.com/'
                        chromedriver_path = '.\\storage\\driver\\chromedriver.exe'
                        chrome_options = uc.ChromeOptions()
                        # chrome_options.add_argument("--blink-settings=imagesEnabled=false")
                        chrome_options.add_argument("--disable-gpu")
                        chrome_options.add_argument('--ignore-ssl-errors=yes')
                        chrome_options.add_argument(
                            '--ignore-certificate-errors')
                        chrome_options.add_argument("--no-sandbox")
                        chrome_options.binary_location = '.\\storage\\driver\\chrome.exe'
                        # chrome_options.add_extension('.\\storage\\adblock.crx')
                        chrome_options.add_argument(
                            f"--load-extension={caminho_atual}\\storage\\adblock\\")
                        chrome_options.page_load_strategy = 'eager'
                        # Configurando o Selenium para usar o Chrome Driver local
                        service = Service(executable_path=chromedriver_path)
                        chrome = uc.Chrome(
                            service=service, headless=True, version_main=116, options=chrome_options)
                        chrome.get(url)
                        chrome.set_window_size(1920, 1080)
                        chrome.execute_script("document.body.style.zoom='50%'")

                        time.sleep(5)
                        chrome.refresh()
                        chrome.execute_script("document.body.style.zoom='50%'")
                        while True:
                            rnd = random.randint(1, 9)
                            if rnd == 1 or rnd == 2 or rnd == 8:
                                rnd = random.randint(1, 9)
                            else:
                                break
                        print(rnd)
                        paises = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                            (By.XPATH, f'/html/body/main/header/section/div/div[2]/ul/li[{rnd}]/a')))
                        chrome.execute_script("arguments[0].click();", paises)
                        time.sleep(3)
                        if 'google_vignette' in chrome.current_url:
                            chrome.refresh()
                            paises = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                                (By.XPATH, f'/html/body/main/header/section/div/div[2]/ul/li[{rnd}]/a')))
                            chrome.execute_script(
                                "arguments[0].click();", paises)
                        chrome.execute_script("document.body.style.zoom='33%'")
                        try:
                            botao_fechar = WebDriverWait(chrome, 5).until(
                                EC.presence_of_element_located(
                                    (By.XPATH, '//button[@aria-label="Allow ads"]'))
                            )
                            chrome.execute_script(
                                "arguments[0].click();", botao_fechar)
                        except:
                            pass
                        num_pag = WebDriverWait(chrome, 15).until(
                            EC.presence_of_element_located(
                                (By.XPATH, '/html/body/main/section/div[8]/div/a[13]'))
                        ).text
                        num_pag = int(num_pag) - 1
                        num_pag = random.randint(1, int(num_pag))
                        print(num_pag)
                        url_agora = chrome.current_url
                        chrome.get(f'{url_agora}?page={num_pag}')
                        chrome.execute_script("document.body.style.zoom='50%'")
                        numero_de_elementos = random.randint(1, 7)
                        rnd2 = random.randint(1, 3)
                        try:
                            print(numero_de_elementos, rnd2)
                            elem = WebDriverWait(chrome, 15).until(
                                EC.presence_of_element_located((By.XPATH,
                                                                f'/html/body/main/section/div[{numero_de_elementos}]/div[{rnd2}]/div/div/div[3]/a'))
                            )
                            chrome.execute_script(
                                "arguments[0].click();", elem)

                        except:
                            elem = WebDriverWait(chrome, 15).until(
                                EC.presence_of_element_located((By.XPATH,
                                                                f'/html/body/main/section/div[{numero_de_elementos}]/div[1]/div/div/div[3]/a'))
                            )
                            chrome.execute_script(
                                "arguments[0].click();", elem)
                        chrome.execute_script("document.body.style.zoom='50%'")
                        num = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                            (By.XPATH, '/html/body/main/header/section/h1/small/b'))).text
                        print(num)

                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número: {num}')
                        window.Refresh()
                    except Exception as e:
                        print(e)

                        if not str(e) == '':
                            traceback.print_exc()
                        raise Exception('erro no navegador')
                        pass
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        try:
                            chrome.close()
                        except:
                            pass
                        try:
                            chrome.quit()
                        except:
                            pass
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    time.sleep(3)
                    selecionar_sms = d.xpath(
                        '//android.view.View[@content-desc="Enviar código por SMS"]')
                    if selecionar_sms.exists:
                        selecionar_sms.click()
                        time.sleep(1)
                        d.xpath(
                            '//android.view.View[@content-desc="Enviar código"]').click()

                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    encontrado = False
                    tentativa = 0
                    try:
                        while not encontrado and tentativa < 6:

                            chrome.execute_script(
                                "document.body.style.zoom='50%'")

                            elemento = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                                (By.XPATH, '/html/body/main/section/div[1]/table/tbody/tr[1]/td[3]'))).text
                            print(elemento)
                            # print(elemento)
                            time_second = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                                (By.XPATH, '/html/body/main/section/div[1]/table/tbody/tr[1]/td[2]'))).text
                            print(time_second)
                            # print(time_second)
                            if 'Instagram' in elemento and (
                                    'seconds' in time_second or '1 minute ago' in time_second or '2 minutes ago' in time_second):
                                encontrado = True
                                match = re.search(r'\d+\s*\d+\s*\d+\s*\d+\s*\d+\s*\d+',
                                                  elemento)  # Extrai seis grupos de dígitos, permitindo espaços entre eles
                                if match:
                                    numeros = ''.join(match.group().split())

                            else:
                                # Clique no outro elemento
                                tentativa = tentativa + 1
                                chrome.refresh()
                                time.sleep(7)
                                chrome.execute_script(
                                    "document.body.style.zoom='50%'")
                    except Exception as e:
                        print(e)
                        print('erro')
                        chrome.quit()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Algum erro')
                        window.Refresh()
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                            break
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception("Algum erro")
                        try:
                            chrome.close()
                        except:
                            pass
                        try:
                            chrome.quit()
                        except:
                            pass
                    if tentativa == 6:
                        chrome.quit()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Codigo não recebido.')
                        window.Refresh()
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                            break
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception("Codigo não recebido.")
                    codigo = numeros
                    print(numeros)
                    try:
                        chrome.close()
                    except:
                        pass
                    try:
                        chrome.quit()
                    except:
                        pass
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    time.sleep(2)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)

                codigo_invalido = d.xpath(
                    '//android.view.View[@content-desc="Não recebi o código"]')
                d.xpath(
                    '//android.view.View[@content-desc="Concordo"]').click()
                time.sleep(5)
                errodetec = d.xpath(
                    '//android.view.View[@content-desc="Concordo"]')
                if errodetec.exists:
                    d.xpath(
                        '//android.view.View[@content-desc="Concordo"]').click()
                    time.sleep(5)

                errodetec = d.xpath(
                    '//android.view.View[@content-desc="Concordo"]')
                if errodetec.exists:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Instagram não deixou avançar.')
                    window.Refresh()

                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
                window.Refresh()
                time.sleep(45)
                verificar = d.xpath(
                    '//android.view.View[@content-desc="Adicionar foto"]')
                verificar2 = d.xpath(
                    '//android.view.View[@content-desc="Aceite os termos e políticas do Instagram"]')
                email = f"{num} - smstome.com"
                try:
                    if verificar.exists:
                        try:
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                   text_color=('lime'))
                            window.Refresh()
                            seguido = False
                            contagem += 1
                            window['criadas'].update(contagem)
                            window.Refresh()
                            now = datetime.now()
                            now_brasilia = tz.localize(now)
                            timestamp = now_brasilia.strftime(
                                "%d/%m/%Y %H:%M:%S")
                            try:
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                          conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            except Exception as e:
                                print(e)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                tempo_aleatorio = random.randint(10, 40)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                time.sleep(tempo_aleatorio)
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                          conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            window['total'].update(num_rows)
                            random_number = random.random()

                            # Definir a chance desejada (10%)
                            chance = 0.2

                            # Verificar se o número aleatório está abaixo da chance
                            if random_number < chance and not user_mysql == "wn3":
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                    funcionamento, scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                sheet_name = 'relatorio_geral'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                          conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)
                        except Exception as e:
                            print(e)
                            pass
                        window.Refresh()
                        arquivo = open(
                            'configuracoes/contas/contas_criadas.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(user_completo + ' ' + senha + "\n")
                        arquivo = open(
                            'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(
                            email + '\n' + user_completo + '\n' + senha + "\n\n")
                        try:
                            d.xpath(
                                '//android.view.View[@content-desc="Pular"]').click()
                            time.sleep(2)
                            d(resourceId='com.instagram.android:id/skip_button').click()
                            time.sleep(2)
                            d(resourceId='com.instagram.android:id/negative_button').click()
                            time.sleep(2)
                            d(resourceId='com.instagram.android:id/skip_button').click()
                            skip_button = d(
                                resourceId='com.instagram.android:id/skip_button')
                            time.sleep(2)
                            if skip_button.exists:
                                d(resourceId='com.instagram.android:id/skip_button').click()
                            time.sleep(4)
                            try:
                                element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                target_text = "Seguir"

                                # Encontre todos os elementos que correspondem ao ID fornecido
                                elements = d(resourceId=element_id)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Seguindo sugeridos...')
                                window.Refresh()
                                time.sleep(5)
                                for element in elements:
                                    if element.get_text() == target_text:
                                        element.click()
                                        time.sleep(1)
                                try:
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                except:
                                    pass
                            except Exception as e:
                                print(e)
                                time.sleep(2)
                                element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                target_text = "Seguir"

                                # Encontre todos os elementos que correspondem ao ID fornecido
                                elements = d(resourceId=element_id)
                                # window['output'].print("Seguindo sugeridos...")
                                window.Refresh()
                                for element in elements:
                                    if element.get_text() == target_text:
                                        element.click()
                                        time.sleep(1)
                                d.xpath(
                                    '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                            time.sleep(1)
                            try:
                                d(resourceId='com.instagram.android:id/button_text').click(timeout=10)
                            except:
                                try:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                except:
                                    time.sleep(2)
                                    try:
                                        d(resourceId='com.instagram.android:id/tab_avatar').click()
                                    except:
                                        d.app_stop("com.instagram.android")
                                        time.sleep(1)
                                        d.app_start("com.instagram.android")
                                        time.sleep(30)
                                        try:
                                            pagina_login = d.xpath(
                                                '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                            if pagina_login.exists:
                                                pagina_login.click()
                                                time.sleep(5)
                                                d.xpath(
                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                                    senha)
                                                pagina_login.click()
                                                time.sleep(3)
                                                d.xpath(
                                                    '//android.view.View[@content-desc="Agora não"]').click()
                                            else:
                                                d(resourceId='com.instagram.android:id/profile_tab').click()
                                        except:
                                            time.sleep(2)
                                            pagina_login = d.xpath(
                                                '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                            if pagina_login.exists:
                                                pagina_login.click()
                                                time.sleep(5)
                                                d.xpath(
                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                                    senha)
                                                pagina_login.click()
                                                time.sleep(3)
                                                d.xpath(
                                                    '//android.view.View[@content-desc="Agora não"]').click()
                                            else:
                                                d(resourceId='com.instagram.android:id/tab_avatar').click()

                            sms = False
                        except Exception as e:
                            d.app_stop("com.instagram.android")
                            time.sleep(1)
                            d.app_start("com.instagram.android")
                            time.sleep(40)
                            try:
                                pagina_login = d.xpath(
                                    '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                if pagina_login.exists:
                                    pagina_login.click()
                                    time.sleep(5)
                                    d.xpath(
                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                        senha)
                                    pagina_login.click()
                                else:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                            except:
                                time.sleep(2)
                                pagina_login = d.xpath(
                                    '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                if pagina_login.exists:
                                    pagina_login.click()
                                    time.sleep(5)
                                    d.xpath(
                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                        senha)
                                    pagina_login.click()
                                else:
                                    d(resourceId='com.instagram.android:id/tab_avatar').click()
                    elif verificar2.exists:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Verificando novamente...')
                        window.Refresh()
                        d.app_stop("com.instagram.android")
                        time.sleep(1)
                        d.app_start("com.instagram.android")

                        if d.xpath('//android.view.View[@content-desc="Esqueceu a senha?"]').exists(timeout=60):
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                user_completo)
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                senha)
                            d.xpath(
                                '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup').click()
                            d.xpath(
                                '//android.view.View[@content-desc="Agora não"]').click()

                        verificar3 = d.xpath(
                            '//android.widget.FrameLayout[@content-desc="Perfil"]/android.view.ViewGroup')
                        time.sleep(40)
                        if verificar3.exists:
                            try:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                                window.Refresh()
                                contagem = contagem + 1
                                sms = False
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")
                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                              conteudo + ' - ' + app]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                              conteudo + ' - ' + app]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                window['total'].update(num_rows)
                                random_number = random.random()

                                # Definir a chance desejada (10%)
                                chance = 0.2

                                # Verificar se o número aleatório está abaixo da chance
                                if random_number < chance and not user_mysql == "wn3":
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                        funcionamento, scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                    sheet_name = 'relatorio_geral'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)
                            except Exception as e:
                                print(e)
                        else:

                            try:
                                conteudo = config['vpn']

                                # Executa a função correspondente ao conteúdo do arquivo
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                            except Exception as e:
                                raise Exception('skip')
                                sms = True
                                continue
                    else:
                        verificar = d(
                            resourceId='com.instagram.android:id/profile_tab')
                        if verificar.exists:
                            try:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                                window.Refresh()
                                seguido = False
                                contagem += 1
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")
                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                window['total'].update(num_rows)
                                random_number = random.random()

                                # Definir a chance desejada (10%)
                                chance = 0.2

                                # Verificar se o número aleatório está abaixo da chance
                                if random_number < chance and not user_mysql == "wn3":
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                        funcionamento, scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                    sheet_name = 'relatorio_geral'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)
                            except Exception as e:
                                print(e)
                                pass
                            window.Refresh()
                            arquivo = open(
                                'configuracoes/contas/contas_criadas.txt', 'a')
                            # Escreva mais conteúdo no arquivo
                            arquivo.write(user_completo + ' ' + senha + "\n")
                            arquivo = open(
                                'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                            # Escreva mais conteúdo no arquivo
                            arquivo.write(
                                email + '\n' + user_completo + '\n' + senha + "\n\n")
                            try:
                                d.xpath(
                                    '//android.view.View[@content-desc="Pular"]').click()
                                time.sleep(2)
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(2)
                                d(resourceId='com.instagram.android:id/negative_button').click()
                                time.sleep(2)
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(4)
                                try:
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Seguindo sugeridos...')
                                    window.Refresh()
                                    time.sleep(5)
                                    for element in elements:
                                        if element.get_text() == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                except Exception as e:
                                    print(e)
                                    time.sleep(2)
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window['output'].print(
                                        "Seguindo sugeridos...")
                                    window.Refresh()
                                    for element in elements:
                                        if element.get_text() == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                time.sleep(1)
                                try:
                                    d(resourceId='com.instagram.android:id/button_text').click()
                                except:
                                    pass
                                time.sleep(3)
                                try:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                except:
                                    time.sleep(2)
                                    d(resourceId='com.instagram.android:id/tab_avatar').click()
                                sms = False
                            except Exception as e:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Reabrindo Instagram.')
                                window.Refresh()
                                d.app_stop('com.instagram.android')
                                d.app_start('com.instagram.android')
                                time.sleep(20)
                                pass
                        else:
                            try:
                                chrome.close()
                            except:
                                pass
                            try:
                                chrome.quit()
                            except:
                                pass
                            try:
                                conteudo = config['vpn']

                                # Executa a função correspondente ao conteúdo do arquivo
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                            except Exception as e:
                                raise Exception('skip')
                                continue
                except Exception as e:
                    print(e)
                    try:
                        chrome.close()
                    except:
                        pass
                    try:
                        chrome.quit()
                    except:
                        pass
                    if conteudo == "AVG":
                        vpn_avg()
                    elif conteudo == "SurfShark":
                        vpn_surf()
                    elif conteudo == "Nenhuma":
                        nenhuma_vpn()
                    elif conteudo == "Avast":
                        vpn_avast()
                    elif conteudo == "ExpressVPN":
                        vpn_express()
                    elif conteudo == "PiaVPN":
                        vpn_pia()
                    elif conteudo == "TunnelBear":
                        vpn_tunnelbear()
                    elif conteudo == "BetterNet":
                        vpn_better()
                    elif conteudo == "CyberGhost":
                        vpn_cyberghost()
                    elif conteudo == "NordVPN":
                        vpn_nord()
                    elif conteudo == "HotspotShield":
                        vpn_hotspotshield()
                    elif conteudo == "WindscribeVPN":
                        vpn_windscribe()
                    elif conteudo == "HmaVPN":
                        vpn_hma()
                    else:
                        window['output'].print(
                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                        window.Refresh()
                    sms = True
                    raise Exception('skip')
                while sms is False:
                    senha = gerar_senha(12)
                    try:
                        time.sleep(3)
                        try:
                            d(resourceId='com.instagram.android:id/profile_tab').click(timeout=120)
                        except:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu algum erro nesta conta.')
                            window.Refresh()
                            raise Exception('Erro na conta')
                        window['output'].print(linha_ret)
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Criação de outro perfil.')
                        window.Refresh()
                        seguido = False
                        # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True)
                        # Clicar no botão de perfil

                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/action_bar_title_chevron').click()
                        time.sleep(2)
                        # Clicar em perfis
                        try:
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout[2]/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.ListView/android.widget.LinearLayout[last()]/android.widget.FrameLayout/android.widget.ImageView').click()
                        except Exception as e:
                            print(e)
                            print('Erro aq')
                            time.sleep(200)
                        # Clicar em adicionar conta
                        d.xpath(
                            '//android.widget.Button[@content-desc="Criar nova conta"]').click()

                        time.sleep(3)
                        # Gerar nome de usuário, digitar no campo e clicar em avançae
                        lista_user = random.choices(range(0, 9), k=2)
                        lista_letras = random.choices(letras, k=1)

                        with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                            nomes = nomes_arquivo.readlines()

                        with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                            sobrenomes = sobrenomes_arquivo.readlines()

                        nomea = fake.first_name_male().replace(" ", "")
                        nome = unicodedata.normalize('NFKD', nomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        sobrenomea = fake.last_name().replace(" ", "").lower()
                        sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        nome_completo = nome + sobrenome
                        numeros_concatenados = ''.join(
                            str(numero) for numero in lista_user)
                        user_completo1 = nome_completo + '' + \
                            str(numeros_concatenados) + ''.join(lista_letras)

                        user_completo = random.randint(1, len(user_completo1))
                        # Insira o ponto no índice aleatório
                        string_with_dot = user_completo1[:user_completo] + \
                            '_' + user_completo1[user_completo:]
                        user_completo_antigo = string_with_dot.lower()

                        escolha = random.choice(["_", "."])
                        user_completo = nome + escolha + sobrenome + \
                            str(numeros_concatenados) + ''.join(lista_letras)
                        print(user_completo)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: ' + user_completo)
                        window.Refresh()
                        d(resourceId='com.instagram.android:id/username').set_text(
                            user_completo)
                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/button_text').click()
                        # Digitar senha e avançar
                        time.sleep(3)
                        try:
                            d(resourceId='com.instagram.android:id/password').set_text(
                                senha)
                        except:
                            try:
                                conteudo = config['vpn']
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()

                            except Exception as e:
                                raise Exception('skip')
                        d(resourceId='com.instagram.android:id/button_text').click()
                        # Clicar em concluir cadastro
                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/button_text').click()

                        time.sleep(4)
                        feedback = d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.View')
                        if feedback.exists:
                            sms = True

                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
                        window.Refresh()
                        # WebDriverWait(driver, 40).until(EC.visibility_of_element_located)(((By.XPATH,
                        #                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')

                        verificar = d(
                            resourceId='com.instagram.android:id/connect_text')
                        if verificar.exists(timeout=60):
                            time.sleep(20)
                            verificar = d(
                                resourceId='com.instagram.android:id/connect_text')
                        if verificar.exists:
                            try:
                                conteudo = config['vpn']
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                                window.Refresh()
                                contagem += 1
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")

                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))

                                window['total'].update(num_rows)
                                try:
                                    random_number = random.random()

                                    # Definir a chance desejada (10%)
                                    chance = 0.2

                                    # Verificar se o número aleatório está abaixo da chance
                                    if random_number < chance and not user_mysql == "wn3":
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                 "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                            funcionamento, scope)
                                        client = gspread.authorize(creds)

                                        spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                        sheet_name = 'relatorio_geral'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                                  conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:G{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)
                                except:
                                    pass

                                window.Refresh()
                                arquivo = open(
                                    'configuracoes/contas/contas_criadas.txt', 'a')
                                # Escreva mais conteúdo no arquivo
                                arquivo.write(user_completo +
                                              ' ' + senha + "\n")
                                arquivo = open(
                                    'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                                # Escreva mais conteúdo no arquivo
                                arquivo.write(
                                    email + '\n' + user_completo + '\n' + senha + "\n\n")
                                window.Refresh()
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(1)
                                d(resourceId='com.instagram.android:id/negative_button').click()
                                time.sleep(3)
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(1)
                                try:
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Seguindo sugeridos...')
                                    window.Refresh()
                                    for element in elements:
                                        if element.get_text() == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                except Exception as e:
                                    print(e)
                                    d(resourceId='com.instagram.android:id/skip_button').click()
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window.Refresh()
                                    for element in elements:
                                        if element.text == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()

                                time.sleep(1)
                                time.sleep(3)
                                try:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                except Exception as e:
                                    print(e)
                                    d(resourceId='com.instagram.android:id/button_text').click()
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                sms = False
                            except Exception as e:
                                print(e)

                        else:
                            try:
                                try:
                                    chrome.close()
                                except:
                                    pass
                                try:
                                    chrome.quit()
                                except:
                                    pass
                                conteudo = config['vpn']
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()

                            except Exception as e:
                                sms = True
                                try:
                                    chrome.close()
                                except:
                                    pass
                                try:
                                    chrome.quit()
                                except:
                                    pass
                                if not str(e) == '':
                                    traceback.print_exc()
                                if not e == 'skip' or not e == 'Manutenção.':
                                    try:
                                        d.screenshot(
                                            f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                                    except Exception as e:
                                        print(e)
                                        pass
                    except Exception as e:
                        print(e)
                        try:
                            chrome.close()
                        except:
                            pass
                        try:
                            chrome.quit()
                        except:
                            pass
                        if not str(e) == '':
                            traceback.print_exc()
                        if not e == 'skip' or not e == 'Manutenção.':
                            try:
                                d.screenshot(
                                    f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                            except Exception as e:
                                print(e)
                                pass
                        sms = True

            except Exception as e:
                print(e)
                try:
                    chrome.close()
                except:
                    pass
                try:
                    chrome.quit()
                except:
                    pass
                if not str(e) == '':
                    traceback.print_exc()
                if not e == 'skip' or not e == 'Manutenção.':
                    try:
                        d.screenshot(
                            f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                    except Exception as e:
                        print(e)
                        pass

        except Exception as e:
            print(e)
            try:
                chrome.close()
            except:
                pass
            try:
                chrome.quit()
            except:
                pass
            if not str(e) == '':
                traceback.print_exc()
            if not e == 'skip' or not e == 'Manutenção.':
                try:
                    d.screenshot(
                        f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                except Exception as e:
                    print(e)
                    pass

            pass


def freereceivesms_com():
    SPREADSHEET_ID = config['spreadsheet']
    conteudo = config['vpn']
    senha = gerar_senha(12)
    maquina = config['maquina']
    tentativa = False
    seguido = False
    regiao_vpn = 'Sem dados'
    if config['email'] == '-2nr-' and config['app'] == '-instalite-':
        app = 'Lite'
    elif config['email'] == '-2nr-' and config['app'] == '-insta-':
        app = 'Normal'
    else:
        app = "Normal"
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    # Código que gera a saída
    import os
    import time
    import requests
    import hashlib
    import subprocess

    # verifica se o arquivo existe na pasta do bot

    try:
        from rich.console import Console
    except ModuleNotFoundError:
        import subprocess
        import sys

        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['pip', 'install', '-r', 'requirements.txt'])
        subprocess.run(['deactivate'], shell=True)
        from rich.console import Console
    import os
    import time
    try:
        import uiautomator2 as u2
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'uiautomator2==2.16.25'])
        subprocess.run(['deactivate'], shell=True)
        subprocess.run(['pip', 'install', '--upgrade', 'requests'])
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        import requests
        time.sleep(10)
        import uiautomator2 as u2
    d = u2.connect(f'{porta}')
    import requests
    import hashlib
    import subprocess
    from colorama import init, Fore, Back, Style
    from faker import Faker
    # teste
    init(autoreset=True)
    console = Console()
    from termcolor import colored

    from rich.console import Console
    from rich.panel import Panel
    from rich.text import Text
    from rich.rule import Rule

    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random
    from datetime import datetime
    import string
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import NoSuchElementException
    from mailtm import Email
    import re
    import logging

    logger = logging.getLogger(__name__)

    handler = logging.FileHandler('log.txt')
    handler.setLevel(logging.ERROR)

    logger.addHandler(handler)
    file_path = './storage/adblock.crx'
    import zipfile

    def baixar_arquivo(url, caminho_arquivo, pasta_destino):
        # Verifica e cria a pasta destino, se necessário
        if os.path.exists(pasta_destino):
            return
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Baixando navegador...')
        window.Refresh()
        # Se a pasta não existir, cria a pasta destino
        os.makedirs(pasta_destino)

        # Continua com o download do arquivo
        resposta = requests.get(url, stream=True)
        tamanho_total = int(resposta.headers.get('content-length', 0))

        with open(caminho_arquivo, 'wb') as file:
            for dados in resposta.iter_content(chunk_size=4096):
                file.write(dados)

        # Extrai o arquivo
        with zipfile.ZipFile(caminho_arquivo, 'r') as zip_ref:
            zip_ref.extractall(pasta_destino)

        # Apaga o arquivo zip após a extração
        os.remove(caminho_arquivo)
        print("\nDownload e extração concluídos.")

    url = 'https://www.dropbox.com/scl/fi/9juftou3q4k4kj2o7mzhq/chrome-win.zip?rlkey=84n9pwxouhu9punpcjg32onbz&dl=1'
    caminho_arquivo = './storage/driver/driver.zip'
    pasta_destino = './storage/driver/'

    baixar_arquivo(url, caminho_arquivo, pasta_destino)
    if os.path.exists("./storage/adblock/"):
        result = f"A pasta 'adblock' já existe em '{file_path}'."
    else:
        # URL para download
        url = 'https://www.dropbox.com/scl/fi/2tu2g6ulqwr2xk20kut1x/adblock.crx?rlkey=55rysc1sspa7t81ldybg8t6iy&dl=1'

        # Fazendo o download do arquivo
        response = requests.get(url)
        if response.status_code == 200:
            with open(file_path, 'wb') as file:
                file.write(response.content)
            print("Arquivo 'adblock.crx' baixado e salvo em './storage/adblock.crx'.")
            # Caminho do arquivo original (altere para o seu caminho de arquivo)
            caminho_original = './storage/adblock.crx'
            novo_caminho = './storage/adblock.zip'

            # Renomear o arquivo
            os.rename(caminho_original, novo_caminho)

            # Caminho do arquivo zip
            caminho_zip = './storage/adblock.zip'

            # Diretório de destino para extrair
            diretorio_destino = './storage/adblock/'

            # Remover um arquivo anterior, se existir
            arquivo_antigo = './storage/adblock'
            if os.path.exists(arquivo_antigo):
                os.remove(arquivo_antigo)

            # Criar o diretório de destino se ele não existir
            if not os.path.exists(diretorio_destino):
                os.makedirs(diretorio_destino)

            # Extrair o arquivo zip
            with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                zip_ref.extractall(diretorio_destino)

            print("Arquivo extraído com sucesso!")
            os.remove('./storage/adblock.zip')

        else:
            result = "Não foi possível baixar o arquivo. Status Code: " + \
                str(response.status_code)

    # RANGE_NAME = 'contas!A:D'
    #
    # SCOPES = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

    def vpn_avast():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Avast', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop("com.avast.android.vpn")
            d.app_start("com.avast.android.vpn", ".app.wizard.WizardActivity")
            time.sleep(10)
        except Exception as e:
            print(e)
        abc = False

    def nenhuma_vpn():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.facebook.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        time.sleep(10)

    def vpn_hotspotshield():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HotspotShield',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('hotspotshield.android.vpn')
            d.app_start('hotspotshield.android.vpn')
        except Exception as e:
            print(e)
        d(resourceId='hotspotshield.android.vpn:id/tryAgainButton').click()
        time.sleep(5)
        d(resourceId='hotspotshield.android.vpn:id/btnVpnConnect').click()

        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_pia():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da PiaVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.privateinternetaccess.android')
            d.app_start('com.privateinternetaccess.android')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()
        time.sleep(3)
        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()

        abc = False

    def vpn_express():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da ExpressVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.expressvpn.vpn')
            d.app_start('com.expressvpn.vpn')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.expressvpn.vpn:id/obiButton').click()
        time.sleep(3)
        d(resourceId='com.expressvpn.vpn:id/obiButton').click()

        abc = False

    def vpn_nord():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da NordVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.nordvpn.android')
            time.sleep(5)
            d.app_start('com.nordvpn.android', use_monkey=True)
        except:
            pass
        time.sleep(10)
        time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_surf():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('com.surfshark.vpnclient.android')
            d.app_start('com.surfshark.vpnclient.android')
        except:
            pass
        time.sleep(15)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_better():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da BetterNet', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        try:
            d.app_stop('com.freevpnintouch')
            d.app_start('com.freevpnintouch')
        except:
            pass
        time.sleep(10)
        dialog = d(resourceId='com.freevpnintouch:id/dialogCtaPositive')
        connect = d(
            resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
        if dialog.exists:
            d(resourceId='com.freevpnintouch:id/dialogCtaPositive').click()
            time.sleep(3)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            # time.sleep(5)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
        while connect == 'CONNECT':
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            time.sleep(4)
            connect = d(
                resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            # WebDriverWait(driver, 20).until(
            # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        ip = '127.0.0.1:' + porta

        output = subprocess.check_output(
            ['adb', '-s', ip, 'shell', 'ifconfig'])

        # Verifica se a conexão VPN está ativa
        if not "tun0" in str(output):
            window['output'].print("Não conectado na BetterNet.")
            window.Refresh()
            try:
                connect = d(
                    resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
                d.app_stop('com.freevpnintouch')
                d.app_start('com.freevpnintouch')
                while connect == 'CONNECT':
                    d(resourceId='com.freevpnintouch:id/buttonConnect').click()
                    time.sleep(4)
                    connect = d(
                        resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            except:
                pass
        abc = False

    def vpn_cyberghost():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da CyberGhost', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('de.mobileconcepts.cyberghost')
            d.app_start('de.mobileconcepts.cyberghost')
        except:
            pass
        # time.sleep(3)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        rate = d(resourceId='de.mobileconcepts.cyberghost:id/rate_me_text')
        if rate.exists:
            d(resourceId='android:id/button2').click()
        time.sleep(2)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        abc = False

    def vpn_tunnelbear():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.tunnelbear.android')
            d.app_start("com.tunnelbear.android")
            while True:
                output = subprocess.check_output(
                    ['adb', '-s', porta, 'shell', 'ifconfig'])
                # print(str(output))
                if "tun0" in str(output):
                    print('Conectada')
                    break
                elif not "tun0" in str(output):
                    print('Reconectando')
                    try:
                        d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                        time.sleep(10)
                    except:
                        pass
        except Exception as e:
            print(e)
            pass

    def vpn_avg():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da AVG', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.avg.android.vpn')
            d.app_start("com.avg.android.vpn",
                        "com.avast.android.vpn.app.wizard.WizardActivity")
            regiao_vpn = d(
                resourceId='com.avg.android.vpn:id/location_title').get_text()

        except Exception as e:
            print(e)
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #               stderr=subprocess.DEVNULL, check=True, shell=True)

        time.sleep(30)

    def vpn_windscribe():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Windscribe', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)
            d.app_stop("com.windscribe.vpn")
            d.app_start("com.windscribe.vpn")
        except:
            pass
        d(resourceId='com.windscribe.vpn:id/on_off_button').click()
        time.sleep(10)
        primeiro = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_name').get_text()
        segundo = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_nick_name').get_text()
        regiao_vpn = primeiro + ' ' + segundo

    def vpn_hma():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HMA', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)

            d.app_stop("com.hidemyass.hidemyassprovpn")
            time.sleep(3)
            d.app_start('com.hidemyass.hidemyassprovpn',
                        'com.avast.android.vpn.activity.HmaOnboardingActivity')
        except:
            pass
        time.sleep(10)

    def gerar_id():
        chars = string.ascii_lowercase + string.digits
        android_id = ''.join(random.choice(chars) for i in range(16))
        return android_id

    options = Options()
    prefs = {"profile.managed_default_content_settings.images": 2}
    options.page_load_strategy = 'none'
    options.add_experimental_option("prefs", prefs)

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    window.Refresh()

    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global transition_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass
    gerar_id()
    android_id = gerar_id()
    subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    time.sleep(2)
    # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True, stdout=subprocess.DEVNULL,
    #               stderr=subprocess.DEVNULL)

    try:
        subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
    except Exception as e:
        pass

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Efetuando troca de IP.')
    window.Refresh()
    try:
        conteudo = config['vpn']
        if conteudo == "AVG":
            vpn_avg()
        elif conteudo == "SurfShark":
            vpn_surf()
        elif conteudo == "Nenhuma":
            nenhuma_vpn()
        elif conteudo == "Avast":
            vpn_avast()
        elif conteudo == "ExpressVPN":
            vpn_express()

        elif conteudo == "PiaVPN":
            vpn_pia()
        elif conteudo == "TunnelBear":
            vpn_tunnelbear()
        elif conteudo == "BetterNet":
            vpn_better()
        elif conteudo == "CyberGhost":
            vpn_cyberghost()
        elif conteudo == "NordVPN":
            vpn_nord()
        elif conteudo == "HotspotShield":
            vpn_hotspotshield()
        elif conteudo == "WindscribeVPN":
            vpn_windscribe()
        elif conteudo == "HmaVPN":
            vpn_hma()
        else:
            window['output'].print(
                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
            window.Refresh()

    except Exception as e:
        print(e)
        pass

    window.Refresh()

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.\n')
    window.Refresh()
    try:
        scope = ["https://spreadsheets.google.com/feeds",
                 "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name(
            'credentials.json', scope)
        client = gspread.authorize(creds)

        spreadsheet_id = config['spreadsheet']
        sheet_name = 'contas'
        # Insert user, password, and timestamp into first empty row
        sheet = client.open_by_key(spreadsheet_id).worksheet(sheet_name)
        values = sheet.col_values(1)

        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
        rows = sheet.get_all_values()

        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
        regex = re.compile(r'\S+\s\S+')
        sheet_name = config['2nr']
        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
        num_rows = sum(1 for row in rows if regex.match(row[0]))
        window['total'].update(num_rows)
    except Exception as e:
        print(e)
    d.implicitly_wait(30.0)
    d.set_fastinput_ime(True)
    if not os.path.exists('./erros'):
        os.makedirs('./erros')
    codigo_não_recebido_seguidos = 0
    while parar is False:
        senha = gerar_senha(12)
        if parar is True:
            print('Parando Thread')
            try:
                chrome.close()
            except:
                pass
            try:
                chrome.quit()
            except:
                pass
            break
        # if codigo_não_recebido_seguidos == 3:
        #    #tempo_aleatorio = random.randint(10, 40)
        #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] 3 códigos não recebidos seguidos.')
        #    window.Refresh()
        #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando 1 hora para voltar novamente.')
        #    window.Refresh()
        #    time.sleep(3600)
        #    codigo_não_recebido_seguidos = 0
        try:
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)

            except:
                pass
            try:
                subprocess.run(
                    f'adb -s {porta} shell pm grant com.instagram.android android.permission.READ_CONTACTS',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            gerar_id()
            android_id = gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            window['output'].print(linha_ret)
            window.Refresh()
            try:
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo instagram.')
                window.Refresh()
                d.app_start('com.instagram.android')
                try:
                    d.xpath(
                        '//android.widget.Button[@content-desc="Criar nova conta"]').click(timeout=120)
                except:
                    conteudo = config['vpn']
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Pagina Estática.')
                    window.Refresh()
                    if conteudo == "AVG":
                        vpn_avg()
                    elif conteudo == "SurfShark":
                        vpn_surf()
                    elif conteudo == "Nenhuma":
                        nenhuma_vpn()
                    elif conteudo == "Avast":
                        vpn_avast()
                    elif conteudo == "ExpressVPN":
                        vpn_express()
                    elif conteudo == "PiaVPN":
                        vpn_pia()
                    elif conteudo == "TunnelBear":
                        vpn_tunnelbear()
                    elif conteudo == "BetterNet":
                        vpn_better()
                    elif conteudo == "CyberGhost":
                        vpn_cyberghost()
                    elif conteudo == "NordVPN":
                        vpn_nord()
                    elif conteudo == "HotspotShield":
                        vpn_hotspotshield()
                    elif conteudo == "WindscribeVPN":
                        vpn_windscribe()
                    elif conteudo == "HmaVPN":
                        vpn_hma()
                    else:
                        window['output'].print(
                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                        window.Refresh()
                    raise Exception('skip')
                # time.sleep(6)
                # novo_layout = d.xpath('//android.view.View[@content-desc="Qual é o seu nome?"]')
                # if len(novo_layout) == 1:
                #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Layout novo encontrado, reiniciando app.')
                #    window.Refresh()
                #    raise Exception("skip.")

                ######################################################################
                lista_user = random.choices(range(0, 9), k=2)
                lista_letras = random.choices(letras, k=1)

                with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                    nomes = nomes_arquivo.readlines()

                with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                    sobrenomes = sobrenomes_arquivo.readlines()

                nomea = fake.first_name_male().replace(" ", "")
                nome = unicodedata.normalize('NFKD', nomea).encode(
                    'ASCII', 'ignore').decode('ASCII')
                sobrenomea = fake.last_name().replace(" ", "").lower()
                sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                    'ASCII', 'ignore').decode('ASCII')
                nome_completo = nome + ' ' + sobrenome
                nome_completo_s = nome + sobrenome
                numeros_concatenados = ''.join(
                    str(numero) for numero in lista_user)
                user_completo1 = nome_completo_s + '' + \
                    str(numeros_concatenados) + ''.join(lista_letras)

                user_completo = random.randint(1, len(user_completo1))
                # Insira o ponto no índice aleatório
                string_with_dot = user_completo1[:user_completo] + \
                    '_' + user_completo1[user_completo:]
                user_completo_antigo = string_with_dot.lower()

                escolha = random.choice(["_", "."])
                user_completo = nome + escolha + sobrenome + \
                    str(numeros_concatenados) + ''.join(lista_letras)
                ######################################################################
                time.sleep(10)
                layout1 = d.xpath(
                    '//android.view.View[@content-desc="Crie um nome de usuário"]')
                layout2 = d(resourceId='android:id/button2')
                layout3 = d.xpath(
                    '//android.view.View[@content-desc="Qual é o número do seu celular?"]')
                layout3v2 = d.xpath(
                    '//android.view.View[@content-desc="Qual é seu número de celular ou email?"]')
                layout4 = d.xpath(
                    '//android.view.View[@content-desc="Crie uma senha"]')
                if layout1.exists:
                    layout_usado = 'layout1'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout1 novo encontrado.')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(4)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=20.0)
                    except Exception as e:
                        print(e)
                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)

                elif layout2.exists:
                    layout_usado = 'layout2'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout2 novo encontrado.')
                    window.Refresh()
                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(4)
                    d.xpath(
                        '//android.widget.Button[@content-desc="Avançar"]/android.view.ViewGroup').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.Button[@content-desc="Avançar"]/android.view.ViewGroup').click()
                    time.sleep(5)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=10.0)
                    except Exception as e:
                        pass

                elif layout3.exists or layout3v2.exists:
                    layout_usado = 'layout3'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout3 novo encontrado.')
                    window.Refresh()
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=10.0)
                    except Exception as e:
                        print(e)
                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        nome_completo)
                    time.sleep(1)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nome escolhido: {nome_completo}')
                    window.Refresh()
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                    window.Refresh()
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        '')
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(3)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(3)

                elif layout4.exists:
                    layout_usado = 'layout4'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout4 novo encontrado.')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.Button[@content-desc="Avançar"]/android.view.ViewGroup').click()
                    time.sleep(4)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=20.0)
                    except Exception as e:
                        print(e)
                    time.sleep(4)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                    window.Refresh()
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        '')
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(3)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)

                else:
                    layout_usado = 'layout_normal'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout normal encontrado.')
                    window.Refresh()
                    # raise Exception('Manutenção.')
                    cancel = d(resourceId='com.google.android.gms:id/cancel')
                    if cancel.exists(timeout=10):
                        d(resourceId='com.google.android.gms:id/cancel').click()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        nome_completo)
                    time.sleep(1)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nome escolhido: {nome_completo}')
                    window.Refresh()
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=20.0)
                    except Exception as e:
                        print(e)
                    # salvar_senha = d.xpath('//android.view.View[@content-desc="Agora não"]')
                    # if salvar_senha.exists:
                    #    d.xpath('//android.view.View[@content-desc="Agora não"]').click()

                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Alterar nome de usuário"]').click(timeout=5)
                    except:
                        pass
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                    window.Refresh()
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        '')
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(3)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(3)
                    try:
                        from selenium import webdriver
                        from selenium.webdriver.common.by import By
                        from selenium.webdriver.chrome.service import Service
                        try:
                            import undetected_chromedriver as uc
                        except:
                            subprocess.run(
                                ['venv/scripts/activate.bat'], shell=True)
                            subprocess.run(
                                ['pip', 'install', 'undetected_chromedriver'])
                            import undetected_chromedriver as uc
                        import time
                        from selenium.webdriver.support.ui import WebDriverWait
                        from selenium.webdriver.support import expected_conditions as EC
                        url = 'https://www.freereceivesms.com/en/all/'
                        chromedriver_path = '.\\storage\\driver\\chromedriver.exe'
                        chrome_options = uc.ChromeOptions()
                        # chrome_options.add_argument("--blink-settings=imagesEnabled=false")
                        chrome_options.add_argument("--disable-gpu")
                        chrome_options.add_argument('--ignore-ssl-errors=yes')
                        chrome_options.add_argument(
                            '--ignore-certificate-errors')
                        chrome_options.add_argument("--no-sandbox")
                        chrome_options.binary_location = '.\\storage\\driver\\chrome.exe'
                        # chrome_options.add_extension('.\\storage\\adblock.crx')
                        chrome_options.add_argument(
                            f"--load-extension={caminho_atual}\\storage\\adblock\\")
                        chrome_options.page_load_strategy = 'eager'
                        # Configurando o Selenium para usar o Chrome Driver local
                        service = Service(executable_path=chromedriver_path)
                        chrome = uc.Chrome(
                            service=service, headless=True, version_main=116, options=chrome_options)
                        chrome.get(url)
                        chrome.set_window_size(1920, 1080)
                        chrome.execute_script("document.body.style.zoom='33%'")
                        lista = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16',
                                 '17', '18', '19', '20']
                        numero_escolhido = random.choice(lista)
                        button_with_text = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                            (By.XPATH, f'/html/body/div[*]/div[1]/div[{numero_escolhido}]/div/div[2]/a')))

                        # Clica no botão
                        chrome.execute_script(
                            "arguments[0].click();", button_with_text)
                        chrome.execute_script("document.body.style.zoom='33%'")
                        time.sleep(5)
                        url = chrome.current_url
                        if "#google_vignette" in url:
                            chrome.refresh()
                        num = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                            (By.XPATH, '/html/body/div[2]/div/div/div[1]/div[1]/div'))).text

                        print(num)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número: {num}')
                        window.Refresh()
                    except Exception as e:
                        print(e)

                        if not str(e) == '':
                            traceback.print_exc()
                        raise Exception('erro no navegador')
                        pass
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        try:
                            chrome.close()
                        except:
                            pass
                        try:
                            chrome.quit()
                        except:
                            pass
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    time.sleep(3)
                    selecionar_sms = d.xpath(
                        '//android.view.View[@content-desc="Enviar código por SMS"]')
                    if selecionar_sms.exists:
                        selecionar_sms.click()
                        time.sleep(1)
                        d.xpath(
                            '//android.view.View[@content-desc="Enviar código"]').click()

                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    encontrado = False
                    tentativa = 0
                    try:
                        while not encontrado and tentativa < 6:

                            chrome.execute_script(
                                "document.body.style.zoom='50%'")

                            elemento = WebDriverWait(chrome, 25).until(EC.element_to_be_clickable(
                                (By.XPATH, '//div[@class="row border-bottom"]/div[@class="col-lg-8"]'))).text

                            # print(f'elemento é {elemento}')
                            time_second = WebDriverWait(chrome, 25).until(EC.element_to_be_clickable(
                                (By.XPATH, '/html/body/div[*]/div[2]/div[2]'))).text

                            # print(f'tempo é {time_second}')
                            numeros = ''
                            if 'Instagram' in elemento and (
                                    'seconds' in time_second or '1minutes ago' in time_second or '2minutes ago' in time_second):
                                encontrado = True
                                match = re.search(r'\d+\s*\d+\s*\d+\s*\d+\s*\d+\s*\d+',
                                                  elemento)  # Extrai seis grupos de dígitos, permitindo espaços entre eles
                                if match:
                                    numeros = ''.join(match.group().split())
                            else:
                                # Clique no outro elemento
                                tentativa = tentativa + 1
                                chrome.refresh()
                                time.sleep(5)
                                chrome.execute_script(
                                    "document.body.style.zoom='50%'")
                                time.sleep(3)
                    except Exception as e:
                        print(e)
                        print('erro')
                        chrome.quit()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Algum erro')
                        window.Refresh()
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                            break
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception("Algum erro")
                        try:
                            chrome.close()
                        except:
                            pass
                        try:
                            chrome.quit()
                        except:
                            pass
                    if tentativa == 6:
                        chrome.quit()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Codigo não recebido.')
                        window.Refresh()
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                            break
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception("Codigo não recebido.")
                    codigo = numeros
                    print(numeros)
                    try:
                        chrome.close()
                    except:
                        pass
                    try:
                        chrome.quit()
                    except:
                        pass
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)

                codigo_invalido = d.xpath(
                    '//android.view.View[@content-desc="Não recebi o código"]')
                d.xpath(
                    '//android.view.View[@content-desc="Concordo"]').click()
                time.sleep(5)
                errodetec = d.xpath(
                    '//android.view.View[@content-desc="Concordo"]')
                if errodetec.exists:
                    d.xpath(
                        '//android.view.View[@content-desc="Concordo"]').click()
                    time.sleep(5)

                errodetec = d.xpath(
                    '//android.view.View[@content-desc="Concordo"]')
                if errodetec.exists:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Instagram não deixou avançar.')
                    window.Refresh()

                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
                window.Refresh()
                time.sleep(45)
                verificar = d.xpath(
                    '//android.view.View[@content-desc="Adicionar foto"]')
                verificar2 = d.xpath(
                    '//android.view.View[@content-desc="Aceite os termos e políticas do Instagram"]')
                email = f"{num} - freereceivesms.com"
                try:
                    if verificar.exists:
                        try:
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                   text_color=('lime'))
                            window.Refresh()
                            seguido = False
                            contagem += 1
                            window['criadas'].update(contagem)
                            window.Refresh()
                            now = datetime.now()
                            now_brasilia = tz.localize(now)
                            timestamp = now_brasilia.strftime(
                                "%d/%m/%Y %H:%M:%S")
                            try:
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                          conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            except Exception as e:
                                print(e)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                tempo_aleatorio = random.randint(10, 40)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                time.sleep(tempo_aleatorio)
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                          conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            window['total'].update(num_rows)
                            random_number = random.random()

                            # Definir a chance desejada (10%)
                            chance = 0.2

                            # Verificar se o número aleatório está abaixo da chance
                            if random_number < chance and not user_mysql == "wn3":
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                    funcionamento, scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                sheet_name = 'relatorio_geral'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                          conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)
                        except Exception as e:
                            print(e)
                            pass
                        window.Refresh()
                        arquivo = open(
                            'configuracoes/contas/contas_criadas.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(user_completo + ' ' + senha + "\n")
                        arquivo = open(
                            'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(
                            email + '\n' + user_completo + '\n' + senha + "\n\n")
                        try:
                            d.xpath(
                                '//android.view.View[@content-desc="Pular"]').click()
                            time.sleep(2)
                            d(resourceId='com.instagram.android:id/skip_button').click()
                            time.sleep(2)
                            d(resourceId='com.instagram.android:id/negative_button').click()
                            time.sleep(2)
                            d(resourceId='com.instagram.android:id/skip_button').click()
                            skip_button = d(
                                resourceId='com.instagram.android:id/skip_button')
                            time.sleep(2)
                            if skip_button.exists:
                                d(resourceId='com.instagram.android:id/skip_button').click()
                            time.sleep(4)
                            try:
                                element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                target_text = "Seguir"

                                # Encontre todos os elementos que correspondem ao ID fornecido
                                elements = d(resourceId=element_id)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Seguindo sugeridos...')
                                window.Refresh()
                                time.sleep(5)
                                for element in elements:
                                    if element.get_text() == target_text:
                                        element.click()
                                        time.sleep(1)
                                try:
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                except:
                                    pass
                            except Exception as e:
                                print(e)
                                time.sleep(2)
                                element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                target_text = "Seguir"

                                # Encontre todos os elementos que correspondem ao ID fornecido
                                elements = d(resourceId=element_id)
                                # window['output'].print("Seguindo sugeridos...")
                                window.Refresh()
                                for element in elements:
                                    if element.get_text() == target_text:
                                        element.click()
                                        time.sleep(1)
                                d.xpath(
                                    '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                            time.sleep(1)
                            try:
                                d(resourceId='com.instagram.android:id/button_text').click(timeout=10)
                            except:
                                try:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                except:
                                    time.sleep(2)
                                    try:
                                        d(resourceId='com.instagram.android:id/tab_avatar').click()
                                    except:
                                        d.app_stop("com.instagram.android")
                                        time.sleep(1)
                                        d.app_start("com.instagram.android")
                                        time.sleep(30)
                                        try:
                                            pagina_login = d.xpath(
                                                '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                            if pagina_login.exists:
                                                pagina_login.click()
                                                time.sleep(5)
                                                d.xpath(
                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                                    senha)
                                                pagina_login.click()
                                                time.sleep(3)
                                                d.xpath(
                                                    '//android.view.View[@content-desc="Agora não"]').click()
                                            else:
                                                d(resourceId='com.instagram.android:id/profile_tab').click()
                                        except:
                                            time.sleep(2)
                                            pagina_login = d.xpath(
                                                '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                            if pagina_login.exists:
                                                pagina_login.click()
                                                time.sleep(5)
                                                d.xpath(
                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                                    senha)
                                                pagina_login.click()
                                                time.sleep(3)
                                                d.xpath(
                                                    '//android.view.View[@content-desc="Agora não"]').click()
                                            else:
                                                d(resourceId='com.instagram.android:id/tab_avatar').click()

                            sms = False
                        except Exception as e:
                            d.app_stop("com.instagram.android")
                            time.sleep(1)
                            d.app_start("com.instagram.android")
                            time.sleep(40)
                            try:
                                pagina_login = d.xpath(
                                    '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                if pagina_login.exists:
                                    pagina_login.click()
                                    time.sleep(5)
                                    d.xpath(
                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                        senha)
                                    pagina_login.click()
                                else:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                            except:
                                time.sleep(2)
                                pagina_login = d.xpath(
                                    '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                if pagina_login.exists:
                                    pagina_login.click()
                                    time.sleep(5)
                                    d.xpath(
                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                        senha)
                                    pagina_login.click()
                                else:
                                    d(resourceId='com.instagram.android:id/tab_avatar').click()
                    elif verificar2.exists:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Verificando novamente...')
                        window.Refresh()
                        d.app_stop("com.instagram.android")
                        time.sleep(1)
                        d.app_start("com.instagram.android")

                        if d.xpath('//android.view.View[@content-desc="Esqueceu a senha?"]').exists(timeout=60):
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                user_completo)
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                senha)
                            d.xpath(
                                '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup').click()
                            d.xpath(
                                '//android.view.View[@content-desc="Agora não"]').click()

                        verificar3 = d.xpath(
                            '//android.widget.FrameLayout[@content-desc="Perfil"]/android.view.ViewGroup')
                        time.sleep(40)
                        if verificar3.exists:
                            try:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                                window.Refresh()
                                contagem = contagem + 1
                                sms = False
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")
                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                              conteudo + ' - ' + app]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                              conteudo + ' - ' + app]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                window['total'].update(num_rows)
                                random_number = random.random()

                                # Definir a chance desejada (10%)
                                chance = 0.2

                                # Verificar se o número aleatório está abaixo da chance
                                if random_number < chance and not user_mysql == "wn3":
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                        funcionamento, scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                    sheet_name = 'relatorio_geral'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)
                            except Exception as e:
                                print(e)
                        else:

                            try:
                                conteudo = config['vpn']

                                # Executa a função correspondente ao conteúdo do arquivo
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                            except Exception as e:
                                raise Exception('skip')
                                sms = True
                                continue
                    else:
                        verificar = d(
                            resourceId='com.instagram.android:id/profile_tab')
                        if verificar.exists:
                            try:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                                window.Refresh()
                                seguido = False
                                contagem += 1
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")
                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                window['total'].update(num_rows)
                                random_number = random.random()

                                # Definir a chance desejada (10%)
                                chance = 0.2

                                # Verificar se o número aleatório está abaixo da chance
                                if random_number < chance and not user_mysql == "wn3":
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                        funcionamento, scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                    sheet_name = 'relatorio_geral'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)
                            except Exception as e:
                                print(e)
                                pass
                            window.Refresh()
                            arquivo = open(
                                'configuracoes/contas/contas_criadas.txt', 'a')
                            # Escreva mais conteúdo no arquivo
                            arquivo.write(user_completo + ' ' + senha + "\n")
                            arquivo = open(
                                'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                            # Escreva mais conteúdo no arquivo
                            arquivo.write(
                                email + '\n' + user_completo + '\n' + senha + "\n\n")
                            try:
                                d.xpath(
                                    '//android.view.View[@content-desc="Pular"]').click()
                                time.sleep(2)
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(2)
                                d(resourceId='com.instagram.android:id/negative_button').click()
                                time.sleep(2)
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(4)
                                try:
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Seguindo sugeridos...')
                                    window.Refresh()
                                    time.sleep(5)
                                    for element in elements:
                                        if element.get_text() == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                except Exception as e:
                                    print(e)
                                    time.sleep(2)
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window['output'].print(
                                        "Seguindo sugeridos...")
                                    window.Refresh()
                                    for element in elements:
                                        if element.get_text() == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                time.sleep(1)
                                try:
                                    d(resourceId='com.instagram.android:id/button_text').click()
                                except:
                                    pass
                                time.sleep(3)
                                try:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                except:
                                    time.sleep(2)
                                    d(resourceId='com.instagram.android:id/tab_avatar').click()
                                sms = False
                            except Exception as e:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Reabrindo Instagram.')
                                window.Refresh()
                                d.app_stop('com.instagram.android')
                                d.app_start('com.instagram.android')
                                time.sleep(20)
                                pass
                        else:
                            try:
                                chrome.close()
                            except:
                                pass
                            try:
                                chrome.quit()
                            except:
                                pass
                            try:
                                conteudo = config['vpn']

                                # Executa a função correspondente ao conteúdo do arquivo
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                            except Exception as e:
                                raise Exception('skip')
                                continue
                except Exception as e:
                    print(e)
                    try:
                        chrome.close()
                    except:
                        pass
                    try:
                        chrome.quit()
                    except:
                        pass
                    if conteudo == "AVG":
                        vpn_avg()
                    elif conteudo == "SurfShark":
                        vpn_surf()
                    elif conteudo == "Nenhuma":
                        nenhuma_vpn()
                    elif conteudo == "Avast":
                        vpn_avast()
                    elif conteudo == "ExpressVPN":
                        vpn_express()
                    elif conteudo == "PiaVPN":
                        vpn_pia()
                    elif conteudo == "TunnelBear":
                        vpn_tunnelbear()
                    elif conteudo == "BetterNet":
                        vpn_better()
                    elif conteudo == "CyberGhost":
                        vpn_cyberghost()
                    elif conteudo == "NordVPN":
                        vpn_nord()
                    elif conteudo == "HotspotShield":
                        vpn_hotspotshield()
                    elif conteudo == "WindscribeVPN":
                        vpn_windscribe()
                    elif conteudo == "HmaVPN":
                        vpn_hma()
                    else:
                        window['output'].print(
                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                        window.Refresh()
                    sms = True
                    raise Exception('skip')
                while sms is False:
                    senha = gerar_senha(12)
                    try:
                        time.sleep(3)
                        try:
                            d(resourceId='com.instagram.android:id/profile_tab').click(timeout=120)
                        except:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu algum erro nesta conta.')
                            window.Refresh()
                            raise Exception('Erro na conta')
                        window['output'].print(linha_ret)
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Criação de outro perfil.')
                        window.Refresh()
                        seguido = False
                        # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True)
                        # Clicar no botão de perfil

                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/action_bar_title_chevron').click()
                        time.sleep(2)
                        # Clicar em perfis
                        try:
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout[2]/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.ListView/android.widget.LinearLayout[last()]/android.widget.FrameLayout/android.widget.ImageView').click()
                        except Exception as e:
                            print(e)
                            print('Erro aq')
                            time.sleep(200)
                        # Clicar em adicionar conta
                        d.xpath(
                            '//android.widget.Button[@content-desc="Criar nova conta"]').click()

                        time.sleep(3)
                        # Gerar nome de usuário, digitar no campo e clicar em avançae
                        lista_user = random.choices(range(0, 9), k=2)
                        lista_letras = random.choices(letras, k=1)

                        with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                            nomes = nomes_arquivo.readlines()

                        with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                            sobrenomes = sobrenomes_arquivo.readlines()

                        nomea = fake.first_name_male().replace(" ", "")
                        nome = unicodedata.normalize('NFKD', nomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        sobrenomea = fake.last_name().replace(" ", "").lower()
                        sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        nome_completo = nome + sobrenome
                        numeros_concatenados = ''.join(
                            str(numero) for numero in lista_user)
                        user_completo1 = nome_completo + '' + \
                            str(numeros_concatenados) + ''.join(lista_letras)

                        user_completo = random.randint(1, len(user_completo1))
                        # Insira o ponto no índice aleatório
                        string_with_dot = user_completo1[:user_completo] + \
                            '_' + user_completo1[user_completo:]
                        user_completo_antigo = string_with_dot.lower()

                        escolha = random.choice(["_", "."])
                        user_completo = nome + escolha + sobrenome + \
                            str(numeros_concatenados) + ''.join(lista_letras)
                        print(user_completo)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: ' + user_completo)
                        window.Refresh()
                        d(resourceId='com.instagram.android:id/username').set_text(
                            user_completo)
                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/button_text').click()
                        # Digitar senha e avançar
                        time.sleep(3)
                        try:
                            d(resourceId='com.instagram.android:id/password').set_text(
                                senha)
                        except:
                            try:
                                conteudo = config['vpn']
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()

                            except Exception as e:
                                raise Exception('skip')
                        d(resourceId='com.instagram.android:id/button_text').click()
                        # Clicar em concluir cadastro
                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/button_text').click()

                        time.sleep(4)
                        feedback = d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.View')
                        if feedback.exists:
                            sms = True

                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
                        window.Refresh()
                        # WebDriverWait(driver, 40).until(EC.visibility_of_element_located)(((By.XPATH,
                        #                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')

                        verificar = d(
                            resourceId='com.instagram.android:id/connect_text')
                        if verificar.exists(timeout=60):
                            time.sleep(20)
                            verificar = d(
                                resourceId='com.instagram.android:id/connect_text')
                        if verificar.exists:
                            try:
                                conteudo = config['vpn']
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                                window.Refresh()
                                contagem += 1
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")

                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))

                                window['total'].update(num_rows)
                                try:
                                    random_number = random.random()

                                    # Definir a chance desejada (10%)
                                    chance = 0.2

                                    # Verificar se o número aleatório está abaixo da chance
                                    if random_number < chance and not user_mysql == "wn3":
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                 "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                            funcionamento, scope)
                                        client = gspread.authorize(creds)

                                        spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                        sheet_name = 'relatorio_geral'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                                  conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:G{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)
                                except:
                                    pass

                                window.Refresh()
                                arquivo = open(
                                    'configuracoes/contas/contas_criadas.txt', 'a')
                                # Escreva mais conteúdo no arquivo
                                arquivo.write(user_completo +
                                              ' ' + senha + "\n")
                                arquivo = open(
                                    'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                                # Escreva mais conteúdo no arquivo
                                arquivo.write(
                                    email + '\n' + user_completo + '\n' + senha + "\n\n")
                                window.Refresh()
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(1)
                                d(resourceId='com.instagram.android:id/negative_button').click()
                                time.sleep(3)
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(1)
                                try:
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Seguindo sugeridos...')
                                    window.Refresh()
                                    for element in elements:
                                        if element.get_text() == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                except Exception as e:
                                    print(e)
                                    d(resourceId='com.instagram.android:id/skip_button').click()
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window.Refresh()
                                    for element in elements:
                                        if element.text == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()

                                time.sleep(1)
                                time.sleep(3)
                                try:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                except Exception as e:
                                    print(e)
                                    d(resourceId='com.instagram.android:id/button_text').click()
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                sms = False
                            except Exception as e:
                                print(e)

                        else:
                            try:
                                try:
                                    chrome.close()
                                except:
                                    pass
                                try:
                                    chrome.quit()
                                except:
                                    pass
                                conteudo = config['vpn']
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()

                            except Exception as e:
                                sms = True
                                try:
                                    chrome.close()
                                except:
                                    pass
                                try:
                                    chrome.quit()
                                except:
                                    pass
                                if not str(e) == '':
                                    traceback.print_exc()
                                if not e == 'skip' or not e == 'Manutenção.':
                                    try:
                                        d.screenshot(
                                            f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                                    except Exception as e:
                                        print(e)
                                        pass
                    except Exception as e:
                        print(e)
                        try:
                            chrome.close()
                        except:
                            pass
                        try:
                            chrome.quit()
                        except:
                            pass
                        if not str(e) == '':
                            traceback.print_exc()
                        if not e == 'skip' or not e == 'Manutenção.':
                            try:
                                d.screenshot(
                                    f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                            except Exception as e:
                                print(e)
                                pass
                        sms = True

            except Exception as e:
                print(e)
                try:
                    chrome.close()
                except:
                    pass
                try:
                    chrome.quit()
                except:
                    pass
                if not str(e) == '':
                    traceback.print_exc()
                if not e == 'skip' or not e == 'Manutenção.':
                    try:
                        d.screenshot(
                            f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                    except Exception as e:
                        print(e)
                        pass

        except Exception as e:
            print(e)
            try:
                chrome.close()
            except:
                pass
            try:
                chrome.quit()
            except:
                pass
            if not str(e) == '':
                traceback.print_exc()
            if not e == 'skip' or not e == 'Manutenção.':
                try:
                    d.screenshot(
                        f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                except Exception as e:
                    print(e)
                    pass

            pass


def receive_smss():
    SPREADSHEET_ID = config['spreadsheet']
    conteudo = config['vpn']
    senha = gerar_senha(12)
    maquina = config['maquina']
    tentativa = False
    seguido = False
    regiao_vpn = 'Sem dados'
    if config['email'] == '-2nr-' and config['app'] == '-instalite-':
        app = 'Lite'
    elif config['email'] == '-2nr-' and config['app'] == '-insta-':
        app = 'Normal'
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    # Código que gera a saída
    import os
    import time
    import requests
    import hashlib
    import subprocess

    # verifica se o arquivo existe na pasta do bot

    try:
        from rich.console import Console
    except ModuleNotFoundError:
        import subprocess
        import sys

        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['pip', 'install', '-r', 'requirements.txt'])
        subprocess.run(['deactivate'], shell=True)
        from rich.console import Console
    import os
    import time
    try:
        import uiautomator2 as u2
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'uiautomator2==2.16.25'])
        subprocess.run(['deactivate'], shell=True)
        subprocess.run(['pip', 'install', '--upgrade', 'requests'])
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        import requests
        time.sleep(10)
        import uiautomator2 as u2
    d = u2.connect(f'{porta}')
    import requests
    import hashlib
    import subprocess
    from colorama import init, Fore, Back, Style
    from faker import Faker
    # teste
    init(autoreset=True)
    console = Console()
    from termcolor import colored

    from rich.console import Console
    from rich.panel import Panel
    from rich.text import Text
    from rich.rule import Rule

    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random
    from datetime import datetime
    import string
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import NoSuchElementException
    from mailtm import Email
    import re
    import logging

    logger = logging.getLogger(__name__)

    handler = logging.FileHandler('log.txt')
    handler.setLevel(logging.ERROR)

    logger.addHandler(handler)

    # RANGE_NAME = 'contas!A:D'
    #
    # SCOPES = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

    def vpn_avast():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Avast', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop("com.avast.android.vpn")
            d.app_start("com.avast.android.vpn", ".app.wizard.WizardActivity")
            time.sleep(10)
        except Exception as e:
            print(e)
        abc = False

    def nenhuma_vpn():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.facebook.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        time.sleep(10)

    def vpn_hotspotshield():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HotspotShield',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('hotspotshield.android.vpn')
            d.app_start('hotspotshield.android.vpn')
        except Exception as e:
            print(e)
        d(resourceId='hotspotshield.android.vpn:id/tryAgainButton').click()
        time.sleep(5)
        d(resourceId='hotspotshield.android.vpn:id/btnVpnConnect').click()

        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_pia():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da PiaVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.privateinternetaccess.android')
            d.app_start('com.privateinternetaccess.android')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()
        time.sleep(3)
        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()

        abc = False

    def vpn_express():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da ExpressVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.expressvpn.vpn')
            d.app_start('com.expressvpn.vpn')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.expressvpn.vpn:id/obiButton').click()
        time.sleep(3)
        d(resourceId='com.expressvpn.vpn:id/obiButton').click()

        abc = False

    def vpn_nord():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da NordVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.nordvpn.android')
            time.sleep(5)
            d.app_start('com.nordvpn.android', use_monkey=True)
        except:
            pass
        time.sleep(10)
        time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_surf():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('com.surfshark.vpnclient.android')
            d.app_start('com.surfshark.vpnclient.android')
        except:
            pass
        time.sleep(15)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_better():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da BetterNet', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        try:
            d.app_stop('com.freevpnintouch')
            d.app_start('com.freevpnintouch')
        except:
            pass
        time.sleep(10)
        dialog = d(resourceId='com.freevpnintouch:id/dialogCtaPositive')
        connect = d(
            resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
        if dialog.exists:
            d(resourceId='com.freevpnintouch:id/dialogCtaPositive').click()
            time.sleep(3)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            # time.sleep(5)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
        while connect == 'CONNECT':
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            time.sleep(4)
            connect = d(
                resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            # WebDriverWait(driver, 20).until(
            # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        ip = '127.0.0.1:' + porta

        output = subprocess.check_output(
            ['adb', '-s', ip, 'shell', 'ifconfig'])

        # Verifica se a conexão VPN está ativa
        if not "tun0" in str(output):
            window['output'].print("Não conectado na BetterNet.")
            window.Refresh()
            try:
                connect = d(
                    resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
                d.app_stop('com.freevpnintouch')
                d.app_start('com.freevpnintouch')
                while connect == 'CONNECT':
                    d(resourceId='com.freevpnintouch:id/buttonConnect').click()
                    time.sleep(4)
                    connect = d(
                        resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            except:
                pass
        abc = False

    def vpn_cyberghost():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da CyberGhost', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('de.mobileconcepts.cyberghost')
            d.app_start('de.mobileconcepts.cyberghost')
        except:
            pass
        # time.sleep(3)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        rate = d(resourceId='de.mobileconcepts.cyberghost:id/rate_me_text')
        if rate.exists:
            d(resourceId='android:id/button2').click()
        time.sleep(2)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        abc = False

    def vpn_tunnelbear():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.tunnelbear.android')
            d.app_start("com.tunnelbear.android")
            while True:
                output = subprocess.check_output(
                    ['adb', '-s', porta, 'shell', 'ifconfig'])
                # print(str(output))
                if "tun0" in str(output):
                    print('Conectada')
                    break
                elif not "tun0" in str(output):
                    print('Reconectando')
                    try:
                        d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                        time.sleep(10)
                    except:
                        pass
        except Exception as e:
            print(e)
            pass

    def vpn_avg():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da AVG', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.avg.android.vpn')
            d.app_start("com.avg.android.vpn",
                        "com.avast.android.vpn.app.wizard.WizardActivity")
            regiao_vpn = d(
                resourceId='com.avg.android.vpn:id/location_title').get_text()

        except Exception as e:
            print(e)
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #               stderr=subprocess.DEVNULL, check=True, shell=True)

        time.sleep(30)

    def vpn_windscribe():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Windscribe', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)
            d.app_stop("com.windscribe.vpn")
            d.app_start("com.windscribe.vpn")
        except:
            pass
        d(resourceId='com.windscribe.vpn:id/on_off_button').click()
        time.sleep(10)
        primeiro = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_name').get_text()
        segundo = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_nick_name').get_text()
        regiao_vpn = primeiro + ' ' + segundo

    def vpn_hma():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HMA', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)

            d.app_stop("com.hidemyass.hidemyassprovpn")
            time.sleep(3)
            d.app_start('com.hidemyass.hidemyassprovpn',
                        'com.avast.android.vpn.activity.HmaOnboardingActivity')
        except:
            pass
        time.sleep(10)

    def gerar_id():
        chars = string.ascii_lowercase + string.digits
        android_id = ''.join(random.choice(chars) for i in range(16))
        return android_id

    options = Options()
    prefs = {"profile.managed_default_content_settings.images": 2}
    options.page_load_strategy = 'none'
    options.add_experimental_option("prefs", prefs)

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    window.Refresh()

    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global transition_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass
    gerar_id()
    android_id = gerar_id()
    subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    time.sleep(2)
    # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True, stdout=subprocess.DEVNULL,
    #               stderr=subprocess.DEVNULL)

    try:
        subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
    except Exception as e:
        pass

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Efetuando troca de IP.')
    window.Refresh()
    try:
        conteudo = config['vpn']
        if conteudo == "AVG":
            vpn_avg()
        elif conteudo == "SurfShark":
            vpn_surf()
        elif conteudo == "Nenhuma":
            nenhuma_vpn()
        elif conteudo == "Avast":
            vpn_avast()
        elif conteudo == "ExpressVPN":
            vpn_express()

        elif conteudo == "PiaVPN":
            vpn_pia()
        elif conteudo == "TunnelBear":
            vpn_tunnelbear()
        elif conteudo == "BetterNet":
            vpn_better()
        elif conteudo == "CyberGhost":
            vpn_cyberghost()
        elif conteudo == "NordVPN":
            vpn_nord()
        elif conteudo == "HotspotShield":
            vpn_hotspotshield()
        elif conteudo == "WindscribeVPN":
            vpn_windscribe()
        elif conteudo == "HmaVPN":
            vpn_hma()
        else:
            window['output'].print(
                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
            window.Refresh()

    except Exception as e:
        print(e)
        pass

    window.Refresh()

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.\n')
    window.Refresh()
    try:
        scope = ["https://spreadsheets.google.com/feeds",
                 "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name(
            'credentials.json', scope)
        client = gspread.authorize(creds)

        spreadsheet_id = config['spreadsheet']
        sheet_name = 'contas'
        # Insert user, password, and timestamp into first empty row
        sheet = client.open_by_key(spreadsheet_id).worksheet(sheet_name)
        values = sheet.col_values(1)

        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
        rows = sheet.get_all_values()

        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
        regex = re.compile(r'\S+\s\S+')
        sheet_name = config['2nr']
        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
        num_rows = sum(1 for row in rows if regex.match(row[0]))
        window['total'].update(num_rows)
    except Exception as e:
        print(e)
    d.implicitly_wait(30.0)
    d.set_fastinput_ime(True)
    if not os.path.exists('./erros'):
        os.makedirs('./erros')
    codigo_não_recebido_seguidos = 0
    while parar is False:
        senha = gerar_senha(12)
        if parar is True:
            print('Parando Thread')
            try:
                chrome.close()
            except:
                pass
            try:
                chrome.quit()
            except:
                pass
            break
        # if codigo_não_recebido_seguidos == 3:
        #    #tempo_aleatorio = random.randint(10, 40)
        #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] 3 códigos não recebidos seguidos.')
        #    window.Refresh()
        #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando 1 hora para voltar novamente.')
        #    window.Refresh()
        #    time.sleep(3600)
        #    codigo_não_recebido_seguidos = 0
        try:
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)

            except:
                pass
            try:
                subprocess.run(
                    f'adb -s {porta} shell pm grant com.instagram.android android.permission.READ_CONTACTS',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            gerar_id()
            android_id = gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            window['output'].print(linha_ret)
            window.Refresh()
            try:
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo instagram.')
                window.Refresh()
                d.app_start('com.instagram.android')
                try:
                    d.xpath(
                        '//android.widget.Button[@content-desc="Criar nova conta"]').click(timeout=120)
                except:
                    conteudo = config['vpn']
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Pagina Estática.')
                    window.Refresh()
                    if conteudo == "AVG":
                        vpn_avg()
                    elif conteudo == "SurfShark":
                        vpn_surf()
                    elif conteudo == "Nenhuma":
                        nenhuma_vpn()
                    elif conteudo == "Avast":
                        vpn_avast()
                    elif conteudo == "ExpressVPN":
                        vpn_express()
                    elif conteudo == "PiaVPN":
                        vpn_pia()
                    elif conteudo == "TunnelBear":
                        vpn_tunnelbear()
                    elif conteudo == "BetterNet":
                        vpn_better()
                    elif conteudo == "CyberGhost":
                        vpn_cyberghost()
                    elif conteudo == "NordVPN":
                        vpn_nord()
                    elif conteudo == "HotspotShield":
                        vpn_hotspotshield()
                    elif conteudo == "WindscribeVPN":
                        vpn_windscribe()
                    elif conteudo == "HmaVPN":
                        vpn_hma()
                    else:
                        window['output'].print(
                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                        window.Refresh()
                    raise Exception('skip')
                # time.sleep(6)
                # novo_layout = d.xpath('//android.view.View[@content-desc="Qual é o seu nome?"]')
                # if len(novo_layout) == 1:
                #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Layout novo encontrado, reiniciando app.')
                #    window.Refresh()
                #    raise Exception("skip.")

                ######################################################################
                lista_user = random.choices(range(0, 9), k=2)
                lista_letras = random.choices(letras, k=1)

                with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                    nomes = nomes_arquivo.readlines()

                with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                    sobrenomes = sobrenomes_arquivo.readlines()

                nomea = fake.first_name_male().replace(" ", "")
                nome = unicodedata.normalize('NFKD', nomea).encode(
                    'ASCII', 'ignore').decode('ASCII')
                sobrenomea = fake.last_name().replace(" ", "").lower()
                sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                    'ASCII', 'ignore').decode('ASCII')
                nome_completo = nome + ' ' + sobrenome
                nome_completo_s = nome + sobrenome
                numeros_concatenados = ''.join(
                    str(numero) for numero in lista_user)
                user_completo1 = nome_completo_s + '' + \
                    str(numeros_concatenados) + ''.join(lista_letras)

                user_completo = random.randint(1, len(user_completo1))
                # Insira o ponto no índice aleatório
                string_with_dot = user_completo1[:user_completo] + \
                    '_' + user_completo1[user_completo:]
                user_completo_antigo = string_with_dot.lower()

                escolha = random.choice(["_", "."])
                user_completo = nome + escolha + sobrenome + \
                    str(numeros_concatenados) + ''.join(lista_letras)
                ######################################################################
                time.sleep(10)
                layout1 = d.xpath(
                    '//android.view.View[@content-desc="Crie um nome de usuário"]')
                layout2 = d(resourceId='android:id/button2')
                layout3 = d.xpath(
                    '//android.view.View[@content-desc="Qual é o número do seu celular?"]')
                layout3v2 = d.xpath(
                    '//android.view.View[@content-desc="Qual é seu número de celular ou email?"]')
                layout4 = d.xpath(
                    '//android.view.View[@content-desc="Crie uma senha"]')
                if layout1.exists:
                    layout_usado = 'layout1'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout1 novo encontrado.')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(4)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=20.0)
                    except Exception as e:
                        print(e)
                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)

                elif layout2.exists:
                    layout_usado = 'layout2'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout2 novo encontrado.')
                    window.Refresh()
                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(4)
                    d.xpath(
                        '//android.widget.Button[@content-desc="Avançar"]/android.view.ViewGroup').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.Button[@content-desc="Avançar"]/android.view.ViewGroup').click()
                    time.sleep(5)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=10.0)
                    except Exception as e:
                        pass

                elif layout3.exists or layout3v2.exists:
                    layout_usado = 'layout3'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout3 novo encontrado.')
                    window.Refresh()
                    try:
                        import traceback
                        from selenium import webdriver
                        from selenium.webdriver.common.by import By
                        from selenium.webdriver.chrome.service import Service
                        try:
                            import undetected_chromedriver as uc
                        except:
                            subprocess.run(
                                ['venv/scripts/activate.bat'], shell=True)
                            subprocess.run(
                                ['pip', 'install', 'undetected_chromedriver'])
                            import undetected_chromedriver as uc
                        import time
                        from selenium.webdriver.support.ui import WebDriverWait
                        from selenium.webdriver.support import expected_conditions as EC
                        url = "https://receive-smss.com/sms/447377060610/"

                        chromedriver_path = '.\\storage\\driver\\chromedriver.exe'
                        chrome_options = uc.ChromeOptions()
                        # chrome_options.add_argument("--blink-settings=imagesEnabled=false")
                        chrome_options.add_argument("--disable-gpu")
                        chrome_options.add_argument('--ignore-ssl-errors=yes')
                        chrome_options.add_argument(
                            '--ignore-certificate-errors')
                        chrome_options.add_argument("--no-sandbox")
                        chrome_options.binary_location = '.\\storage\\driver\\chrome.exe'
                        # chrome_options.add_extension('.\\storage\\adblock.crx')
                        chrome_options.add_argument(
                            f"--load-extension={caminho_atual}\\storage\\adblock\\")
                        chrome_options.page_load_strategy = 'eager'
                        # Configurando o Selenium para usar o Chrome Driver local
                        service = Service(executable_path=chromedriver_path)
                        chrome = uc.Chrome(
                            service=service, headless=True, version_main=116, options=chrome_options)
                        chrome.get(url)
                        chrome.set_window_size(800, 2000)
                        chrome.execute_script("document.body.style.zoom='50%'")
                        time.sleep(2)
                        button_with_text = WebDriverWait(chrome, 20).until(
                            EC.element_to_be_clickable(
                                (By.XPATH, '//a[contains(text(), "↻ Give me another number")]'))
                        )

                        # Clica no botão
                        chrome.execute_script(
                            "arguments[0].click();", button_with_text)
                        chrome.execute_script("document.body.style.zoom='50%'")

                        num = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                            (By.CLASS_NAME, 'tooltip'))).text
                        num = num.replace("ID ", "")
                        while True:
                            if num.startswith("+44") or num.startswith("+1") or num.startswith(
                                    "+380") or num.startswith("+66") or num.startswith("+63") or num.startswith("+212"):
                                button_with_text = WebDriverWait(chrome, 20).until(
                                    EC.element_to_be_clickable(
                                        (By.XPATH, '//a[contains(text(), "↻ Give me another number")]'))
                                )

                                # Clica no botão
                                chrome.execute_script(
                                    "arguments[0].click();", button_with_text)
                                chrome.execute_script(
                                    "document.body.style.zoom='50%'")
                                time.sleep(5)
                                num = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                                    (By.CLASS_NAME, 'tooltip'))).text
                                num = num.replace("ID ", "")
                            else:
                                break
                        print(num)

                    except Exception as e:
                        print(e)
                        if not str(e) == '':
                            traceback.print_exc()
                        time.sleep(15)

                        if not str(e) == '':
                            traceback.print_exc()
                        raise Exception('erro no navegador')
                        pass
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Número: {num}.')
                    window.Refresh()
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Qual é o número do seu celular?"]')
                    if restricao.exists:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        try:
                            chrome.close()
                        except:
                            pass
                        try:
                            chrome.quit()
                        except:
                            pass
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    time.sleep(12)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Qual é o número do seu celular?"]')
                    if restricao.exists:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        try:
                            chrome.close()
                        except:
                            pass
                        try:
                            chrome.quit()
                        except:
                            pass
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')
                    selecionar_sms = d.xpath(
                        '//android.view.View[@content-desc="Enviar código por SMS"]')
                    if selecionar_sms.exists:
                        selecionar_sms.click()
                        time.sleep(1)
                        d.xpath(
                            '//android.view.View[@content-desc="Enviar código"]').click()

                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    encontrado = False
                    tentativa = 0
                    try:
                        while not encontrado and tentativa < 6:
                            elemento = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                                (By.XPATH,
                                 '/html/body/div/div[2]/div[2]/div[2]/div/div/div/div/div/div[1]/div/div[2]/div[1]/div[2]/span'))).text
                            print(elemento)
                            time_second = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                                (By.CLASS_NAME, 'col-md-3.time'))).text
                            time_second = time_second.replace("Time\n", "")
                            print(time_second)
                            if 'Instagram' in elemento and (
                                    'seconds' in time_second or '1 minutes ago' in time_second or '2 minutes ago' in time_second):
                                encontrado = True
                                match = re.search(r'\d+\s*\d+\s*\d+\s*\d+\s*\d+\s*\d+',
                                                  elemento)  # Extrai seis grupos de dígitos, permitindo espaços entre eles
                                if match:
                                    numeros = ''.join(match.group().split())

                            else:
                                # Clique no outro elemento
                                tentativa = tentativa + 1
                                chrome.refresh()
                                chrome.execute_script(
                                    "document.body.style.zoom='50%'")
                                time.sleep(10)
                    except Exception as e:
                        print(e)
                        print('erro')
                        time.sleep(30)
                        chrome.quit()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Algum erro')
                        window.Refresh()
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                            break
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception("Algum erro")
                        try:
                            chrome.close()
                        except:
                            pass
                        try:
                            chrome.quit()
                        except:
                            pass
                    if tentativa == 6:
                        chrome.quit()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Codigo não recebido.')
                        window.Refresh()
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                            break
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception("Codigo não recebido.")
                    codigo = numeros
                    print(numeros)
                    try:
                        chrome.close()
                    except:
                        pass
                    try:
                        chrome.quit()
                    except:
                        pass
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    time.sleep(5)
                    email = f"{num} - receive-smss.com"
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=10.0)
                    except Exception as e:
                        print(e)
                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        nome_completo)
                    time.sleep(1)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nome escolhido: {nome_completo}')
                    window.Refresh()
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                    window.Refresh()
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        '')
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(3)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(3)

                elif layout4.exists:
                    layout_usado = 'layout4'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout4 novo encontrado.')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.Button[@content-desc="Avançar"]/android.view.ViewGroup').click()
                    time.sleep(4)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=20.0)
                    except Exception as e:
                        print(e)
                    time.sleep(4)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                    window.Refresh()
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        '')
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(3)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)

                else:
                    layout_usado = 'layout_normal'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout normal encontrado.')
                    window.Refresh()
                    # raise Exception('Manutenção.')
                    cancel = d(resourceId='com.google.android.gms:id/cancel')
                    if cancel.exists(timeout=10):
                        d(resourceId='com.google.android.gms:id/cancel').click()
                    senha = gerar_senha(12)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        nome_completo)
                    time.sleep(1)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nome escolhido: {nome_completo}')
                    window.Refresh()
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=20.0)
                    except Exception as e:
                        print(e)
                    # salvar_senha = d.xpath('//android.view.View[@content-desc="Agora não"]')
                    # if salvar_senha.exists:
                    #    d.xpath('//android.view.View[@content-desc="Agora não"]').click()

                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Alterar nome de usuário"]').click(timeout=5)
                    except:
                        pass
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                    window.Refresh()
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        '')
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(3)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(3)
                    try:
                        import traceback
                        from selenium import webdriver
                        from selenium.webdriver.common.by import By
                        from selenium.webdriver.chrome.service import Service
                        try:
                            import undetected_chromedriver as uc
                        except:
                            subprocess.run(
                                ['venv/scripts/activate.bat'], shell=True)
                            subprocess.run(
                                ['pip', 'install', 'undetected_chromedriver'])
                            import undetected_chromedriver as uc
                        import time
                        from selenium.webdriver.support.ui import WebDriverWait
                        from selenium.webdriver.support import expected_conditions as EC
                        url = "https://receive-smss.com/sms/447377060610/"

                        chromedriver_path = '.\\storage\\driver\\chromedriver.exe'
                        chrome_options = uc.ChromeOptions()
                        # chrome_options.add_argument("--blink-settings=imagesEnabled=false")
                        chrome_options.add_argument("--disable-gpu")
                        chrome_options.add_argument('--ignore-ssl-errors=yes')
                        chrome_options.add_argument(
                            '--ignore-certificate-errors')
                        chrome_options.add_argument("--no-sandbox")
                        chrome_options.binary_location = '.\\storage\\driver\\chrome.exe'
                        # chrome_options.add_extension('.\\storage\\adblock.crx')
                        chrome_options.add_argument(
                            f"--load-extension={caminho_atual}\\storage\\adblock\\")
                        chrome_options.page_load_strategy = 'eager'
                        # Configurando o Selenium para usar o Chrome Driver local
                        service = Service(executable_path=chromedriver_path)
                        chrome = uc.Chrome(
                            service=service, headless=True, version_main=116, options=chrome_options)
                        chrome.get(url)
                        chrome.set_window_size(800, 2000)
                        chrome.execute_script("document.body.style.zoom='50%'")
                        time.sleep(2)
                        button_with_text = WebDriverWait(chrome, 20).until(
                            EC.element_to_be_clickable(
                                (By.XPATH, '//a[contains(text(), "↻ Give me another number")]'))
                        )

                        # Clica no botão
                        chrome.execute_script(
                            "arguments[0].click();", button_with_text)
                        chrome.execute_script("document.body.style.zoom='50%'")

                        num = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                            (By.CLASS_NAME, 'tooltip'))).text
                        num = num.replace("ID ", "")
                        while True:
                            if num.startswith("+44") or num.startswith("+1") or num.startswith(
                                    "+380") or num.startswith("+66") or num.startswith("+63") or num.startswith("+212"):
                                button_with_text = WebDriverWait(chrome, 20).until(
                                    EC.element_to_be_clickable(
                                        (By.XPATH, '//a[contains(text(), "↻ Give me another number")]'))
                                )

                                # Clica no botão
                                chrome.execute_script(
                                    "arguments[0].click();", button_with_text)
                                chrome.execute_script(
                                    "document.body.style.zoom='50%'")
                                time.sleep(5)
                                num = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                                    (By.CLASS_NAME, 'tooltip'))).text
                                num = num.replace("ID ", "")
                            else:
                                break
                        print(num)

                    except Exception as e:
                        print(e)
                        if not str(e) == '':
                            traceback.print_exc()
                        time.sleep(15)

                        if not str(e) == '':
                            traceback.print_exc()
                        raise Exception('erro no navegador')
                        pass
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Número: {num}.')
                    window.Refresh()
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Qual é o número do seu celular?"]')
                    if restricao.exists:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        try:
                            chrome.close()
                        except:
                            pass
                        try:
                            chrome.quit()
                        except:
                            pass
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    time.sleep(12)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Qual é o número do seu celular?"]')
                    if restricao.exists:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        try:
                            chrome.close()
                        except:
                            pass
                        try:
                            chrome.quit()
                        except:
                            pass
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')
                    selecionar_sms = d.xpath(
                        '//android.view.View[@content-desc="Enviar código por SMS"]')
                    if selecionar_sms.exists:
                        selecionar_sms.click()
                        time.sleep(1)
                        d.xpath(
                            '//android.view.View[@content-desc="Enviar código"]').click()

                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    encontrado = False
                    tentativa = 0
                    try:
                        while not encontrado and tentativa < 6:
                            elemento = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                                (By.XPATH,
                                 '/html/body/div/div[2]/div[2]/div[2]/div/div/div/div/div/div[1]/div/div[2]/div[1]/div[2]/span'))).text
                            print(elemento)
                            time_second = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                                (By.CLASS_NAME, 'col-md-3.time'))).text
                            time_second = time_second.replace("Time\n", "")
                            print(time_second)
                            if 'Instagram' in elemento and (
                                    'seconds' in time_second or '1 minutes ago' in time_second or '2 minutes ago' in time_second):
                                encontrado = True
                                match = re.search(r'\d+\s*\d+\s*\d+\s*\d+\s*\d+\s*\d+',
                                                  elemento)  # Extrai seis grupos de dígitos, permitindo espaços entre eles
                                if match:
                                    numeros = ''.join(match.group().split())

                            else:
                                # Clique no outro elemento
                                tentativa = tentativa + 1
                                chrome.refresh()
                                chrome.execute_script(
                                    "document.body.style.zoom='50%'")
                                time.sleep(10)
                    except Exception as e:
                        print(e)
                        print('erro')
                        time.sleep(30)
                        chrome.quit()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Algum erro')
                        window.Refresh()
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                            break
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception("Algum erro")
                        try:
                            chrome.close()
                        except:
                            pass
                        try:
                            chrome.quit()
                        except:
                            pass
                    if tentativa == 6:
                        chrome.quit()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Codigo não recebido.')
                        window.Refresh()
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                            break
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception("Codigo não recebido.")
                    codigo = numeros
                    print(numeros)
                    try:
                        chrome.close()
                    except:
                        pass
                    try:
                        chrome.quit()
                    except:
                        pass
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    time.sleep(5)
                    email = f"{num} - receive-smss.com"
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)

                codigo_invalido = d.xpath(
                    '//android.view.View[@content-desc="Não recebi o código"]')
                d.xpath(
                    '//android.view.View[@content-desc="Concordo"]').click()
                time.sleep(5)
                errodetec = d.xpath(
                    '//android.view.View[@content-desc="Concordo"]')
                if errodetec.exists:
                    d.xpath(
                        '//android.view.View[@content-desc="Concordo"]').click()
                    time.sleep(5)

                errodetec = d.xpath(
                    '//android.view.View[@content-desc="Concordo"]')
                if errodetec.exists:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Instagram não deixou avançar.')
                    window.Refresh()

                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
                window.Refresh()
                time.sleep(45)
                verificar = d.xpath(
                    '//android.view.View[@content-desc="Adicionar foto"]')
                verificar2 = d.xpath(
                    '//android.view.View[@content-desc="Aceite os termos e políticas do Instagram"]')

                try:
                    if verificar.exists:
                        try:
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                   text_color=('lime'))
                            window.Refresh()
                            seguido = False
                            contagem += 1
                            window['criadas'].update(contagem)
                            window.Refresh()
                            now = datetime.now()
                            now_brasilia = tz.localize(now)
                            timestamp = now_brasilia.strftime(
                                "%d/%m/%Y %H:%M:%S")
                            try:
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                          conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            except Exception as e:
                                print(e)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                tempo_aleatorio = random.randint(10, 40)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                time.sleep(tempo_aleatorio)
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                          conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            window['total'].update(num_rows)
                            random_number = random.random()

                            # Definir a chance desejada (10%)
                            chance = 0.2

                            # Verificar se o número aleatório está abaixo da chance
                            if random_number < chance and not user_mysql == "wn3":
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                    funcionamento, scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                sheet_name = 'relatorio_geral'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                          conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)
                        except Exception as e:
                            print(e)
                            pass
                        window.Refresh()
                        arquivo = open(
                            'configuracoes/contas/contas_criadas.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(user_completo + ' ' + senha + "\n")
                        arquivo = open(
                            'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(
                            email + '\n' + user_completo + '\n' + senha + "\n\n")
                        try:
                            d.xpath(
                                '//android.view.View[@content-desc="Pular"]').click()
                            time.sleep(2)
                            d(resourceId='com.instagram.android:id/skip_button').click()
                            time.sleep(2)
                            d(resourceId='com.instagram.android:id/negative_button').click()
                            time.sleep(2)
                            d(resourceId='com.instagram.android:id/skip_button').click()
                            skip_button = d(
                                resourceId='com.instagram.android:id/skip_button')
                            time.sleep(2)
                            if skip_button.exists:
                                d(resourceId='com.instagram.android:id/skip_button').click()
                            time.sleep(4)
                            try:
                                element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                target_text = "Seguir"

                                # Encontre todos os elementos que correspondem ao ID fornecido
                                elements = d(resourceId=element_id)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Seguindo sugeridos...')
                                window.Refresh()
                                time.sleep(5)
                                for element in elements:
                                    if element.get_text() == target_text:
                                        element.click()
                                        time.sleep(1)
                                try:
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                except:
                                    pass
                            except Exception as e:
                                print(e)
                                time.sleep(2)
                                element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                target_text = "Seguir"

                                # Encontre todos os elementos que correspondem ao ID fornecido
                                elements = d(resourceId=element_id)
                                # window['output'].print("Seguindo sugeridos...")
                                window.Refresh()
                                for element in elements:
                                    if element.get_text() == target_text:
                                        element.click()
                                        time.sleep(1)
                                d.xpath(
                                    '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                            time.sleep(1)
                            try:
                                d(resourceId='com.instagram.android:id/button_text').click(timeout=10)
                            except:
                                try:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                except:
                                    time.sleep(2)
                                    try:
                                        d(resourceId='com.instagram.android:id/tab_avatar').click()
                                    except:
                                        d.app_stop("com.instagram.android")
                                        time.sleep(1)
                                        d.app_start("com.instagram.android")
                                        time.sleep(30)
                                        try:
                                            pagina_login = d.xpath(
                                                '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                            if pagina_login.exists:
                                                pagina_login.click()
                                                time.sleep(5)
                                                d.xpath(
                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                                    senha)
                                                pagina_login.click()
                                                time.sleep(3)
                                                d.xpath(
                                                    '//android.view.View[@content-desc="Agora não"]').click()
                                            else:
                                                d(resourceId='com.instagram.android:id/profile_tab').click()
                                        except:
                                            time.sleep(2)
                                            pagina_login = d.xpath(
                                                '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                            if pagina_login.exists:
                                                pagina_login.click()
                                                time.sleep(5)
                                                d.xpath(
                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                                    senha)
                                                pagina_login.click()
                                                time.sleep(3)
                                                d.xpath(
                                                    '//android.view.View[@content-desc="Agora não"]').click()
                                            else:
                                                d(resourceId='com.instagram.android:id/tab_avatar').click()

                            sms = False
                        except Exception as e:
                            d.app_stop("com.instagram.android")
                            time.sleep(1)
                            d.app_start("com.instagram.android")
                            time.sleep(40)
                            try:
                                pagina_login = d.xpath(
                                    '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                if pagina_login.exists:
                                    pagina_login.click()
                                    time.sleep(5)
                                    d.xpath(
                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                        senha)
                                    pagina_login.click()
                                else:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                            except:
                                time.sleep(2)
                                pagina_login = d.xpath(
                                    '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                if pagina_login.exists:
                                    pagina_login.click()
                                    time.sleep(5)
                                    d.xpath(
                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                        senha)
                                    pagina_login.click()
                                else:
                                    d(resourceId='com.instagram.android:id/tab_avatar').click()
                    elif verificar2.exists:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Verificando novamente...')
                        window.Refresh()
                        d.app_stop("com.instagram.android")
                        time.sleep(1)
                        d.app_start("com.instagram.android")

                        if d.xpath('//android.view.View[@content-desc="Esqueceu a senha?"]').exists(timeout=60):
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                user_completo)
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                senha)
                            d.xpath(
                                '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup').click()
                            d.xpath(
                                '//android.view.View[@content-desc="Agora não"]').click()

                        verificar3 = d.xpath(
                            '//android.widget.FrameLayout[@content-desc="Perfil"]/android.view.ViewGroup')
                        time.sleep(40)
                        if verificar3.exists:
                            try:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                                window.Refresh()
                                contagem = contagem + 1
                                sms = False
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")
                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                              conteudo + ' - ' + app]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                              conteudo + ' - ' + app]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                window['total'].update(num_rows)
                                random_number = random.random()

                                # Definir a chance desejada (10%)
                                chance = 0.2

                                # Verificar se o número aleatório está abaixo da chance
                                if random_number < chance and not user_mysql == "wn3":
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                        funcionamento, scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                    sheet_name = 'relatorio_geral'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)
                            except Exception as e:
                                print(e)
                        else:

                            try:
                                conteudo = config['vpn']

                                # Executa a função correspondente ao conteúdo do arquivo
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                            except Exception as e:
                                raise Exception('skip')
                                sms = True
                                continue
                    else:
                        verificar = d(
                            resourceId='com.instagram.android:id/profile_tab')
                        if verificar.exists:
                            try:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                                window.Refresh()
                                seguido = False
                                contagem += 1
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")
                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                window['total'].update(num_rows)
                                random_number = random.random()

                                # Definir a chance desejada (10%)
                                chance = 0.2

                                # Verificar se o número aleatório está abaixo da chance
                                if random_number < chance and not user_mysql == "wn3":
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                        funcionamento, scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                    sheet_name = 'relatorio_geral'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)
                            except Exception as e:
                                print(e)
                                pass
                            window.Refresh()
                            arquivo = open(
                                'configuracoes/contas/contas_criadas.txt', 'a')
                            # Escreva mais conteúdo no arquivo
                            arquivo.write(user_completo + ' ' + senha + "\n")
                            arquivo = open(
                                'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                            # Escreva mais conteúdo no arquivo
                            arquivo.write(
                                email + '\n' + user_completo + '\n' + senha + "\n\n")
                            try:
                                d.xpath(
                                    '//android.view.View[@content-desc="Pular"]').click()
                                time.sleep(2)
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(2)
                                d(resourceId='com.instagram.android:id/negative_button').click()
                                time.sleep(2)
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(4)
                                try:
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Seguindo sugeridos...')
                                    window.Refresh()
                                    time.sleep(5)
                                    for element in elements:
                                        if element.get_text() == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                except Exception as e:
                                    print(e)
                                    time.sleep(2)
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window['output'].print(
                                        "Seguindo sugeridos...")
                                    window.Refresh()
                                    for element in elements:
                                        if element.get_text() == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                time.sleep(1)
                                try:
                                    d(resourceId='com.instagram.android:id/button_text').click()
                                except:
                                    pass
                                time.sleep(3)
                                try:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                except:
                                    time.sleep(2)
                                    d(resourceId='com.instagram.android:id/tab_avatar').click()
                                sms = False
                            except Exception as e:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Reabrindo Instagram.')
                                window.Refresh()
                                d.app_stop('com.instagram.android')
                                d.app_start('com.instagram.android')
                                time.sleep(20)
                                pass
                        else:
                            try:
                                chrome.close()
                            except:
                                pass
                            try:
                                chrome.quit()
                            except:
                                pass
                            try:
                                conteudo = config['vpn']

                                # Executa a função correspondente ao conteúdo do arquivo
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                            except Exception as e:
                                raise Exception('skip')
                                continue
                except Exception as e:
                    print(e)
                    try:
                        chrome.close()
                    except:
                        pass
                    try:
                        chrome.quit()
                    except:
                        pass
                    if conteudo == "AVG":
                        vpn_avg()
                    elif conteudo == "SurfShark":
                        vpn_surf()
                    elif conteudo == "Nenhuma":
                        nenhuma_vpn()
                    elif conteudo == "Avast":
                        vpn_avast()
                    elif conteudo == "ExpressVPN":
                        vpn_express()
                    elif conteudo == "PiaVPN":
                        vpn_pia()
                    elif conteudo == "TunnelBear":
                        vpn_tunnelbear()
                    elif conteudo == "BetterNet":
                        vpn_better()
                    elif conteudo == "CyberGhost":
                        vpn_cyberghost()
                    elif conteudo == "NordVPN":
                        vpn_nord()
                    elif conteudo == "HotspotShield":
                        vpn_hotspotshield()
                    elif conteudo == "WindscribeVPN":
                        vpn_windscribe()
                    elif conteudo == "HmaVPN":
                        vpn_hma()
                    else:
                        window['output'].print(
                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                        window.Refresh()
                    sms = True
                    raise Exception('skip')
                while sms is False:
                    senha = gerar_senha(12)
                    try:
                        time.sleep(3)
                        try:
                            d(resourceId='com.instagram.android:id/profile_tab').click(timeout=120)
                        except:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu algum erro nesta conta.')
                            window.Refresh()
                            raise Exception('Erro na conta')
                        window['output'].print(linha_ret)
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Criação de outro perfil.')
                        window.Refresh()
                        seguido = False
                        # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True)
                        # Clicar no botão de perfil

                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/action_bar_title_chevron').click()
                        time.sleep(2)
                        # Clicar em perfis
                        try:
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout[2]/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.ListView/android.widget.LinearLayout[last()]/android.widget.FrameLayout/android.widget.ImageView').click()
                        except Exception as e:
                            print(e)
                            print('Erro aq')
                            time.sleep(200)
                        # Clicar em adicionar conta
                        d.xpath(
                            '//android.widget.Button[@content-desc="Criar nova conta"]').click()

                        time.sleep(3)
                        # Gerar nome de usuário, digitar no campo e clicar em avançae
                        lista_user = random.choices(range(0, 9), k=2)
                        lista_letras = random.choices(letras, k=1)

                        with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                            nomes = nomes_arquivo.readlines()

                        with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                            sobrenomes = sobrenomes_arquivo.readlines()

                        nomea = fake.first_name_male().replace(" ", "")
                        nome = unicodedata.normalize('NFKD', nomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        sobrenomea = fake.last_name().replace(" ", "").lower()
                        sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        nome_completo = nome + sobrenome
                        numeros_concatenados = ''.join(
                            str(numero) for numero in lista_user)
                        user_completo1 = nome_completo + '' + \
                            str(numeros_concatenados) + ''.join(lista_letras)

                        user_completo = random.randint(1, len(user_completo1))
                        # Insira o ponto no índice aleatório
                        string_with_dot = user_completo1[:user_completo] + \
                            '_' + user_completo1[user_completo:]
                        user_completo_antigo = string_with_dot.lower()

                        escolha = random.choice(["_", "."])
                        user_completo = nome + escolha + sobrenome + \
                            str(numeros_concatenados) + ''.join(lista_letras)
                        print(user_completo)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: ' + user_completo)
                        window.Refresh()
                        d(resourceId='com.instagram.android:id/username').set_text(
                            user_completo)
                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/button_text').click()
                        # Digitar senha e avançar
                        time.sleep(3)
                        try:
                            d(resourceId='com.instagram.android:id/password').set_text(
                                senha)
                        except:
                            try:
                                conteudo = config['vpn']
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()

                            except Exception as e:
                                raise Exception('skip')
                        d(resourceId='com.instagram.android:id/button_text').click()
                        # Clicar em concluir cadastro
                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/button_text').click()

                        time.sleep(4)
                        feedback = d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.View')
                        if feedback.exists:
                            sms = True

                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
                        window.Refresh()
                        # WebDriverWait(driver, 40).until(EC.visibility_of_element_located)(((By.XPATH,
                        #                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')

                        verificar = d(
                            resourceId='com.instagram.android:id/connect_text')
                        if verificar.exists(timeout=60):
                            time.sleep(20)
                            verificar = d(
                                resourceId='com.instagram.android:id/connect_text')
                        if verificar.exists:
                            try:
                                conteudo = config['vpn']
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                                window.Refresh()
                                contagem += 1
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")

                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))

                                window['total'].update(num_rows)
                                try:
                                    random_number = random.random()

                                    # Definir a chance desejada (10%)
                                    chance = 0.2

                                    # Verificar se o número aleatório está abaixo da chance
                                    if random_number < chance and not user_mysql == "wn3":
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                 "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                            funcionamento, scope)
                                        client = gspread.authorize(creds)

                                        spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                        sheet_name = 'relatorio_geral'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                                  conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:G{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)
                                except:
                                    pass

                                window.Refresh()
                                arquivo = open(
                                    'configuracoes/contas/contas_criadas.txt', 'a')
                                # Escreva mais conteúdo no arquivo
                                arquivo.write(user_completo +
                                              ' ' + senha + "\n")
                                arquivo = open(
                                    'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                                # Escreva mais conteúdo no arquivo
                                arquivo.write(
                                    email + '\n' + user_completo + '\n' + senha + "\n\n")
                                window.Refresh()
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(1)
                                d(resourceId='com.instagram.android:id/negative_button').click()
                                time.sleep(3)
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(1)
                                try:
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Seguindo sugeridos...')
                                    window.Refresh()
                                    for element in elements:
                                        if element.get_text() == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                except Exception as e:
                                    print(e)
                                    d(resourceId='com.instagram.android:id/skip_button').click()
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window.Refresh()
                                    for element in elements:
                                        if element.text == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()

                                time.sleep(1)
                                time.sleep(3)
                                try:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                except Exception as e:
                                    print(e)
                                    d(resourceId='com.instagram.android:id/button_text').click()
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                sms = False
                            except Exception as e:
                                print(e)

                        else:
                            try:
                                try:
                                    chrome.close()
                                except:
                                    pass
                                try:
                                    chrome.quit()
                                except:
                                    pass
                                conteudo = config['vpn']
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()

                            except Exception as e:
                                sms = True
                                try:
                                    chrome.close()
                                except:
                                    pass
                                try:
                                    chrome.quit()
                                except:
                                    pass
                                if not str(e) == '':
                                    traceback.print_exc()
                                if not e == 'skip' or not e == 'Manutenção.':
                                    try:
                                        d.screenshot(
                                            f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                                    except Exception as e:
                                        print(e)
                                        pass
                    except Exception as e:
                        print(e)
                        try:
                            chrome.close()
                        except:
                            pass
                        try:
                            chrome.quit()
                        except:
                            pass
                        if not str(e) == '':
                            traceback.print_exc()
                        if not e == 'skip' or not e == 'Manutenção.':
                            try:
                                d.screenshot(
                                    f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                            except Exception as e:
                                print(e)
                                pass
                        sms = True

            except Exception as e:
                print(e)
                try:
                    chrome.close()
                except:
                    pass
                try:
                    chrome.quit()
                except:
                    pass
                if not str(e) == '':
                    traceback.print_exc()
                if not e == 'skip' or not e == 'Manutenção.':
                    try:
                        d.screenshot(
                            f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                    except Exception as e:
                        print(e)
                        pass

        except Exception as e:
            print(e)
            try:
                chrome.close()
            except:
                pass
            try:
                chrome.quit()
            except:
                pass
            if not str(e) == '':
                traceback.print_exc()
            if not e == 'skip' or not e == 'Manutenção.':
                try:
                    d.screenshot(
                        f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                except Exception as e:
                    print(e)
                    pass

            pass


def quackr_io():
    SPREADSHEET_ID = config['spreadsheet']
    conteudo = config['vpn']
    senha = gerar_senha(12)
    maquina = config['maquina']
    tentativa = False
    seguido = False
    regiao_vpn = 'Sem dados'
    app = "Normal"
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    # Código que gera a saída
    import os
    import time
    import requests
    import hashlib
    import subprocess

    # verifica se o arquivo existe na pasta do bot

    try:
        from rich.console import Console
    except ModuleNotFoundError:
        import subprocess
        import sys

        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['pip', 'install', '-r', 'requirements.txt'])
        subprocess.run(['deactivate'], shell=True)
        from rich.console import Console
    import os
    import time
    try:
        import uiautomator2 as u2
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'uiautomator2==2.16.25'])
        subprocess.run(['deactivate'], shell=True)
        subprocess.run(['pip', 'install', '--upgrade', 'requests'])
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        import requests
        time.sleep(10)
        import uiautomator2 as u2
    d = u2.connect(f'{porta}')
    import requests
    import hashlib
    import subprocess
    from colorama import init, Fore, Back, Style
    from faker import Faker
    # teste
    init(autoreset=True)
    console = Console()
    from termcolor import colored

    from rich.console import Console
    from rich.panel import Panel
    from rich.text import Text
    from rich.rule import Rule

    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random
    from datetime import datetime
    import string
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import NoSuchElementException
    from mailtm import Email
    import re
    import logging
    import sys
    logger = logging.getLogger(__name__)

    handler = logging.FileHandler('log.txt')
    handler.setLevel(logging.ERROR)

    logger.addHandler(handler)
    file_path = './storage/adblock.crx'
    import zipfile

    def baixar_arquivo(url, caminho_arquivo, pasta_destino):
        # Verifica e cria a pasta destino, se necessário
        if os.path.exists(pasta_destino):
            return
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Baixando navegador...')
        window.Refresh()
        # Se a pasta não existir, cria a pasta destino
        os.makedirs(pasta_destino)

        # Continua com o download do arquivo
        resposta = requests.get(url, stream=True)
        tamanho_total = int(resposta.headers.get('content-length', 0))

        with open(caminho_arquivo, 'wb') as file:
            for dados in resposta.iter_content(chunk_size=4096):
                file.write(dados)

        # Extrai o arquivo
        with zipfile.ZipFile(caminho_arquivo, 'r') as zip_ref:
            zip_ref.extractall(pasta_destino)

        # Apaga o arquivo zip após a extração
        os.remove(caminho_arquivo)
        print("\nDownload e extração concluídos.")

    url = 'https://www.dropbox.com/scl/fi/9juftou3q4k4kj2o7mzhq/chrome-win.zip?rlkey=84n9pwxouhu9punpcjg32onbz&dl=1'
    caminho_arquivo = './storage/driver/driver.zip'
    pasta_destino = './storage/driver/'

    baixar_arquivo(url, caminho_arquivo, pasta_destino)
    if os.path.exists("./storage/adblock/"):
        result = f"A pasta 'adblock' já existe em '{file_path}'."
    else:
        # URL para download
        url = 'https://www.dropbox.com/scl/fi/2tu2g6ulqwr2xk20kut1x/adblock.crx?rlkey=55rysc1sspa7t81ldybg8t6iy&dl=1'

        # Fazendo o download do arquivo
        response = requests.get(url)
        if response.status_code == 200:
            with open(file_path, 'wb') as file:
                file.write(response.content)
            print("Arquivo 'adblock.crx' baixado e salvo em './storage/adblock.crx'.")
            # Caminho do arquivo original (altere para o seu caminho de arquivo)
            caminho_original = './storage/adblock.crx'
            novo_caminho = './storage/adblock.zip'

            # Renomear o arquivo
            os.rename(caminho_original, novo_caminho)

            # Caminho do arquivo zip
            caminho_zip = './storage/adblock.zip'

            # Diretório de destino para extrair
            diretorio_destino = './storage/adblock/'

            # Remover um arquivo anterior, se existir
            arquivo_antigo = './storage/adblock'
            if os.path.exists(arquivo_antigo):
                os.remove(arquivo_antigo)

            # Criar o diretório de destino se ele não existir
            if not os.path.exists(diretorio_destino):
                os.makedirs(diretorio_destino)

            # Extrair o arquivo zip
            with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                zip_ref.extractall(diretorio_destino)

            print("Arquivo extraído com sucesso!")
            os.remove('./storage/adblock.zip')

        else:
            result = "Não foi possível baixar o arquivo. Status Code: " + \
                str(response.status_code)

    # RANGE_NAME = 'contas!A:D'
    #
    # SCOPES = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

    def vpn_avast():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Avast', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop("com.avast.android.vpn")
            d.app_start("com.avast.android.vpn", ".app.wizard.WizardActivity")
            time.sleep(10)
        except Exception as e:
            print(e)
        abc = False

    def nenhuma_vpn():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.facebook.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        time.sleep(10)

    def vpn_hotspotshield():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HotspotShield',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('hotspotshield.android.vpn')
            d.app_start('hotspotshield.android.vpn')
        except Exception as e:
            print(e)
        d(resourceId='hotspotshield.android.vpn:id/tryAgainButton').click()
        time.sleep(5)
        d(resourceId='hotspotshield.android.vpn:id/btnVpnConnect').click()

        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_pia():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da PiaVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.privateinternetaccess.android')
            d.app_start('com.privateinternetaccess.android')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()
        time.sleep(3)
        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()

        abc = False

    def vpn_express():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da ExpressVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.expressvpn.vpn')
            d.app_start('com.expressvpn.vpn')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.expressvpn.vpn:id/obiButton').click()
        time.sleep(3)
        d(resourceId='com.expressvpn.vpn:id/obiButton').click()

        abc = False

    def vpn_nord():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da NordVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.nordvpn.android')
            time.sleep(5)
            d.app_start('com.nordvpn.android', use_monkey=True)
        except:
            pass
        time.sleep(10)
        time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_surf():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('com.surfshark.vpnclient.android')
            d.app_start('com.surfshark.vpnclient.android')
        except:
            pass
        time.sleep(15)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_better():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da BetterNet', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        try:
            d.app_stop('com.freevpnintouch')
            d.app_start('com.freevpnintouch')
        except:
            pass
        time.sleep(10)
        dialog = d(resourceId='com.freevpnintouch:id/dialogCtaPositive')
        connect = d(
            resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
        if dialog.exists:
            d(resourceId='com.freevpnintouch:id/dialogCtaPositive').click()
            time.sleep(3)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            # time.sleep(5)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
        while connect == 'CONNECT':
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            time.sleep(4)
            connect = d(
                resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            # WebDriverWait(driver, 20).until(
            # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        ip = '127.0.0.1:' + porta

        output = subprocess.check_output(
            ['adb', '-s', ip, 'shell', 'ifconfig'])

        # Verifica se a conexão VPN está ativa
        if not "tun0" in str(output):
            window['output'].print("Não conectado na BetterNet.")
            window.Refresh()
            try:
                connect = d(
                    resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
                d.app_stop('com.freevpnintouch')
                d.app_start('com.freevpnintouch')
                while connect == 'CONNECT':
                    d(resourceId='com.freevpnintouch:id/buttonConnect').click()
                    time.sleep(4)
                    connect = d(
                        resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            except:
                pass
        abc = False

    def vpn_cyberghost():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da CyberGhost', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('de.mobileconcepts.cyberghost')
            d.app_start('de.mobileconcepts.cyberghost')
        except:
            pass
        # time.sleep(3)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        rate = d(resourceId='de.mobileconcepts.cyberghost:id/rate_me_text')
        if rate.exists:
            d(resourceId='android:id/button2').click()
        time.sleep(2)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        abc = False

    def vpn_tunnelbear():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.tunnelbear.android')
            d.app_start("com.tunnelbear.android")
            while True:
                output = subprocess.check_output(
                    ['adb', '-s', porta, 'shell', 'ifconfig'])
                # print(str(output))
                if "tun0" in str(output):
                    print('Conectada')
                    break
                elif not "tun0" in str(output):
                    print('Reconectando')
                    try:
                        d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                        time.sleep(10)
                    except:
                        pass
        except Exception as e:
            print(e)
            pass

    def vpn_avg():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da AVG', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.avg.android.vpn')
            d.app_start("com.avg.android.vpn",
                        "com.avast.android.vpn.app.wizard.WizardActivity")
            regiao_vpn = d(
                resourceId='com.avg.android.vpn:id/location_title').get_text()

        except Exception as e:
            print(e)
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #               stderr=subprocess.DEVNULL, check=True, shell=True)

        time.sleep(30)

    def vpn_windscribe():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Windscribe', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)
            d.app_stop("com.windscribe.vpn")
            d.app_start("com.windscribe.vpn")
        except:
            pass
        d(resourceId='com.windscribe.vpn:id/on_off_button').click()
        time.sleep(10)
        primeiro = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_name').get_text()
        segundo = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_nick_name').get_text()
        regiao_vpn = primeiro + ' ' + segundo

    def vpn_hma():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HMA', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)

            d.app_stop("com.hidemyass.hidemyassprovpn")
            time.sleep(3)
            d.app_start('com.hidemyass.hidemyassprovpn',
                        'com.avast.android.vpn.activity.HmaOnboardingActivity')
        except:
            pass
        time.sleep(10)

    def gerar_id():
        chars = string.ascii_lowercase + string.digits
        android_id = ''.join(random.choice(chars) for i in range(16))
        return android_id

    options = Options()
    prefs = {"profile.managed_default_content_settings.images": 2}
    options.page_load_strategy = 'none'
    options.add_experimental_option("prefs", prefs)

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    window.Refresh()

    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global transition_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass
    gerar_id()
    android_id = gerar_id()
    subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    time.sleep(2)
    # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True, stdout=subprocess.DEVNULL,
    #               stderr=subprocess.DEVNULL)

    try:
        subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
    except Exception as e:
        pass

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Efetuando troca de IP.')
    window.Refresh()
    try:
        conteudo = config['vpn']
        if conteudo == "AVG":
            vpn_avg()
        elif conteudo == "SurfShark":
            vpn_surf()
        elif conteudo == "Nenhuma":
            nenhuma_vpn()
        elif conteudo == "Avast":
            vpn_avast()
        elif conteudo == "ExpressVPN":
            vpn_express()

        elif conteudo == "PiaVPN":
            vpn_pia()
        elif conteudo == "TunnelBear":
            vpn_tunnelbear()
        elif conteudo == "BetterNet":
            vpn_better()
        elif conteudo == "CyberGhost":
            vpn_cyberghost()
        elif conteudo == "NordVPN":
            vpn_nord()
        elif conteudo == "HotspotShield":
            vpn_hotspotshield()
        elif conteudo == "WindscribeVPN":
            vpn_windscribe()
        elif conteudo == "HmaVPN":
            vpn_hma()
        else:
            window['output'].print(
                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
            window.Refresh()

    except Exception as e:
        print(e)
        pass

    window.Refresh()

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.\n')
    window.Refresh()
    try:
        scope = ["https://spreadsheets.google.com/feeds",
                 "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name(
            'credentials.json', scope)
        client = gspread.authorize(creds)

        spreadsheet_id = config['spreadsheet']
        sheet_name = 'contas'
        # Insert user, password, and timestamp into first empty row
        sheet = client.open_by_key(spreadsheet_id).worksheet(sheet_name)
        values = sheet.col_values(1)

        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
        rows = sheet.get_all_values()

        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
        regex = re.compile(r'\S+\s\S+')
        sheet_name = config['2nr']
        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
        num_rows = sum(1 for row in rows if regex.match(row[0]))
        window['total'].update(num_rows)
    except Exception as e:
        print(e)
    d.implicitly_wait(30.0)
    d.set_fastinput_ime(True)
    if not os.path.exists('./erros'):
        os.makedirs('./erros')
    codigo_não_recebido_seguidos = 0
    criou = False
    while parar is False:
        senha = gerar_senha(12)
        if parar is True:
            print('Parando Thread')
            try:
                chrome.close()
            except:
                pass
            try:
                chrome.quit()
            except:
                pass
            break
        # if codigo_não_recebido_seguidos == 3:
        #    #tempo_aleatorio = random.randint(10, 40)
        #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] 3 códigos não recebidos seguidos.')
        #    window.Refresh()
        #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando 1 hora para voltar novamente.')
        #    window.Refresh()
        #    time.sleep(3600)
        #    codigo_não_recebido_seguidos = 0
        try:
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)

            except:
                pass
            try:
                subprocess.run(
                    f'adb -s {porta} shell pm grant com.instagram.android android.permission.READ_CONTACTS',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            gerar_id()
            android_id = gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            window['output'].print(linha_ret)
            window.Refresh()
            try:
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo instagram.')
                window.Refresh()
                d.app_start('com.instagram.android')
                try:
                    d.xpath(
                        '//android.widget.Button[@content-desc="Criar nova conta"]').click(timeout=120)
                except:
                    conteudo = config['vpn']
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Pagina Estática.')
                    window.Refresh()
                    if conteudo == "AVG":
                        vpn_avg()
                    elif conteudo == "SurfShark":
                        vpn_surf()
                    elif conteudo == "Nenhuma":
                        nenhuma_vpn()
                    elif conteudo == "Avast":
                        vpn_avast()
                    elif conteudo == "ExpressVPN":
                        vpn_express()
                    elif conteudo == "PiaVPN":
                        vpn_pia()
                    elif conteudo == "TunnelBear":
                        vpn_tunnelbear()
                    elif conteudo == "BetterNet":
                        vpn_better()
                    elif conteudo == "CyberGhost":
                        vpn_cyberghost()
                    elif conteudo == "NordVPN":
                        vpn_nord()
                    elif conteudo == "HotspotShield":
                        vpn_hotspotshield()
                    elif conteudo == "WindscribeVPN":
                        vpn_windscribe()
                    elif conteudo == "HmaVPN":
                        vpn_hma()
                    else:
                        window['output'].print(
                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                        window.Refresh()
                    raise Exception('skip')
                # time.sleep(6)
                # novo_layout = d.xpath('//android.view.View[@content-desc="Qual é o seu nome?"]')
                # if len(novo_layout) == 1:
                #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Layout novo encontrado, reiniciando app.')
                #    window.Refresh()
                #    raise Exception("skip.")

                ######################################################################
                lista_user = random.choices(range(0, 9), k=2)
                lista_letras = random.choices(letras, k=1)

                with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                    nomes = nomes_arquivo.readlines()

                with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                    sobrenomes = sobrenomes_arquivo.readlines()

                nomea = fake.first_name_male().replace(" ", "")
                nome = unicodedata.normalize('NFKD', nomea).encode(
                    'ASCII', 'ignore').decode('ASCII')
                sobrenomea = fake.last_name().replace(" ", "").lower()
                sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                    'ASCII', 'ignore').decode('ASCII')
                nome_completo = nome + ' ' + sobrenome
                nome_completo_s = nome + sobrenome
                numeros_concatenados = ''.join(
                    str(numero) for numero in lista_user)
                user_completo1 = nome_completo_s + '' + \
                    str(numeros_concatenados) + ''.join(lista_letras)

                user_completo = random.randint(1, len(user_completo1))
                # Insira o ponto no índice aleatório
                string_with_dot = user_completo1[:user_completo] + \
                    '_' + user_completo1[user_completo:]
                user_completo_antigo = string_with_dot.lower()

                escolha = random.choice(["_", "."])
                user_completo = nome + escolha + sobrenome + \
                    str(numeros_concatenados) + ''.join(lista_letras)
                ######################################################################
                time.sleep(10)
                layout1 = d.xpath(
                    '//android.view.View[@content-desc="Crie um nome de usuário"]')
                layout2 = d(resourceId='android:id/button2')
                layout3 = d.xpath(
                    '//android.view.View[@content-desc="Qual é o número do seu celular?"]')
                layout3v2 = d.xpath(
                    '//android.view.View[@content-desc="Qual é seu número de celular ou email?"]')
                layout4 = d.xpath(
                    '//android.view.View[@content-desc="Crie uma senha"]')
                if layout1.exists:
                    layout_usado = 'layout1'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout1 novo encontrado.')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(4)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=20.0)
                    except Exception as e:
                        print(e)
                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)

                elif layout2.exists:
                    layout_usado = 'layout2'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout2 novo encontrado.')
                    window.Refresh()
                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(4)
                    d.xpath(
                        '//android.widget.Button[@content-desc="Avançar"]/android.view.ViewGroup').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.Button[@content-desc="Avançar"]/android.view.ViewGroup').click()
                    time.sleep(5)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=10.0)
                    except Exception as e:
                        pass

                elif layout3.exists or layout3v2.exists:
                    layout_usado = 'layout3'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout3 novo encontrado.')
                    window.Refresh()
                    try:
                        from selenium import webdriver
                        from selenium.webdriver.common.by import By
                        from selenium.webdriver.chrome.service import Service
                        try:
                            import undetected_chromedriver as uc
                        except:
                            subprocess.run(
                                ['venv/scripts/activate.bat'], shell=True)
                            subprocess.run(
                                ['pip', 'install', 'undetected_chromedriver'])
                            import undetected_chromedriver as uc
                        import time
                        from selenium.webdriver.support.ui import WebDriverWait
                        from selenium.webdriver.support import expected_conditions as EC
                        url = "https://quackr.io/temporary-phone-number-generator/"
                        if criou:
                            url = url_atual
                        chromedriver_path = '.\\storage\\driver\\chromedriver.exe'
                        chrome_options = uc.ChromeOptions()
                        # chrome_options.add_argument("--blink-settings=imagesEnabled=false")
                        chrome_options.add_argument("--disable-gpu")
                        chrome_options.add_argument('--ignore-ssl-errors=yes')
                        chrome_options.add_argument(
                            '--ignore-certificate-errors')
                        chrome_options.add_argument("--no-sandbox")
                        chrome_options.binary_location = '.\\storage\\driver\\chrome.exe'
                        # chrome_options.add_extension('.\\storage\\adblock.crx')
                        chrome_options.add_argument(
                            f"--load-extension={caminho_atual}\\storage\\adblock\\")
                        chrome_options.page_load_strategy = 'eager'

                        # Configurando o Selenium para usar o Chrome Driver local
                        service = Service(executable_path=chromedriver_path)
                        chrome = uc.Chrome(
                            service=service, headless=True, version_main=116, options=chrome_options)
                        if criou:
                            chrome.get(url)
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Utilizando o mesmo número.')
                            window.Refresh()
                            chrome.set_window_size(800, 2000)
                            chrome.execute_script(
                                "document.body.style.zoom='50%'")
                        else:
                            chrome.get(url)
                            chrome.set_window_size(800, 2000)
                            chrome.execute_script(
                                "document.body.style.zoom='50%'")

                            time.sleep(7)
                            try:
                                agree_button = WebDriverWait(chrome, 5).until(
                                    EC.presence_of_element_located(
                                        (By.XPATH, "//button[.//span[contains(text(), 'AGREE')]]"))
                                )
                            except:
                                agree_button = False

                            # Se o elemento for encontrado, clique nele
                            if agree_button:
                                chrome.execute_script(
                                    "arguments[0].click();", agree_button)
                            else:
                                pass
                            teste = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable((By.XPATH,
                                                                                                "/html/body/app-root/div/div/main/app-temporary-phone-number-generator/section/div/div[1]/div/div/div[1]/button")))
                            chrome.execute_script(
                                "arguments[0].click();", teste)
                            import random
                            paises_num = ['31', '8', '7', '21', '28']
                            pais = random.choice(paises_num)
                            button_with_text = WebDriverWait(chrome, 20).until(
                                EC.element_to_be_clickable((By.XPATH,
                                                            f'/html/body/app-root/div/div/main/app-temporary-phone-number-generator/section/div/div[1]/div/div/div[2]/div/a[{pais}]'))
                            )
                            # Clica no botão

                            chrome.execute_script(
                                "arguments[0].click();", button_with_text)
                            chrome.execute_script(
                                "document.body.style.zoom='50%'")
                            chrome.execute_script("arguments[0].click();",
                                                  WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                                                      (By.CLASS_NAME, 'button.is-success'))))
                        num = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                            (By.CSS_SELECTOR, 'h1[tooltip="Copied"]'))).text
                        chrome.execute_script("document.body.style.zoom='50%'")
                        url_atual = chrome.current_url
                        print(num)
                        criou = False
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número: {num}')
                        window.Refresh()

                    except Exception as e:
                        print(e)
                        print("Aguardando 5 minutos")
                        time.sleep(300)

                        if not str(e) == '':
                            traceback.print_exc()
                        raise Exception('erro no navegador')
                        pass
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Qual é o número do seu celular?"]')
                    if restricao.exists:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        try:
                            chrome.close()
                        except:
                            pass
                        try:
                            chrome.quit()
                        except:
                            pass
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    time.sleep(12)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Qual é o número do seu celular?"]')
                    if restricao.exists:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        try:
                            chrome.close()
                        except:
                            pass
                        try:
                            chrome.quit()
                        except:
                            pass
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')
                    selecionar_sms = d.xpath(
                        '//android.view.View[@content-desc="Enviar código por SMS"]')
                    if selecionar_sms.exists:
                        selecionar_sms.click()
                        time.sleep(1)
                        d.xpath(
                            '//android.view.View[@content-desc="Enviar código"]').click()

                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()
                    encontrado = False
                    tentativa = 0
                    try:
                        while not encontrado and tentativa < 6:
                            if "#google_vignette" in chrome.current_url:
                                chrome.refresh()
                                chrome.execute_script(
                                    "document.body.style.zoom='50%'")
                                time.sleep(3)
                            elemento = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable((By.XPATH,
                                                                                                   '/html/body/app-root/div/div/main/messages/section/div/div/div/table/tbody/tr/td[3]'))).text
                            # print(elemento)
                            time_second = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable((By.XPATH,
                                                                                                      '/html/body/app-root/div/div/main/messages/section/div/div/div/table/tbody/tr/td[1]'))).text

                            # print(time_second)
                            if 'Instagram' in elemento and (
                                    'seconds' in time_second or '1 minute ago' in time_second or '2 minute ago' in time_second):
                                encontrado = True
                                match = re.search(r'\d+\s*\d+\s*\d+\s*\d+\s*\d+\s*\d+',
                                                  elemento)  # Extrai seis grupos de dígitos, permitindo espaços entre eles
                                if match:
                                    numeros = ''.join(match.group().split())

                            else:
                                # Clique no outro elemento
                                tentativa = tentativa + 1
                                chrome.refresh()
                                chrome.execute_script(
                                    "document.body.style.zoom='50%'")
                                time.sleep(10)
                    except Exception as e:
                        print(e)
                        print('erro')
                        chrome.save_screenshot('erro_navegador.png')
                        chrome.quit()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Algum erro')
                        window.Refresh()
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                            break
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception("Algum erro")
                        try:
                            chrome.close()
                        except:
                            pass
                        try:
                            chrome.quit()
                        except:
                            pass
                    if tentativa == 6:
                        chrome.quit()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Codigo não recebido.')
                        window.Refresh()
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                            break
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception("Codigo não recebido.")
                    codigo = numeros
                    print(numeros)
                    try:
                        chrome.close()
                    except:
                        pass
                    try:
                        chrome.quit()
                    except:
                        pass
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    time.sleep(5)
                    email = f"{num} - quackr.io"
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=10.0)
                    except Exception as e:
                        print(e)
                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        nome_completo)
                    time.sleep(1)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nome escolhido: {nome_completo}')
                    window.Refresh()
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                    window.Refresh()
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        '')
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(3)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(3)

                elif layout4.exists:
                    layout_usado = 'layout4'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout4 novo encontrado.')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.Button[@content-desc="Avançar"]/android.view.ViewGroup').click()
                    time.sleep(4)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=20.0)
                    except Exception as e:
                        print(e)
                    time.sleep(4)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                    window.Refresh()
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        '')
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(3)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)

                else:
                    layout_usado = 'layout_normal'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout normal encontrado.')
                    window.Refresh()
                    # raise Exception('Manutenção.')
                    cancel = d(resourceId='com.google.android.gms:id/cancel')
                    if cancel.exists(timeout=10):
                        d(resourceId='com.google.android.gms:id/cancel').click()
                    senha = gerar_senha(12)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        nome_completo)
                    time.sleep(1)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nome escolhido: {nome_completo}')
                    window.Refresh()
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=20.0)
                    except Exception as e:
                        print(e)
                    # salvar_senha = d.xpath('//android.view.View[@content-desc="Agora não"]')
                    # if salvar_senha.exists:
                    #    d.xpath('//android.view.View[@content-desc="Agora não"]').click()

                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Alterar nome de usuário"]').click(timeout=5)
                    except:
                        pass
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                    window.Refresh()
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        '')
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(3)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(3)
                    try:
                        from selenium import webdriver
                        from selenium.webdriver.common.by import By
                        from selenium.webdriver.chrome.service import Service
                        try:
                            import undetected_chromedriver as uc
                        except:
                            subprocess.run(
                                ['venv/scripts/activate.bat'], shell=True)
                            subprocess.run(
                                ['pip', 'install', 'undetected_chromedriver'])
                            import undetected_chromedriver as uc
                        import time
                        from selenium.webdriver.support.ui import WebDriverWait
                        from selenium.webdriver.support import expected_conditions as EC
                        url = "https://quackr.io/temporary-phone-number-generator/"
                        if criou:
                            url = url_atual
                        chromedriver_path = '.\\storage\\driver\\chromedriver.exe'
                        chrome_options = uc.ChromeOptions()
                        # chrome_options.add_argument("--blink-settings=imagesEnabled=false")
                        chrome_options.add_argument("--disable-gpu")
                        chrome_options.add_argument('--ignore-ssl-errors=yes')
                        chrome_options.add_argument(
                            '--ignore-certificate-errors')
                        chrome_options.add_argument("--no-sandbox")
                        chrome_options.binary_location = '.\\storage\\driver\\chrome.exe'
                        # chrome_options.add_extension('.\\storage\\adblock.crx')
                        chrome_options.add_argument(
                            f"--load-extension={caminho_atual}\\storage\\adblock\\")
                        chrome_options.page_load_strategy = 'eager'

                        # Configurando o Selenium para usar o Chrome Driver local
                        service = Service(executable_path=chromedriver_path)
                        chrome = uc.Chrome(
                            service=service, headless=True, version_main=116, options=chrome_options)
                        if criou:
                            chrome.get(url)
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Utilizando o mesmo número.')
                            window.Refresh()
                            chrome.set_window_size(800, 2000)
                            chrome.execute_script(
                                "document.body.style.zoom='50%'")
                        else:
                            chrome.get(url)
                            chrome.set_window_size(800, 2000)
                            chrome.execute_script(
                                "document.body.style.zoom='50%'")

                            time.sleep(7)
                            try:
                                agree_button = WebDriverWait(chrome, 5).until(
                                    EC.presence_of_element_located(
                                        (By.XPATH, "//button[.//span[contains(text(), 'AGREE')]]"))
                                )
                            except:
                                agree_button = False

                            # Se o elemento for encontrado, clique nele
                            if agree_button:
                                chrome.execute_script(
                                    "arguments[0].click();", agree_button)
                            else:
                                pass
                            teste = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable((By.XPATH,
                                                                                                "/html/body/app-root/div/div/main/app-temporary-phone-number-generator/section/div/div[1]/div/div/div[1]/button")))
                            chrome.execute_script(
                                "arguments[0].click();", teste)
                            import random
                            paises_num = ['31', '8', '7', '21', '28']
                            pais = random.choice(paises_num)
                            button_with_text = WebDriverWait(chrome, 20).until(
                                EC.element_to_be_clickable((By.XPATH,
                                                            f'/html/body/app-root/div/div/main/app-temporary-phone-number-generator/section/div/div[1]/div/div/div[2]/div/a[{pais}]'))
                            )
                            # Clica no botão

                            chrome.execute_script(
                                "arguments[0].click();", button_with_text)
                            chrome.execute_script(
                                "document.body.style.zoom='50%'")
                            chrome.execute_script("arguments[0].click();",
                                                  WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                                                      (By.CLASS_NAME, 'button.is-success'))))
                        num = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                            (By.CSS_SELECTOR, 'h1[tooltip="Copied"]'))).text
                        chrome.execute_script("document.body.style.zoom='50%'")
                        url_atual = chrome.current_url
                        print(num)
                        criou = False
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número: {num}')
                        window.Refresh()

                    except Exception as e:
                        print(e)
                        print("Aguardando 5 minutos")
                        time.sleep(300)

                        if not str(e) == '':
                            traceback.print_exc()
                        raise Exception('erro no navegador')
                        pass
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Qual é o número do seu celular?"]')
                    if restricao.exists:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        try:
                            chrome.close()
                        except:
                            pass
                        try:
                            chrome.quit()
                        except:
                            pass
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    time.sleep(12)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Qual é o número do seu celular?"]')
                    if restricao.exists:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        try:
                            chrome.close()
                        except:
                            pass
                        try:
                            chrome.quit()
                        except:
                            pass
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')
                    selecionar_sms = d.xpath(
                        '//android.view.View[@content-desc="Enviar código por SMS"]')
                    if selecionar_sms.exists:
                        selecionar_sms.click()
                        time.sleep(1)
                        d.xpath(
                            '//android.view.View[@content-desc="Enviar código"]').click()

                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    encontrado = False
                    tentativa = 0
                    try:
                        while not encontrado and tentativa < 6:
                            if "#google_vignette" in chrome.current_url:
                                chrome.refresh()
                                chrome.execute_script(
                                    "document.body.style.zoom='50%'")
                                time.sleep(3)
                            elemento = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable((By.XPATH,
                                                                                                   '/html/body/app-root/div/div/main/messages/section/div/div/div/table/tbody/tr/td[3]'))).text
                            # print(elemento)
                            time_second = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable((By.XPATH,
                                                                                                      '/html/body/app-root/div/div/main/messages/section/div/div/div/table/tbody/tr/td[1]'))).text

                            # print(time_second)
                            if 'Instagram' in elemento and (
                                    'seconds' in time_second or '1 minute ago' in time_second or '2 minute ago' in time_second):
                                encontrado = True
                                match = re.search(r'\d+\s*\d+\s*\d+\s*\d+\s*\d+\s*\d+',
                                                  elemento)  # Extrai seis grupos de dígitos, permitindo espaços entre eles
                                if match:
                                    numeros = ''.join(match.group().split())

                            else:
                                # Clique no outro elemento
                                tentativa = tentativa + 1
                                chrome.refresh()
                                chrome.execute_script(
                                    "document.body.style.zoom='50%'")
                                time.sleep(10)
                    except Exception as e:
                        print(e)
                        print('erro')
                        chrome.save_screenshot('erro_navegador.png')
                        chrome.quit()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Algum erro')
                        window.Refresh()
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                            break
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception("Algum erro")
                        try:
                            chrome.close()
                        except:
                            pass
                        try:
                            chrome.quit()
                        except:
                            pass
                    if tentativa == 6:
                        chrome.quit()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Codigo não recebido.')
                        window.Refresh()
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                            break
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception("Codigo não recebido.")
                    codigo = numeros
                    print(numeros)
                    try:
                        chrome.close()
                    except:
                        pass
                    try:
                        chrome.quit()
                    except:
                        pass
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    time.sleep(5)
                    email = f"{num} - quackr.io"
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)

                codigo_invalido = d.xpath(
                    '//android.view.View[@content-desc="Não recebi o código"]')
                d.xpath(
                    '//android.view.View[@content-desc="Concordo"]').click()
                time.sleep(5)
                errodetec = d.xpath(
                    '//android.view.View[@content-desc="Concordo"]')
                if errodetec.exists:
                    d.xpath(
                        '//android.view.View[@content-desc="Concordo"]').click()
                    time.sleep(5)

                errodetec = d.xpath(
                    '//android.view.View[@content-desc="Concordo"]')
                if errodetec.exists:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Instagram não deixou avançar.')
                    window.Refresh()

                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
                window.Refresh()
                time.sleep(45)
                verificar = d.xpath(
                    '//android.view.View[@content-desc="Adicionar foto"]')
                verificar2 = d.xpath(
                    '//android.view.View[@content-desc="Aceite os termos e políticas do Instagram"]')
                email = num
                try:
                    if verificar.exists:
                        criou = True
                        try:
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                   text_color=('lime'))
                            window.Refresh()
                            seguido = False
                            contagem += 1
                            window['criadas'].update(contagem)
                            window.Refresh()
                            now = datetime.now()
                            now_brasilia = tz.localize(now)
                            timestamp = now_brasilia.strftime(
                                "%d/%m/%Y %H:%M:%S")
                            try:
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                          conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')  # VOLTARAQUI

                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)
                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            except Exception as e:
                                print(e)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                tempo_aleatorio = random.randint(10, 40)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                time.sleep(tempo_aleatorio)
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                          conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            window['total'].update(num_rows)
                            random_number = random.random()

                            # Definir a chance desejada (10%)
                            chance = 0.2

                            # Verificar se o número aleatório está abaixo da chance
                            if random_number < chance and not user_mysql == "wn3":
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                    funcionamento, scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                sheet_name = 'relatorio_geral'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                          conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)
                        except Exception as e:
                            print(e)
                            pass
                        window.Refresh()
                        arquivo = open(
                            'configuracoes/contas/contas_criadas.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(user_completo + ' ' + senha + "\n")
                        arquivo = open(
                            'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(
                            email + '\n' + user_completo + '\n' + senha + "\n\n")
                        try:
                            d.xpath(
                                '//android.view.View[@content-desc="Pular"]').click()
                            time.sleep(2)
                            d(resourceId='com.instagram.android:id/skip_button').click()
                            time.sleep(2)
                            d(resourceId='com.instagram.android:id/negative_button').click()
                            time.sleep(2)
                            d(resourceId='com.instagram.android:id/skip_button').click()
                            skip_button = d(
                                resourceId='com.instagram.android:id/skip_button')
                            time.sleep(2)
                            if skip_button.exists:
                                d(resourceId='com.instagram.android:id/skip_button').click()
                            time.sleep(4)
                            try:
                                element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                target_text = "Seguir"

                                # Encontre todos os elementos que correspondem ao ID fornecido
                                elements = d(resourceId=element_id)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Seguindo sugeridos...')
                                window.Refresh()
                                time.sleep(5)
                                for element in elements:
                                    if element.get_text() == target_text:
                                        element.click()
                                        time.sleep(1)
                                try:
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                except:
                                    pass
                            except Exception as e:
                                print(e)
                                time.sleep(2)
                                element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                target_text = "Seguir"

                                # Encontre todos os elementos que correspondem ao ID fornecido
                                elements = d(resourceId=element_id)
                                # window['output'].print("Seguindo sugeridos...")
                                window.Refresh()
                                for element in elements:
                                    if element.get_text() == target_text:
                                        element.click()
                                        time.sleep(1)
                                d.xpath(
                                    '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                            time.sleep(1)
                            try:
                                d(resourceId='com.instagram.android:id/button_text').click(timeout=10)
                            except:
                                try:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                except:
                                    time.sleep(2)
                                    try:
                                        d(resourceId='com.instagram.android:id/tab_avatar').click()
                                    except:
                                        d.app_stop("com.instagram.android")
                                        time.sleep(1)
                                        d.app_start("com.instagram.android")
                                        time.sleep(30)
                                        try:
                                            pagina_login = d.xpath(
                                                '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                            if pagina_login.exists:
                                                pagina_login.click()
                                                time.sleep(5)
                                                d.xpath(
                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                                    senha)
                                                pagina_login.click()
                                                time.sleep(3)
                                                d.xpath(
                                                    '//android.view.View[@content-desc="Agora não"]').click()
                                            else:
                                                d(resourceId='com.instagram.android:id/profile_tab').click()
                                        except:
                                            time.sleep(2)
                                            pagina_login = d.xpath(
                                                '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                            if pagina_login.exists:
                                                pagina_login.click()
                                                time.sleep(5)
                                                d.xpath(
                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                                    senha)
                                                pagina_login.click()
                                                time.sleep(3)
                                                d.xpath(
                                                    '//android.view.View[@content-desc="Agora não"]').click()
                                            else:
                                                d(resourceId='com.instagram.android:id/tab_avatar').click()

                            sms = False
                        except Exception as e:
                            d.app_stop("com.instagram.android")
                            time.sleep(1)
                            d.app_start("com.instagram.android")
                            time.sleep(40)
                            try:
                                pagina_login = d.xpath(
                                    '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                if pagina_login.exists:
                                    pagina_login.click()
                                    time.sleep(5)
                                    d.xpath(
                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                        senha)
                                    pagina_login.click()
                                else:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                            except:
                                time.sleep(2)
                                pagina_login = d.xpath(
                                    '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                if pagina_login.exists:
                                    pagina_login.click()
                                    time.sleep(5)
                                    d.xpath(
                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                        senha)
                                    pagina_login.click()
                                else:
                                    d(resourceId='com.instagram.android:id/tab_avatar').click()
                    elif verificar2.exists:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Verificando novamente...')
                        window.Refresh()
                        d.app_stop("com.instagram.android")
                        time.sleep(1)
                        d.app_start("com.instagram.android")

                        if d.xpath('//android.view.View[@content-desc="Esqueceu a senha?"]').exists(timeout=60):
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                user_completo)
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                senha)
                            d.xpath(
                                '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup').click()
                            d.xpath(
                                '//android.view.View[@content-desc="Agora não"]').click()

                        verificar3 = d.xpath(
                            '//android.widget.FrameLayout[@content-desc="Perfil"]/android.view.ViewGroup')
                        time.sleep(40)
                        if verificar3.exists:
                            try:
                                criou = True
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                                window.Refresh()
                                contagem = contagem + 1
                                sms = False
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")
                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                              conteudo + ' - ' + app]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                              conteudo + ' - ' + app]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                window['total'].update(num_rows)
                                random_number = random.random()

                                # Definir a chance desejada (10%)
                                chance = 0.2

                                # Verificar se o número aleatório está abaixo da chance
                                if random_number < chance and not user_mysql == "wn3":
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                        funcionamento, scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                    sheet_name = 'relatorio_geral'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)
                            except Exception as e:
                                print(e)
                        else:

                            try:
                                conteudo = config['vpn']

                                # Executa a função correspondente ao conteúdo do arquivo
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                            except Exception as e:
                                raise Exception('skip')
                                sms = True
                                continue
                    else:
                        verificar = d(
                            resourceId='com.instagram.android:id/profile_tab')
                        if verificar.exists:
                            try:
                                criou = True
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                                window.Refresh()
                                seguido = False
                                contagem += 1
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")
                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                window['total'].update(num_rows)
                                random_number = random.random()

                                # Definir a chance desejada (10%)
                                chance = 0.2

                                # Verificar se o número aleatório está abaixo da chance
                                if random_number < chance and not user_mysql == "wn3":
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                        funcionamento, scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                    sheet_name = 'relatorio_geral'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)
                            except Exception as e:
                                print(e)
                                pass
                            window.Refresh()
                            arquivo = open(
                                'configuracoes/contas/contas_criadas.txt', 'a')
                            # Escreva mais conteúdo no arquivo
                            arquivo.write(user_completo + ' ' + senha + "\n")
                            arquivo = open(
                                'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                            # Escreva mais conteúdo no arquivo
                            arquivo.write(
                                email + '\n' + user_completo + '\n' + senha + "\n\n")
                            try:
                                d.xpath(
                                    '//android.view.View[@content-desc="Pular"]').click()
                                time.sleep(2)
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(2)
                                d(resourceId='com.instagram.android:id/negative_button').click()
                                time.sleep(2)
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(4)
                                try:
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Seguindo sugeridos...')
                                    window.Refresh()
                                    time.sleep(5)
                                    for element in elements:
                                        if element.get_text() == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                except Exception as e:
                                    print(e)
                                    time.sleep(2)
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window['output'].print(
                                        "Seguindo sugeridos...")
                                    window.Refresh()
                                    for element in elements:
                                        if element.get_text() == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                time.sleep(1)
                                try:
                                    d(resourceId='com.instagram.android:id/button_text').click()
                                except:
                                    pass
                                time.sleep(3)
                                try:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                except:
                                    time.sleep(2)
                                    d(resourceId='com.instagram.android:id/tab_avatar').click()
                                sms = False
                            except Exception as e:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Reabrindo Instagram.')
                                window.Refresh()
                                d.app_stop('com.instagram.android')
                                d.app_start('com.instagram.android')
                                time.sleep(20)
                                pass
                        else:
                            try:
                                chrome.close()
                            except:
                                pass
                            try:
                                chrome.quit()
                            except:
                                pass
                            try:
                                conteudo = config['vpn']

                                # Executa a função correspondente ao conteúdo do arquivo
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                            except Exception as e:
                                raise Exception('skip')
                                continue
                except Exception as e:
                    print(e)
                    try:
                        chrome.close()
                    except:
                        pass
                    try:
                        chrome.quit()
                    except:
                        pass
                    if conteudo == "AVG":
                        vpn_avg()
                    elif conteudo == "SurfShark":
                        vpn_surf()
                    elif conteudo == "Nenhuma":
                        nenhuma_vpn()
                    elif conteudo == "Avast":
                        vpn_avast()
                    elif conteudo == "ExpressVPN":
                        vpn_express()
                    elif conteudo == "PiaVPN":
                        vpn_pia()
                    elif conteudo == "TunnelBear":
                        vpn_tunnelbear()
                    elif conteudo == "BetterNet":
                        vpn_better()
                    elif conteudo == "CyberGhost":
                        vpn_cyberghost()
                    elif conteudo == "NordVPN":
                        vpn_nord()
                    elif conteudo == "HotspotShield":
                        vpn_hotspotshield()
                    elif conteudo == "WindscribeVPN":
                        vpn_windscribe()
                    elif conteudo == "HmaVPN":
                        vpn_hma()
                    else:
                        window['output'].print(
                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                        window.Refresh()
                    sms = True
                    raise Exception('skip')
                while sms is False:
                    senha = gerar_senha(12)
                    try:
                        time.sleep(3)
                        try:
                            d(resourceId='com.instagram.android:id/profile_tab').click(timeout=120)
                        except:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu algum erro nesta conta.')
                            window.Refresh()
                            raise Exception('Erro na conta')
                        window['output'].print(linha_ret)
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Criação de outro perfil.')
                        window.Refresh()
                        seguido = False
                        # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True)
                        # Clicar no botão de perfil

                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/action_bar_title_chevron').click()
                        time.sleep(2)
                        # Clicar em perfis
                        try:
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout[2]/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.ListView/android.widget.LinearLayout[last()]/android.widget.FrameLayout/android.widget.ImageView').click()
                        except Exception as e:
                            print(e)
                            print('Erro aq')
                            time.sleep(200)
                        # Clicar em adicionar conta
                        d.xpath(
                            '//android.widget.Button[@content-desc="Criar nova conta"]').click()

                        time.sleep(3)
                        # Gerar nome de usuário, digitar no campo e clicar em avançae
                        lista_user = random.choices(range(0, 9), k=2)
                        lista_letras = random.choices(letras, k=1)

                        with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                            nomes = nomes_arquivo.readlines()

                        with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                            sobrenomes = sobrenomes_arquivo.readlines()

                        nomea = fake.first_name_male().replace(" ", "")
                        nome = unicodedata.normalize('NFKD', nomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        sobrenomea = fake.last_name().replace(" ", "").lower()
                        sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        nome_completo = nome + sobrenome
                        numeros_concatenados = ''.join(
                            str(numero) for numero in lista_user)
                        user_completo1 = nome_completo + '' + \
                            str(numeros_concatenados) + ''.join(lista_letras)

                        user_completo = random.randint(1, len(user_completo1))
                        # Insira o ponto no índice aleatório
                        string_with_dot = user_completo1[:user_completo] + \
                            '_' + user_completo1[user_completo:]
                        user_completo_antigo = string_with_dot.lower()

                        escolha = random.choice(["_", "."])
                        user_completo = nome + escolha + sobrenome + \
                            str(numeros_concatenados) + ''.join(lista_letras)
                        print(user_completo)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: ' + user_completo)
                        window.Refresh()
                        d(resourceId='com.instagram.android:id/username').set_text(
                            user_completo)
                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/button_text').click()
                        # Digitar senha e avançar
                        time.sleep(3)
                        try:
                            d(resourceId='com.instagram.android:id/password').set_text(
                                senha)
                        except:
                            try:
                                conteudo = config['vpn']
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()

                            except Exception as e:
                                raise Exception('skip')
                        d(resourceId='com.instagram.android:id/button_text').click()
                        # Clicar em concluir cadastro
                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/button_text').click()

                        time.sleep(4)
                        feedback = d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.View')
                        if feedback.exists:
                            sms = True

                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
                        window.Refresh()
                        # WebDriverWait(driver, 40).until(EC.visibility_of_element_located)(((By.XPATH,
                        #                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')

                        verificar = d(
                            resourceId='com.instagram.android:id/connect_text')
                        if verificar.exists(timeout=60):
                            time.sleep(20)
                            verificar = d(
                                resourceId='com.instagram.android:id/connect_text')
                        if verificar.exists:
                            try:
                                conteudo = config['vpn']
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                                window.Refresh()
                                contagem += 1
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")

                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))

                                window['total'].update(num_rows)
                                try:
                                    random_number = random.random()

                                    # Definir a chance desejada (10%)
                                    chance = 0.2

                                    # Verificar se o número aleatório está abaixo da chance
                                    if random_number < chance and not user_mysql == "wn3":
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                 "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                            funcionamento, scope)
                                        client = gspread.authorize(creds)

                                        spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                        sheet_name = 'relatorio_geral'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                                  conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:G{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)
                                except:
                                    pass

                                window.Refresh()
                                arquivo = open(
                                    'configuracoes/contas/contas_criadas.txt', 'a')
                                # Escreva mais conteúdo no arquivo
                                arquivo.write(user_completo +
                                              ' ' + senha + "\n")
                                arquivo = open(
                                    'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                                # Escreva mais conteúdo no arquivo
                                arquivo.write(
                                    email + '\n' + user_completo + '\n' + senha + "\n\n")
                                window.Refresh()
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(1)
                                d(resourceId='com.instagram.android:id/negative_button').click()
                                time.sleep(3)
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(1)
                                try:
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Seguindo sugeridos...')
                                    window.Refresh()
                                    for element in elements:
                                        if element.get_text() == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                except Exception as e:
                                    print(e)
                                    d(resourceId='com.instagram.android:id/skip_button').click()
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window.Refresh()
                                    for element in elements:
                                        if element.text == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()

                                time.sleep(1)
                                time.sleep(3)
                                try:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                except Exception as e:
                                    print(e)
                                    d(resourceId='com.instagram.android:id/button_text').click()
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                sms = False
                            except Exception as e:
                                print(e)

                        else:
                            try:
                                try:
                                    chrome.close()
                                except:
                                    pass
                                try:
                                    chrome.quit()
                                except:
                                    pass
                                conteudo = config['vpn']
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()

                            except Exception as e:
                                sms = True
                                try:
                                    chrome.close()
                                except:
                                    pass
                                try:
                                    chrome.quit()
                                except:
                                    pass
                                if not str(e) == '':
                                    traceback.print_exc()
                                if not e == 'skip' or not e == 'Manutenção.':
                                    try:
                                        d.screenshot(
                                            f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                                    except Exception as e:
                                        print(e)
                                        pass
                    except Exception as e:
                        print(e)
                        try:
                            chrome.close()
                        except:
                            pass
                        try:
                            chrome.quit()
                        except:
                            pass
                        if not str(e) == '':
                            traceback.print_exc()
                        if not e == 'skip' or not e == 'Manutenção.':
                            try:
                                d.screenshot(
                                    f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                            except Exception as e:
                                print(e)
                                pass
                        sms = True

            except Exception as e:
                print(e)
                try:
                    chrome.close()
                except:
                    pass
                try:
                    chrome.quit()
                except:
                    pass
                if not str(e) == '':
                    traceback.print_exc()
                if not e == 'skip' or not e == 'Manutenção.':
                    try:
                        d.screenshot(
                            f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                    except Exception as e:
                        print(e)
                        pass

        except Exception as e:
            print(e)
            try:
                chrome.close()
            except:
                pass
            try:
                chrome.quit()
            except:
                pass
            if not str(e) == '':
                traceback.print_exc()
            if not e == 'skip' or not e == 'Manutenção.':
                try:
                    d.screenshot(
                        f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                except Exception as e:
                    print(e)
                    pass

            pass


def free_sms_lite():
    SPREADSHEET_ID = config['spreadsheet']
    conteudo = config['vpn']
    senha = gerar_senha(12)
    maquina = config['maquina']
    tentativa = False
    email = 'Free SMS'
    seguido = False
    app = 'Lite'
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    # Código que gera a saída
    import os
    import time
    from datetime import datetime
    import requests
    import hashlib
    import subprocess

    # verifica se o arquivo existe na pasta do bot
    try:
        import undetected_chromedriver as uc
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'undetected_chromedriver'])
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['deactivate'], shell=True)
        import undetected_chromedriver as uc
    try:
        import uiautomator2 as u2
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'uiautomator2==2.16.25'])
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['deactivate'], shell=True)
        subprocess.run(['pip', 'install', '--upgrade', 'requests'])
        import requests
        time.sleep(10)
        import uiautomator2 as u2
    try:
        from webdriver_manager.chrome import ChromeDriverManager
    except ModuleNotFoundError:
        import subprocess
        import sys

        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['pip', 'install', 'webdriver-manager'])
        subprocess.run(['deactivate'], shell=True)
        from webdriver_manager.chrome import ChromeDriverManager
    d = u2.connect(f'{porta}')
    import os
    import time
    import requests
    import hashlib
    import subprocess
    from colorama import init, Fore, Back, Style
    from faker import Faker
    # teste

    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random
    import phonenumbers
    import string
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.service import Service
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import NoSuchElementException
    from mailtm import Email
    import re
    import logging

    logger = logging.getLogger(__name__)

    handler = logging.FileHandler('log.txt')
    handler.setLevel(logging.ERROR)

    logger.addHandler(handler)

    def vpn_hotspotshield():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HotspotShield',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_start("hotspotshield.android.vpn")
        except Exception as e:
            pass
        d(resourceId='hotspotshield.android.vpn:id/btnVpnConnect').click()
        time.sleep(5)
        d(resourceId='hotspotshield.android.vpn:id/btnVpnConnect').click()
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_pia():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da PiaVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_start("com.privateinternetaccess.android",
                        ".ui.LauncherActivity")
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()
        time.sleep(3)
        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()

        abc = False

    def vpn_express():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da ExpressVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_start("com.expressvpn.vpn", ".ui.SplashActivity")
        except:
            pass

        abc = False

    def vpn_nord():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da NordVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop("com.nordvpn.android")
            time.sleep(5)
            d.app_start("com.nordvpn.android", ".MainActivity")
        except:
            pass
        time.sleep(20)

        abc = False

    def vpn_surf():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_start("com.surfshark.vpnclient.android", ".StartActivity")
        except:
            pass
        abc = False

    def vpn_better():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da BetterNet', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        try:
            d.app_start("com.freevpnintouch",
                        "com.anchorfree.betternet.ui.BetternetActivity")
        except:
            pass
        time.sleep(10)
        dialog = driver.find_elements(
            By.ID, 'com.freevpnintouch:id/dialogCtaPositive')
        connect = driver.find_element(
            By.ID, 'com.freevpnintouch:id/buttonConnect').text
        if len(dialog) == 1:
            WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/dialogCtaPositive'))).click()
            time.sleep(3)
            WebDriverWait(driver, 20).until(
                EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect'))).click()
            # time.sleep(5)
            WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect'))).click()
        while connect == 'CONNECT':
            WebDriverWait(driver, 20).until(
                EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect'))).click()
            time.sleep(4)
            connect = driver.find_element(
                By.ID, 'com.freevpnintouch:id/buttonConnect').text
            # WebDriverWait(driver, 20).until(
            # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect'))).click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        ip = '127.0.0.1:' + porta

        output = subprocess.check_output(
            ['adb', '-s', ip, 'shell', 'ifconfig'])

        # Verifica se a conexão VPN está ativa
        if not "tun0" in str(output):
            window['output'].print("Não conectado na BetterNet.")
            window.Refresh()
            try:
                connect = driver.find_element(
                    By.ID, 'com.freevpnintouch:id/buttonConnect').text
                driver.start_activity(
                    "com.freevpnintouch", "com.anchorfree.betternet.ui.BetternetActivity")
                while connect == 'CONNECT':
                    WebDriverWait(driver, 20).until(
                        EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect'))).click()
                    time.sleep(4)
                    connect = driver.find_element(
                        By.ID, 'com.freevpnintouch:id/buttonConnect').text
            except:
                pass
        abc = False

    def vpn_cyberghost():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da CyberGhost', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop("de.mobileconcepts.cyberghost")
            d.app_start("de.mobileconcepts.cyberghost")
            # d.app_start("de.mobileconcepts.cyberghost", ".view.app.AppActivity filter")
        except:
            pass
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        time.sleep(5)
        abc = False

    def vpn_tunnelbear():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.tunnelbear.android')
            d.app_start("com.tunnelbear.android")
            while True:
                output = subprocess.check_output(
                    ['adb', '-s', porta, 'shell', 'ifconfig'])
                # print(str(output))
                if "tun0" in str(output):
                    print('Conectada')
                    break
                elif not "tun0" in str(output):
                    print('Reconectando')
                    try:
                        d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                        time.sleep(10)
                    except:
                        pass
        except Exception as e:
            print(e)
            pass

    def vpn_avg():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da AVG', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)
            d.app_stop("com.avg.android.vpn")
            d.app_start("com.avg.android.vpn",
                        "com.avast.android.vpn.app.wizard.WizardActivity")
        except:
            pass
        time.sleep(10)

    def vpn_windscribe():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Windscribe', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)
            d.app_stop("com.windscribe.vpn")
            d.app_start("com.windscribe.vpn")
        except:
            pass
        d(resourceId='com.windscribe.vpn:id/on_off_button').click()
        time.sleep(10)

    def vpn_hma():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HMA', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)

            d.app_stop("com.hidemyass.hidemyassprovpn")
            time.sleep(3)
            d.app_start('com.hidemyass.hidemyassprovpn',
                        'com.avast.android.vpn.activity.HmaOnboardingActivity')
        except:
            pass
        time.sleep(10)

    def gerar_id():
        chars = string.ascii_lowercase + string.digits
        android_id = ''.join(random.choice(chars) for i in range(16))
        return android_id

    options = Options()
    prefs = {"profile.managed_default_content_settings.images": 2}
    options.page_load_strategy = 'none'
    options.add_experimental_option("prefs", prefs)

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    window.Refresh()

    try:
        comando = f"adb connect {porta}"
    except:
        pass
    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global transition_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass
    gerar_id()
    android_id = gerar_id()
    subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    time.sleep(2)

    window.Refresh()
    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando sistema inicializar.')
    window.Refresh()
    try:
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.')
        window.Refresh()
        scope = ["https://spreadsheets.google.com/feeds",
                 "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name(
            'credentials.json', scope)
        client = gspread.authorize(creds)

        spreadsheet_id = config['spreadsheet']
        sheet_name = 'contas'
        # Insert user, password, and timestamp into first empty row
        sheet = client.open_by_key(spreadsheet_id).worksheet(sheet_name)
        values = sheet.col_values(1)

        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
        rows = sheet.get_all_values()

        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
        regex = re.compile(r'\S+\s\S+')
        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
        num_rows = sum(1 for row in rows if regex.match(row[0]))
        window['total'].update(num_rows)
    except:
        pass
    first = True
    parar = False
    while parar is False:
        senha = gerar_senha(12)
        if parar is True:
            print('Parando Thread')
            break
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        gerar_id()
        android_id = gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:

            window['output'].print(linha_ret)
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo instagram.')
            window.Refresh()
            d.app_start('com.instagram.lite')
            time.sleep(5)
            try:
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]').click()
            except:
                pass

            time.sleep(6)
            # d.xpath('/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView').set_text('21131231')

            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo Free SMS.')
            window.Refresh()
            chromedriver_path = 'storage\\driver\\driver.exe'
            service = Service(chromedriver_path)
            options = uc.ChromeOptions()
            options.add_argument("--blink-settings=imagesEnabled=false")
            # Configurações adicionais para o undetected_chromedriver

            driver_executable_path = ChromeDriverManager(path=".\\").install()
            version_main = int(re.findall(
                '[0-9]+\.', driver_executable_path)[0][:-1])
            chrome = uc.Chrome(use_subprocess=True, options=options,
                               driver_executable_path=driver_executable_path, version_main=version_main, headless=True)
            # chrome = uc.Chrome(options=options, service=service)
            chrome.maximize_window()
            # chrome = uc.Chrome(enable_cdp_events=True, headless=True, options=options, service=service)
            # chrome.implicitly_wait(60)
            stop = False
            try:
                chrome.get('https://temporary-phone-number.com/')
                # chrome.set_window_size(800,2000)

                try:
                    WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                        (By.XPATH, '/html/body/div[2]/aside/section/ul/li[2]'))).click()
                    # chrome.find_element(By.XPATH, '/html/body/div[2]/aside/section/ul/li[2]').click()
                    time.sleep(2)
                    if chrome.current_url == "https://temporary-phone-number.com/#google_vignette":
                        chrome.back()
                        # time.sleep(5)
                        WebDriverWait(chrome, 35).until(EC.element_to_be_clickable(
                            (By.XPATH, '/html/body/div[2]/aside/section/ul/li[2]'))).click()
                        # chrome.find_element(By.XPATH, '/html/body/div[2]/aside/section/ul/li[2]').click()
                except:
                    chrome.get(
                        'https://temporary-phone-number.com/US-Phone-Number/12673800457')
                time.sleep(13)
                num_33 = True
                tentativa = 0
                while num_33 is True or tentativa == 5:
                    try:
                        tentativa = tentativa + 1
                        print(tentativa)
                        if tentativa == 1:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Procurando número.')
                            window.Refresh()
                        elif tentativa == 5:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Não foi possivel gerar um número.')
                            window.Refresh()
                            chrome.quit()
                            raise Exception("skip.")
                        try:
                            chrome.find_element(By.XPATH,
                                                '/html/body/div[2]/div/section[2]/div[1]/div[2]/div[2]/button[2]').click()
                            time.sleep(7)
                            num = chrome.find_element(By.XPATH,
                                                      '/html/body/div[2]/div/section[2]/div[1]/div[1]/div/h1').text
                            if num.startswith("+33") or num.startswith("+1") or num.startswith("+31"):
                                chrome.find_element(By.XPATH,
                                                    '/html/body/div[2]/div/section[2]/div[1]/div[2]/div[2]/button[2]').click()
                                time.sleep(7)
                            else:
                                num_33 = False
                        except Exception as e:
                            print(e)
                            chrome.quit()
                    except Exception as e:
                        print(e)
                        chrome.quit()
                        raise Exception("skip.")
            except Exception as e:
                print('_____________________________________')
                try:
                    subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite',
                                   stdout=subprocess.DEVNULL,
                                   stderr=subprocess.DEVNULL, check=True, shell=True)

                except:
                    pass
                print(e)

            try:
                print(num)
            except:
                chrome.quit()
                try:
                    subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite',
                                   stdout=subprocess.DEVNULL,
                                   stderr=subprocess.DEVNULL, check=True, shell=True)

                except:
                    pass
                raise Exception("skip.")
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Número gerado: {num}')
            window.Refresh()

            def separar_ddi(num):
                try:
                    numero_parseado = phonenumbers.parse(num, None)
                    if phonenumbers.is_valid_number(numero_parseado):
                        ddi = str(numero_parseado.country_code)
                        numero_sem_ddi = str(numero_parseado.national_number)
                        return ddi, numero_sem_ddi
                    else:
                        return None
                except phonenumbers.phonenumberutil.NumberParseException:
                    return None

            numero_completo = num
            resultado = separar_ddi(numero_completo)

            if resultado:
                ddi, numero_sem_ddi = resultado
                print("DDI:", ddi)
                print("Número sem DDI:", numero_sem_ddi)
            else:
                print("O número não possui um formato válido.")
            try:
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[3]').click()
                time.sleep(5)
                print('a')

            except Exception as e:
                print(e)
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Página estática.')
                window.Refresh()
                conteudo = config['vpn']
                if conteudo == "AVG":
                    vpn_avg()
                elif conteudo == "SurfShark":
                    vpn_surf()
                elif conteudo == "Avast":
                    vpn_avast()
                elif conteudo == "ExpressVPN":
                    vpn_express()
                elif conteudo == "PiaVPN":
                    vpn_pia()
                elif conteudo == "TunnelBear":
                    vpn_tunnelbear()
                elif conteudo == "BetterNet":
                    vpn_better()
                elif conteudo == "CyberGhost":
                    vpn_cyberghost()
                elif conteudo == "NordVPN":
                    vpn_nord()
                elif conteudo == "HotspotShield":
                    vpn_hotspotshield()
                else:
                    window['output'].print(
                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                    window.Refresh()
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView').set_text(
                ddi)
            print('b')
            time.sleep(6)
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.View').click()
            time.sleep(1)

            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView').set_text(
                numero_sem_ddi)
            time.sleep(1)
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[4]').click()

            time.sleep(7)
            restricao = d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup')

            if restricao.exists:
                chrome.quit()
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                window.Refresh()
                tentativa = True
                try:
                    subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite',
                                   stdout=subprocess.DEVNULL,
                                   stderr=subprocess.DEVNULL, check=True, shell=True)

                except:
                    pass
                try:
                    conteudo = config['vpn']
                    if conteudo == "AVG":
                        vpn_avg()
                    elif conteudo == "SurfShark":
                        vpn_surf()
                    elif conteudo == "Avast":
                        vpn_avast()
                    elif conteudo == "ExpressVPN":
                        vpn_express()
                    elif conteudo == "PiaVPN":
                        vpn_pia()
                    elif conteudo == "TunnelBear":
                        vpn_tunnelbear()
                    elif conteudo == "BetterNet":
                        vpn_better()
                    elif conteudo == "CyberGhost":
                        vpn_cyberghost()
                    elif conteudo == "NordVPN":
                        vpn_nord()
                    elif conteudo == "HotspotShield":
                        vpn_hotspotshield()
                        break
                    else:
                        window['output'].print(
                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                        window.Refresh()
                    continue
                except:
                    continue

            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
            window.Refresh()
            time.sleep(3)
            numeros = ''
            encontrado = False
            tentativa = 0
            while not encontrado and tentativa < 6:
                time.sleep(5)
                # Localize o elemento desejado e obtenha o texto
                elemento = chrome.find_element(By.XPATH,
                                               '/html/body/div[2]/div/section[2]/div[1]/div[3]/div/div[1]/div[1]/div[2]').text
                time_second = chrome.find_element(By.XPATH,
                                                  '/html/body/div[2]/div/section[2]/div[1]/div[3]/div/div[1]/div[1]/div[1]/time').text

                # Verifique se o texto contém 'instagram'
                # if 'Instagram' in elemento.lower() and 'seconds' in time_second.lower():
                if 'Instagram' in elemento and 'seconds' in time_second:
                    encontrado = True
                    match = re.search(r'\d+\s*\d+\s*\d+\s*\d+\s*\d+\s*\d+',
                                      elemento)  # Extrai seis grupos de dígitos, permitindo espaços entre eles
                    if match:
                        numeros = ''.join(match.group().split())

                else:
                    # Clique no outro elemento
                    tentativa = tentativa + 1
                    time.sleep(10)
                    botao = chrome.find_element(By.XPATH,
                                                '/html/body/div[2]/div/section[2]/div[1]/div[2]/div[2]/button[1]')
                    botao.click()
            if tentativa == 6:
                chrome.quit()
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Codigo não recebido.')
                window.Refresh()
                conteudo = config['vpn']
                if conteudo == "AVG":
                    vpn_avg()
                elif conteudo == "SurfShark":
                    vpn_surf()
                elif conteudo == "Avast":
                    vpn_avast()
                elif conteudo == "ExpressVPN":
                    vpn_express()
                elif conteudo == "PiaVPN":
                    vpn_pia()
                elif conteudo == "TunnelBear":
                    vpn_tunnelbear()
                elif conteudo == "BetterNet":
                    vpn_better()
                elif conteudo == "CyberGhost":
                    vpn_cyberghost()
                elif conteudo == "NordVPN":
                    vpn_nord()
                elif conteudo == "HotspotShield":
                    vpn_hotspotshield()
                    break
                else:
                    window['output'].print(
                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                    window.Refresh()
                driver.quit()
                raise Exception("Codigo não recebido.")
            codigo = numeros
            chrome.quit()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
            tentativa = False
            window.Refresh()
            time.sleep(5)
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView').set_text(
                codigo)
            # time.sleep(100)
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[3]').click()
            time.sleep(2)

            codigo_invalido = driver.find_elements(By.XPATH,
                                                   '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView[2]')
            if len(codigo_invalido) == 0:
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Código inválido.')
                window.Refresh()

                try:
                    conteudo = config['vpn']
                    if conteudo == "AVG":
                        vpn_avg()
                    elif conteudo == "SurfShark":
                        vpn_surf()
                    elif conteudo == "Avast":
                        vpn_avast()
                    elif conteudo == "ExpressVPN":
                        vpn_express()
                    elif conteudo == "PiaVPN":
                        vpn_pia()
                    elif conteudo == "TunnelBear":
                        vpn_tunnelbear()
                    elif conteudo == "BetterNet":
                        vpn_better()
                    elif conteudo == "CyberGhost":
                        vpn_cyberghost()
                    elif conteudo == "NordVPN":
                        vpn_nord()
                    elif conteudo == "HotspotShield":
                        vpn_hotspotshield()
                        break
                    else:
                        window['output'].print(
                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                        window.Refresh()
                except:
                    pass
            ######################################################################
            lista_user = random.choices(range(0, 9), k=2)
            lista_letras = random.choices(letras, k=1)

            with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                nomes = nomes_arquivo.readlines()

            with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                sobrenomes = sobrenomes_arquivo.readlines()

            nomea = fake.first_name_male().replace(" ", "")
            nome = unicodedata.normalize('NFKD', nomea).encode(
                'ASCII', 'ignore').decode('ASCII')
            sobrenomea = fake.last_name().replace(" ", "").lower()
            sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                'ASCII', 'ignore').decode('ASCII')
            nome_completo = nome + ' ' + sobrenome
            nome_completo_s = nome + sobrenome
            numeros_concatenados = ''.join(str(numero)
                                           for numero in lista_user)
            user_completo = nome_completo_s + '' + \
                str(numeros_concatenados) + ''.join(lista_letras)
            ######################################################################

            senha = gerar_senha(12)
            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView[1]'))).send_keys(
                nome_completo)
            time.sleep(1)
            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView[2]'))).send_keys(
                senha)
            time.sleep(1)
            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[5]/android.view.View'))).click()
            time.sleep(3)
            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View'))).click()
            time.sleep(1)
            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup'))).click()
            time.sleep(2)
            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.View[6]'))).click()
            time.sleep(2)
            idade_aleatoria = random.randint(18, 35)
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
            window.Refresh()
            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView'))).send_keys(
                idade_aleatoria)
            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()
            op2 = driver.find_elements(By.XPATH,
                                       '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[7]/android.view.View')
            op1 = driver.find_elements(By.XPATH,
                                       '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View')
            time.sleep(5)
            try:
                if len(op1) == 0:
                    try:
                        driver.find_element(By.XPATH,
                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[7]/android.view.View').click()
                    except:
                        driver.find_element(By.XPATH,
                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[6]/android.view.View').click()
            except:
                try:
                    driver.find_element(By.XPATH,
                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View').click()

                except:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Erro ao criar')
                    window.Refresh()
                    sms = True
                    continue
            try:
                time.sleep(1)
                WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH,
                                                                                  '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView'))).clear()
                time.sleep(3)
                WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                                  '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView'))).send_keys(
                    user_completo)
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                window.Refresh()
                time.sleep(3)
                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()
                time.sleep(5)
                conta_jacriada = driver.find_elements(By.XPATH,
                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[2]')
                time.sleep(1)
                if len(conta_jacriada) == 1:
                    WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[2]/android.view.View'))).click()
                erro_2 = driver.find_elements(By.XPATH,
                                              '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.webkit.WebView/android.webkit.WebView/android.view.View/android.view.View/android.view.View/android.view.View/android.view.View[*]/android.view.View[*]/android.widget.Button')
                erro_1 = driver.find_elements(By.XPATH,
                                              '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup')
                if len(erro_2) == 1:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Tentando gerar novamente')
                    window.Refresh()
                    time.sleep(5)
                    WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[1]/android.view.ViewGroup[1]'))).click()
                    WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup[2]'))).click()
                    time.sleep(3)
                if len(erro_1) == 1:
                    WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()
                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup[2]/android.view.View')))
                time.sleep(3)
                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup[2]/android.view.View'))).click()

            except:
                WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH,
                                                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View'))).click()
            time.sleep(20)
            WebDriverWait(driver, 60).until(EC.element_to_be_clickable((By.XPATH,
                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()

            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
            window.Refresh()
            time.sleep(5)
            verificar = driver.find_elements(By.XPATH,
                                             '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')
            # time.sleep(10)

            conta_criada = driver.find_elements(By.XPATH,
                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]')
            conta_sms = driver.find_elements(By.XPATH,
                                             '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.View[4]')

            try:
                if len(verificar) == 1:

                    try:
                        seguido = False
                        conteudo = config['vpn']
                        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                               text_color=('lime'))
                        window.Refresh()
                        contagem += 1
                        window['criadas'].update(contagem)
                        window.Refresh()
                        now = datetime.now()
                        now_brasilia = tz.localize(now)
                        timestamp = now_brasilia.strftime("%d/%m/%Y %H:%M:%S")

                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                            'credentials.json', scope)
                        client = gspread.authorize(creds)

                        spreadsheet_id = config['spreadsheet']
                        sheet_name = 'contas'
                        # Insert user, password, and timestamp into first empty row
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)
                        values = sheet.col_values(1)
                        last_row = len(values)
                        values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                  conteudo + ' - ' + app]
                        cell_list = sheet.range(
                            f'A{last_row + 1}:G{last_row + 1}')
                        for i, val in enumerate(values):
                            cell_list[i].value = val
                        sheet.update_cells(cell_list)

                        rows = sheet.get_all_values()

                        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                        regex = re.compile(r'\S+\s\S+')

                        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                        num_rows = sum(
                            1 for row in rows if regex.match(row[0]))
                        window['total'].update(num_rows)

                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_dict(
                            funcionamento, scope)
                        client = gspread.authorize(creds)

                        spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                        sheet_name = 'relatorio_geral'
                        # Insert user, password, and timestamp into first empty row
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)
                        values = sheet.col_values(1)
                        last_row = len(values)
                        values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                  conteudo + ' - ' + app, user_mysql]
                        cell_list = sheet.range(
                            f'A{last_row + 1}:F{last_row + 1}')
                        for i, val in enumerate(values):
                            cell_list[i].value = val
                        sheet.update_cells(cell_list)

                        window.Refresh()
                        arquivo = open(
                            'configuracoes/contas/contas_criadas.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(user_completo + ' ' + senha + "\n")
                        arquivo = open(
                            'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(
                            email + '\n' + user_completo + '\n' + senha + "\n\n")
                        WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]'))).click()
                        window.Refresh()
                        sms = False
                    except:
                        pass
                else:
                    if seguido is True:
                        seguido = False
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] SMS seguidos, Trocando de número.')
                        window.Refresh()
                        driver.activate_app('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        WebDriverWait(driver, 30).until(
                            EC.element_to_be_clickable((By.ID, 'pl.rs.sip.softphone.newapp:id/numbers'))).click()
                        WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat'))).click()
                        WebDriverWait(driver, 30).until(
                            EC.element_to_be_clickable((By.ID, 'pl.rs.sip.softphone.newapp:id/buttonDelete'))).click()
                        WebDriverWait(driver, 30).until(
                            EC.element_to_be_clickable((By.ID, 'pl.rs.sip.softphone.newapp:id/buttonAgree'))).click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        sms = True
                    elif seguido is False:
                        seguido = True
                    try:
                        conteudo = config['vpn']

                        # Executa a função correspondente ao conteúdo do arquivo
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                    except:
                        sms = True
                        continue
            except Exception as e:
                print(e)
                try:
                    if conteudo == "AVG":
                        vpn_avg()
                    elif conteudo == "Avast":
                        vpn_avast()
                    elif conteudo == "CyberGhost":
                        vpn_cyberghost()
                    elif conteudo == "PiaVPN":
                        vpn_pia()
                    elif conteudo == "TunnelBear":
                        vpn_tunnelbear()
                    elif conteudo == "ExpressVPN":
                        vpn_express()
                    elif conteudo == "SurfShark":
                        vpn_surf()
                    elif conteudo == "BetterNet":
                        vpn_better()
                    elif conteudo == "NordVPN":
                        vpn_nord()
                    elif conteudo == "HotspotShield":
                        vpn_hotspotshield()
                    else:
                        window['output'].print(
                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                        window.Refresh()
                except:
                    pass
                sms = True
                continue
            try:
                WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH,
                                                                                  '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]/android.view.View')))
            except:
                continue
            while sms is False:
                senha = gerar_senha(12)

                try:
                    pular_erro = driver.find_elements(By.XPATH,
                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]')
                    if len(pular_erro) == 0:
                        try:
                            driver.find_elements(By.XPATH,
                                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]').click()
                        except:
                            sms = True
                            continue
                    window['output'].print(linha_ret)
                    window.Refresh()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Criação de outro perfil.')
                    window.Refresh()
                    # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True)
                    # Clicar no botão de perfil
                    try:
                        time.sleep(3)
                        WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                                   '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[11]')))
                        time.sleep(2)
                        WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                                   '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[11]'))).click()

                    except:
                        time.sleep(3)
                        WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                                   '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')))
                        time.sleep(2)
                        WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                                   '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]'))).click()

                        # Clicar em perfis
                    try:
                        WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH,
                                                                                          '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()
                    except:
                        WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH,
                                                                                          '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[1]/android.view.View'))).click()
                    # Clicar em adicionar conta
                    WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[2]'))).click()
                    # Clicar em criar nova conta
                    time.sleep(10)
                    WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[3]'))).click()
                    # Gerar nome de usuário, digitar no campo e clicar em avançae
                    lista_user = random.choices(range(0, 9), k=2)
                    lista_letras = random.choices(letras, k=1)

                    with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                        nomes = nomes_arquivo.readlines()

                    with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                        sobrenomes = sobrenomes_arquivo.readlines()

                    nomea = fake.first_name_male().replace(" ", "")
                    nome = unicodedata.normalize('NFKD', nomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    sobrenomea = fake.last_name().replace(" ", "").lower()
                    sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    nome_completo = nome + sobrenome
                    numeros_concatenados = ''.join(
                        str(numero) for numero in lista_user)
                    user_completo = nome_completo + '' + \
                        str(numeros_concatenados) + ''.join(lista_letras)

                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: ' + user_completo)
                    window.Refresh()
                    WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView'))).send_keys(
                        user_completo)
                    time.sleep(1)
                    WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()
                    # Digitar senha e avançar
                    time.sleep(3)
                    WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView'))).send_keys(
                        senha)
                    WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[3]'))).click()
                    # Clicar em concluir cadastro
                    time.sleep(1)
                    WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[1]/android.view.View')))
                    time.sleep(2)
                    WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[1]/android.view.View'))).click()
                    time.sleep(4)
                    feedback = driver.find_elements(By.XPATH,
                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.View')
                    if len(feedback) == 1:
                        sms = True

                    WebDriverWait(driver, 60).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]')))
                    time.sleep(20)
                    WebDriverWait(driver, 60).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()

                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
                    window.Refresh()
                    # WebDriverWait(driver, 40).until(EC.visibility_of_element_located)(((By.XPATH,
                    #                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')))
                    time.sleep(10)
                    verificar = driver.find_elements(By.XPATH,
                                                     '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')

                    conta_criada = driver.find_elements(By.XPATH,
                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]')
                    conta_sms = driver.find_elements(By.XPATH,
                                                     '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.View[4]')
                    if len(verificar) == 1:
                        try:
                            WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                                       '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[11]'))).click()
                        except:
                            pass
                        try:
                            seguido = False
                            conteudo = config['vpn']
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                   text_color=('lime'))
                            window.Refresh()
                            contagem += 1
                            window['criadas'].update(contagem)
                            window.Refresh()
                            now = datetime.now()
                            now_brasilia = tz.localize(now)
                            timestamp = now_brasilia.strftime(
                                "%d/%m/%Y %H:%M:%S")

                            scope = ["https://spreadsheets.google.com/feeds",
                                     "https://www.googleapis.com/auth/drive"]
                            creds = ServiceAccountCredentials.from_json_keyfile_name(
                                'credentials.json', scope)
                            client = gspread.authorize(creds)

                            spreadsheet_id = config['spreadsheet']
                            sheet_name = 'contas'
                            # Insert user, password, and timestamp into first empty row
                            sheet = client.open_by_key(
                                spreadsheet_id).worksheet(sheet_name)
                            values = sheet.col_values(1)
                            last_row = len(values)
                            values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                      conteudo + ' - ' + app]
                            cell_list = sheet.range(
                                f'A{last_row + 1}:G{last_row + 1}')
                            for i, val in enumerate(values):
                                cell_list[i].value = val
                            sheet.update_cells(cell_list)

                            rows = sheet.get_all_values()

                            # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                            regex = re.compile(r'\S+\s\S+')

                            # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                            num_rows = sum(
                                1 for row in rows if regex.match(row[0]))
                            window['total'].update(num_rows)

                            scope = ["https://spreadsheets.google.com/feeds",
                                     "https://www.googleapis.com/auth/drive"]
                            creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                funcionamento, scope)
                            client = gspread.authorize(creds)

                            spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                            sheet_name = 'relatorio_geral'
                            # Insert user, password, and timestamp into first empty row
                            sheet = client.open_by_key(
                                spreadsheet_id).worksheet(sheet_name)
                            values = sheet.col_values(1)
                            last_row = len(values)
                            values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                      conteudo + ' - ' + app]
                            cell_list = sheet.range(
                                f'A{last_row + 1}:G{last_row + 1}')
                            for i, val in enumerate(values):
                                cell_list[i].value = val
                            sheet.update_cells(cell_list)

                            window.Refresh()
                            arquivo = open(
                                'configuracoes/contas/contas_criadas.txt', 'a')
                            # Escreva mais conteúdo no arquivo
                            arquivo.write(user_completo + ' ' + senha + "\n")
                            arquivo = open(
                                'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                            # Escreva mais conteúdo no arquivo
                            arquivo.write(
                                email + '\n' + user_completo + '\n' + senha + "\n\n")
                            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]'))).click()
                            window.Refresh()
                            sms = False
                        except:
                            pass

                    else:
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                                break
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()

                        except:
                            sms = True
                            try:
                                chrome.quit()
                            except:
                                pass
                except:
                    sms = True
                    try:
                        chrome.quit()
                    except:
                        pass
                    continue

        except Exception as e:
            print(e)
            chrome.quit()
            print('______________________________________________________')
            # desired_caps = {}
            # desired_caps['udid'] = '127.0.0.1:' + porta
            # desired_caps['newCommandTimeout'] = '500'
            # desired_caps['platformName'] = 'Android'
            # desired_caps['automationName'] = 'UiAutomator2'
            # desired_caps['systemPort'] = random.randint(1024, 65535)
            # desired_caps['uiautomator2ServerInstallTimeout'] = 120000
            # desired_caps['noReset'] = True
            # driver = webdriver.Remote('http://localhost:4723/wd/hub', desired_caps)
            continue


def insta_face_litee():
    SPREADSHEET_ID = config['spreadsheet']
    conteudo = config['vpn']
    senha = gerar_senha(12)
    maquina = config['maquina']
    tentativa = False
    email = 'InstaFace'
    seguido = False
    app = 'Lite'
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    # Código que gera a saída
    import os
    import time
    from datetime import datetime
    import requests
    import hashlib
    import subprocess

    # verifica se o arquivo existe na pasta do bot
    try:
        import uiautomator2 as u2
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'uiautomator2==2.16.25'])
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['deactivate'], shell=True)
        subprocess.run(['pip', 'install', '--upgrade', 'requests'])
        import requests
        time.sleep(10)
        import uiautomator2 as u2
    d = u2.connect(f'{porta}')
    import os
    import time
    import requests
    import hashlib
    import subprocess
    from colorama import init, Fore, Back, Style
    from faker import Faker
    # teste

    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random
    import phonenumbers
    import string
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.service import Service
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import NoSuchElementException
    from mailtm import Email
    import re
    import logging

    logger = logging.getLogger(__name__)

    handler = logging.FileHandler('log.txt')
    handler.setLevel(logging.ERROR)

    logger.addHandler(handler)

    def vpn_avast():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Avast', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop("com.avast.android.vpn")
            d.app_start("com.avast.android.vpn", ".app.wizard.WizardActivity")
            time.sleep(10)
        except Exception as e:
            print(e)
        abc = False

    def vpn_hotspotshield():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HotspotShield',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('hotspotshield.android.vpn')
            d.app_start('hotspotshield.android.vpn')
        except Exception as e:
            print(e)
        d(resourceId='hotspotshield.android.vpn:id/tryAgainButton').click()
        time.sleep(5)
        d(resourceId='hotspotshield.android.vpn:id/btnVpnConnect').click()

        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_pia():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da PiaVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.privateinternetaccess.android')
            d.app_start('com.privateinternetaccess.android')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()
        time.sleep(3)
        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()

        abc = False

    def vpn_express():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da ExpressVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.expressvpn.vpn')
            d.app_start('com.expressvpn.vpn')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.expressvpn.vpn:id/obiButton').click()
        time.sleep(3)
        d(resourceId='com.expressvpn.vpn:id/obiButton').click()

        abc = False

    def vpn_nord():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da NordVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        sms = True
        try:
            d.app_stop('com.nordvpn.android')
            d.app_start('com.nordvpn.android', '.MainActivity')
        except:
            pass
        time.sleep(10)
        time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_surf():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('com.surfshark.vpnclient.android')
            d.app_start('com.surfshark.vpnclient.android')
        except:
            pass
        time.sleep(15)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_better():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da BetterNet', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        try:
            d.app_stop('com.freevpnintouch')
            d.app_start('com.freevpnintouch')
        except:
            pass
        time.sleep(10)
        dialog = d(resourceId='com.freevpnintouch:id/dialogCtaPositive')
        connect = d(resourceId='com.freevpnintouch:id/buttonConnect').text
        if dialog.exists:
            d(resourceId='com.freevpnintouch:id/dialogCtaPositive').click()
            time.sleep(3)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            # time.sleep(5)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
        while connect == 'CONNECT':
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            time.sleep(4)
            connect = d(resourceId='com.freevpnintouch:id/buttonConnect').text
            # WebDriverWait(driver, 20).until(
            # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        ip = '127.0.0.1:' + porta

        output = subprocess.check_output(
            ['adb', '-s', ip, 'shell', 'ifconfig'])

        # Verifica se a conexão VPN está ativa
        if not "tun0" in str(output):
            window['output'].print("Não conectado na BetterNet.")
            window.Refresh()
            try:
                connect = d(
                    resourceId='com.freevpnintouch:id/buttonConnect').text
                d.app_stop('com.freevpnintouch')
                d.app_start('com.freevpnintouch')
                while connect == 'CONNECT':
                    d(resourceId='com.freevpnintouch:id/buttonConnect').click()
                    time.sleep(4)
                    connect = d(
                        resourceId='com.freevpnintouch:id/buttonConnect').text
            except:
                pass
        abc = False

    def vpn_cyberghost():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da CyberGhost', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('de.mobileconcepts.cyberghost')
            d.app_start('de.mobileconcepts.cyberghost')
        except:
            pass
        # time.sleep(3)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        rate = d(resourceId='de.mobileconcepts.cyberghost:id/rate_me_text')
        if rate.exists:
            d(resourceId='android:id/button2').click()
        time.sleep(2)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        abc = False

    def vpn_tunnelbear():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.tunnelbear.android')
            d.app_start("com.tunnelbear.android")
            while True:
                output = subprocess.check_output(
                    ['adb', '-s', porta, 'shell', 'ifconfig'])
                # print(str(output))
                if "tun0" in str(output):
                    print('Conectada')
                    break
                elif not "tun0" in str(output):
                    print('Reconectando')
                    try:
                        d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                        time.sleep(10)
                    except:
                        pass
        except Exception as e:
            print(e)
            pass

    def vpn_avg():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da AVG', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.avg.android.vpn')
            d.app_start('com.avg.android.vpn')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #               stderr=subprocess.DEVNULL, check=True, shell=True)

        time.sleep(30)

    def vpn_windscribe():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Windscribe', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)
            d.app_stop("com.windscribe.vpn")
            d.app_start("com.windscribe.vpn")
        except:
            pass
        d(resourceId='com.windscribe.vpn:id/on_off_button').click()
        time.sleep(10)

    def vpn_hma():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HMA', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)

            d.app_stop("com.hidemyass.hidemyassprovpn")
            time.sleep(3)
            d.app_start('com.hidemyass.hidemyassprovpn',
                        'com.avast.android.vpn.activity.HmaOnboardingActivity')
        except:
            pass
        time.sleep(10)

    def nenhuma_vpn():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.facebook.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        time.sleep(10)

    def gerar_id():
        chars = string.ascii_lowercase + string.digits
        android_id = ''.join(random.choice(chars) for i in range(16))
        return android_id

    options = Options()
    prefs = {"profile.managed_default_content_settings.images": 2}
    options.page_load_strategy = 'none'
    options.add_experimental_option("prefs", prefs)

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    window.Refresh()

    num = 'InstaFace'
    try:
        comando = f"adb connect {porta}"
    except:
        pass
    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global transition_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass
    gerar_id()
    android_id = gerar_id()
    subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    time.sleep(2)
    window.Refresh()
    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando sistema inicializar.')
    window.Refresh()
    d.set_fastinput_ime(True)
    d.settings['operation_delay_methods'] = ['click']
    d.settings['operation_delay'] = (0, 1)
    try:

        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.')
        window.Refresh()
        scope = ["https://spreadsheets.google.com/feeds",
                 "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name(
            'credentials.json', scope)
        client = gspread.authorize(creds)

        spreadsheet_id = config['spreadsheet']
        sheet_name = 'contas'
        # Insert user, password, and timestamp into first empty row
        sheet = client.open_by_key(spreadsheet_id).worksheet(sheet_name)
        values = sheet.col_values(1)

        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
        rows = sheet.get_all_values()

        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
        regex = re.compile(r'\S+\s\S+')
        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
        num_rows = sum(1 for row in rows if regex.match(row[0]))
        window['total'].update(num_rows)
    except:
        pass
    first = True
    parar = False
    while parar is False:
        senha = gerar_senha(12)
        if parar is True:
            print('Parando Thread')
            break
        codigo = 0
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.facebook.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        gerar_id()
        android_id = gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            # subprocess.run(f'adb -s {porta} shell pm grant com.facebook.lite android.permission.READ_CONTACTS', stdout=subprocess.DEVNULL,
            #        stderr=subprocess.DEVNULL, shell=True)
            window['output'].print(linha_ret)
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo Facebook Lite')
            window.Refresh()

            d.app_start('com.facebook.lite')
            d(resourceId='com.android.packageinstaller:id/permission_deny_button').click()
            time.sleep(4)
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[last()]/android.view.View').click()
            time.sleep(1)

            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[23]/android.view.ViewGroup/android.view.View').click()

            time.sleep(2)
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[4]/android.view.View').click()
            time.sleep(5)
            erro2 = d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView[2]')
            if erro2.exists:
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[last()]/android.view.View').click()
                time.sleep(1)

                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[23]/android.view.ViewGroup/android.view.View').click()

                time.sleep(2)
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[3]/android.view.View').click()
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[*]/android.view.View').click()

            lista_user = random.choices(range(0, 9), k=2)
            lista_letras = random.choices(letras, k=1)

            with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                nomes = nomes_arquivo.readlines()

            with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                sobrenomes = sobrenomes_arquivo.readlines()

            nomea = fake.first_name_male().replace(" ", "")
            nome = unicodedata.normalize('NFKD', nomea).encode(
                'ASCII', 'ignore').decode('ASCII')
            sobrenomea = fake.last_name().replace(" ", "").lower()
            sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                'ASCII', 'ignore').decode('ASCII')
            nome_completo = nome + ' ' + sobrenome
            nome_completo_s = nome + sobrenome
            numeros_concatenados = ''.join(str(numero)
                                           for numero in lista_user)
            user_completo = nome_completo_s + '' + \
                str(numeros_concatenados) + ''.join(lista_letras)
            ######################################################################

            senha = gerar_senha(12)
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView[1]').set_text(
                nomea)
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView[2]').set_text(
                sobrenomea)
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[1]/android.view.View').click()
            time.sleep(5)
            negar = d(
                resourceId='com.android.packageinstaller:id/permission_deny_button')
            while negar.exists:
                negar.click()
                time.sleep(3)
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View').click()
            from mailtm import Email

            def listener(message):
                global nome
                global sobrenome
                global cod
                if 'Facebook' in message['subject']:
                    cod = re.search(r'\d+', message['subject']).group(0)

            test = Email()
            while True:
                try:
                    # Código para registrar o email usando a biblioteca mailtm
                    # ...
                    test.register(username=nome_completo_s, password=senha)
                    break  # Saia do loop se o registro for bem-sucedido

                except requests.exceptions.HTTPError as e:
                    nomea = fake.first_name_male().replace(" ", "")
                    nome = unicodedata.normalize('NFKD', nomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    sobrenomea = fake.last_name().replace(" ", "").lower()
                    sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    nome_completo = nome + ' ' + sobrenome
                    nome_completo_s = nome + sobrenome
                    if e.response.status_code == 422:
                        print("Erro 422: Unprocessable Entity. Tentando novamente...")
                        # Espere um segundo antes de tentar novamente
                        time.sleep(1)
                        continue  # Volte ao início do loop
                    else:
                        # Outro código de tratamento de erros, se necessário
                        # ...
                        break  # Saia do loop se ocorrer um erro diferente

                except requests.exceptions.RequestException as e:
                    nomea = fake.first_name_male().replace(" ", "")
                    nome = unicodedata.normalize('NFKD', nomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    sobrenomea = fake.last_name().replace(" ", "").lower()
                    sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    nome_completo = nome + ' ' + sobrenome
                    nome_completo_s = nome + sobrenome
                    # Tratamento de erros de conexão, se necessário
                    # ...
                    break  # Saia do loop se ocorrer um erro de conexão
            window['output'].print(
                f"[{datetime.now().strftime('%H:%M:%S')}] Email: " + str(test.address))

            window.Refresh()
            email = str(test.address)
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView').set_text(
                email)
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[*]/android.view.View').click()
            time.sleep(1)
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup[2]').click()
            time.sleep(1)
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup[2]').click()
            time.sleep(1)
            try:
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup[2]').click(
                    timeout=2)
            except:
                pass
            idade_aleatoria = random.randint(18, 35)
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
            window.Refresh()
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.widget.MultiAutoCompleteTextView').set_text(
                str(idade_aleatoria))
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup[1]/android.view.View').click()
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[3]').click()
            time.sleep(1)
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[1]/android.view.View[1]').click()
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView').set_text(
                senha)
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[*]/android.view.View').click()
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[last()]/android.view.View').click()
            time.sleep(30)
            block = d(text='Wir benötigen noch weitere Informationen')
            if block.exists:
                try:
                    conteudo = config['vpn']

                    # Executa a função correspondente ao conteúdo do arquivo
                    if conteudo == "AVG":
                        vpn_avg()
                    elif conteudo == "Nenhuma":
                        nenhuma_vpn()
                    elif conteudo == "Avast":
                        vpn_avast()
                    elif conteudo == "CyberGhost":
                        vpn_cyberghost()
                    elif conteudo == "PiaVPN":
                        vpn_pia()
                    elif conteudo == "TunnelBear":
                        vpn_tunnelbear()
                    elif conteudo == "ExpressVPN":
                        vpn_express()
                    elif conteudo == "WindscribeVPN":
                        vpn_windscribe()
                    elif conteudo == "SurfShark":
                        vpn_surf()
                    elif conteudo == "HmaVPN":
                        vpn_hma()
                    elif conteudo == "BetterNet":
                        vpn_better()
                    elif conteudo == "NordVPN":
                        vpn_nord()
                    elif conteudo == "HotspotShield":
                        vpn_hotspotshield()
                    else:
                        window['output'].print(
                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                        window.Refresh()
                    raise Exception("SMS.")
                except:
                    sms = True
                    raise Exception("SMS.")
                    continue
            print('passou')
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]').click()
            time.sleep(3)
            negar = d(
                resourceId='com.android.packageinstaller:id/permission_deny_button')
            while negar.exists:
                negar.click()
                time.sleep(1)
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando codigo...')
            window.Refresh()
            # fetch all emails in the inbox
            codigo = 0
            try:
                test.start(listener, interval=15)
                codigo = 0
                while codigo != 20:
                    time.sleep(2)
                    codigo = codigo + 1
                codigo = cod
            except Exception as e:
                if "Too Many Requests" in str(e):
                    pass
                else:
                    pass
            if codigo == '20':
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Codigo não recebido')
                window.Refresh()
                raise Exception('Codigo não recebido.')
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
            window.Refresh()
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView').set_text(
                codigo)
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[1]/android.view.View').click()
            time.sleep(10)

            criou = d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.View[4]')
            if criou.exists:
                criou.click()
                window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Facebook criado com sucesso.',
                                       text_color=('cyan'))
                window.Refresh()
            else:
                window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Facebook criado com sucesso.',
                                       text_color=('cyan'))
                window.Refresh()

            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass

            with open("contas_fbcriadas.txt", "a") as arquivo:
                arquivo.write(email + ' ' + senha + "\n")
            # Escreva mais conteúdo no arquivo

            d.app_start('com.instagram.lite')
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View').click()
            time.sleep(5)
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View').click()

            time.sleep(3)
            try:
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View').click(
                    timeout=3)
            except:
                pass
            try:
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[6]/android.view.View').click(
                    timeout=10)
            except:
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[4]/android.view.View').click()
                time.sleep(3)
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[6]/android.view.View').click()

            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
            window.Refresh()
            time.sleep(3)
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView').set_text(
                '')
            campo_de_user = d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView')
            campo_de_user.set_text(user_completo)
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View').click()
            time.sleep(20)
            if campo_de_user.exists:
                d.app_stop('com.instagram.lite')
                time.sleep(1)
                d.app_start('com.instagram.lite')
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[4]/android.view.View').click()
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView[1]').set_text(
                    user_completo)
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView[2]').set_text(
                    senha)
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[4]/android.view.ViewGroup/android.view.View').click()

            # time.sleep(200)
            d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]').click()

            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
            window.Refresh()
            time.sleep(5)
            verificar = d.xpath(
                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')
            # time.sleep(10)

            # conta_criada = driver.find_elements(By.XPATH,
            #                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]')
            # conta_sms = driver.find_elements(By.XPATH,
            #                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.View[4]')
            #
            try:
                if verificar.exists:

                    try:
                        seguido = False
                        conteudo = config['vpn']
                        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                               text_color=('lime'))
                        window.Refresh()
                        contagem += 1
                        window['criadas'].update(contagem)
                        window.Refresh()
                        now = datetime.now()
                        now_brasilia = tz.localize(now)
                        timestamp = now_brasilia.strftime("%d/%m/%Y %H:%M:%S")

                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                            'credentials.json', scope)
                        client = gspread.authorize(creds)

                        spreadsheet_id = config['spreadsheet']
                        sheet_name = 'contas'
                        # Insert user, password, and timestamp into first empty row
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)
                        values = sheet.col_values(1)
                        last_row = len(values)
                        values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                  conteudo + ' - ' + app]
                        cell_list = sheet.range(
                            f'A{last_row + 1}:G{last_row + 1}')
                        for i, val in enumerate(values):
                            cell_list[i].value = val
                        sheet.update_cells(cell_list)

                        rows = sheet.get_all_values()

                        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                        regex = re.compile(r'\S+\s\S+')

                        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                        num_rows = sum(
                            1 for row in rows if regex.match(row[0]))
                        window['total'].update(num_rows)

                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_dict(
                            funcionamento, scope)
                        client = gspread.authorize(creds)

                        spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                        sheet_name = 'relatorio_geral'
                        # Insert user, password, and timestamp into first empty row
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)
                        values = sheet.col_values(1)
                        last_row = len(values)
                        values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                  conteudo + ' - ' + app]
                        cell_list = sheet.range(
                            f'A{last_row + 1}:G{last_row + 1}')
                        for i, val in enumerate(values):
                            cell_list[i].value = val
                        sheet.update_cells(cell_list)

                        window.Refresh()
                        arquivo = open(
                            'configuracoes/contas/contas_criadas.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(user_completo + ' ' + senha + "\n")
                        arquivo = open(
                            'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(
                            email + '\n' + user_completo + '\n' + senha + "\n\n")
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]').click()
                        window.Refresh()
                        sms = False
                    except Exception as e:
                        print(e)
                        pass
                else:

                    try:
                        conteudo = config['vpn']

                        # Executa a função correspondente ao conteúdo do arquivo
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                    except:
                        sms = True
                        continue
            except Exception as e:
                print(e)
                try:
                    if conteudo == "AVG":
                        vpn_avg()
                    elif conteudo == "Avast":
                        vpn_avast()
                    elif conteudo == "Nenhuma":
                        nenhuma_vpn()
                    elif conteudo == "CyberGhost":
                        vpn_cyberghost()
                    elif conteudo == "PiaVPN":
                        vpn_pia()
                    elif conteudo == "TunnelBear":
                        vpn_tunnelbear()
                    elif conteudo == "ExpressVPN":
                        vpn_express()
                    elif conteudo == "SurfShark":
                        vpn_surf()
                    elif conteudo == "BetterNet":
                        vpn_better()
                    elif conteudo == "NordVPN":
                        vpn_nord()
                    elif conteudo == "HotspotShield":
                        vpn_hotspotshield()
                    else:
                        window['output'].print(
                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                        window.Refresh()
                except:
                    pass
                sms = True
                continue
            try:
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]/android.view.View')
            except:
                continue
            while sms is False:
                senha = gerar_senha(12)

                try:
                    pular_erro = d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]')
                    if not pular_erro.exists:
                        try:
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]').click()
                        except:
                            sms = True
                            continue
                    window['output'].print(linha_ret)
                    window.Refresh()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Criação de outro perfil.')
                    window.Refresh()
                    # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True)
                    # Clicar no botão de perfil
                    try:
                        time.sleep(3)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[11]')
                        time.sleep(2)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[11]').click()

                    except:
                        time.sleep(3)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')
                        time.sleep(2)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]').click()

                        # Clicar em perfis
                    try:
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]').click()
                    except:
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[1]/android.view.View').click()
                    # Clicar em adicionar conta
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[2]').click()
                    # Clicar em criar nova conta
                    time.sleep(10)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[3]').click()
                    # Gerar nome de usuário, digitar no campo e clicar em avançae
                    lista_user = random.choices(range(0, 9), k=2)
                    lista_letras = random.choices(letras, k=1)

                    with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                        nomes = nomes_arquivo.readlines()

                    with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                        sobrenomes = sobrenomes_arquivo.readlines()

                    nomea = fake.first_name_male().replace(" ", "")
                    nome = unicodedata.normalize('NFKD', nomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    sobrenomea = fake.last_name().replace(" ", "").lower()
                    sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    nome_completo = nome + sobrenome
                    numeros_concatenados = ''.join(
                        str(numero) for numero in lista_user)
                    user_completo = nome_completo + '' + \
                        str(numeros_concatenados) + ''.join(lista_letras)

                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: ' + user_completo)
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView').set_text(
                        user_completo)
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]').click()
                    # Digitar senha e avançar
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView').set_text(
                        senha)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[3]').click()
                    # Clicar em concluir cadastro
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[1]/android.view.View')
                    time.sleep(2)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[1]/android.view.View').click()
                    time.sleep(4)
                    feedback = d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.View')
                    if feedback.exists:
                        sms = True

                    time.sleep(20)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]').click()

                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
                    window.Refresh()
                    # WebDriverWait(driver, 40).until(EC.visibility_of_element_located)(((By.XPATH,
                    #                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')))
                    time.sleep(10)
                    verificar = d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')

                    # conta_criada = driver.find_elements(By.XPATH,
                    #                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]')
                    # conta_sms = driver.find_elements(By.XPATH,
                    #                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.View[4]')
                    if verificar.exists:
                        try:
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[11]').click(
                                timeout=5)
                        except:
                            pass
                        try:
                            seguido = False
                            conteudo = config['vpn']
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                   text_color=('lime'))
                            window.Refresh()
                            contagem += 1
                            window['criadas'].update(contagem)
                            window.Refresh()
                            now = datetime.now()
                            now_brasilia = tz.localize(now)
                            timestamp = now_brasilia.strftime(
                                "%d/%m/%Y %H:%M:%S")

                            scope = ["https://spreadsheets.google.com/feeds",
                                     "https://www.googleapis.com/auth/drive"]
                            creds = ServiceAccountCredentials.from_json_keyfile_name(
                                'credentials.json', scope)
                            client = gspread.authorize(creds)

                            spreadsheet_id = config['spreadsheet']
                            sheet_name = 'contas'
                            # Insert user, password, and timestamp into first empty row
                            sheet = client.open_by_key(
                                spreadsheet_id).worksheet(sheet_name)
                            values = sheet.col_values(1)
                            last_row = len(values)
                            values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                      conteudo + ' - ' + app]
                            cell_list = sheet.range(
                                f'A{last_row + 1}:G{last_row + 1}')
                            for i, val in enumerate(values):
                                cell_list[i].value = val
                            sheet.update_cells(cell_list)

                            rows = sheet.get_all_values()

                            # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                            regex = re.compile(r'\S+\s\S+')

                            # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                            num_rows = sum(
                                1 for row in rows if regex.match(row[0]))
                            window['total'].update(num_rows)

                            scope = ["https://spreadsheets.google.com/feeds",
                                     "https://www.googleapis.com/auth/drive"]
                            creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                funcionamento, scope)
                            client = gspread.authorize(creds)

                            spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                            sheet_name = 'relatorio_geral'
                            # Insert user, password, and timestamp into first empty row
                            sheet = client.open_by_key(
                                spreadsheet_id).worksheet(sheet_name)
                            values = sheet.col_values(1)
                            last_row = len(values)
                            values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                      conteudo + ' - ' + app]
                            cell_list = sheet.range(
                                f'A{last_row + 1}:G{last_row + 1}')
                            for i, val in enumerate(values):
                                cell_list[i].value = val
                            sheet.update_cells(cell_list)

                            window.Refresh()
                            arquivo = open(
                                'configuracoes/contas/contas_criadas.txt', 'a')
                            # Escreva mais conteúdo no arquivo
                            arquivo.write(user_completo + ' ' + senha + "\n")
                            arquivo = open(
                                'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                            # Escreva mais conteúdo no arquivo
                            arquivo.write(
                                email + '\n' + user_completo + '\n' + senha + "\n\n")
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]').click()
                            window.Refresh()
                            sms = False
                        except:
                            pass

                    else:
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                                break
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()

                        except:
                            sms = True
                except:
                    sms = True
                    continue

        except Exception as e:
            print(e)
            time.sleep(20)
            print('______________________________________________________')
            # desired_caps = {}
            # desired_caps['udid'] = '127.0.0.1:' + porta
            # desired_caps['newCommandTimeout'] = '500'
            # desired_caps['platformName'] = 'Android'
            # desired_caps['automationName'] = 'UiAutomator2'
            # desired_caps['systemPort'] = random.randint(1024, 65535)
            # desired_caps['uiautomator2ServerInstallTimeout'] = 120000
            # desired_caps['noReset'] = True
            # driver = webdriver.Remote('http://localhost:4723/wd/hub', desired_caps)
            continue


def criarporcima():
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    try:
        with open("configuracoes/config2.json", "r") as f:
            config2 = json.load(f)
    except FileNotFoundError:
        config2 = {}
    SPREADSHEET_ID = config2['spreadsheet']
    conteudo = config2['vpn']
    senha = config2['senha']
    maquina = config2['maquina']
    sheet_contas = config2['contas_por_cima']
    tentativa = False
    seguido = False
    window['Executar'].update(disabled=True)
    window.Refresh()
    # Código que gera a saída
    import os
    import time
    import requests
    import hashlib
    import subprocess

    # verifica se o arquivo existe na pasta do bot

    try:
        from rich.console import Console
    except ModuleNotFoundError:
        import subprocess
        import sys

        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['pip', 'install', '-r', 'requirements.txt'])
        subprocess.run(['deactivate'], shell=True)
        from rich.console import Console
    import os
    import time
    import requests
    import hashlib
    import subprocess
    from colorama import init, Fore, Back, Style
    from faker import Faker
    # teste
    init(autoreset=True)
    console = Console()
    from termcolor import colored

    from rich.console import Console
    from rich.panel import Panel
    from rich.text import Text
    from rich.rule import Rule

    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random
    from datetime import datetime
    import string
    from appium import webdriver
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import NoSuchElementException
    from mailtm import Email
    import re
    import logging

    logger = logging.getLogger(__name__)

    handler = logging.FileHandler('log.txt')
    handler.setLevel(logging.ERROR)

    logger.addHandler(handler)

    def gerar_id():
        chars = string.ascii_lowercase + string.digits
        android_id = ''.join(random.choice(chars) for i in range(16))
        return android_id

    def vpn_avast():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Avast', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            driver.start_activity("com.avast.android.vpn",
                                  ".app.wizard.WizardActivity")
            time.sleep(10)
        except Exception as e:
            print(e)
        abc = False

    def vpn_hotspotshield():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HotspotShield',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            driver.start_activity(
                "hotspotshield.android.vpn", "com.anchorfree.hotspotshield.ui.HssActivity")
        except Exception as e:
            print(e)
        WebDriverWait(driver, 20).until(
            EC.element_to_be_clickable((By.ID, 'hotspotshield.android.vpn:id/tryAgainButton'))).click()
        time.sleep(5)
        WebDriverWait(driver, 20).until(
            EC.element_to_be_clickable((By.ID, 'hotspotshield.android.vpn:id/btnVpnConnect'))).click()

        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_pia():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da PiaVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            driver.start_activity(
                "com.privateinternetaccess.android", ".ui.LauncherActivity")
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.ID, 'com.privateinternetaccess.android:id/connection_background'))).click()
        time.sleep(3)
        WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.ID, 'com.privateinternetaccess.android:id/connection_background'))).click()

        abc = False

    def vpn_express():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da ExpressVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            driver.start_activity("com.expressvpn.vpn", ".ui.SplashActivity")
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.ID, 'com.expressvpn.vpn:id/obiButton'))).click()
        time.sleep(3)
        WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.ID, 'com.expressvpn.vpn:id/obiButton'))).click()

        abc = False

    def vpn_nord():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da NordVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        sms = True
        try:
            driver.start_activity("com.nordvpn.android", ".MainActivity")
        except:
            pass
        time.sleep(10)
        # try:
        #    WebDriverWait(driver, 10).until(
        #        EC.element_to_be_clickable((By.ID, 'com.nordvpn.android:id/reconnect_button'))).click()
        # except:
        #    pass
        # try:
        #    WebDriverWait(driver, 10).until(
        #        EC.element_to_be_clickable((By.ID, 'com.nordvpn.android:id/secondary_quick_connect_button'))).click()
        # except:
        #    pass
        WebDriverWait(driver, 30).until(
            EC.element_to_be_clickable((By.ID, 'com.nordvpn.android:id/primary_quick_connect_button'))).click()
        time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_surf():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            driver.start_activity(
                "com.surfshark.vpnclient.android", ".StartActivity")
        except:
            pass
        time.sleep(3)
        WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, 'com.avg.android.vpn:id/view_switch'))).click()
        time.sleep(3)
        WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, 'com.avg.android.vpn:id/view_switch'))).click()
        time.sleep(5)
        WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, 'com.avg.android.vpn:id/view_switch'))).click()
        time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_better():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da BetterNet', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        try:
            driver.start_activity(
                "com.freevpnintouch", "com.anchorfree.betternet.ui.BetternetActivity")
        except:
            pass
        time.sleep(10)
        dialog = driver.find_elements(
            By.ID, 'com.freevpnintouch:id/dialogCtaPositive')
        connect = driver.find_element(
            By.ID, 'com.freevpnintouch:id/buttonConnect').text
        if len(dialog) == 1:
            WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/dialogCtaPositive'))).click()
            time.sleep(3)
            WebDriverWait(driver, 20).until(
                EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect'))).click()
            # time.sleep(5)
            WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect'))).click()
        while connect == 'CONNECT':
            WebDriverWait(driver, 20).until(
                EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect'))).click()
            time.sleep(4)
            connect = driver.find_element(
                By.ID, 'com.freevpnintouch:id/buttonConnect').text
            # WebDriverWait(driver, 20).until(
            # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect'))).click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        ip = '127.0.0.1:' + porta

        output = subprocess.check_output(
            ['adb', '-s', ip, 'shell', 'ifconfig'])

        # Verifica se a conexão VPN está ativa
        if not "tun0" in str(output):
            window['output'].print("Não conectado na BetterNet.")
            window.Refresh()
            try:
                connect = driver.find_element(
                    By.ID, 'com.freevpnintouch:id/buttonConnect').text
                driver.start_activity(
                    "com.freevpnintouch", "com.anchorfree.betternet.ui.BetternetActivity")
                while connect == 'CONNECT':
                    WebDriverWait(driver, 20).until(
                        EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect'))).click()
                    time.sleep(4)
                    connect = driver.find_element(
                        By.ID, 'com.freevpnintouch:id/buttonConnect').text
            except:
                pass
        abc = False

    def vpn_cyberghost():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da CyberGhost', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            driver.start_activity(
                "de.mobileconcepts.cyberghost", ".view.app.AppActivity filter")
        except:
            pass
        # time.sleep(3)
        WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, 'de.mobileconcepts.cyberghost:id/button'))).click()
        rate = driver.find_elements(
            By.ID, 'de.mobileconcepts.cyberghost:id/rate_me_text')
        if len(rate) == 1:
            WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.ID, 'android:id/button2'))).click()
        time.sleep(2)
        WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, 'de.mobileconcepts.cyberghost:id/button'))).click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        abc = False

    def vpn_tunnelbear():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.tunnelbear.android')
            d.app_start("com.tunnelbear.android")
            while True:
                output = subprocess.check_output(
                    ['adb', '-s', porta, 'shell', 'ifconfig'])
                # print(str(output))
                if "tun0" in str(output):
                    print('Conectada')
                    break
                elif not "tun0" in str(output):
                    print('Reconectando')
                    try:
                        d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                        time.sleep(10)
                    except:
                        pass
        except Exception as e:
            print(e)
            pass

    def vpn_avg():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da AVG', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            driver.start_activity(
                "com.avg.android.vpn", "com.avast.android.vpn.app.wizard.WizardActivity")
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #               stderr=subprocess.DEVNULL, check=True, shell=True)

        # time.sleep(10)
        WebDriverWait(driver, 1).until(
            EC.element_to_be_clickable((By.ID, 'com.avg.android.vpn:id/view_switch'))).click()
        # time.sleep(10)
        WebDriverWait(driver, 1).until(
            EC.element_to_be_clickable((By.ID, 'com.avg.android.vpn:id/view_switch'))).click()

    options = Options()
    prefs = {"profile.managed_default_content_settings.images": 2}
    options.page_load_strategy = 'none'
    options.add_experimental_option("prefs", prefs)

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    window.Refresh()

    console = Console()

    device = [
        {'name': 'Bluestacks1', 'port': porta, 'udid': f'{porta}'},
    ]
    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server.test', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass
    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global transition_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass
    gerar_id()
    android_id = gerar_id()
    subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    time.sleep(2)
    # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True, stdout=subprocess.DEVNULL,
    #               stderr=subprocess.DEVNULL)
    try:
        subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server.test',
                       stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass

    try:
        subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
    except Exception as e:
        print(e)
        pass

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Efetuando troca de IP.')
    window.Refresh()
    try:
        conteudo = config2['vpn']
        if conteudo == "AVG":
            vpn_avg()
        elif conteudo == "SurfShark":
            vpn_surf()
        elif conteudo == "Nenhuma":
            nenhuma_vpn()
        elif conteudo == "Avast":
            vpn_avast()
        elif conteudo == "ExpressVPN":
            vpn_express()

        elif conteudo == "PiaVPN":
            vpn_pia()
        elif conteudo == "TunnelBear":
            vpn_tunnelbear()
        elif conteudo == "BetterNet":
            vpn_better()
        elif conteudo == "CyberGhost":
            vpn_cyberghost()
        elif conteudo == "NordVPN":
            vpn_nord()
        elif conteudo == "HotspotShield":
            vpn_hotspotshield()
        elif conteudo == "WindscribeVPN":
            vpn_windscribe()
        elif conteudo == "HmaVPN":
            vpn_hma()
        else:
            window['output'].print(
                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
            window.Refresh()

    except Exception as e:
        pass

    window.Refresh()
    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando sistema inicializar.')
    window.Refresh()
    desired_caps = {}
    desired_caps['udid'] = '127.0.0.1:' + porta
    desired_caps['newCommandTimeout'] = '500'
    desired_caps['platformName'] = 'Android'
    desired_caps['automationName'] = 'UiAutomator2'
    desired_caps['systemPort'] = random.randint(1024, 65535)
    desired_caps['uiautomator2ServerInstallTimeout'] = 120000
    desired_caps['noReset'] = True
    driver = webdriver.Remote('http://localhost:4723/wd/hub', desired_caps)
    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Planilha sendo utilizada: {sheet_contas}.\n')
    window.Refresh()
    while True:
        try:
            window['output'].print(linha_ret)
            window.Refresh()

            time.sleep(5)
            scope = ["https://spreadsheets.google.com/feeds",
                     "https://www.googleapis.com/auth/drive"]
            creds = ServiceAccountCredentials.from_json_keyfile_name(
                'credentials.json', scope)
            client = gspread.authorize(creds)

            spreadsheet_id = config['spreadsheet']
            sheet_name = 'contas'
            # Insert user, password, and timestamp into first empty row
            sheet = client.open_by_key(spreadsheet_id).worksheet(sheet_name)
            values = sheet.col_values(1)

            # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
            rows = sheet.get_all_values()

            # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
            regex = re.compile(r'\S+\s\S+')
            # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
            num_rows = sum(1 for row in rows if regex.match(row[0]))
            window['total'].update(num_rows)
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)

            except:
                pass
            try:
                subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except Exception as e:
                print(e)
                pass
            # Insert user, password, and timestamp into first empty row
            sheet = client.open_by_key(spreadsheet_id).worksheet(sheet_contas)
            values = sheet.col_values(1)

            # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
            rows = sheet.get_all_values()

            # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
            regex = re.compile(r'\S+\s\S+')
            # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
            num_rows2 = sum(1 for row in rows if regex.match(row[0]))
            while int(num_rows2) == 0:
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Nenhuma conta encontrada. Tentando novamente em 5 min.')
                window.Refresh()
                scope = ["https://spreadsheets.google.com/feeds",
                        "https://www.googleapis.com/auth/drive"]
                creds = ServiceAccountCredentials.from_json_keyfile_name(
                    'credentials.json', scope)
                client = gspread.authorize(creds)

                spreadsheet_id = config['spreadsheet']
                # Insert user, password, and timestamp into first empty row
                sheet = client.open_by_key(
                    spreadsheet_id).worksheet(sheet_contas)
                values = sheet.col_values(1)

                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                rows = sheet.get_all_values()

                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                regex = re.compile(r'\S+\s\S+')
                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                num_rows = sum(1 for row in rows if regex.match(row[0]))
                window['total'].update(num_rows)

                cells = sheet.get_all_values()

                # Armazena as células que correspondem à condição
                matches = [cell for row in cells for cell in row if re.match(
                    r'\S+\s\S+', cell)]

                # Armazena a lista de células correspondentes à condição em uma variável
                num_rows2 = matches
                time.sleep(300)
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] {num_rows2} contas para serem utilizadas.')
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo Instagram Lite')
            window.Refresh()

            sheet = client.open_by_key(spreadsheet_id).worksheet(sheet_contas)
            values = sheet.col_values(1)
            first_linha = sheet.cell(1, 1).value

            # Divide a string em duas partes separadas por um espaço em branco
            partes = first_linha.split(' ')

            # Atribui a primeira parte (endereço de e-mail) à variável email2nr
            user = partes[0]

            # Atribui a segunda parte (texto) à variável senha2nr
            senha = partes[1]
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Conta sendo utilizada: {user}')
            window.Refresh()
            driver.activate_app('com.instagram.lite')
            time.sleep(4)
            try:
                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[3]'))).click()
            except:
                desired_caps = {}
                desired_caps['udid'] = '127.0.0.1:' + porta
                desired_caps['newCommandTimeout'] = '500'
                desired_caps['platformName'] = 'Android'
                desired_caps['automationName'] = 'UiAutomator2'
                desired_caps['systemPort'] = random.randint(1024, 65535)
                desired_caps['uiautomator2ServerInstallTimeout'] = 120000
                desired_caps['noReset'] = True
                driver = webdriver.Remote(
                    'http://localhost:4723/wd/hub', desired_caps)
                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[3]'))).click()

            time.sleep(2)
            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView[1]'))).send_keys(
                user)
            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView[2]'))).send_keys(
                senha)
            time.sleep(2)
            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[4]/android.view.ViewGroup'))).click()
            time.sleep(5)
            lembrar_login = driver.find_elements(By.XPATH,
                                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[2]')
            if len(lembrar_login) == 1:
                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[2]'))).click()
            time.sleep(10)
            verificar = driver.find_elements(By.XPATH,
                                             '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')
            # time.sleep(10)

            conta_criada = driver.find_elements(By.XPATH,
                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]')
            conta_sms = driver.find_elements(By.XPATH,
                                             '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.View[4]')

            try:
                if len(verificar) == 1:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Logado com sucesso.')
                    window.Refresh()
                    sms = False
            except:
                pass
            while sms is False:
                try:
                    pular_erro = driver.find_elements(By.XPATH,
                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]')
                    if len(pular_erro) == 0:
                        try:
                            driver.find_elements(By.XPATH,
                                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]').click()
                        except:
                            sms = True
                            continue
                    window['output'].print(linha_ret)
                    window.Refresh()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Criação de outro perfil.')
                    window.Refresh()
                    # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True)
                    # Clicar no botão de perfil
                    try:
                        time.sleep(3)
                        WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                                   '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[11]')))
                        time.sleep(2)
                        WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                                   '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[11]'))).click()

                    except:
                        time.sleep(3)
                        WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                                   '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')))
                        time.sleep(2)
                        WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                                   '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]'))).click()

                        # Clicar em perfis
                    try:
                        WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH,
                                                                                          '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()
                    except:
                        WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH,
                                                                                          '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[1]/android.view.View'))).click()
                    # Clicar em adicionar conta
                    WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[2]'))).click()
                    # Clicar em criar nova conta
                    time.sleep(3)
                    WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[3]'))).click()
                    # Gerar nome de usuário, digitar no campo e clicar em avançae
                    lista_user = random.choices(range(0, 9), k=2)
                    lista_letras = random.choices(letras, k=1)

                    with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                        nomes = nomes_arquivo.readlines()

                    with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                        sobrenomes = sobrenomes_arquivo.readlines()

                    nomea = fake.first_name_male().replace(" ", "")
                    nome = unicodedata.normalize('NFKD', nomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    sobrenomea = fake.last_name_male().replace(" ", "")
                    sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    nome_completo = nome + sobrenome
                    numeros_concatenados = ''.join(
                        str(numero) for numero in lista_user)
                    user_completo = nome_completo + '' + \
                        str(numeros_concatenados) + ''.join(lista_letras)

                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: ' + user_completo)
                    window.Refresh()
                    WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView'))).send_keys(
                        user_completo)
                    time.sleep(1)
                    WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()
                    # Digitar senha e avançar
                    time.sleep(3)
                    WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView'))).send_keys(
                        senha)
                    WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[3]'))).click()
                    # Clicar em concluir cadastro
                    time.sleep(1)
                    WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[1]/android.view.View')))
                    time.sleep(2)
                    WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[1]/android.view.View'))).click()
                    time.sleep(4)
                    feedback = driver.find_elements(By.XPATH,
                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.View')
                    if len(feedback) == 1:
                        sms = True

                    WebDriverWait(driver, 60).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]')))
                    time.sleep(20)
                    WebDriverWait(driver, 60).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()

                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
                    window.Refresh()
                    # WebDriverWait(driver, 40).until(EC.visibility_of_element_located)(((By.XPATH,
                    #                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')))
                    time.sleep(10)
                    verificar = driver.find_elements(By.XPATH,
                                                     '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')

                    conta_criada = driver.find_elements(By.XPATH,
                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]')
                    conta_sms = driver.find_elements(By.XPATH,
                                                     '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.View[4]')
                    if len(verificar) == 1:
                        try:
                            WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                                       '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[11]'))).click()
                        except:
                            pass
                        seguido = False
                        conteudo = config['vpn']
                        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                               text_color=('lime'))
                        window.Refresh()
                        contagem += 1
                        window['criadas'].update(contagem)
                        window.Refresh()
                        now = datetime.now()
                        now_brasilia = tz.localize(now)
                        timestamp = now_brasilia.strftime("%d/%m/%Y %H:%M:%S")

                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                            'credentials.json', scope)
                        client = gspread.authorize(creds)

                        spreadsheet_id = config2['spreadsheet']
                        sheet_name = 'contas'
                        # Insert user, password, and timestamp into first empty row
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)
                        values = sheet.col_values(1)
                        last_row = len(values)
                        email = 'POR CIMA'
                        values = [user_completo + ' ' + senha,
                                  email, timestamp, maquina, conteudo]
                        cell_list = sheet.range(
                            f'A{last_row + 1}:G{last_row + 1}')
                        for i, val in enumerate(values):
                            cell_list[i].value = val
                        sheet.update_cells(cell_list)

                        rows = sheet.get_all_values()

                        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                        regex = re.compile(r'\S+\s\S+')

                        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                        num_rows = sum(
                            1 for row in rows if regex.match(row[0]))
                        window['total'].update(num_rows)

                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_dict(
                            funcionamento, scope)
                        client = gspread.authorize(creds)

                        spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                        sheet_name = 'relatorio_geral'
                        # Insert user, password, and timestamp into first empty row
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)
                        values = sheet.col_values(1)
                        last_row = len(values)
                        values = [user_completo + ' ' + senha,
                                  email, timestamp, maquina, conteudo]
                        cell_list = sheet.range(
                            f'A{last_row + 1}:G{last_row + 1}')
                        for i, val in enumerate(values):
                            cell_list[i].value = val
                        sheet.update_cells(cell_list)

                        window.Refresh()
                        arquivo = open(
                            'configuracoes/contas/contas_criadas.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(user_completo + ' ' + senha + "\n")
                        arquivo = open(
                            'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(
                            email + '\n' + user_completo + '\n' + senha + "\n\n")
                        WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]'))).click()
                        window.Refresh()
                        sms = False

                    else:
                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                            'credentials.json', scope)
                        client = gspread.authorize(creds)
                        # Abre a planilha e a planilha de uma determinada aba
                        spreadsheet_id = config2['spreadsheet']
                        sheet_contas = config2['contas_por_cima']
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_contas)

                        # Apaga a primeira célula da coluna A e desloca as células abaixo
                        sheet.delete_rows(1, 1)
                        try:
                            conteudo = config2['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                        except:
                            pass
                except Exception as e:
                    print(e)
                    pass
        except Exception as e:
            print(e)
            pass


def executar_mailtm():
    SPREADSHEET_ID = config['spreadsheet']
    conteudo = config['vpn']
    senha = gerar_senha(12)
    maquina = config['maquina']
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    # Código que gera a saída
    import os
    import time
    import requests
    import hashlib
    import subprocess

    # verifica se o arquivo existe na pasta do bot

    try:
        from rich.console import Console
    except ModuleNotFoundError:
        import subprocess
        import sys

        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['pip', 'install', '-r', 'requirements.txt'])
        subprocess.run(['deactivate'], shell=True)
        from rich.console import Console
    import os
    import time
    import requests
    import hashlib
    import subprocess
    from colorama import init, Fore, Back, Style
    from faker import Faker
    # teste
    init(autoreset=True)
    console = Console()
    from termcolor import colored

    from rich.console import Console
    from rich.panel import Panel
    from rich.text import Text
    from rich.rule import Rule

    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random
    from datetime import datetime
    import string
    from appium import webdriver
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import NoSuchElementException
    from mailtm import Email
    import re
    import logging

    logger = logging.getLogger(__name__)

    handler = logging.FileHandler('log.txt')
    handler.setLevel(logging.ERROR)

    logger.addHandler(handler)

    # RANGE_NAME = 'contas!A:D'
    #
    # SCOPES = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

    def vpn_avast():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] SMS\nAlterando IP da Avast', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        sms = True
        try:
            driver.start_activity("com.avast.android.vpn",
                                  ".app.wizard.WizardActivity")
            time.sleep(10)
        except Exception as e:
            print(e)

        abc = False

    def vpn_hotspotshield():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] SMS\nAlterando IP da HotspotShield',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        sms = True
        try:
            driver.start_activity(
                "hotspotshield.android.vpn", "com.anchorfree.hotspotshield.ui.HssActivity")
        except Exception as e:
            print(e)
        WebDriverWait(driver, 20).until(
            EC.element_to_be_clickable((By.ID, 'hotspotshield.android.vpn:id/tryAgainButton'))).click()
        time.sleep(5)
        WebDriverWait(driver, 20).until(
            EC.element_to_be_clickable((By.ID, 'hotspotshield.android.vpn:id/btnVpnConnect'))).click()

        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_pia():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] SMS\nAlterando IP da PiaVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        sms = True
        try:
            driver.start_activity(
                "com.privateinternetaccess.android", ".ui.LauncherActivity")
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.ID, 'com.privateinternetaccess.android:id/connection_background'))).click()
        time.sleep(3)
        WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.ID, 'com.privateinternetaccess.android:id/connection_background'))).click()

        abc = False

    def vpn_express():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] SMS\nAlterando IP da ExpressVPN',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        sms = True
        try:
            driver.start_activity("com.expressvpn.vpn", ".ui.SplashActivity")
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.ID, 'com.expressvpn.vpn:id/obiButton'))).click()
        time.sleep(3)
        WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.ID, 'com.expressvpn.vpn:id/obiButton'))).click()

        abc = False

    def vpn_nord():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] SMS\nAlterando IP da NordVPN',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        sms = True
        try:
            driver.start_activity("com.nordvpn.android", ".MainActivity")
        except:
            pass
        time.sleep(10)
        # try:
        #    WebDriverWait(driver, 10).until(
        #        EC.element_to_be_clickable((By.ID, 'com.nordvpn.android:id/reconnect_button'))).click()
        # except:
        #    pass
        # try:
        #    WebDriverWait(driver, 10).until(
        #        EC.element_to_be_clickable((By.ID, 'com.nordvpn.android:id/secondary_quick_connect_button'))).click()
        # except:
        #    pass
        WebDriverWait(driver, 30).until(
            EC.element_to_be_clickable((By.ID, 'com.nordvpn.android:id/primary_quick_connect_button'))).click()
        time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_surf():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            driver.start_activity(
                "com.surfshark.vpnclient.android", ".StartActivity")
        except:
            pass
        time.sleep(3)
        WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, 'com.avg.android.vpn:id/view_switch'))).click()
        time.sleep(3)
        WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, 'com.avg.android.vpn:id/view_switch'))).click()
        time.sleep(5)
        WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, 'com.avg.android.vpn:id/view_switch'))).click()
        time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_better():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] SMS\nAlterando IP da BetterNet',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        try:
            driver.start_activity(
                "com.freevpnintouch", "com.anchorfree.betternet.ui.BetternetActivity")
        except:
            pass
        time.sleep(10)
        dialog = driver.find_elements(
            By.ID, 'com.freevpnintouch:id/dialogCtaPositive')
        connect = driver.find_element(
            By.ID, 'com.freevpnintouch:id/buttonConnect').text
        if len(dialog) == 1:
            WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/dialogCtaPositive'))).click()
            time.sleep(3)
            WebDriverWait(driver, 20).until(
                EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect'))).click()
            # time.sleep(5)
            WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect'))).click()
        while connect == 'CONNECT':
            WebDriverWait(driver, 20).until(
                EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect'))).click()
            time.sleep(4)
            connect = driver.find_element(
                By.ID, 'com.freevpnintouch:id/buttonConnect').text
            # WebDriverWait(driver, 20).until(
            # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect'))).click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        ip = '127.0.0.1:' + porta

        output = subprocess.check_output(
            ['adb', '-s', ip, 'shell', 'ifconfig'])

        # Verifica se a conexão VPN está ativa
        if not "tun0" in str(output):
            window['output'].print("Não conectado na BetterNet.")
            window.Refresh()
            try:
                connect = driver.find_element(
                    By.ID, 'com.freevpnintouch:id/buttonConnect').text
                driver.start_activity(
                    "com.freevpnintouch", "com.anchorfree.betternet.ui.BetternetActivity")
                while connect == 'CONNECT':
                    WebDriverWait(driver, 20).until(
                        EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect'))).click()
                    time.sleep(4)
                    connect = driver.find_element(
                        By.ID, 'com.freevpnintouch:id/buttonConnect').text
            except:
                pass
        abc = False

    def vpn_cyberghost():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] SMS\nAlterando IP da CyberGhost',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        try:
            driver.start_activity(
                "de.mobileconcepts.cyberghost", ".view.app.AppActivity filter")
        except:
            pass
        # time.sleep(3)
        WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, 'de.mobileconcepts.cyberghost:id/button'))).click()
        rate = driver.find_elements(
            By.ID, 'de.mobileconcepts.cyberghost:id/rate_me_text')
        if len(rate) == 1:
            WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.ID, 'android:id/button2'))).click()
        time.sleep(2)
        WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, 'de.mobileconcepts.cyberghost:id/button'))).click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        abc = False

    def vpn_tunnelbear():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.tunnelbear.android')
            d.app_start("com.tunnelbear.android")
            while True:
                output = subprocess.check_output(
                    ['adb', '-s', porta, 'shell', 'ifconfig'])
                # print(str(output))
                if "tun0" in str(output):
                    print('Conectada')
                    break
                elif not "tun0" in str(output):
                    print('Reconectando')
                    try:
                        d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                        time.sleep(10)
                    except:
                        pass
        except Exception as e:
            print(e)
            pass

    def vpn_avg():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] SMS\nAlterando IP da AVG', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        sms = True
        try:
            driver.start_activity(
                "com.avg.android.vpn", "com.avast.android.vpn.app.wizard.WizardActivity")
        except:
            pass
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        # time.sleep(10)
        WebDriverWait(driver, 1).until(
            EC.element_to_be_clickable((By.ID, 'com.avg.android.vpn:id/view_switch'))).click()
        # time.sleep(10)
        WebDriverWait(driver, 1).until(
            EC.element_to_be_clickable((By.ID, 'com.avg.android.vpn:id/view_switch'))).click()
        # time.sleep(5)
        # WebDriverWait(driver, 30).until(
        #    EC.element_to_be_clickable((By.ID, 'com.avg.android.vpn:id/view_switch'))).click()
        # time.sleep(5)

        abc = False

    def listener(message):
        global nome
        global sobrenome
        global cod
        if 'code' in message['subject']:
            cod = re.search(r'\d+', message['subject']).group(0)

    def gerar_email():
        global lista_user
        global sms
        global nome
        global sobrenome
        global email
        lista_user = random.choices(range(0, 9), k=2)
        lista_letras = random.choices(letras, k=1)

        with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
            nomes = nomes_arquivo.readlines()

        with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
            sobrenomes = sobrenomes_arquivo.readlines()

        nomea = fake.first_name_male().replace(" ", "")
        nome = unicodedata.normalize('NFKD', nomea).encode(
            'ASCII', 'ignore').decode('ASCII')
        sobrenomea = fake.last_name().replace(" ", "").lower()
        sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
            'ASCII', 'ignore').decode('ASCII')
        nome_completo = nome + ' ' + sobrenome
        nome_completo_s = nome + sobrenome
        numeros_concatenados = ''.join(str(numero) for numero in lista_user)
        user_completo = nome_completo_s + '' + \
            str(numeros_concatenados) + ''.join(lista_letras)
        test = Email()

        time.sleep(2)
        num = driver.find_elements(By.XPATH,
                                   '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[3]/android.view.View')

        while len(num) == 1:
            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()
            time.sleep(2)
            num = driver.find_elements(By.XPATH,
                                       '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[3]/android.view.View')
            subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_BACK', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
            try:
                WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                           '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View'))).click()
                time.sleep(5)
                WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                           '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()
                time.sleep(3)
            except Exception as e:
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Erro.')
                window.Refresh()

        test.register(username=user_completo, password=senha)
        window['output'].print("Email: " + str(test.address))

        window.Refresh()
        time.sleep(2)
        WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                          '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView'))).send_keys(
            email)
        time.sleep(2)
        WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                          '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[4]'))).click()
        # driver.find_element(By.XPATH,
        #                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[4]').click()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando codigo...')
        window.Refresh()
        # fetch all emails in the inbox
        codigo = None
        try:
            test.start(listener, interval=15)
            codigo = 0
            while codigo != 20:
                time.sleep(2)
                codigo = codigo + 1
            codigo = cod
        except Exception as e:
            if "Too Many Requests" in str(e):
                pass
            else:
                pass
        window['output'].print(f"Codigo recebido: {codigo}")
        window.Refresh()
        try:
            WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH,
                                                                              '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView'))).send_keys(
                codigo)
        except:
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Instagram fechou')
            window.Refresh()
        time.sleep(2)
        try:
            WebDriverWait(driver, 5).until(EC.visibility_of_element_located((By.XPATH,
                                                                             '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[4]'))).click()
        except:
            WebDriverWait(driver, 5).until(EC.visibility_of_element_located((By.XPATH,
                                                                             '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[3]'))).click()
        try:
            WebDriverWait(driver, 20).until(EC.visibility_of_element_located((By.XPATH,
                                                                              '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View')))
        except:
            pass
        # time.sleep(3)
        # codigo_invalido = driver.find_elements(By.XPATH,
        #                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.View[5]')
        # continua_na_tela = driver.find_elements(By.XPATH,
        #                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[4]/android.view.View')
        # continua_na_tela2 = driver.find_elements(By.XPATH,
        #                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[3]/android.view.View')
        # criou = driver.find_elements(By.XPATH,
        #                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View')
        # time.sleep(25)
        # if len(codigo_invalido) == 1:
        # driver.find_element(By.XPATH,
        #                     '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup').click()
        # time.sleep(2)
        # driver.find_element(By.XPATH,
        #                     '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView').clear()
        # driver.find_element(By.XPATH,
        #                     '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[1]').click()
        # codigo = None
        # try:
        #     test.start(listener, interval=5)
        #     codigo = 0
        #     while codigo != 20:
        #         time.sleep(1.5)
        #         codigo = codigo + 1
        #     codigo = cod
        # except Exception as e:
        #     if "Too Many Requests" in str(e):
        #         pass
        #     else:
        #         window['output'].print(e)
        #         window.Refresh()
        # window['output'].print(f"Codigo recebido: {codigo}")
        # window.Refresh()
        # WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH,
        #                                                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView'))).send_keys(
        #     codigo)
        # try:
        #     WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
        #                                                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup[2]/android.view.View')))
        # except:
        #     pass
        # try:
        #     WebDriverWait(driver, 15).until(EC.element_to_be_clickable((By.XPATH,
        #                                                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[4]'))).click()
        #     try:
        #         WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
        #                                                                     '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup[2]/android.view.View')))
        #     except:
        #         pass
        # except:
        #     WebDriverWait(driver, 15).until(EC.element_to_be_clickable((By.XPATH,
        #                                                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[3]'))).click()
        #     try:
        #         WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
        #                                                                     '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup[2]/android.view.View')))
        #     except:
        #         pass
        # test.stop()
        # time.sleep(3)
        # WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
        #                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup')))
        # reenv_cod = driver.find_elements(By.XPATH,
        #                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup')
        # if len(reenv_cod) == 1:
        #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Enviando um novo codigo.')
        #    window.Refresh()
        #    driver.find_element(By.XPATH,
        #                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup').click()
        #    time.sleep(2)
        #    driver.find_element(By.XPATH,
        #                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView').clear()
        #    driver.find_element(By.XPATH,
        #                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[1]').click()

    def gerar_email_firts_reg():
        global cod
        global email
        global lista_user
        global fake
        global nome
        global sobrenome
        global nomes
        global sobrenomes
        global nome_completo
        global nome_completo_s
        global numeros_concatenados
        global user_completo
        lista_user = random.choices(range(0, 9), k=2)
        lista_letras = random.choices(letras, k=1)

        try:
            with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                nomes = nomes_arquivo.readlines()

            with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                sobrenomes = sobrenomes_arquivo.readlines()

            nomea = fake.first_name_male().replace(" ", "")
            nome = unicodedata.normalize('NFKD', nomea).encode(
                'ASCII', 'ignore').decode('ASCII')
            sobrenomea = fake.last_name().replace(" ", "").lower()
            sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                'ASCII', 'ignore').decode('ASCII')

            nome_completo = nome + ' ' + sobrenome
            nome_completo_s = nome + sobrenome
            numeros_concatenados = ''.join(str(numero)
                                           for numero in lista_user)
            user_completo = nome_completo_s + '' + \
                str(numeros_concatenados) + ''.join(lista_letras)

            test = Email()
            arquivo = open('configuracoes/contas/senha_perfis.txt')
            senha = arquivo.read()
            test.register(username=user_completo, password=senha)
            window['output'].print("Email: " + str(test.address))
        except Exception as e:
            print(e)
            window.Refresh()
        time.sleep(2)
        email = str(test.address)
        time.sleep(2)
        WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                          '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView'))).send_keys(
            email)
        time.sleep(2)
        WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                          '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[4]'))).click()

        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando codigo...')
        window.Refresh()
        codigo = None
        try:
            test.start(listener, interval=15)
            codigo = 0
            while codigo != 20:
                time.sleep(2)
                codigo = codigo + 1
            codigo = cod
        except Exception as e:
            if "Too Many Requests" in str(e):
                pass
            else:
                pass
        window['output'].print(f"Codigo recebido: {codigo}")
        window.Refresh()
        try:
            WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH,
                                                                              '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView'))).send_keys(
                codigo)
            time.sleep(2)
        except:
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Erro encontrado.')
            window.Refresh()
            time.sleep(5)
        time.sleep(2)
        try:
            WebDriverWait(driver, 5).until(EC.visibility_of_element_located((By.XPATH,
                                                                             '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[4]'))).click()
        except:
            WebDriverWait(driver, 5).until(EC.visibility_of_element_located((By.XPATH,
                                                                             '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[3]'))).click()
        test.stop()
        time.sleep(5)
        codigo_invalido = driver.find_elements(By.XPATH,
                                               '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.View[5]')
        continua_na_tela = driver.find_elements(By.XPATH,
                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[3]/android.view.View')
        if len(codigo_invalido) and len(continua_na_tela) == 1:
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Erro encontrado.')
            window.Refresh()
            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[3]'))).click()
            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[1]'))).click()
            # WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, ''))).click()
            # WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, ''))).click()
            # WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, ''))).click()

            time.sleep(2)
            codigo = None
            try:
                test.start(listener, interval=5)
                codigo = 0
                while codigo != 20:
                    time.sleep(1.5)
                    codigo = codigo + 1
                codigo = cod
            except Exception as e:
                if "Too Many Requests" in str(e):
                    pass
                else:
                    window['output'].print(e)
                    window.Refresh()
            window['output'].print(f"Código recebido: {codigo}")
            window.Refresh()
            WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH,
                                                                              '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView'))).send_keys(
                codigo)
            try:
                driver.find_element(By.XPATH,
                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[4]').click()

            except:
                driver.find_element(By.XPATH,
                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[3]').click()

            test.stop()
            time.sleep(3)

        WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH,
                                                                          '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.View[8]')))
        return nome_completo

    def gerar_id():
        chars = string.ascii_lowercase + string.digits
        android_id = ''.join(random.choice(chars) for i in range(16))
        return android_id

    def firts_reg():
        global nome
        global sobrenome
        abc = True
        while abc:
            global sms
            sms = True
            # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True)

            try:
                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View'))).click()
                time.sleep(5)
                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()
                time.sleep(3)
                error = driver.find_elements(By.XPATH,
                                             '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup')
                if len(error) == 1:
                    time.sleep(2)
                    driver.find_element(By.XPATH,
                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup').click()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Erro fechado.')
                    error = driver.find_elements(By.XPATH,
                                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup')
                    while len(error) == 1:
                        driver.find_element(By.XPATH,
                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup').click()
                        error = driver.find_elements(By.XPATH,
                                                     '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup')
                    try:
                        WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View'))).click()
                        time.sleep(5)
                        WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()
                        time.sleep(3)
                    except:
                        pass

                    window.Refresh()
                gerar_email_firts_reg()
            except Exception as e:
                print(e)
                comando = f"adb connect {porta}"
                subprocess.run(comando, stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
                subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server.test',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, shell=True)
                subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, shell=True)

                window.Refresh()

                break
            nome_completo = nome + ' ' + sobrenome
            nome_completo_s = nome + sobrenome
            numeros_concatenados = ''.join(str(numero)
                                           for numero in lista_user)
            user_completo = nome_completo_s + '' + \
                str(numeros_concatenados) + ''.join(lista_letras)
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Nome escolhido: ' + nome_completo)
            window.Refresh()
            try:
                WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                                  '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView[1]'))).send_keys(
                    nome_completo)
            except:
                cont = False
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Erro encontrado.')
                window.Refresh()
                pass
            WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                              '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView[2]'))).send_keys(
                senha)
            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[5]/android.view.View'))).click()
            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View'))).click()
            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup'))).click()
            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.View[6]'))).click()
            idade_aleatoria = random.randint(18, 35)
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
            window.Refresh()
            WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                              '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView'))).send_keys(
                idade_aleatoria)
            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()
            op2 = driver.find_elements(By.XPATH,
                                       '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[7]/android.view.View')
            op1 = driver.find_elements(By.XPATH,
                                       '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View')
            time.sleep(5)
            try:
                if len(op1) == 0:
                    try:
                        driver.find_element(By.XPATH,
                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[7]/android.view.View').click()
                    except:
                        driver.find_element(By.XPATH,
                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[6]/android.view.View').click()
            except:
                try:
                    driver.find_element(By.XPATH,
                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View').click()

                except:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Erro ao criar')
                    window.Refresh()
                    sms = True
                    continue

            try:
                time.sleep(1)
                WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH,
                                                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[1]'))).click()
                time.sleep(3)
                WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                                  '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView'))).send_keys(
                    user_completo)
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                window.Refresh()
                time.sleep(3)
                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()
                time.sleep(5)
                erro_2 = driver.find_elements(By.XPATH,
                                              '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.webkit.WebView/android.webkit.WebView/android.view.View/android.view.View/android.view.View/android.view.View/android.view.View[*]/android.view.View[*]/android.widget.Button')
                erro_1 = driver.find_elements(By.XPATH,
                                              '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup')
                if len(erro_2) == 1:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Tentando gerar novamente')
                    window.Refresh()
                    time.sleep(5)
                    WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[1]/android.view.ViewGroup[1]'))).click()
                    WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup[2]'))).click()
                    time.sleep(3)
                if len(erro_1) == 1:
                    WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()
                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup[2]/android.view.View')))
                time.sleep(4)
                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup[2]/android.view.View'))).click()

            except:
                WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH,
                                                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View'))).click()
            WebDriverWait(driver, 60).until(EC.element_to_be_clickable((By.XPATH,
                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]')))
            time.sleep(20)
            WebDriverWait(driver, 60).until(EC.element_to_be_clickable((By.XPATH,
                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()
            time.sleep(5)
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
            window.Refresh()
            time.sleep(10)
            verificar = driver.find_elements(By.XPATH,
                                             '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')

            try:
                if len(verificar) == 1:
                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                           text_color=('lime'))
                    window.Refresh()
                    contagem += 1
                    window['criadas'].update(contagem)
                    window.Refresh()
                    now = datetime.now()
                    now_brasilia = tz.localize(now)
                    timestamp = now_brasilia.strftime("%d/%m/%Y %H:%M:%S")

                    scope = ["https://spreadsheets.google.com/feeds",
                             "https://www.googleapis.com/auth/drive"]
                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                        'credentials.json', scope)
                    client = gspread.authorize(creds)

                    spreadsheet_id = config['spreadsheet']
                    sheet_name = 'contas'
                    # Insert user, password, and timestamp into first empty row
                    sheet = client.open_by_key(
                        spreadsheet_id).worksheet(sheet_name)
                    values = sheet.col_values(1)
                    last_row = len(values)
                    values = [user_completo + ' ' + senha,
                              email, timestamp, maquina, conteudo]
                    cell_list = sheet.range(f'A{last_row + 1}:G{last_row + 1}')
                    for i, val in enumerate(values):
                        cell_list[i].value = val
                    sheet.update_cells(cell_list)

                    rows = sheet.get_all_values()

                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                    regex = re.compile(r'\S+\s\S+')

                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                    num_rows = sum(1 for row in rows if regex.match(row[0]))
                    window['total'].update(num_rows)

                    scope = ["https://spreadsheets.google.com/feeds",
                             "https://www.googleapis.com/auth/drive"]
                    creds = ServiceAccountCredentials.from_json_keyfile_dict(
                        funcionamento, scope)
                    client = gspread.authorize(creds)

                    spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                    sheet_name = 'relatorio_geral'
                    # Insert user, password, and timestamp into first empty row
                    sheet = client.open_by_key(
                        spreadsheet_id).worksheet(sheet_name)
                    values = sheet.col_values(1)
                    last_row = len(values)
                    values = [user_completo + ' ' + senha,
                              email, timestamp, maquina, conteudo]
                    cell_list = sheet.range(f'A{last_row + 1}:G{last_row + 1}')
                    for i, val in enumerate(values):
                        cell_list[i].value = val
                    sheet.update_cells(cell_list)

                    window.Refresh()
                    arquivo = open(
                        'configuracoes/contas/contas_criadas.txt', 'a')
                    # Escreva mais conteúdo no arquivo
                    arquivo.write(user_completo + ' ' + senha + "\n")
                    arquivo = open(
                        'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                    # Escreva mais conteúdo no arquivo
                    arquivo.write(email + '\n' + user_completo +
                                  '\n' + senha + "\n\n")
                    WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH,
                                                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]/android.view.View'))).click()

                    sms = False
                    break
                else:
                    conteudo = config['vpn']
                    # Executa a função correspondente ao conteúdo do arquivo
                    if conteudo == "AVG":
                        vpn_avg()
                    elif conteudo == "Avast":
                        vpn_avast()
                    elif conteudo == "CyberGhost":
                        vpn_cyberghost()
                    elif conteudo == "PiaVPN":
                        vpn_pia()
                    elif conteudo == "TunnelBear":
                        vpn_tunnelbear()
                    elif conteudo == "ExpressVPN":
                        vpn_express()
                    elif conteudo == "SurfShark":
                        vpn_surf()
                    elif conteudo == "BetterNet":
                        vpn_better()
                    elif conteudo == "NordVPN":
                        vpn_nord()
                    elif conteudo == "HotspotShield":
                        vpn_hotspotshield()
                    else:
                        window['output'].print(
                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                        window.Refresh()

            except Exception as e:
                print(e)

                sms = True
                conteudo = config['vpn']
                # Executa a função correspondente ao conteúdo do arquivo
                if conteudo == "AVG":
                    vpn_avg()
                elif conteudo == "Avast":
                    vpn_avast()
                elif conteudo == "CyberGhost":
                    vpn_cyberghost()
                elif conteudo == "PiaVPN":
                    vpn_pia()
                elif conteudo == "TunnelBear":
                    vpn_tunnelbear()
                elif conteudo == "ExpressVPN":
                    vpn_express()
                elif conteudo == "SurfShark":
                    vpn_surf()
                elif conteudo == "BetterNet":
                    vpn_better()
                elif conteudo == "NordVPN":
                    vpn_nord()
                elif conteudo == "HotspotShield":
                    vpn_hotspotshield()
                else:
                    window['output'].print(
                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                    window.Refresh()
                break

    options = Options()
    prefs = {"profile.managed_default_content_settings.images": 2}
    options.page_load_strategy = 'none'
    options.add_experimental_option("prefs", prefs)

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    window.Refresh()

    console = Console()

    device = [
        {'name': 'Bluestacks1', 'port': porta, 'udid': f'{porta}'},
    ]
    comando = f"adb connect {porta}"
    subprocess.run(comando, stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, check=True, shell=True)
    subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server.test', stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server', stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global transition_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass
    gerar_id()
    android_id = gerar_id()
    subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    time.sleep(2)
    # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True, stdout=subprocess.DEVNULL,
    #               stderr=subprocess.DEVNULL)
    window.Refresh()

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.\n')
    window.Refresh()
    cont = True
    while cont is True:
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        window['output'].print(linha_ret)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo Instagram')

        scope = ["https://spreadsheets.google.com/feeds",
                 "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name(
            'credentials.json', scope)
        client = gspread.authorize(creds)

        spreadsheet_id = config['spreadsheet']
        sheet_name = 'contas'
        # Insert user, password, and timestamp into first empty row
        sheet = client.open_by_key(spreadsheet_id).worksheet(sheet_name)
        values = sheet.col_values(1)

        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
        rows = sheet.get_all_values()

        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
        regex = re.compile(r'\S+\s\S+')

        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
        num_rows = sum(1 for row in rows if regex.match(row[0]))
        window['total'].update(num_rows)
        try:
            subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
            subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server.test',
                           stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)
            subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, shell=True)
        except:
            pass
        window.Refresh()
        # try:
        #    subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
        #                   stderr=subprocess.DEVNULL, check=True, shell=True)
        # except:
        #    pass
        with open("storage/apk/caminho.txt", "r") as arquivo:
            appinsta = arquivo.read().strip()
        try:
            time.sleep(10)
            quantidade = 0
            desired_caps = {}
            desired_caps['udid'] = '127.0.0.1:' + porta
            desired_caps['newCommandTimeout'] = '500'
            desired_caps['platformName'] = 'Android'
            desired_caps['automationName'] = 'UiAutomator2'
            # desired_caps['app'] = appinsta
            # desired_caps['appPackage'] = 'com.instagram.lite'
            # desired_caps['appActivity'] = 'com.facebook.lite.MainActivity'
            desired_caps['systemPort'] = random.randint(1024, 65535)
            desired_caps['noReset'] = True

            driver = webdriver.Remote(
                'http://localhost:4723/wd/hub', desired_caps)
            driver.activate_app('com.instagram.lite')
            gerar_id()
            android_id = gerar_id()
            # subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
            #               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)
            time.sleep(5)
            # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True,
            #               stdout=subprocess.DEVNULL,
            #               stderr=subprocess.DEVNULL)
            error = driver.find_elements(By.XPATH,
                                         '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup')
            if len(error) == 1:
                time.sleep(2)
                driver.find_element(By.XPATH,
                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup').click()
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Erro fechado.')
                error = driver.find_elements(By.XPATH,
                                             '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup')
                while len(error) == 1:
                    driver.find_element(By.XPATH,
                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup').click()
                    error = driver.find_elements(By.XPATH,
                                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup')

                window.Refresh()
            try:
                time.sleep(3)
                cookies = driver.find_elements(
                    By.ID, 'com.android.packageinstaller:id/permission_deny_button')
                if len(cookies) == 1:
                    WebDriverWait(driver, 10).until(EC.visibility_of_element_located(
                        (By.ID, 'com.android.packageinstaller:id/permission_deny_button'))).click()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Pop-up fechado.')
                    window.Refresh()
                    time.sleep(1)
                firts_reg()

            except Exception as e:
                print(e)
                sms = True
                comando = f"adb connect {porta}"
                subprocess.run(comando, stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
                subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server.test',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, shell=True)
                subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, shell=True)
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Erro não catalogado.')
                window.Refresh()
                conteudo = config['vpn']

                # Executa a função correspondente ao conteúdo do arquivo
                if conteudo == "AVG":
                    vpn_avg()
                elif conteudo == "SurfShark":
                    vpn_surf()
                elif conteudo == "Avast":
                    vpn_avast()
                elif conteudo == "PiaVPN":
                    vpn_pia()
                elif conteudo == "TunnelBear":
                    vpn_tunnelbear()
                elif conteudo == "ExpressVPN":
                    vpn_express()
                elif conteudo == "BetterNet":
                    vpn_better()
                elif conteudo == "NordVPN":
                    vpn_nord()
                elif conteudo == "CyberGhost":
                    vpn_cyberghost()
                elif conteudo == "HotspotShield":
                    vpn_hotspotshield()
                else:
                    window['output'].print(
                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                    window.Refresh()
                continue

            try:
                WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH,
                                                                                  '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]/android.view.View')))
            except:
                continue

            while sms is False:
                try:
                    pular_erro = driver.find_elements(By.XPATH,
                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]')
                    if len(pular_erro) == 0:
                        try:
                            driver.find_elements(By.XPATH,
                                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]').click()
                        except:
                            sms = True
                            continue
                    window['output'].print(linha_ret)
                    window.Refresh()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Criação de outro perfil.')
                    window.Refresh()
                    # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True)
                    # Clicar no botão de perfil
                    try:
                        time.sleep(3)
                        WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                                   '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[11]')))
                        time.sleep(2)
                        WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                                   '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[11]'))).click()

                    except:
                        time.sleep(3)
                        WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                                   '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')))
                        time.sleep(2)
                        WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                                   '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]'))).click()

                        # Clicar em perfis
                    try:
                        WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH,
                                                                                          '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()
                    except:
                        WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH,
                                                                                          '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup[1]/android.view.View'))).click()
                    # Clicar em adicionar conta
                    WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[2]'))).click()
                    # Clicar em criar nova conta
                    time.sleep(3)
                    WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[3]'))).click()
                    # Gerar nome de usuário, digitar no campo e clicar em avançae
                    lista_user = random.choices(range(0, 9), k=2)
                    lista_letras = random.choices(letras, k=1)

                    with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                        nomes = nomes_arquivo.readlines()

                    with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                        sobrenomes = sobrenomes_arquivo.readlines()

                    nomea = fake.first_name_male().replace(" ", "")
                    nome = unicodedata.normalize('NFKD', nomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    sobrenomea = fake.last_name().replace(" ", "").lower()
                    sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                        'ASCII', 'ignore').decode('ASCII')

                    nome_completo = nome + sobrenome
                    numeros_concatenados = ''.join(
                        str(numero) for numero in lista_user)
                    user_completo = nome_completo + '' + \
                        str(numeros_concatenados) + ''.join(lista_letras)

                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: ' + user_completo)
                    window.Refresh()
                    WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView'))).send_keys(
                        user_completo)
                    time.sleep(1)
                    WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()
                    # Digitar senha e avançar
                    time.sleep(3)
                    WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView'))).send_keys(
                        senha)
                    WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[3]'))).click()
                    # Clicar em adicionar email
                    time.sleep(1)
                    WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View')))
                    time.sleep(2)
                    WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View'))).click()
                    # Clicar em email, gerar e avançar

                    time.sleep(5)
                    gerar_email()
                    WebDriverWait(driver, 60).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]')))
                    time.sleep(10)
                    WebDriverWait(driver, 60).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()

                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
                    window.Refresh()
                    # WebDriverWait(driver, 40).until(EC.visibility_of_element_located)(((By.XPATH,
                    #                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')))
                    time.sleep(10)
                    verificar = driver.find_elements(By.XPATH,
                                                     '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')

                    conta_criada = driver.find_elements(By.XPATH,
                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]')
                    conta_sms = driver.find_elements(By.XPATH,
                                                     '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.View[4]')
                    if len(verificar) == 1:
                        try:
                            WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                                       '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[11]'))).click()
                        except:
                            pass
                        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                               text_color=('lime'))
                        contagem += 1
                        window['criadas'].update(contagem)
                        window.Refresh()
                        window.Refresh()
                        now = datetime.now()
                        now_brasilia = tz.localize(now)
                        timestamp = now_brasilia.strftime("%d/%m/%Y %H:%M:%S")

                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                            'credentials.json', scope)
                        client = gspread.authorize(creds)

                        spreadsheet_id = config['spreadsheet']
                        sheet_name = 'contas'
                        # Insert user, password, and timestamp into first empty row
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)
                        values = sheet.col_values(1)
                        last_row = len(values)
                        values = [user_completo + ' ' + senha,
                                  email, timestamp, maquina, conteudo]
                        cell_list = sheet.range(
                            f'A{last_row + 1}:G{last_row + 1}')
                        for i, val in enumerate(values):
                            cell_list[i].value = val
                        sheet.update_cells(cell_list)

                        rows = sheet.get_all_values()

                        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                        regex = re.compile(r'\S+\s\S+')

                        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                        num_rows = sum(
                            1 for row in rows if regex.match(row[0]))
                        window['total'].update(num_rows)

                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_dict(
                            funcionamento, scope)
                        client = gspread.authorize(creds)

                        spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                        sheet_name = 'relatorio_geral'
                        # Insert user, password, and timestamp into first empty row
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)
                        values = sheet.col_values(1)
                        last_row = len(values)
                        values = [user_completo + ' ' + senha,
                                  email, timestamp, maquina, conteudo]
                        cell_list = sheet.range(
                            f'A{last_row + 1}:G{last_row + 1}')
                        for i, val in enumerate(values):
                            cell_list[i].value = val
                        sheet.update_cells(cell_list)

                        window.Refresh()
                        arquivo = open(
                            'configuracoes/contas/contas_criadas.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(user_completo + ' ' + senha + "\n")
                        arquivo = open(
                            'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(
                            email + '\n' + user_completo + '\n' + senha + "\n\n")
                        time.sleep(4)
                        arquivo = open(
                            'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                        arquivo.write(
                            email + '\n' + user_completo + '\n' + senha + "\n\n")
                        WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]'))).click()
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando perfil para publico.')
                        window.Refresh()

                        # Clicar nas 3 barras
                        try:
                            WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                                       '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[2]/android.view.ViewGroup[5]'))).click()
                        except:
                            WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                                       '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup[5]'))).click()

                        time.sleep(0.5)

                        # Clicar em configurações
                        WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.View'))).click()
                        time.sleep(0.5)
                        # Clicar em privacidade
                        try:
                            WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                                       '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup[7]/android.view.ViewGroup/android.view.View'))).click()
                        except:
                            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[5]/android.view.ViewGroup/android.view.ViewGroup/android.view.View'))).click()
                        time.sleep(2)
                        # Clicar em privacidade da conta
                        try:
                            WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                                       '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[11]/android.view.ViewGroup/android.view.ViewGroup/android.view.View'))).click()
                        except:
                            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup[10]/android.view.ViewGroup/android.view.View'))).click()
                        time.sleep(0.5)
                        # Clicar no botão
                        WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[3]/android.view.ViewGroup'))).click()
                        time.sleep(0.5)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Alterado para publico.')
                        window.Refresh()
                        time.sleep(0.5)
                        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_BACK',
                                       stdout=subprocess.DEVNULL,
                                       stderr=subprocess.DEVNULL, check=True, shell=True)
                        time.sleep(0.5)
                        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_BACK',
                                       stdout=subprocess.DEVNULL,
                                       stderr=subprocess.DEVNULL, check=True, shell=True)
                        time.sleep(0.5)
                        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_BACK',
                                       stdout=subprocess.DEVNULL,
                                       stderr=subprocess.DEVNULL, check=True, shell=True)
                        time.sleep(0.5)

                        sms = False

                    else:
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                                break
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()

                        except:
                            sms = True
                except:
                    sms = True
        except Exception as e:
            logger.error('Ocorreu um erro: %s', e)
            subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
            subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server.test',
                           stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)
            subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, shell=True)
            comando = f"adb connect {porta}"
            subprocess.run(comando, stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
            subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server.test',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, shell=True)
            subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, shell=True)
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Erro não catalogado.')
            print(e)
            # window['output'].print(e)
            window.Refresh()


def executar_minuteinbox():
    SPREADSHEET_ID = config['spreadsheet']
    conteudo = config['vpn']
    senha = gerar_senha(12)
    maquina = config['maquina']
    from minuteinbox import Inbox
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    # Código que gera a saída
    import os
    import time
    import requests
    import hashlib
    import subprocess

    # verifica se o arquivo existe na pasta do bot

    try:
        from rich.console import Console
    except ModuleNotFoundError:
        import subprocess
        import sys

        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['pip', 'install', '-r', 'requirements.txt'])
        subprocess.run(['deactivate'], shell=True)
        from rich.console import Console
    import os
    import time
    import requests
    import hashlib
    import subprocess
    from colorama import init, Fore, Back, Style
    from faker import Faker
    # teste
    init(autoreset=True)
    console = Console()
    from termcolor import colored

    from rich.console import Console
    from rich.panel import Panel
    from rich.text import Text
    from rich.rule import Rule

    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random
    from datetime import datetime
    import string
    from appium import webdriver
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import NoSuchElementException
    import re
    import logging

    logger = logging.getLogger(__name__)

    handler = logging.FileHandler('log.txt')
    handler.setLevel(logging.ERROR)

    logger.addHandler(handler)

    # RANGE_NAME = 'contas!A:D'
    #
    # SCOPES = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

    def vpn_avast():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] SMS\nAlterando IP da Avast', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        sms = True
        try:
            driver.start_activity("com.avast.android.vpn",
                                  ".app.wizard.WizardActivity")
            time.sleep(10)
        except Exception as e:
            print(e)

        abc = False

    def vpn_hotspotshield():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] SMS\nAlterando IP da HotspotShield',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        sms = True
        try:
            driver.start_activity(
                "hotspotshield.android.vpn", "com.anchorfree.hotspotshield.ui.HssActivity")
        except Exception as e:
            print(e)
        WebDriverWait(driver, 20).until(
            EC.element_to_be_clickable((By.ID, 'hotspotshield.android.vpn:id/tryAgainButton'))).click()
        time.sleep(5)
        WebDriverWait(driver, 20).until(
            EC.element_to_be_clickable((By.ID, 'hotspotshield.android.vpn:id/btnVpnConnect'))).click()

        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_pia():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] SMS\nAlterando IP da PiaVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        sms = True
        try:
            driver.start_activity(
                "com.privateinternetaccess.android", ".ui.LauncherActivity")
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.ID, 'com.privateinternetaccess.android:id/connection_background'))).click()
        time.sleep(3)
        WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.ID, 'com.privateinternetaccess.android:id/connection_background'))).click()

        abc = False

    def vpn_express():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] SMS\nAlterando IP da ExpressVPN',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        sms = True
        try:
            driver.start_activity("com.expressvpn.vpn", ".ui.SplashActivity")
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.ID, 'com.expressvpn.vpn:id/obiButton'))).click()
        time.sleep(3)
        WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.ID, 'com.expressvpn.vpn:id/obiButton'))).click()

        abc = False

    def vpn_nord():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] SMS\nAlterando IP da NordVPN',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        sms = True
        try:
            driver.start_activity("com.nordvpn.android", ".MainActivity")
        except:
            pass
        time.sleep(10)
        # try:
        #    WebDriverWait(driver, 10).until(
        #        EC.element_to_be_clickable((By.ID, 'com.nordvpn.android:id/reconnect_button'))).click()
        # except:
        #    pass
        # try:
        #    WebDriverWait(driver, 10).until(
        #        EC.element_to_be_clickable((By.ID, 'com.nordvpn.android:id/secondary_quick_connect_button'))).click()
        # except:
        #    pass
        WebDriverWait(driver, 30).until(
            EC.element_to_be_clickable((By.ID, 'com.nordvpn.android:id/primary_quick_connect_button'))).click()
        time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_surf():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            driver.start_activity(
                "com.surfshark.vpnclient.android", ".StartActivity")
        except:
            pass
        time.sleep(3)
        WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, 'com.avg.android.vpn:id/view_switch'))).click()
        time.sleep(3)
        WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, 'com.avg.android.vpn:id/view_switch'))).click()
        time.sleep(5)
        WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, 'com.avg.android.vpn:id/view_switch'))).click()
        time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_better():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] SMS\nAlterando IP da BetterNet',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        try:
            driver.start_activity(
                "com.freevpnintouch", "com.anchorfree.betternet.ui.BetternetActivity")
        except:
            pass
        time.sleep(10)
        dialog = driver.find_elements(
            By.ID, 'com.freevpnintouch:id/dialogCtaPositive')
        connect = driver.find_element(
            By.ID, 'com.freevpnintouch:id/buttonConnect').text
        if len(dialog) == 1:
            WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/dialogCtaPositive'))).click()
            time.sleep(3)
            WebDriverWait(driver, 20).until(
                EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect'))).click()
            # time.sleep(5)
            WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect'))).click()
        while connect == 'CONNECT':
            WebDriverWait(driver, 20).until(
                EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect'))).click()
            time.sleep(4)
            connect = driver.find_element(
                By.ID, 'com.freevpnintouch:id/buttonConnect').text
            # WebDriverWait(driver, 20).until(
            # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect'))).click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        ip = '127.0.0.1:' + porta

        output = subprocess.check_output(
            ['adb', '-s', ip, 'shell', 'ifconfig'])

        # Verifica se a conexão VPN está ativa
        if not "tun0" in str(output):
            window['output'].print("Não conectado na BetterNet.")
            window.Refresh()
            try:
                connect = driver.find_element(
                    By.ID, 'com.freevpnintouch:id/buttonConnect').text
                driver.start_activity(
                    "com.freevpnintouch", "com.anchorfree.betternet.ui.BetternetActivity")
                while connect == 'CONNECT':
                    WebDriverWait(driver, 20).until(
                        EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect'))).click()
                    time.sleep(4)
                    connect = driver.find_element(
                        By.ID, 'com.freevpnintouch:id/buttonConnect').text
            except:
                pass
        abc = False

    def vpn_cyberghost():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] SMS\nAlterando IP da CyberGhost',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        try:
            driver.start_activity(
                "de.mobileconcepts.cyberghost", ".view.app.AppActivity filter")
        except:
            pass
        # time.sleep(3)
        WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, 'de.mobileconcepts.cyberghost:id/button'))).click()
        rate = driver.find_elements(
            By.ID, 'de.mobileconcepts.cyberghost:id/rate_me_text')
        if len(rate) == 1:
            WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.ID, 'android:id/button2'))).click()
        time.sleep(2)
        WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, 'de.mobileconcepts.cyberghost:id/button'))).click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        abc = False

    def vpn_tunnelbear():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.tunnelbear.android')
            d.app_start("com.tunnelbear.android")
            while True:
                output = subprocess.check_output(
                    ['adb', '-s', porta, 'shell', 'ifconfig'])
                # print(str(output))
                if "tun0" in str(output):
                    print('Conectada')
                    break
                elif not "tun0" in str(output):
                    print('Reconectando')
                    try:
                        d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                        time.sleep(10)
                    except:
                        pass
        except Exception as e:
            print(e)
            pass

    def vpn_avg():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] SMS\nAlterando IP da AVG', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        sms = True
        try:
            driver.start_activity(
                "com.avg.android.vpn", "com.avast.android.vpn.app.wizard.WizardActivity")
        except:
            pass
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        # time.sleep(10)
        WebDriverWait(driver, 1).until(
            EC.element_to_be_clickable((By.ID, 'com.avg.android.vpn:id/view_switch'))).click()
        # time.sleep(10)
        WebDriverWait(driver, 1).until(
            EC.element_to_be_clickable((By.ID, 'com.avg.android.vpn:id/view_switch'))).click()
        # time.sleep(5)
        # WebDriverWait(driver, 30).until(
        #    EC.element_to_be_clickable((By.ID, 'com.avg.android.vpn:id/view_switch'))).click()
        # time.sleep(5)

        abc = False

    def gerar_email():
        global lista_user
        global sms
        global nome
        global sobrenome
        global email
        lista_user = random.choices(range(0, 9), k=2)
        lista_letras = random.choices(letras, k=1)

        with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
            nomes = nomes_arquivo.readlines()

        with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
            sobrenomes = sobrenomes_arquivo.readlines()

        nomea = fake.first_name_male().replace(" ", "")
        nome = unicodedata.normalize('NFKD', nomea).encode(
            'ASCII', 'ignore').decode('ASCII')
        sobrenomea = fake.last_name().replace(" ", "").lower()
        sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
            'ASCII', 'ignore').decode('ASCII')

        nome_completo = nome + ' ' + sobrenome
        nome_completo_s = nome + sobrenome
        numeros_concatenados = ''.join(str(numero) for numero in lista_user)
        user_completo = nome_completo_s + '' + \
            str(numeros_concatenados) + ''.join(lista_letras)

        inbox = Inbox(
            address="",
            token="",
        )

        time.sleep(2)
        num = driver.find_elements(By.XPATH,
                                   '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[3]/android.view.View')

        while len(num) == 1:
            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()
            time.sleep(2)
            num = driver.find_elements(By.XPATH,
                                       '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[3]/android.view.View')
            subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_BACK', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
            try:
                WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                           '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View'))).click()
                time.sleep(5)
                WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                           '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()
                time.sleep(3)
            except Exception as e:
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Erro.')
                window.Refresh()

        email = inbox.address
        window['output'].print("Email: " + email)
        window.Refresh()
        time.sleep(2)
        WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                          '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView'))).send_keys(
            email)
        time.sleep(2)
        WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                          '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[4]'))).click()
        # driver.find_element(By.XPATH,
        #                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[4]').click()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando codigo...')
        window.Refresh()
        subject = False
        while subject == False:
            for mail in inbox.mails:
                cod = mail.subject
                if 'code' in cod:
                    codigo = re.search(r'\d+', cod).group(0)
                    subject = True
                    time.sleep(1)
        window['output'].print(f"Codigo recebido: {codigo}")
        window.Refresh()
        try:
            WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH,
                                                                              '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView'))).send_keys(
                codigo)
        except:
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Instagram fechou')
            window.Refresh()
        time.sleep(2)
        try:
            WebDriverWait(driver, 5).until(EC.visibility_of_element_located((By.XPATH,
                                                                             '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[4]'))).click()
        except:
            WebDriverWait(driver, 5).until(EC.visibility_of_element_located((By.XPATH,
                                                                             '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[3]'))).click()
        try:
            WebDriverWait(driver, 20).until(EC.visibility_of_element_located((By.XPATH,
                                                                              '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View')))
        except:
            pass
        # time.sleep(3)
        # codigo_invalido = driver.find_elements(By.XPATH,
        #                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.View[5]')
        # continua_na_tela = driver.find_elements(By.XPATH,
        #                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[4]/android.view.View')
        # continua_na_tela2 = driver.find_elements(By.XPATH,
        #                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[3]/android.view.View')
        # criou = driver.find_elements(By.XPATH,
        #                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View')
        # time.sleep(25)
        # if len(codigo_invalido) == 1:
        # driver.find_element(By.XPATH,
        #                     '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup').click()
        # time.sleep(2)
        # driver.find_element(By.XPATH,
        #                     '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView').clear()
        # driver.find_element(By.XPATH,
        #                     '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[1]').click()
        # codigo = None
        # try:
        #     test.start(listener, interval=5)
        #     codigo = 0
        #     while codigo != 20:
        #         time.sleep(1.5)
        #         codigo = codigo + 1
        #     codigo = cod
        # except Exception as e:
        #     if "Too Many Requests" in str(e):
        #         pass
        #     else:
        #         window['output'].print(e)
        #         window.Refresh()
        # window['output'].print(f"Codigo recebido: {codigo}")
        # window.Refresh()
        # WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH,
        #                                                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView'))).send_keys(
        #     codigo)
        # try:
        #     WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
        #                                                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup[2]/android.view.View')))
        # except:
        #     pass
        # try:
        #     WebDriverWait(driver, 15).until(EC.element_to_be_clickable((By.XPATH,
        #                                                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[4]'))).click()
        #     try:
        #         WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
        #                                                                     '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup[2]/android.view.View')))
        #     except:
        #         pass
        # except:
        #     WebDriverWait(driver, 15).until(EC.element_to_be_clickable((By.XPATH,
        #                                                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[3]'))).click()
        #     try:
        #         WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
        #                                                                     '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup[2]/android.view.View')))
        #     except:
        #         pass
        # test.stop()
        # time.sleep(3)
        # WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
        #                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup')))
        # reenv_cod = driver.find_elements(By.XPATH,
        #                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup')
        # if len(reenv_cod) == 1:
        #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Enviando um novo codigo.')
        #    window.Refresh()
        #    driver.find_element(By.XPATH,
        #                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup').click()
        #    time.sleep(2)
        #    driver.find_element(By.XPATH,
        #                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView').clear()
        #    driver.find_element(By.XPATH,
        #                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[1]').click()

    def gerar_email_firts_reg():
        global cod
        global email
        global lista_user
        global fake
        global nome
        global sobrenome
        global nomes
        global sobrenomes
        global nome_completo
        global nome_completo_s
        global numeros_concatenados
        global user_completo
        lista_user = random.choices(range(0, 9), k=2)
        lista_letras = random.choices(letras, k=1)

        with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
            nomes = nomes_arquivo.readlines()

        with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
            sobrenomes = sobrenomes_arquivo.readlines()

        nomea = fake.first_name_male().replace(" ", "")
        nome = unicodedata.normalize('NFKD', nomea).encode(
            'ASCII', 'ignore').decode('ASCII')
        sobrenomea = fake.last_name().replace(" ", "").lower()
        sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
            'ASCII', 'ignore').decode('ASCII')
        nome_completo = nome + ' ' + sobrenome
        nome_completo_s = nome + sobrenome
        numeros_concatenados = ''.join(str(numero) for numero in lista_user)
        user_completo = nome_completo_s + '' + \
            str(numeros_concatenados) + ''.join(lista_letras)
        try:
            inbox = Inbox(
                address="",
                token="",
            )
            email = inbox.address
            window['output'].print("Email: " + email)
            window.Refresh()
        except Exception as e:
            print(e)
        time.sleep(2)
        WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                          '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView'))).send_keys(
            email)
        time.sleep(2)
        WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                          '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[4]'))).click()

        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando codigo...')
        window.Refresh()
        subject = False
        while subject == False:
            for mail in inbox.mails:
                cod = mail.subject
                if 'code' in cod:
                    codigo = re.search(r'\d+', cod).group(0)
                    subject = True
                    time.sleep(1)
        window['output'].print(f"Codigo recebido: {codigo}")
        window.Refresh()
        try:
            WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH,
                                                                              '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView'))).send_keys(
                codigo)
            time.sleep(2)
        except:
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Erro encontrado.')
            window.Refresh()
            time.sleep(5)
        time.sleep(2)
        try:
            WebDriverWait(driver, 5).until(EC.visibility_of_element_located((By.XPATH,
                                                                             '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[4]'))).click()
        except:
            WebDriverWait(driver, 5).until(EC.visibility_of_element_located((By.XPATH,
                                                                             '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[3]'))).click()

        time.sleep(5)

        WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH,
                                                                          '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.View[8]')))
        return nome_completo

    def gerar_id():
        chars = string.ascii_lowercase + string.digits
        android_id = ''.join(random.choice(chars) for i in range(16))
        return android_id

    def firts_reg():
        global nome
        global sobrenome
        abc = True
        while abc:
            global sms
            sms = True
            # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True)

            try:
                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View'))).click()
                time.sleep(5)
                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()
                time.sleep(3)
                error = driver.find_elements(By.XPATH,
                                             '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup')
                if len(error) == 1:
                    time.sleep(2)
                    driver.find_element(By.XPATH,
                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup').click()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Erro fechado.')
                    error = driver.find_elements(By.XPATH,
                                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup')
                    while len(error) == 1:
                        driver.find_element(By.XPATH,
                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup').click()
                        error = driver.find_elements(By.XPATH,
                                                     '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup')
                    try:
                        WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View'))).click()
                        time.sleep(5)
                        WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()
                        time.sleep(3)
                    except:
                        pass

                    window.Refresh()
                gerar_email_firts_reg()
            except Exception as e:
                comando = f"adb connect {porta}"
                subprocess.run(comando, stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
                subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server.test',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, shell=True)
                subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, shell=True)

                window.Refresh()
                break
            nome_completo = nome + ' ' + sobrenome
            nome_completo_s = nome + sobrenome
            numeros_concatenados = ''.join(str(numero)
                                           for numero in lista_user)
            user_completo = nome_completo_s + '' + \
                str(numeros_concatenados) + ''.join(lista_letras)
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Nome escolhido: ' + nome_completo)
            window.Refresh()
            try:
                WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                                  '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView[1]'))).send_keys(
                    nome_completo)
            except:
                cont = False
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Erro encontrado.')
                window.Refresh()
                pass
            WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                              '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView[2]'))).send_keys(
                senha)
            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[5]/android.view.View'))).click()
            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View'))).click()
            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup'))).click()
            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.View[6]'))).click()
            idade_aleatoria = random.randint(18, 35)
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
            window.Refresh()
            WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                              '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView'))).send_keys(
                idade_aleatoria)
            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()
            op2 = driver.find_elements(By.XPATH,
                                       '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[7]/android.view.View')
            op1 = driver.find_elements(By.XPATH,
                                       '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View')
            time.sleep(5)
            try:
                if len(op1) == 0:
                    try:
                        driver.find_element(By.XPATH,
                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[7]/android.view.View').click()
                    except:
                        driver.find_element(By.XPATH,
                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[6]/android.view.View').click()
            except:
                try:
                    driver.find_element(By.XPATH,
                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View').click()

                except:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Erro ao criar')
                    window.Refresh()
                    sms = True
                    continue

            try:
                time.sleep(1)
                WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH,
                                                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[1]'))).click()
                time.sleep(3)
                WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                                  '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView'))).send_keys(
                    user_completo)
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                window.Refresh()
                time.sleep(3)
                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()
                time.sleep(5)
                erro_2 = driver.find_elements(By.XPATH,
                                              '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.webkit.WebView/android.webkit.WebView/android.view.View/android.view.View/android.view.View/android.view.View/android.view.View[*]/android.view.View[*]/android.widget.Button')
                erro_1 = driver.find_elements(By.XPATH,
                                              '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup')
                if len(erro_2) == 1:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Tentando gerar novamente')
                    window.Refresh()
                    time.sleep(5)
                    WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[1]/android.view.ViewGroup[1]'))).click()
                    WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup[2]'))).click()
                    time.sleep(3)
                if len(erro_1) == 1:
                    WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()
                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup[2]/android.view.View')))
                time.sleep(4)
                WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup[2]/android.view.View'))).click()

            except:
                WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH,
                                                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View'))).click()
            WebDriverWait(driver, 60).until(EC.element_to_be_clickable((By.XPATH,
                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]')))
            time.sleep(10)
            WebDriverWait(driver, 60).until(EC.element_to_be_clickable((By.XPATH,
                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()
            time.sleep(5)
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
            window.Refresh()
            time.sleep(10)
            verificar = driver.find_elements(By.XPATH,
                                             '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')
            # time.sleep(10)

            conta_criada = driver.find_elements(By.XPATH,
                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]')
            conta_sms = driver.find_elements(By.XPATH,
                                             '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.View[4]')

            try:
                if len(verificar) == 1:
                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                           text_color=('lime'))
                    contagem += 1
                    window['criadas'].update(contagem)
                    window.Refresh()
                    window.Refresh()
                    now = datetime.now()
                    now_brasilia = tz.localize(now)
                    timestamp = now_brasilia.strftime("%d/%m/%Y %H:%M:%S")

                    scope = ["https://spreadsheets.google.com/feeds",
                             "https://www.googleapis.com/auth/drive"]
                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                        'credentials.json', scope)
                    client = gspread.authorize(creds)

                    spreadsheet_id = config['spreadsheet']
                    sheet_name = 'contas'
                    # Insert user, password, and timestamp into first empty row
                    sheet = client.open_by_key(
                        spreadsheet_id).worksheet(sheet_name)
                    values = sheet.col_values(1)
                    last_row = len(values)
                    values = [user_completo + ' ' + senha,
                              email, timestamp, maquina, conteudo]
                    cell_list = sheet.range(f'A{last_row + 1}:G{last_row + 1}')
                    for i, val in enumerate(values):
                        cell_list[i].value = val
                    sheet.update_cells(cell_list)

                    rows = sheet.get_all_values()

                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                    regex = re.compile(r'\S+\s\S+')

                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                    num_rows = sum(1 for row in rows if regex.match(row[0]))
                    window['total'].update(num_rows)

                    scope = ["https://spreadsheets.google.com/feeds",
                             "https://www.googleapis.com/auth/drive"]
                    creds = ServiceAccountCredentials.from_json_keyfile_dict(
                        funcionamento, scope)
                    client = gspread.authorize(creds)

                    spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                    sheet_name = 'relatorio_geral'
                    # Insert user, password, and timestamp into first empty row
                    sheet = client.open_by_key(
                        spreadsheet_id).worksheet(sheet_name)
                    values = sheet.col_values(1)
                    last_row = len(values)
                    values = [user_completo + ' ' + senha,
                              email, timestamp, maquina, conteudo]
                    cell_list = sheet.range(f'A{last_row + 1}:G{last_row + 1}')
                    for i, val in enumerate(values):
                        cell_list[i].value = val
                    sheet.update_cells(cell_list)

                    window.Refresh()
                    arquivo = open(
                        'configuracoes/contas/contas_criadas.txt', 'a')
                    # Escreva mais conteúdo no arquivo
                    arquivo.write(user_completo + ' ' + senha + "\n")
                    arquivo = open(
                        'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                    # Escreva mais conteúdo no arquivo
                    arquivo.write(email + '\n' + user_completo +
                                  '\n' + senha + "\n\n")
                    WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH,
                                                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]/android.view.View'))).click()

                    sms = False
                    break
                else:
                    conteudo = config['vpn']
                    # Executa a função correspondente ao conteúdo do arquivo
                    if conteudo == "AVG":
                        vpn_avg()
                    elif conteudo == "Avast":
                        vpn_avast()
                    elif conteudo == "CyberGhost":
                        vpn_cyberghost()
                    elif conteudo == "PiaVPN":
                        vpn_pia()
                    elif conteudo == "TunnelBear":
                        vpn_tunnelbear()
                    elif conteudo == "ExpressVPN":
                        vpn_express()
                    elif conteudo == "SurfShark":
                        vpn_surf()
                    elif conteudo == "BetterNet":
                        vpn_better()
                    elif conteudo == "NordVPN":
                        vpn_nord()
                    elif conteudo == "HotspotShield":
                        vpn_hotspotshield()
                    else:
                        window['output'].print(
                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                        window.Refresh()

            except:
                sms = True
                break

    options = Options()
    prefs = {"profile.managed_default_content_settings.images": 2}
    options.page_load_strategy = 'none'
    options.add_experimental_option("prefs", prefs)

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    window.Refresh()

    console = Console()

    device = [
        {'name': 'Bluestacks1', 'port': porta, 'udid': f'{porta}'},
    ]
    comando = f"adb connect {porta}"
    subprocess.run(comando, stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, check=True, shell=True)
    subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server.test', stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server', stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global transition_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass
    gerar_id()
    android_id = gerar_id()
    subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    time.sleep(2)
    # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True, stdout=subprocess.DEVNULL,
    #               stderr=subprocess.DEVNULL)
    window.Refresh()
    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.\n')
    window.Refresh()
    cont = True
    while cont is True:
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        window['output'].print(linha_ret)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo Instagram')

        scope = ["https://spreadsheets.google.com/feeds",
                 "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name(
            'credentials.json', scope)
        client = gspread.authorize(creds)

        spreadsheet_id = config['spreadsheet']
        sheet_name = 'contas'
        # Insert user, password, and timestamp into first empty row
        sheet = client.open_by_key(spreadsheet_id).worksheet(sheet_name)
        values = sheet.col_values(1)

        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
        rows = sheet.get_all_values()

        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
        regex = re.compile(r'\S+\s\S+')

        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
        num_rows = sum(1 for row in rows if regex.match(row[0]))
        window['total'].update(num_rows)

        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server.test',
                       stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        window.Refresh()
        # try:
        #    subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
        #                   stderr=subprocess.DEVNULL, check=True, shell=True)
        # except:
        #    pass
        with open("storage/apk/caminho.txt", "r") as arquivo:
            appinsta = arquivo.read().strip()
        try:
            time.sleep(10)
            quantidade = 0
            desired_caps = {}
            desired_caps['udid'] = '127.0.0.1:' + porta
            desired_caps['newCommandTimeout'] = '500'
            desired_caps['platformName'] = 'Android'
            desired_caps['automationName'] = 'UiAutomator2'
            # desired_caps['appPackage'] = 'com.instagram.lite'
            # desired_caps['appActivity'] = 'com.facebook.lite.MainActivity'
            desired_caps['systemPort'] = random.randint(1024, 65535)
            desired_caps['noReset'] = True
            # desired_caps['app'] = appinsta

            driver = webdriver.Remote(
                'http://localhost:4723/wd/hub', desired_caps)
            driver.activate_app('com.instagram.lite')
            gerar_id()
            android_id = gerar_id()
            # subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
            #               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)
            time.sleep(5)
            # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True,
            #               stdout=subprocess.DEVNULL,
            #               stderr=subprocess.DEVNULL)
            error = driver.find_elements(By.XPATH,
                                         '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup')
            if len(error) == 1:
                time.sleep(2)
                driver.find_element(By.XPATH,
                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup').click()
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Erro fechado.')
                error = driver.find_elements(By.XPATH,
                                             '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup')
                while len(error) == 1:
                    driver.find_element(By.XPATH,
                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup').click()
                    error = driver.find_elements(By.XPATH,
                                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup')

                window.Refresh()
            try:
                time.sleep(3)
                cookies = driver.find_elements(
                    By.ID, 'com.android.packageinstaller:id/permission_deny_button')
                if len(cookies) == 1:
                    WebDriverWait(driver, 10).until(EC.visibility_of_element_located(
                        (By.ID, 'com.android.packageinstaller:id/permission_deny_button'))).click()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Pop-up fechado.')
                    window.Refresh()
                    time.sleep(1)
                firts_reg()

            except Exception as e:
                print(e)
                sms = True
                comando = f"adb connect {porta}"
                subprocess.run(comando, stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
                subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server.test',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, shell=True)
                subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, shell=True)
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Erro não catalogado.')
                window.Refresh()
                conteudo = config['vpn']

                # Executa a função correspondente ao conteúdo do arquivo
                if conteudo == "AVG":
                    vpn_avg()
                elif conteudo == "SurfShark":
                    vpn_surf()
                elif conteudo == "Avast":
                    vpn_avast()
                elif conteudo == "PiaVPN":
                    vpn_pia()
                elif conteudo == "TunnelBear":
                    vpn_tunnelbear()
                elif conteudo == "ExpressVPN":
                    vpn_express()
                elif conteudo == "BetterNet":
                    vpn_better()
                elif conteudo == "NordVPN":
                    vpn_nord()
                elif conteudo == "CyberGhost":
                    vpn_cyberghost()
                elif conteudo == "HotspotShield":
                    vpn_hotspotshield()
                else:
                    window['output'].print(
                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                    window.Refresh()
                continue

            try:
                WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH,
                                                                                  '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]/android.view.View')))
            except:
                continue

            while sms is False:
                try:
                    pular_erro = driver.find_elements(By.XPATH,
                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]')
                    if len(pular_erro) == 0:
                        try:
                            driver.find_elements(By.XPATH,
                                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]').click()
                        except:
                            sms = True
                            continue
                    window['output'].print(linha_ret)
                    window.Refresh()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Criação de outro perfil.')
                    window.Refresh()
                    # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True)
                    # Clicar no botão de perfil
                    try:
                        time.sleep(3)
                        WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                                   '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[11]')))
                        time.sleep(2)
                        WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                                   '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[11]'))).click()

                    except:
                        time.sleep(3)
                        WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                                   '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')))
                        time.sleep(2)
                        WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                                   '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]'))).click()

                        # Clicar em perfis
                    try:
                        WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH,
                                                                                          '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()
                    except:
                        WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH,
                                                                                          '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup[1]/android.view.View'))).click()
                    # Clicar em adicionar conta
                    WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[2]'))).click()
                    # Clicar em criar nova conta
                    time.sleep(3)
                    WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[3]'))).click()
                    # Gerar nome de usuário, digitar no campo e clicar em avançae
                    lista_user = random.choices(range(0, 9), k=2)
                    lista_letras = random.choices(letras, k=1)

                    with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                        nomes = nomes_arquivo.readlines()

                    with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                        sobrenomes = sobrenomes_arquivo.readlines()

                    nomea = fake.first_name_male().replace(" ", "")
                    nome = unicodedata.normalize('NFKD', nomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    sobrenomea = fake.last_name().replace(" ", "").lower()
                    sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    nome_completo = nome + sobrenome
                    numeros_concatenados = ''.join(
                        str(numero) for numero in lista_user)
                    user_completo = nome_completo + '' + \
                        str(numeros_concatenados) + ''.join(lista_letras)

                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: ' + user_completo)
                    window.Refresh()
                    WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView'))).send_keys(
                        user_completo)
                    time.sleep(1)
                    WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()
                    # Digitar senha e avançar
                    time.sleep(3)
                    WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView'))).send_keys(
                        senha)
                    WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[3]'))).click()
                    # Clicar em adicionar email
                    time.sleep(1)
                    WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View')))
                    time.sleep(2)
                    WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH,
                                                                                      '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View'))).click()
                    # Clicar em email, gerar e avançar

                    time.sleep(5)
                    gerar_email()
                    WebDriverWait(driver, 60).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]')))
                    time.sleep(10)
                    WebDriverWait(driver, 60).until(EC.element_to_be_clickable((By.XPATH,
                                                                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]'))).click()

                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
                    window.Refresh()
                    # WebDriverWait(driver, 40).until(EC.visibility_of_element_located)(((By.XPATH,
                    #                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')))
                    time.sleep(10)
                    verificar = driver.find_elements(By.XPATH,
                                                     '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')

                    conta_criada = driver.find_elements(By.XPATH,
                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]')
                    conta_sms = driver.find_elements(By.XPATH,
                                                     '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.View[4]')
                    if len(verificar) == 1:
                        try:
                            WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                                       '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[11]'))).click()
                        except:
                            pass
                        conteudo = config['vpn']
                        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                               text_color=('lime'))
                        contagem += 1
                        window['criadas'].update(contagem)
                        window.Refresh()
                        window.Refresh()
                        now = datetime.now()
                        now_brasilia = tz.localize(now)
                        timestamp = now_brasilia.strftime("%d/%m/%Y %H:%M:%S")

                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                            'credentials.json', scope)
                        client = gspread.authorize(creds)

                        spreadsheet_id = config['spreadsheet']
                        sheet_name = 'contas'
                        # Insert user, password, and timestamp into first empty row
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)
                        values = sheet.col_values(1)
                        last_row = len(values)
                        values = [user_completo + ' ' + senha,
                                  email, timestamp, maquina, conteudo]
                        cell_list = sheet.range(
                            f'A{last_row + 1}:G{last_row + 1}')
                        for i, val in enumerate(values):
                            cell_list[i].value = val
                        sheet.update_cells(cell_list)

                        rows = sheet.get_all_values()

                        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                        regex = re.compile(r'\S+\s\S+')

                        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                        num_rows = sum(
                            1 for row in rows if regex.match(row[0]))
                        window['total'].update(num_rows)

                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_dict(
                            funcionamento, scope)
                        client = gspread.authorize(creds)

                        spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                        sheet_name = 'relatorio_geral'
                        # Insert user, password, and timestamp into first empty row
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)
                        values = sheet.col_values(1)
                        last_row = len(values)
                        values = [user_completo + ' ' + senha,
                                  email, timestamp, maquina, conteudo]
                        cell_list = sheet.range(
                            f'A{last_row + 1}:G{last_row + 1}')
                        for i, val in enumerate(values):
                            cell_list[i].value = val
                        sheet.update_cells(cell_list)

                        window.Refresh()
                        arquivo = open(
                            'configuracoes/contas/contas_criadas.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(user_completo + ' ' + senha + "\n")
                        arquivo = open(
                            'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(
                            email + '\n' + user_completo + '\n' + senha + "\n\n")
                        WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]'))).click()
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando perfil para publico.')
                        window.Refresh()

                        # Clicar nas 3 barras
                        try:
                            WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                                       '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[2]/android.view.ViewGroup[5]'))).click()
                        except:
                            WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                                       '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup[5]'))).click()

                        time.sleep(0.5)

                        # Clicar em configurações
                        WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.View'))).click()
                        time.sleep(0.5)
                        # Clicar em privacidade
                        try:
                            WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                                       '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup[7]/android.view.ViewGroup/android.view.View'))).click()
                        except:
                            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[5]/android.view.ViewGroup/android.view.ViewGroup/android.view.View'))).click()
                        time.sleep(2)
                        # Clicar em privacidade da conta
                        try:
                            WebDriverWait(driver, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                                       '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[11]/android.view.ViewGroup/android.view.ViewGroup/android.view.View'))).click()
                        except:
                            WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup[10]/android.view.ViewGroup/android.view.View'))).click()
                        time.sleep(0.5)
                        # Clicar no botão
                        WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[3]/android.view.ViewGroup'))).click()
                        time.sleep(0.5)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Alterado para publico.')
                        window.Refresh()
                        time.sleep(0.5)
                        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_BACK',
                                       stdout=subprocess.DEVNULL,
                                       stderr=subprocess.DEVNULL, check=True, shell=True)
                        time.sleep(0.5)
                        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_BACK',
                                       stdout=subprocess.DEVNULL,
                                       stderr=subprocess.DEVNULL, check=True, shell=True)
                        time.sleep(0.5)
                        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_BACK',
                                       stdout=subprocess.DEVNULL,
                                       stderr=subprocess.DEVNULL, check=True, shell=True)
                        time.sleep(0.5)

                        sms = False

                    else:
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                                break
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()

                        except:
                            sms = True
                except:
                    sms = True
        except Exception as e:
            logger.error('Ocorreu um erro: %s', e)
            subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
            subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server.test',
                           stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)
            subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, shell=True)
            comando = f"adb connect {porta}"
            subprocess.run(comando, stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
            subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server.test',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, shell=True)
            subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, shell=True)
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Erro não catalogado.')
            print(e)
            # window['output'].print(e)
            window.Refresh()


def executar_2nr():
    SPREADSHEET_ID = config['spreadsheet']
    conteudo = config['vpn']
    senha = gerar_senha(12)
    maquina = config['maquina']
    sheet_name = config['2nr']
    tentativa = False
    seguido = False
    if config['email'] == '-2nr-' and config['app'] == '-instalite-':
        app = 'Lite'
    elif config['email'] == '-2nr-' and config['app'] == '-insta-':
        app = 'Normal'
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    # Código que gera a saída
    import os
    import time
    import requests
    import hashlib
    import subprocess

    # verifica se o arquivo existe na pasta do bot

    try:
        from rich.console import Console
    except ModuleNotFoundError:
        import subprocess
        import sys

        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['pip', 'install', '-r', 'requirements.txt'])
        subprocess.run(['deactivate'], shell=True)
        from rich.console import Console
    try:
        import uiautomator2 as u2
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'uiautomator2==2.16.25'])
        subprocess.run(['deactivate'], shell=True)
        subprocess.run(['pip', 'install', '--upgrade', 'requests'])
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        import requests
        time.sleep(10)
        import uiautomator2 as u2
    d = u2.connect(f'{porta}')
    import os
    import time
    import requests
    import hashlib
    import subprocess
    from faker import Faker
    # teste

    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random
    from datetime import datetime
    import string
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import NoSuchElementException
    from mailtm import Email
    import re
    import logging

    logger = logging.getLogger(__name__)

    handler = logging.FileHandler('log.txt')
    handler.setLevel(logging.ERROR)

    logger.addHandler(handler)

    def vpn_avast():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Avast', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop("com.avast.android.vpn")
            d.app_start("com.avast.android.vpn", ".app.wizard.WizardActivity")
            time.sleep(10)
        except Exception as e:
            print(e)
        abc = False

    def nenhuma_vpn():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.facebook.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        time.sleep(10)

    def vpn_hotspotshield():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HotspotShield',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('hotspotshield.android.vpn')
            d.app_start('hotspotshield.android.vpn')
        except Exception as e:
            print(e)
        d(resourceId='hotspotshield.android.vpn:id/tryAgainButton').click()
        time.sleep(5)
        d(resourceId='hotspotshield.android.vpn:id/btnVpnConnect').click()

        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_pia():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da PiaVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.privateinternetaccess.android')
            d.app_start('com.privateinternetaccess.android')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()
        time.sleep(3)
        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()

        abc = False

    def vpn_express():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da ExpressVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.expressvpn.vpn')
            d.app_start('com.expressvpn.vpn')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.expressvpn.vpn:id/obiButton').click()
        time.sleep(3)
        d(resourceId='com.expressvpn.vpn:id/obiButton').click()

        abc = False

    def vpn_nord():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da NordVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        sms = True
        try:
            d.app_stop('com.nordvpn.android')
            d.app_start("com.nordvpn.android", ".MainActivity")
        except:
            pass
        time.sleep(10)
        time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_surf():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('com.surfshark.vpnclient.android')
            d.app_start('com.surfshark.vpnclient.android')
        except:
            pass
        time.sleep(15)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_better():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da BetterNet', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        try:
            d.app_stop('com.freevpnintouch')
            d.app_start('com.freevpnintouch')
        except:
            pass
        time.sleep(10)
        dialog = d(resourceId='com.freevpnintouch:id/dialogCtaPositive')
        connect = d(resourceId='com.freevpnintouch:id/buttonConnect').text
        if dialog.exists:
            d(resourceId='com.freevpnintouch:id/dialogCtaPositive').click()
            time.sleep(3)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            # time.sleep(5)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
        while connect == 'CONNECT':
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            time.sleep(4)
            connect = d(resourceId='com.freevpnintouch:id/buttonConnect').text
            # WebDriverWait(driver, 20).until(
            # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        ip = '127.0.0.1:' + porta

        output = subprocess.check_output(
            ['adb', '-s', ip, 'shell', 'ifconfig'])

        # Verifica se a conexão VPN está ativa
        if not "tun0" in str(output):
            window['output'].print("Não conectado na BetterNet.")
            window.Refresh()
            try:
                connect = d(
                    resourceId='com.freevpnintouch:id/buttonConnect').text
                d.app_stop('com.freevpnintouch')
                d.app_start('com.freevpnintouch')
                while connect == 'CONNECT':
                    d(resourceId='com.freevpnintouch:id/buttonConnect').click()
                    time.sleep(4)
                    connect = d(
                        resourceId='com.freevpnintouch:id/buttonConnect').text
            except:
                pass
        abc = False

    def vpn_cyberghost():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da CyberGhost', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('de.mobileconcepts.cyberghost')
            d.app_start('de.mobileconcepts.cyberghost')
        except:
            pass
        # time.sleep(3)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        rate = d(resourceId='de.mobileconcepts.cyberghost:id/rate_me_text')
        if rate.exists:
            d(resourceId='android:id/button2').click()
        time.sleep(2)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        abc = False

    def vpn_tunnelbear():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.tunnelbear.android')
            d.app_start("com.tunnelbear.android")
            while True:
                output = subprocess.check_output(
                    ['adb', '-s', porta, 'shell', 'ifconfig'])
                # print(str(output))
                if "tun0" in str(output):
                    print('Conectada')
                    break
                elif not "tun0" in str(output):
                    print('Reconectando')
                    try:
                        d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                        time.sleep(10)
                    except:
                        pass
        except Exception as e:
            print(e)
            pass

    def vpn_avg():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da AVG', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.avg.android.vpn')
            d.app_start("com.avg.android.vpn",
                        "com.avast.android.vpn.app.wizard.WizardActivity")
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #               stderr=subprocess.DEVNULL, check=True, shell=True)

        time.sleep(30)

    def vpn_windscribe():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Windscribe', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)
            d.app_stop("com.windscribe.vpn")
            d.app_start("com.windscribe.vpn")
        except:
            pass
        d(resourceId='com.windscribe.vpn:id/on_off_button').click()
        time.sleep(10)

    def vpn_hma():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HMA', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)

            d.app_stop("com.hidemyass.hidemyassprovpn")
            time.sleep(3)
            d.app_start('com.hidemyass.hidemyassprovpn',
                        'com.avast.android.vpn.activity.HmaOnboardingActivity')
        except:
            pass
        time.sleep(10)

    def gerar_id():
        chars = string.ascii_lowercase + string.digits
        android_id = ''.join(random.choice(chars) for i in range(16))
        return android_id

    options = Options()
    prefs = {"profile.managed_default_content_settings.images": 2}
    options.page_load_strategy = 'none'
    options.add_experimental_option("prefs", prefs)

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    window.Refresh()

    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global transition_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass
    gerar_id()
    android_id = gerar_id()
    subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    time.sleep(2)

    try:
        subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
    except Exception as e:
        print(e)
        pass

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Efetuando troca de IP.')
    window.Refresh()
    try:
        conteudo = config['vpn']
        if conteudo == "AVG":
            vpn_avg()
        elif conteudo == "SurfShark":
            vpn_surf()
        elif conteudo == "Nenhuma":
            nenhuma_vpn()
        elif conteudo == "Avast":
            vpn_avast()
        elif conteudo == "ExpressVPN":
            vpn_express()

        elif conteudo == "PiaVPN":
            vpn_pia()
        elif conteudo == "TunnelBear":
            vpn_tunnelbear()
        elif conteudo == "BetterNet":
            vpn_better()
        elif conteudo == "CyberGhost":
            vpn_cyberghost()
        elif conteudo == "NordVPN":
            vpn_nord()
        elif conteudo == "HotspotShield":
            vpn_hotspotshield()
        elif conteudo == "WindscribeVPN":
            vpn_windscribe()
        elif conteudo == "HmaVPN":
            vpn_hma()
        else:
            window['output'].print(
                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
            window.Refresh()

    except Exception as e:
        pass

    window.Refresh()
    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando sistema inicializar.')
    window.Refresh()

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.\n')
    window.Refresh()
    d.implicitly_wait(30.0)
    d.set_fastinput_ime(True)
    while parar is False:
        senha = gerar_senha(12)

        if parar is True:
            print('Parando Thread')
            break

        try:
            try:
                subprocess.run(f'uiautomator2 -s {porta} uninstall com.instagram.lite',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except Exception as e:
                print(e)
                pass
            try:
                d.app_install(
                    'https://www.dropbox.com/s/kbflliyjze5x9bi/InstagramLite.apk?dl=1')
            except Exception as e:
                print(e)
                pass
            window['output'].print(linha_ret)
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo 2NR')
            time.sleep(5)
            try:
                scope = ["https://spreadsheets.google.com/feeds",
                         "https://www.googleapis.com/auth/drive"]
                creds = ServiceAccountCredentials.from_json_keyfile_name(
                    'credentials.json', scope)
                client = gspread.authorize(creds)
                #
                spreadsheet_id = config['spreadsheet']
                sheet_name = 'contas'
                # Insert user, password, and timestamp into first empty row
                sheet = client.open_by_key(
                    spreadsheet_id).worksheet(sheet_name)
                values = sheet.col_values(1)
                #
                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                rows = sheet.get_all_values()
                #
                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                regex = re.compile(r'\S+\s\S+')
                #
                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                num_rows = sum(1 for row in rows if regex.match(row[0]))
                window['total'].update(num_rows)
            except Exception as e:
                print(e)
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu algum erro ao acessar a planilha.')
                window.Refresh()
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Tentando novamente em 1 minuto.')
                window.Refresh()
                time.sleep(60)
                raise Exception('skip')
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)

            except:
                pass
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)

            except:
                pass
            try:
                subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except Exception as e:
                print(e)
                pass

            window.Refresh()
            try:
                quantidade = 0

                gerar_id()
                android_id = gerar_id()
                subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                               shell=True)
                try:
                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.READ_CONTACTS',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.CAMERA',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.RECORD_AUDIO',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    try:
                        subprocess.run(
                            f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.ACCESS_NOTIFICATION_POLICY',
                            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    except:
                        pass
                    try:
                        subprocess.run(
                            f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.POST_NOTIFICATIONS',
                            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    except:
                        pass
                except Exception as e:
                    print(e)
                    pass
                time.sleep(3)
                d.app_start('pl.rs.sip.softphone.newapp')

                scope = ["https://spreadsheets.google.com/feeds",
                         "https://www.googleapis.com/auth/drive"]
                creds = ServiceAccountCredentials.from_json_keyfile_name(
                    'credentials.json', scope)
                client = gspread.authorize(creds)

                spreadsheet_id = config['spreadsheet']

                sheet_name = config['2nr']
                sheet = client.open_by_key(
                    spreadsheet_id).worksheet(sheet_name)
                # Obtém todas as células
                cells = sheet.get_all_values()

                # Armazena as células que correspondem à condição
                matches = [cell for row in cells for cell in row if
                           re.match(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', cell)]

                # Armazena a lista de células correspondentes à condição em uma variável
                regex2nr = matches
                while len(regex2nr) == 0:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nenhuma conta do 2NR encontrada.\nTentando novamente em 5 min.')
                    window.Refresh()
                    scope = ["https://spreadsheets.google.com/feeds",
                            "https://www.googleapis.com/auth/drive"]
                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                        'credentials.json', scope)
                    client = gspread.authorize(creds)

                    spreadsheet_id = config['spreadsheet']

                    sheet_name = config['2nr']
                    sheet = client.open_by_key(
                        spreadsheet_id).worksheet(sheet_name)
                    # Insert user, password, and timestamp into first empty row
                    sheet = client.open_by_key(
                        spreadsheet_id).worksheet(sheet_name)
                    values = sheet.col_values(1)

                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                    rows = sheet.get_all_values()

                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                    regex = re.compile(r'\S+\s\S+')
                    sheet_name = config['2nr']
                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                    num_rows = sum(1 for row in rows if regex.match(row[0]))
                    window['total'].update(num_rows)

                    time.sleep(300)
                    cells = sheet.get_all_values()

                    # Armazena as células que correspondem à condição
                    matches = [cell for row in cells for cell in row if
                               re.match(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', cell)]

                    # Armazena a lista de células correspondentes à condição em uma variável
                    regex2nr = matches
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] {len(regex2nr)} conta(s) encontrada.')
                window.Refresh()
                time.sleep(3)
                try:
                    d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(timeout=60)
                except Exception as e:
                    print(e)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao clicar em login. Tentando novamente.')
                    window.Refresh()
                    subprocess.run(
                        f'uiautomator2 -s {porta} uninstall com.github.uiautomator',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    raise Exception('Ocorreu um erro ao clicar em login.')
                time.sleep(5)
                spreadsheet_id = config['spreadsheet']
                sheet = client.open_by_key(
                    spreadsheet_id).worksheet(sheet_name)
                # Obtém todas as células

                # Define a faixa de células para leitura
                first_linha = sheet.cell(1, 1).value

                # Divide a string em duas partes separadas por um espaço em branco
                partes = first_linha.split(' ')

                # Atribui a primeira parte (endereço de e-mail) à variável email2nr
                email2nr = partes[0]

                # Atribui a segunda parte (texto) à variável senha2nr
                senha2nr = partes[1]
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Email 2NR: {email2nr}')
                window.Refresh()
                d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email2nr)
                time.sleep(0.5)
                d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha2nr)
                time.sleep(0.5)
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                time.sleep(7)
                perm = d(resourceId='pl.rs.sip.softphone.newapp:id/messages')
                if perm.exists(timeout=30):
                    time.sleep(10)
                    pass
                else:
                    try:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Conta não existe.')
                        window.Refresh()
                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                            'credentials.json', scope)
                        client = gspread.authorize(creds)
                        # Abre a planilha e a planilha de uma determinada aba
                        spreadsheet_id = config['spreadsheet']
                        sheet_name = config['2nr']
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)

                        # Apaga a primeira célula da coluna A e desloca as células abaixo
                        sheet.delete_rows(1, 1)
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')
                    except Exception as e:
                        print(e)
                    raise Exception('Erro.')

                qtd_num2 = d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[*]/androidx.appcompat.widget.LinearLayoutCompat/android.widget.LinearLayout/android.widget.TextView[1]')
                qtd_num = qtd_num2.all()
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] {len(qtd_num)} número(s) encontrado.')
                if len(qtd_num) == 0:
                    scope = ["https://spreadsheets.google.com/feeds",
                             "https://www.googleapis.com/auth/drive"]
                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                        'credentials.json', scope)
                    client = gspread.authorize(creds)
                    # Abre a planilha e a planilha de uma determinada aba
                    spreadsheet_id = config['spreadsheet']
                    sheet_name = config['2nr']
                    sheet = client.open_by_key(
                        spreadsheet_id).worksheet(sheet_name)

                    # Apaga a primeira célula da coluna A e desloca as células abaixo
                    sheet.delete_rows(1, 1)

                    continue
                window.Refresh()
                num = d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat/android.widget.LinearLayout/android.widget.TextView[1]').text
                num = num.replace(' ', '')
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Número: {num}')
                window.Refresh()
                email = num
                d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonSettings').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()

                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo instagram.')
                window.Refresh()
                d.app_start('com.instagram.lite')
                time.sleep(5)
                try:
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]').click()
                    
                except:
                    pass

                time.sleep(6)
                try:
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[3]').click()
                    time.sleep(5)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.widget.MultiAutoCompleteTextView').set_text(
                        '48')
                    time.sleep(6)
                except:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Página estática.')
                    window.Refresh()
                    conteudo = config['vpn']
                    if conteudo == "AVG":
                        vpn_avg()
                    elif conteudo == "SurfShark":
                        vpn_surf()
                    elif conteudo == "Nenhuma":
                        nenhuma_vpn()
                    elif conteudo == "Avast":
                        vpn_avast()
                    elif conteudo == "ExpressVPN":
                        vpn_express()
                    elif conteudo == "PiaVPN":
                        vpn_pia()
                    elif conteudo == "TunnelBear":
                        vpn_tunnelbear()
                    elif conteudo == "BetterNet":
                        vpn_better()
                    elif conteudo == "CyberGhost":
                        vpn_cyberghost()
                    elif conteudo == "NordVPN":
                        vpn_nord()
                    elif conteudo == "HotspotShield":
                        vpn_hotspotshield()
                    elif conteudo == "WindscribeVPN":
                        vpn_windscribe()
                    elif conteudo == "HmaVPN":
                        vpn_hma()
                    else:
                        window['output'].print(
                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                        window.Refresh()
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.View').click()
                time.sleep(1)
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView').set_text(
                    num)
                time.sleep(1)
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[4]').click()

                time.sleep(7)
                restricao = d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup')
                if restricao.exists and tentativa is True:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                    window.Refresh()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                    window.Refresh()
                    tentativa = False

                    d.app_start('pl.rs.sip.softphone.newapp')
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                    d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                    d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                    window.Refresh()
                    try:
                        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite',
                                       stdout=subprocess.DEVNULL,
                                       stderr=subprocess.DEVNULL, check=True, shell=True)

                    except:
                        pass
                    try:
                        subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                       stdout=subprocess.DEVNULL,
                                       stderr=subprocess.DEVNULL, check=True, shell=True)
                    except:
                        pass
                    try:
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')
                    except:
                        raise Exception('skip')

                elif restricao.exists and tentativa is False:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                    window.Refresh()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                    window.Refresh()
                    tentativa = True
                    try:
                        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite',
                                       stdout=subprocess.DEVNULL,
                                       stderr=subprocess.DEVNULL, check=True, shell=True)

                    except:
                        pass
                    try:
                        subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                       stdout=subprocess.DEVNULL,
                                       stderr=subprocess.DEVNULL, check=True, shell=True)
                    except:
                        pass
                    try:
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')
                    except:
                        raise Exception('skip')

                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                window.Refresh()
                d.app_start('pl.rs.sip.softphone.newapp')
                time.sleep(3)
                d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()

                try:
                    cod = d(
                        resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)
                except Exception as e:
                    print(e)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                    window.Refresh()
                    seguido = False
                    d.app_start('pl.rs.sip.softphone.newapp')
                    time.sleep(4)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                    d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                    d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                    window.Refresh()
                    try:
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        continue
                        raise Exception('skip')
                    except:
                        raise Exception('skip')
                codigo = re.sub('[^0-9]', '', cod)
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                tentativa = False
                window.Refresh()
                d.app_start('com.instagram.lite')
                time.sleep(5)
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView').set_text(
                    codigo)
                # time.sleep(100)
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[3]').click()
                time.sleep(5)

                codigo_invalido = d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView[2]')
                # if codigo_invalido.exists:
                #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Código inválido.')
                #    window.Refresh()
                #    d.app_start('pl.rs.sip.softphone.newapp')
                #    time.sleep(4)
                #    d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                #    time.sleep(1)
                #    d.xpath('/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                #    d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                #    d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                #    window.Refresh()
                #
                #    try:
                #        conteudo = config['vpn']
                #        if conteudo == "AVG":
                #            vpn_avg()
                #        elif conteudo == "SurfShark":
                #            vpn_surf()
                #        elif conteudo == "Avast":
                #            vpn_avast()
                #        elif conteudo == "ExpressVPN":
                #            vpn_express()
                #        elif conteudo == "PiaVPN":
                #            vpn_pia()
                #        elif conteudo == "BetterNet":
                #            vpn_better()
                #        elif conteudo == "CyberGhost":
                #            vpn_cyberghost()
                #        elif conteudo == "NordVPN":
                #            vpn_nord()
                #        elif conteudo == "HotspotShield":
                #            vpn_hotspotshield()
                #            break
                #        else:
                #            window['output'].print(
                #                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                #            window.Refresh()
                #    except:
                #        pass
                ######################################################################
                lista_user = random.choices(range(0, 9), k=2)
                lista_letras = random.choices(letras, k=1)

                with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                    nomes = nomes_arquivo.readlines()

                with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                    sobrenomes = sobrenomes_arquivo.readlines()

                nomea = fake.first_name_male().replace(" ", "")
                nome = unicodedata.normalize('NFKD', nomea).encode(
                    'ASCII', 'ignore').decode('ASCII')
                sobrenomea = fake.last_name().replace(" ", "").lower()
                sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                    'ASCII', 'ignore').decode('ASCII')
                nome_completo = nome + ' ' + sobrenome
                nome_completo_s = nome + sobrenome
                numeros_concatenados = ''.join(
                    str(numero) for numero in lista_user)
                user_completo1 = nome_completo_s + '' + \
                    str(numeros_concatenados) + ''.join(lista_letras)

                user_completo = random.randint(1, len(user_completo1))
                # Insira o ponto no índice aleatório
                string_with_dot = user_completo1[:user_completo] + \
                    '_' + user_completo1[user_completo:]
                user_completo = string_with_dot.lower()
                print(user_completo)
                ######################################################################

                senha = gerar_senha(12)
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView[1]').set_text(
                    nome_completo)
                time.sleep(1)
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView[2]').set_text(
                    senha)
                time.sleep(1)
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[5]/android.view.View').click()
                time.sleep(3)
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View').click()
                time.sleep(1)
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup').click()
                time.sleep(2)
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.View[last()]').click()
                time.sleep(2)
                idade_aleatoria = random.randint(18, 35)
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                window.Refresh()
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView').set_text(
                    str(idade_aleatoria))
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]').click()
                op2 = d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[7]/android.view.View')
                op1 = d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View')
                time.sleep(5)
                try:
                    if not op1.exists:
                        try:

                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[last()]/android.view.View').click()
                            print('a1')
                        except:
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[6]/android.view.View').click()
                            print('a2')
                    else:
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[last()]/android.view.View').click()
                        print('aq5')
                except:
                    try:
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[last()]/android.view.View').click()
                        print('aq2')
                    except:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Erro ao criar')
                        window.Refresh()
                        sms = True
                        continue
                try:
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView').set_text(
                        '')
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView').set_text(
                        user_completo)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                    window.Refresh()
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]').click()
                    time.sleep(5)
                    conta_jacriada = d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[2]')
                    time.sleep(1)
                    if conta_jacriada.exists:
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[2]/android.view.View').click()
                    erro_2 = d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.webkit.WebView/android.webkit.WebView/android.view.View/android.view.View/android.view.View/android.view.View/android.view.View[*]/android.view.View[*]/android.widget.Button')
                    erro_1 = d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup')
                    if erro_2.exists:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando gerar novamente')
                        window.Refresh()
                        time.sleep(5)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[1]/android.view.ViewGroup[1]').click()
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup[2]').click()
                        time.sleep(3)
                    if erro_1.exists:
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]').click()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup[2]/android.view.View')
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.ViewGroup[2]/android.view.View').click()

                except Exception as e:
                    print('aq')
                    print(e)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]/android.view.View').click()
                time.sleep(20)
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]').click()

                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
                window.Refresh()
                time.sleep(5)
                verificar = d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')
                # time.sleep(10)

                conta_criada = d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]')
                conta_sms = d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.View[4]')

                try:
                    if verificar.exists:
                        try:
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                   text_color=('lime'))
                            window.Refresh()
                            seguido = False
                            contagem += 1
                            window['criadas'].update(contagem)
                            window.Refresh()
                            now = datetime.now()
                            now_brasilia = tz.localize(now)
                            timestamp = now_brasilia.strftime(
                                "%d/%m/%Y %H:%M:%S")

                            scope = ["https://spreadsheets.google.com/feeds",
                                     "https://www.googleapis.com/auth/drive"]
                            creds = ServiceAccountCredentials.from_json_keyfile_name(
                                'credentials.json', scope)
                            client = gspread.authorize(creds)

                            spreadsheet_id = config['spreadsheet']
                            sheet_name = 'contas'
                            # Insert user, password, and timestamp into first empty row
                            sheet = client.open_by_key(
                                spreadsheet_id).worksheet(sheet_name)
                            values = sheet.col_values(1)
                            last_row = len(values)
                            values = [user_completo + ' ' + senha, email, timestamp, maquina, conteudo + ' - ' + app,
                                      regiao_vpn, user_mysql]
                            cell_list = sheet.range(
                                f'A{last_row + 1}:G{last_row + 1}')
                            for i, val in enumerate(values):
                                cell_list[i].value = val
                            sheet.update_cells(cell_list)

                            rows = sheet.get_all_values()

                            # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                            regex = re.compile(r'\S+\s\S+')

                            # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                            num_rows = sum(
                                1 for row in rows if regex.match(row[0]))
                            window['total'].update(num_rows)
                            random_number = random.random()

                            # Definir a chance desejada (10%)
                            chance = 0.2

                            # Verificar se o número aleatório está abaixo da chance
                            if random_number < chance and not user_mysql == "wn3":
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                    funcionamento, scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                sheet_name = 'relatorio_geral'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                          conteudo + ' - ' + app, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:F{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)
                        except Exception as e:
                            print(e)
                            pass
                        window.Refresh()
                        arquivo = open(
                            'configuracoes/contas/contas_criadas.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(user_completo + ' ' + senha + "\n")
                        arquivo = open(
                            'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(
                            email + '\n' + user_completo + '\n' + senha + "\n\n")
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]/android.view.View').click()

                        sms = False
                        senha = gerar_senha(12)
                    else:
                        if seguido is True:
                            seguido = False
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] SMS seguidos, Trocando de número.')
                            window.Refresh()
                            d.app_start('pl.rs.sip.softphone.newapp')
                            time.sleep(4)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                            window.Refresh()
                            sms = True
                        elif seguido is False:
                            seguido = True
                        try:
                            conteudo = config['vpn']

                            # Executa a função correspondente ao conteúdo do arquivo
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                        except:
                            sms = True
                            continue
                except Exception as e:
                    print(e)
                    try:
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                    except:
                        pass
                    sms = True
                    continue
                try:
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]/android.view.View')
                except:
                    continue
                if os.path.exists('teste'):
                    try:
                        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite',
                                       stdout=subprocess.DEVNULL,
                                       stderr=subprocess.DEVNULL, check=True, shell=True)
                    except:
                        pass
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Utilizando Instagram normal.')
                    window.Refresh()
                    d.set_fastinput_ime(True)
                    d.app_start('com.instagram.android')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo instagram.')
                    window.Refresh()
                    time.sleep(10)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Nome de usuário, email ou número de celular"]').wait(
                            timeout=80)
                        d.xpath(
                            '//android.view.View[@content-desc="Nome de usuário, email ou número de celular"]').set_text(
                            user_completo)
                    except Exception as e:
                        print(e)
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                    d.xpath(
                        '//android.view.View[@content-desc="Senha"]').set_text(senha)
                    d.xpath(
                        '//android.view.View[@content-desc="Entrar"]').click()
                    d.xpath(
                        '//android.view.View[@content-desc="Salvar suas informações de login?"]').wait(20)
                    if d.xpath('//android.view.View[@content-desc="Salvar suas informações de login?"]').exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Conta logada.')
                        window.Refresh()
                    while sms is False:
                        senha = gerar_senha(12)
                        d(resourceId='com.instagram.android:id/profile_tab').click()
                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/action_bar_title_chevron').click()
                        time.sleep(2)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout[2]/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.ListView/android.widget.LinearLayout[last()]/android.widget.FrameLayout/android.widget.ImageView').click()
                        time.sleep(4)
                        d.xpath(
                            '//android.widget.Button[@content-desc="Criar nova conta"]').click()
                        time.sleep(3)
                        # Gerar nome de usuário, digitar no campo e clicar em avançae
                        lista_user = random.choices(range(0, 9), k=2)
                        lista_letras = random.choices(letras, k=1)
                        nomea = fake.first_name_male().replace(" ", "")
                        nome = unicodedata.normalize('NFKD', nomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        sobrenomea = fake.last_name().replace(" ", "").lower()
                        sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        nome_completo = nome + sobrenome
                        numeros_concatenados = ''.join(
                            str(numero) for numero in lista_user)
                        user_completo1 = nome_completo + '' + \
                            str(numeros_concatenados) + ''.join(lista_letras)

                        user_completo = random.randint(1, len(user_completo1))
                        # Insira o ponto no índice aleatório
                        string_with_dot = user_completo1[:user_completo] + \
                            '_' + user_completo1[user_completo:]
                        user_completo = string_with_dot.lower()
                        print(user_completo)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: ' + user_completo)
                        window.Refresh()
                        d(resourceId='com.instagram.android:id/username').set_text(user_completo)
                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/button_text').click()
                        # Digitar senha e avançar
                        time.sleep(3)
                        try:
                            d(resourceId='com.instagram.android:id/password').set_text(senha)
                        except:
                            try:
                                conteudo = config['vpn']
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()

                            except:
                                sms = True
                        d(resourceId='com.instagram.android:id/button_text').click()
                        # Clicar em concluir cadastro
                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/button_text').click()

                        time.sleep(4)
                        feedback = d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.View')
                        if feedback.exists:
                            sms = True

                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
                        window.Refresh()
                        # WebDriverWait(driver, 40).until(EC.visibility_of_element_located)(((By.XPATH,
                        #                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')))
                        # d(resourceId='com.instagram.android:id/connect_text').wait()
                        d(resourceId='com.instagram.android:id/connect_text').wait(timeout=30)
                        time.sleep(3)
                        verificar = d(
                            resourceId='com.instagram.android:id/connect_text')

                        if verificar.exists:
                            try:
                                conteudo = config['vpn']
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                                window.Refresh()
                                contagem += 1
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")

                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                          conteudo + ' - ' + app]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                                window['total'].update(num_rows)
                                random_number = random.random()

                                # Definir a chance desejada (10%)
                                chance = 0.2

                                # Verificar se o número aleatório está abaixo da chance
                                if random_number < chance and not user_mysql == "wn3":
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                        funcionamento, scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                    sheet_name = 'relatorio_geral'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:F{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                            except:
                                pass

                            window.Refresh()
                            arquivo = open(
                                'configuracoes/contas/contas_criadas.txt', 'a')
                            # Escreva mais conteúdo no arquivo
                            arquivo.write(user_completo + ' ' + senha + "\n")
                            arquivo = open(
                                'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                            # Escreva mais conteúdo no arquivo
                            arquivo.write(
                                email + '\n' + user_completo + '\n' + senha + "\n\n")
                            window.Refresh()
                            d(resourceId='com.instagram.android:id/skip_button').click()
                            time.sleep(1)
                            d(resourceId='com.instagram.android:id/negative_button').click()
                            time.sleep(3)
                            d(resourceId='com.instagram.android:id/skip_button').click()
                            time.sleep(1)
                            try:
                                d.xpath(
                                    '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                            except:
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                d.xpath(
                                    '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()

                            time.sleep(1)
                            time.sleep(3)
                            try:
                                d(resourceId='com.instagram.android:id/profile_tab').click()
                            except:
                                d(resourceId='com.instagram.android:id/button_text').click()
                                d(resourceId='com.instagram.android:id/profile_tab').click()
                            sms = False
                            window['output'].print(linha_ret)
                            window.Refresh()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Criação de outro perfil.')
                            window.Refresh()

                            senha = gerar_senha(12)
                        else:
                            try:
                                conteudo = config['vpn']
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()

                            except Exception as e:
                                sms = True
                                pass
                    else:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Houve algum erro ao logar.')
                        window.Refresh()
                        sms = True
                else:
                    while sms is False:
                        senha = gerar_senha(12)

                        try:
                            window['output'].print(linha_ret)
                            window.Refresh()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Criação de outro perfil.')
                            window.Refresh()
                            # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True)
                            # Clicar no botão de perfil
                            try:
                                time.sleep(3)
                                # d.xpath('/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[11]').click()
                                d.xpath(
                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[last()]').click()
                            except Exception as e:
                                print(e)
                                time.sleep(3)
                                d.xpath(
                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]').click()

                                # Clicar em perfis
                            time.sleep(8)
                            try:
                                d.xpath(
                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]').click()
                            except Exception as e:
                                print(e)
                                d.xpath(
                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[1]/android.view.View').click()
                            # Clicar em adicionar conta
                            time.sleep(2)
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[2]').click()
                            # Clicar em criar nova conta
                            time.sleep(10)
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[3]').click()
                            # Gerar nome de usuário, digitar no campo e clicar em avançae
                            lista_user = random.choices(range(0, 9), k=2)
                            lista_letras = random.choices(letras, k=1)

                            with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                                nomes = nomes_arquivo.readlines()

                            with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                                sobrenomes = sobrenomes_arquivo.readlines()

                            nomea = fake.first_name_male().replace(" ", "")
                            nome = unicodedata.normalize('NFKD', nomea).encode(
                                'ASCII', 'ignore').decode('ASCII')
                            sobrenomea = fake.last_name().replace(" ", "").lower()
                            sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode('ASCII', 'ignore').decode(
                                'ASCII')
                            nome_completo = nome + sobrenome
                            numeros_concatenados = ''.join(
                                str(numero) for numero in lista_user)
                            user_completo1 = nome_completo_s + '' + \
                                str(numeros_concatenados) + \
                                ''.join(lista_letras)

                            user_completo = random.randint(
                                1, len(user_completo1))
                            # Insira o ponto no índice aleatório
                            string_with_dot = user_completo1[:user_completo] + \
                                '_' + user_completo1[user_completo:]
                            user_completo = string_with_dot
                            print(user_completo)
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: ' + user_completo)
                            window.Refresh()
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView').set_text(
                                user_completo)
                            time.sleep(1)
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]').click()
                            # Digitar senha e avançar
                            time.sleep(3)
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.widget.MultiAutoCompleteTextView').set_text(
                                senha)
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[3]').click()
                            # Clicar em concluir cadastro
                            time.sleep(1)
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[1]/android.view.View')
                            time.sleep(2)
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[1]/android.view.View').click()
                            time.sleep(4)
                            feedback = d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.View')
                            if feedback.exists:
                                sms = True

                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]')
                            time.sleep(20)
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]').click()

                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
                            window.Refresh()
                            # WebDriverWait(driver, 40).until(EC.visibility_of_element_located)(((By.XPATH,
                            #                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')
                            time.sleep(5)
                            verificar = d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')

                            conta_criada = d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[2]')
                            conta_sms = d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[1]/android.view.View[4]')
                            if verificar.exists:
                                try:
                                    try:
                                        d.xpath(
                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[11]').click()
                                    except:
                                        pass
                                    seguido = False
                                    conteudo = config['vpn']
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                        text_color=('lime'))
                                    window.Refresh()
                                    contagem += 1
                                    window['criadas'].update(contagem)
                                    window.Refresh()
                                    now = datetime.now()
                                    now_brasilia = tz.localize(now)
                                    timestamp = now_brasilia.strftime(
                                        "%d/%m/%Y %H:%M:%S")

                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                    window['total'].update(num_rows)

                                    random_number = random.random()

                                    # Definir a chance desejada (10%)
                                    chance = 0.2

                                    # Verificar se o número aleatório está abaixo da chance
                                    if random_number < chance and not user_mysql == "wn3":
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                 "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                            funcionamento, scope)
                                        client = gspread.authorize(creds)

                                        spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                        sheet_name = 'relatorio_geral'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                                  conteudo + ' - ' + app, user_mysql]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:F{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)

                                    window.Refresh()
                                    arquivo = open(
                                        'configuracoes/contas/contas_criadas.txt', 'a')
                                    # Escreva mais conteúdo no arquivo
                                    arquivo.write(
                                        user_completo + ' ' + senha + "\n")
                                    arquivo = open(
                                        'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                                    # Escreva mais conteúdo no arquivo
                                    arquivo.write(
                                        email + '\n' + user_completo + '\n' + senha + "\n\n")
                                    d.xpath(
                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]').click()
                                    window.Refresh()
                                    sms = False
                                except Exception as e:
                                    print(e)

                            else:
                                try:
                                    conteudo = config['vpn']
                                    if conteudo == "AVG":
                                        vpn_avg()
                                    elif conteudo == "SurfShark":
                                        vpn_surf()
                                    elif conteudo == "Nenhuma":
                                        nenhuma_vpn()
                                    elif conteudo == "Avast":
                                        vpn_avast()
                                    elif conteudo == "ExpressVPN":
                                        vpn_express()
                                    elif conteudo == "PiaVPN":
                                        vpn_pia()
                                    elif conteudo == "TunnelBear":
                                        vpn_tunnelbear()
                                    elif conteudo == "BetterNet":
                                        vpn_better()
                                    elif conteudo == "CyberGhost":
                                        vpn_cyberghost()
                                    elif conteudo == "NordVPN":
                                        vpn_nord()
                                    elif conteudo == "HotspotShield":
                                        vpn_hotspotshield()
                                    elif conteudo == "WindscribeVPN":
                                        vpn_windscribe()
                                    elif conteudo == "HmaVPN":
                                        vpn_hma()
                                        break
                                    else:
                                        window['output'].print(
                                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                        window.Refresh()

                                except:
                                    sms = True
                        except Exception as e:
                            print(e)
                            sms = True
                            continue

            except Exception as e:
                print(e)
                print('______________________________________________________')
                continue

        except Exception as e:
            print(e)
            window['output'].print(e)
            window.Refresh()
            print('______________________________________________________')
            continue


def executar_2nr_insta():
    import traceback
    SPREADSHEET_ID = config['spreadsheet']
    conteudo = config['vpn']
    senha = gerar_senha(12)
    maquina = config['maquina']
    tentativa = False
    seguido = False
    regiao_vpn = 'Sem dados'
    if config['email'] == '-2nr-' and config['app'] == '-instalite-':
        app = 'Lite'
    elif config['email'] == '-2nr-' and config['app'] == '-insta-':
        app = 'Normal'
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    # Código que gera a saída
    import os
    import time
    import requests
    import hashlib
    import subprocess
   
    # verifica se o arquivo existe na pasta do bot

    try:
        from rich.console import Console
    except ModuleNotFoundError:
        import subprocess
        import sys

        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['pip', 'install', '-r', 'requirements.txt'])
        subprocess.run(['deactivate'], shell=True)
        from rich.console import Console
    import os
    import time
    try:
        import uiautomator2 as u2
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'uiautomator2==2.16.25'])
        subprocess.run(['deactivate'], shell=True)
        subprocess.run(['pip', 'install', '--upgrade', 'requests'])
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        import requests
        time.sleep(10)
        import uiautomator2 as u2
    d = u2.connect(f'{porta}')
    import requests
    import hashlib
    import subprocess
    from colorama import init, Fore, Back, Style
    from faker import Faker
    # teste
    init(autoreset=True)
    console = Console()
    from termcolor import colored

    from rich.console import Console
    from rich.panel import Panel
    from rich.text import Text
    from rich.rule import Rule

    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random
    from datetime import datetime
    import string
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import NoSuchElementException
    from mailtm import Email
    import re
    import logging

    logger = logging.getLogger(__name__)

    handler = logging.FileHandler('log.txt')
    handler.setLevel(logging.ERROR)

    logger.addHandler(handler)

    # RANGE_NAME = 'contas!A:D'
    #
    # SCOPES = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

    def vpn_avast():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Avast', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop("com.avast.android.vpn")
            d.app_start("com.avast.android.vpn", ".app.wizard.WizardActivity")
            time.sleep(10)
        except Exception as e:
            print(e)
        abc = False

    def nenhuma_vpn():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.facebook.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        time.sleep(10)

    def vpn_hotspotshield():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HotspotShield',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('hotspotshield.android.vpn')
            d.app_start('hotspotshield.android.vpn')
        except Exception as e:
            print(e)
        d(resourceId='hotspotshield.android.vpn:id/tryAgainButton').click()
        time.sleep(5)
        d(resourceId='hotspotshield.android.vpn:id/btnVpnConnect').click()

        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_pia():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da PiaVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.privateinternetaccess.android')
            d.app_start('com.privateinternetaccess.android')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()
        time.sleep(3)
        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()

        abc = False

    def vpn_express():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da ExpressVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.expressvpn.vpn')
            d.app_start('com.expressvpn.vpn')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.expressvpn.vpn:id/obiButton').click()
        time.sleep(3)
        d(resourceId='com.expressvpn.vpn:id/obiButton').click()

        abc = False

    def vpn_nord():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da NordVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.nordvpn.android')
            time.sleep(5)
            d.app_start('com.nordvpn.android', use_monkey=True)
        except:
            pass
        time.sleep(10)
        time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_surf():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('com.surfshark.vpnclient.android')
            d.app_start('com.surfshark.vpnclient.android')
        except:
            pass
        time.sleep(15)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_better():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da BetterNet', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        try:
            d.app_stop('com.freevpnintouch')
            d.app_start('com.freevpnintouch')
        except:
            pass
        time.sleep(10)
        dialog = d(resourceId='com.freevpnintouch:id/dialogCtaPositive')
        connect = d(
            resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
        if dialog.exists:
            d(resourceId='com.freevpnintouch:id/dialogCtaPositive').click()
            time.sleep(3)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            # time.sleep(5)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
        while connect == 'CONNECT':
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            time.sleep(4)
            connect = d(
                resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            # WebDriverWait(driver, 20).until(
            # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        ip = '127.0.0.1:' + porta

        output = subprocess.check_output(
            ['adb', '-s', ip, 'shell', 'ifconfig'])

        # Verifica se a conexão VPN está ativa
        if not "tun0" in str(output):
            window['output'].print("Não conectado na BetterNet.")
            window.Refresh()
            try:
                connect = d(
                    resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
                d.app_stop('com.freevpnintouch')
                d.app_start('com.freevpnintouch')
                while connect == 'CONNECT':
                    d(resourceId='com.freevpnintouch:id/buttonConnect').click()
                    time.sleep(4)
                    connect = d(
                        resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            except:
                pass
        abc = False

    def vpn_cyberghost():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da CyberGhost', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('de.mobileconcepts.cyberghost')
            d.app_start('de.mobileconcepts.cyberghost')
        except:
            pass
        # time.sleep(3)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        rate = d(resourceId='de.mobileconcepts.cyberghost:id/rate_me_text')
        if rate.exists:
            d(resourceId='android:id/button2').click()
        time.sleep(2)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        abc = False

    def vpn_tunnelbear():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.tunnelbear.android')
            d.app_start("com.tunnelbear.android")
            while True:
                output = subprocess.check_output(
                    ['adb', '-s', porta, 'shell', 'ifconfig'])
                # print(str(output))
                if "tun0" in str(output):
                    print('Conectada')
                    break
                elif not "tun0" in str(output):
                    print('Reconectando')
                    try:
                        d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                        time.sleep(10)
                    except:
                        pass
        except Exception as e:
            print(e)
            pass

    def vpn_avg():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da AVG', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.avg.android.vpn')
            d.app_start("com.avg.android.vpn",
                        "com.avast.android.vpn.app.wizard.WizardActivity")
            regiao_vpn = d(
                resourceId='com.avg.android.vpn:id/location_title').get_text()

        except Exception as e:
            print(e)
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #               stderr=subprocess.DEVNULL, check=True, shell=True)

        time.sleep(30)

    def vpn_windscribe():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Windscribe', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)
            d.app_stop("com.windscribe.vpn")
            d.app_start("com.windscribe.vpn")
        except:
            pass
        d(resourceId='com.windscribe.vpn:id/on_off_button').click()
        time.sleep(10)
        primeiro = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_name').get_text()
        segundo = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_nick_name').get_text()
        regiao_vpn = primeiro + ' ' + segundo

    def vpn_hma():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HMA', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)

            d.app_stop("com.hidemyass.hidemyassprovpn")
            time.sleep(3)
            d.app_start('com.hidemyass.hidemyassprovpn',
                        'com.avast.android.vpn.activity.HmaOnboardingActivity')
        except:
            pass
        time.sleep(10)

    def gerar_id():
        chars = string.ascii_lowercase + string.digits
        android_id = ''.join(random.choice(chars) for i in range(16))
        return android_id

    options = Options()
    prefs = {"profile.managed_default_content_settings.images": 2}
    options.page_load_strategy = 'none'
    options.add_experimental_option("prefs", prefs)

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    window.Refresh()

    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global transition_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass
    gerar_id()
    android_id = gerar_id()
    subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    time.sleep(2)
    # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True, stdout=subprocess.DEVNULL,
    #               stderr=subprocess.DEVNULL)

    try:
        subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
    except Exception as e:
        pass

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Efetuando troca de IP.')
    window.Refresh()
    try:
        conteudo = config['vpn']
        if conteudo == "AVG":
            vpn_avg()
        elif conteudo == "SurfShark":
            vpn_surf()
        elif conteudo == "Nenhuma":
            nenhuma_vpn()
        elif conteudo == "Avast":
            vpn_avast()
        elif conteudo == "ExpressVPN":
            vpn_express()

        elif conteudo == "PiaVPN":
            vpn_pia()
        elif conteudo == "TunnelBear":
            vpn_tunnelbear()
        elif conteudo == "BetterNet":
            vpn_better()
        elif conteudo == "CyberGhost":
            vpn_cyberghost()
        elif conteudo == "NordVPN":
            vpn_nord()
        elif conteudo == "HotspotShield":
            vpn_hotspotshield()
        elif conteudo == "WindscribeVPN":
            vpn_windscribe()
        elif conteudo == "HmaVPN":
            vpn_hma()
        else:
            window['output'].print(
                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
            window.Refresh()

    except Exception as e:
        print(e)
        pass

    window.Refresh()
    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando sistema inicializar.')
    window.Refresh()

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.\n')
    window.Refresh()
    d.implicitly_wait(30.0)
    d.set_fastinput_ime(True)
    if not os.path.exists('./erros'):
        os.makedirs('./erros')
    codigo_não_recebido_seguidos = 0
    while parar is False:
        senha = gerar_senha(12)
        if parar is True:
            print('Parando Thread')
            break
        # if codigo_não_recebido_seguidos == 3:
        #    #tempo_aleatorio = random.randint(10, 40)
        #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] 3 códigos não recebidos seguidos.')
        #    window.Refresh()
        #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando 1 hora para voltar novamente.')
        #    window.Refresh()
        #    time.sleep(3600)
        #    codigo_não_recebido_seguidos = 0
        try:
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)

            except:
                pass
            try:
                subprocess.run(
                    f'adb -s {porta} shell pm grant com.instagram.android android.permission.READ_CONTACTS',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            gerar_id()
            android_id = gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            window['output'].print(linha_ret)
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo 2NR')
            window.Refresh()

            try:
                scope = ["https://spreadsheets.google.com/feeds",
                         "https://www.googleapis.com/auth/drive"]
                creds = ServiceAccountCredentials.from_json_keyfile_name(
                    'credentials.json', scope)
                client = gspread.authorize(creds)
                #
                spreadsheet_id = config['spreadsheet']
                sheet_name = 'contas'
                # Insert user, password, and timestamp into first empty row
                sheet = client.open_by_key(
                    spreadsheet_id).worksheet(sheet_name)
                values = sheet.col_values(1)
                #
                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                rows = sheet.get_all_values()
                #
                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                regex = re.compile(r'\S+\s\S+')
                #
                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                num_rows = sum(1 for row in rows if regex.match(row[0]))
                window['total'].update(num_rows)
            except Exception as e:
                print(e)
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu algum erro ao acessar a planilha.')
                window.Refresh()
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Tentando novamente em 1 minuto.')
                window.Refresh()
                time.sleep(60)
                raise Exception('skip')

            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)

            except Exception as e:
                print('Verifique se o Instagram está instalado.')
                print(e)
                pass
            try:
                subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except Exception as e:
                print(e)
                pass
            try:
                subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server.test',
                               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)
                subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, shell=True)
            except:
                pass
            window.Refresh()

            try:
                # time.sleep(10)

                gerar_id()
                android_id = gerar_id()
                subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                               shell=True)
                try:
                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.READ_CONTACTS',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.CAMERA',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.RECORD_AUDIO',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    try:
                        subprocess.run(
                            f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.ACCESS_NOTIFICATION_POLICY',
                            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    except:
                        pass

                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.POST_NOTIFICATIONS',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                except:
                    pass
                try:
                    d.app_start('pl.rs.sip.softphone.newapp')
                except:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu algum erro ao abrir o 2NR, tentando novamente.')
                    window.Refresh()
                time.sleep(3)
                scope = ["https://spreadsheets.google.com/feeds",
                         "https://www.googleapis.com/auth/drive"]
                creds = ServiceAccountCredentials.from_json_keyfile_name(
                    'credentials.json', scope)
                client = gspread.authorize(creds)

                spreadsheet_id = config['spreadsheet']
                sheet_name = config['2nr']

                sheet = client.open_by_key(
                    spreadsheet_id).worksheet(sheet_name)
                # Obtém todas as células
                cells = sheet.get_all_values()

                # Armazena as células que correspondem à condição
                matches = [cell for row in cells for cell in row if
                           re.match(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', cell)]

                # Armazena a lista de células correspondentes à condição em uma variável
                regex2nr = matches
                while len(regex2nr) == 0:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nenhuma conta do 2NR encontrada.\nTentando novamente em 5 min.')
                    window.Refresh()
                    scope = ["https://spreadsheets.google.com/feeds",
                            "https://www.googleapis.com/auth/drive"]
                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                        'credentials.json', scope)
                    client = gspread.authorize(creds)

                    spreadsheet_id = config['spreadsheet']

                    sheet_name = config['2nr']
                    sheet = client.open_by_key(
                        spreadsheet_id).worksheet(sheet_name)
                    # Insert user, password, and timestamp into first empty row
                    sheet = client.open_by_key(
                        spreadsheet_id).worksheet(sheet_name)
                    values = sheet.col_values(1)

                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                    rows = sheet.get_all_values()

                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                    regex = re.compile(r'\S+\s\S+')
                    sheet_name = config['2nr']
                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                    num_rows = sum(1 for row in rows if regex.match(row[0]))
                    window['total'].update(num_rows)

                    time.sleep(300)
                    cells = sheet.get_all_values()

                    # Armazena as células que correspondem à condição
                    matches = [cell for row in cells for cell in row if
                               re.match(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', cell)]

                    # Armazena a lista de células correspondentes à condição em uma variável
                    regex2nr = matches
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] {len(regex2nr)} conta(s) encontrada.')
                window.Refresh()
                time.sleep(3)
                try:
                    d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(timeout=60)
                except Exception as e:
                    print(e)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao clicar em login. Tentando novamente.')
                    window.Refresh()
                    subprocess.run(
                        f'uiautomator2 -s {porta} uninstall com.github.uiautomator',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    raise Exception('Ocorreu um erro ao clicar em login.')
                time.sleep(5)
                spreadsheet_id = config['spreadsheet']
                sheet_name = config['2nr']
                sheet = client.open_by_key(
                    spreadsheet_id).worksheet(sheet_name)
                # Obtém todas as células

                # Define a faixa de células para leitura
                first_linha = sheet.cell(1, 1).value

                # Divide a string em duas partes separadas por um espaço em branco
                partes = first_linha.split(' ')

                # Atribui a primeira parte (endereço de e-mail) à variável email2nr
                email2nr = partes[0]

                # Atribui a segunda parte (texto) à variável senha2nr
                senha2nr = partes[1]
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Email 2NR: {email2nr}')
                window.Refresh()
                d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email2nr)
                time.sleep(0.5)
                d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha2nr)
                time.sleep(0.5)
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                time.sleep(3)
                perm = d(resourceId='pl.rs.sip.softphone.newapp:id/messages')
                if perm.exists(timeout=30):
                    time.sleep(10)
                    pass
                else:
                    try:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Conta não existe.')
                        window.Refresh()
                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                            'credentials.json', scope)
                        client = gspread.authorize(creds)
                        # Abre a planilha e a planilha de uma determinada aba
                        spreadsheet_id = config['spreadsheet']
                        sheet_name = config['2nr']
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)

                        # Apaga a primeira célula da coluna A e desloca as células abaixo
                        sheet.delete_rows(1, 1)
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')
                    except Exception as e:
                        print(e)
                    raise Exception('skip')
                try:
                    qtd_num2 = d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[*]/androidx.appcompat.widget.LinearLayoutCompat/android.widget.LinearLayout/android.widget.TextView[1]')
                    qtd_num = qtd_num2.all()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] {len(qtd_num)} número(s) encontrado.')
                except Exception as e:
                    print(e)
                if len(qtd_num) == 0:
                    try:
                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                            'credentials.json', scope)
                        client = gspread.authorize(creds)
                        # Abre a planilha e a planilha de uma determinada aba
                        spreadsheet_id = config['spreadsheet']
                        sheet_name = config['2nr']
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)

                        # Apaga a primeira célula da coluna A e desloca as células abaixo
                        sheet.delete_rows(1, 1)
                    except Exception as e:
                        print(e)
                    continue
                window.Refresh()
                try:
                    num = d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat/android.widget.LinearLayout/android.widget.TextView[1]').get_text()
                    num = num.replace(' ', '')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Número: +48{num}')
                    window.Refresh()
                    email = num
                except Exception as e:
                    print(e)
                d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonSettings').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()

                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo instagram.')
                window.Refresh()
                try:
                    subprocess.run(
                        f'adb -s {porta} shell pm grant com.instagram.android android.permission.READ_CONTACTS',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                except:
                    pass
                d.app_start('com.instagram.android')
                try:
                    d.xpath(
                        '//android.widget.Button[@content-desc="Criar nova conta"]').click(timeout=120)
                except:
                    conteudo = config['vpn']
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Pagina Estática.')
                    window.Refresh()
                    if conteudo == "AVG":
                        vpn_avg()
                    elif conteudo == "SurfShark":
                        vpn_surf()
                    elif conteudo == "Nenhuma":
                        nenhuma_vpn()
                    elif conteudo == "Avast":
                        vpn_avast()
                    elif conteudo == "ExpressVPN":
                        vpn_express()
                    elif conteudo == "PiaVPN":
                        vpn_pia()
                    elif conteudo == "TunnelBear":
                        vpn_tunnelbear()
                    elif conteudo == "BetterNet":
                        vpn_better()
                    elif conteudo == "CyberGhost":
                        vpn_cyberghost()
                    elif conteudo == "NordVPN":
                        vpn_nord()
                    elif conteudo == "HotspotShield":
                        vpn_hotspotshield()
                    elif conteudo == "WindscribeVPN":
                        vpn_windscribe()
                    elif conteudo == "HmaVPN":
                        vpn_hma()
                    else:
                        window['output'].print(
                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                        window.Refresh()
                    raise Exception('skip')
                # time.sleep(6)
                # novo_layout = d.xpath('//android.view.View[@content-desc="Qual é o seu nome?"]')
                # if len(novo_layout) == 1:
                #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Layout novo encontrado, reiniciando app.')
                #    window.Refresh()
                #    raise Exception("skip.")

                ######################################################################
                lista_user = random.choices(range(0, 9), k=2)
                lista_letras = random.choices(letras, k=1)

                with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                    nomes = nomes_arquivo.readlines()

                with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                    sobrenomes = sobrenomes_arquivo.readlines()

                nomea = fake.first_name_male().replace(" ", "")
                nome = unicodedata.normalize('NFKD', nomea).encode(
                    'ASCII', 'ignore').decode('ASCII')
                sobrenomea = fake.last_name().replace(" ", "").lower()
                sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                    'ASCII', 'ignore').decode('ASCII')
                nome_completo = nome + ' ' + sobrenome
                nome_completo_s = nome + sobrenome
                numeros_concatenados = ''.join(
                    str(numero) for numero in lista_user)
                user_completo1 = nome_completo_s + '' + \
                    str(numeros_concatenados) + ''.join(lista_letras)

                user_completo = random.randint(1, len(user_completo1))
                # Insira o ponto no índice aleatório
                string_with_dot = user_completo1[:user_completo] + \
                    '_' + user_completo1[user_completo:]
                user_completo_antigo = string_with_dot.lower()

                escolha = random.choice(["_", "."])
                user_completo = nome + escolha + sobrenome + \
                    str(numeros_concatenados) + ''.join(lista_letras)
                ######################################################################
                time.sleep(10)
                layout1 = d.xpath(
                    '//android.view.View[@content-desc="Crie um nome de usuário"]')
                layout2 = d(resourceId='android:id/button2')
                layout3 = d.xpath(
                    '//android.view.View[@content-desc="Qual é o número do seu celular?"]')
                layout3v2 = d.xpath(
                    '//android.view.View[@content-desc="Qual é seu número de celular ou email?"]')
                layout4 = d.xpath(
                    '//android.view.View[@content-desc="Crie uma senha"]')
                if layout1.exists:
                    layout_usado = 'layout1'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout1 novo encontrado.')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(4)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=20.0)
                    except Exception as e:
                        print(e)
                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)

                elif layout2.exists:
                    layout_usado = 'layout2'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout2 novo encontrado.')
                    window.Refresh()
                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(4)
                    d.xpath(
                        '//android.widget.Button[@content-desc="Avançar"]/android.view.ViewGroup').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.Button[@content-desc="Avançar"]/android.view.ViewGroup').click()
                    time.sleep(5)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=10.0)
                    except Exception as e:
                        pass

                elif layout3.exists or layout3v2.exists:
                    layout_usado = 'layout3'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout3 novo encontrado.')
                    window.Refresh()
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                        time.sleep(4)
                    else:
                        pass
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=10.0)
                    except Exception as e:
                        print(e)
                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        nome_completo)
                    time.sleep(1)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nome escolhido: {nome_completo}')
                    window.Refresh()
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                    window.Refresh()
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        '')
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(3)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(3)

                elif layout4.exists:
                    layout_usado = 'layout4'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout4 novo encontrado.')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.Button[@content-desc="Avançar"]/android.view.ViewGroup').click()
                    time.sleep(4)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=20.0)
                    except Exception as e:
                        print(e)
                    time.sleep(4)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                    window.Refresh()
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        '')
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(3)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)

                else:
                    layout_usado = 'layout_normal'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout normal encontrado.')
                    window.Refresh()
                    # raise Exception('Manutenção.')
                    cancel = d(resourceId='com.google.android.gms:id/cancel')
                    if cancel.exists(timeout=10):
                        d(resourceId='com.google.android.gms:id/cancel').click()
                    senha = gerar_senha(12)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        nome_completo)
                    time.sleep(1)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nome escolhido: {nome_completo}')
                    window.Refresh()
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=20.0)
                    except Exception as e:
                        print(e)
                    # salvar_senha = d.xpath('//android.view.View[@content-desc="Agora não"]')
                    # if salvar_senha.exists:
                    #    d.xpath('//android.view.View[@content-desc="Agora não"]').click()

                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Alterar nome de usuário"]').click(timeout=5)
                    except:
                        pass
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                    window.Refresh()
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        '')
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(3)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    time.sleep(3)
                    selecionar_sms = d.xpath(
                        '//android.view.View[@content-desc="Enviar código por SMS"]')
                    if selecionar_sms.exists:
                        selecionar_sms.click()
                        time.sleep(1)
                        d.xpath(
                            '//android.view.View[@content-desc="Enviar código"]').click()
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)

                codigo_invalido = d.xpath(
                    '//android.view.View[@content-desc="Não recebi o código"]')
                d.xpath(
                    '//android.view.View[@content-desc="Concordo"]').click()
                time.sleep(5)
                errodetec = d.xpath(
                    '//android.view.View[@content-desc="Concordo"]')
                if errodetec.exists:
                    d.xpath(
                        '//android.view.View[@content-desc="Concordo"]').click()
                    time.sleep(5)

                errodetec = d.xpath(
                    '//android.view.View[@content-desc="Concordo"]')
                if errodetec.exists:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Instagram não deixou avançar.')
                    window.Refresh()

                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
                window.Refresh()
                time.sleep(45)
                verificar = d.xpath(
                    '//android.view.View[@content-desc="Adicionar foto"]')
                verificar2 = d.xpath(
                    '//android.view.View[@content-desc="Aceite os termos e políticas do Instagram"]')

                try:
                    if verificar.exists:
                        try:
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                   text_color=('lime'))
                            window.Refresh()
                            seguido = False
                            contagem += 1
                            window['criadas'].update(contagem)
                            window.Refresh()
                            now = datetime.now()
                            now_brasilia = tz.localize(now)
                            timestamp = now_brasilia.strftime(
                                "%d/%m/%Y %H:%M:%S")
                            try:
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                          conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            except Exception as e:
                                print(e)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                tempo_aleatorio = random.randint(10, 40)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                time.sleep(tempo_aleatorio)
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                          conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            window['total'].update(num_rows)
                            random_number = random.random()

                            # Definir a chance desejada (10%)
                            chance = 0.2

                            # Verificar se o número aleatório está abaixo da chance
                            if random_number < chance and not user_mysql == "wn3":
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                    funcionamento, scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                sheet_name = 'relatorio_geral'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                          conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)
                        except Exception as e:
                            print(e)
                            pass
                        window.Refresh()
                        arquivo = open(
                            'configuracoes/contas/contas_criadas.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(user_completo + ' ' + senha + "\n")
                        arquivo = open(
                            'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(
                            email + '\n' + user_completo + '\n' + senha + "\n\n")
                        try:
                            d.xpath(
                                '//android.view.View[@content-desc="Pular"]').click()
                            time.sleep(2)
                            d(resourceId='com.instagram.android:id/skip_button').click()
                            time.sleep(2)
                            d(resourceId='com.instagram.android:id/negative_button').click()
                            time.sleep(2)
                            d(resourceId='com.instagram.android:id/skip_button').click()
                            skip_button = d(
                                resourceId='com.instagram.android:id/skip_button')
                            time.sleep(2)
                            if skip_button.exists:
                                d(resourceId='com.instagram.android:id/skip_button').click()
                            time.sleep(4)
                            try:
                                element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                target_text = "Seguir"

                                # Encontre todos os elementos que correspondem ao ID fornecido
                                elements = d(resourceId=element_id)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Seguindo sugeridos...')
                                window.Refresh()
                                time.sleep(5)
                                for element in elements:
                                    if element.get_text() == target_text:
                                        element.click()
                                        time.sleep(1)
                                try:
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                except:
                                    pass
                            except Exception as e:
                                print(e)
                                time.sleep(2)
                                element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                target_text = "Seguir"

                                # Encontre todos os elementos que correspondem ao ID fornecido
                                elements = d(resourceId=element_id)
                                # window['output'].print("Seguindo sugeridos...")
                                window.Refresh()
                                for element in elements:
                                    if element.get_text() == target_text:
                                        element.click()
                                        time.sleep(1)
                                d.xpath(
                                    '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                            time.sleep(1)
                            try:
                                d(resourceId='com.instagram.android:id/button_text').click(timeout=10)
                            except:
                                try:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                except:
                                    time.sleep(2)
                                    try:
                                        d(resourceId='com.instagram.android:id/tab_avatar').click()
                                    except:
                                        d.app_stop("com.instagram.android")
                                        time.sleep(1)
                                        d.app_start("com.instagram.android")
                                        time.sleep(30)
                                        try:
                                            pagina_login = d.xpath(
                                                '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                            if pagina_login.exists:
                                                pagina_login.click()
                                                time.sleep(5)
                                                d.xpath(
                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                                    senha)
                                                pagina_login.click()
                                                time.sleep(3)
                                                d.xpath(
                                                    '//android.view.View[@content-desc="Agora não"]').click()
                                            else:
                                                d(resourceId='com.instagram.android:id/profile_tab').click()
                                        except:
                                            time.sleep(2)
                                            pagina_login = d.xpath(
                                                '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                            if pagina_login.exists:
                                                pagina_login.click()
                                                time.sleep(5)
                                                d.xpath(
                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                                    senha)
                                                pagina_login.click()
                                                time.sleep(3)
                                                d.xpath(
                                                    '//android.view.View[@content-desc="Agora não"]').click()
                                            else:
                                                d(resourceId='com.instagram.android:id/tab_avatar').click()

                            sms = False
                        except Exception as e:
                            d.app_stop("com.instagram.android")
                            time.sleep(1)
                            d.app_start("com.instagram.android")
                            time.sleep(40)
                            try:
                                pagina_login = d.xpath(
                                    '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                if pagina_login.exists:
                                    pagina_login.click()
                                    time.sleep(5)
                                    d.xpath(
                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                        senha)
                                    pagina_login.click()
                                else:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                            except:
                                time.sleep(2)
                                pagina_login = d.xpath(
                                    '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                if pagina_login.exists:
                                    pagina_login.click()
                                    time.sleep(5)
                                    d.xpath(
                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                        senha)
                                    pagina_login.click()
                                else:
                                    d(resourceId='com.instagram.android:id/tab_avatar').click()
                    elif verificar2.exists:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Verificando novamente...')
                        window.Refresh()
                        d.app_stop("com.instagram.android")
                        time.sleep(1)
                        d.app_start("com.instagram.android")

                        if d.xpath('//android.view.View[@content-desc="Esqueceu a senha?"]').exists(timeout=60):
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                user_completo)
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                senha)
                            d.xpath(
                                '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup').click()
                            d.xpath(
                                '//android.view.View[@content-desc="Agora não"]').click()

                        verificar3 = d.xpath(
                            '//android.widget.FrameLayout[@content-desc="Perfil"]/android.view.ViewGroup')
                        time.sleep(40)
                        if verificar3.exists:
                            try:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                                window.Refresh()
                                contagem = contagem + 1
                                sms = False
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")
                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                              conteudo + ' - ' + app]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                              conteudo + ' - ' + app]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                window['total'].update(num_rows)
                                random_number = random.random()

                                # Definir a chance desejada (10%)
                                chance = 0.2

                                # Verificar se o número aleatório está abaixo da chance
                                if random_number < chance and not user_mysql == "wn3":
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                        funcionamento, scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                    sheet_name = 'relatorio_geral'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)
                            except Exception as e:
                                print(e)
                        else:
                            if seguido is True:
                                seguido = False
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] SMS seguidos, Trocando de número.')
                                window.Refresh()
                                d.app_start('pl.rs.sip.softphone.newapp')
                                time.sleep(4)
                                d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                                d.xpath(
                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                                window.Refresh()
                                sms = True
                            elif seguido is False:
                                seguido = True
                            try:
                                conteudo = config['vpn']

                                # Executa a função correspondente ao conteúdo do arquivo
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                            except Exception as e:
                                raise Exception('skip')
                                sms = True
                                continue
                    else:
                        verificar = d(
                            resourceId='com.instagram.android:id/profile_tab')
                        if verificar.exists:
                            try:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                                window.Refresh()
                                seguido = False
                                contagem += 1
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")
                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                window['total'].update(num_rows)
                                random_number = random.random()

                                # Definir a chance desejada (10%)
                                chance = 0.2

                                # Verificar se o número aleatório está abaixo da chance
                                if random_number < chance and not user_mysql == "wn3":
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                        funcionamento, scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                    sheet_name = 'relatorio_geral'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)
                            except Exception as e:
                                print(e)
                                pass
                            window.Refresh()
                            arquivo = open(
                                'configuracoes/contas/contas_criadas.txt', 'a')
                            # Escreva mais conteúdo no arquivo
                            arquivo.write(user_completo + ' ' + senha + "\n")
                            arquivo = open(
                                'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                            # Escreva mais conteúdo no arquivo
                            arquivo.write(
                                email + '\n' + user_completo + '\n' + senha + "\n\n")
                            try:
                                d.xpath(
                                    '//android.view.View[@content-desc="Pular"]').click()
                                time.sleep(2)
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(2)
                                d(resourceId='com.instagram.android:id/negative_button').click()
                                time.sleep(2)
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(4)
                                try:
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Seguindo sugeridos...')
                                    window.Refresh()
                                    time.sleep(5)
                                    for element in elements:
                                        if element.get_text() == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                except Exception as e:
                                    print(e)
                                    time.sleep(2)
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window['output'].print(
                                        "Seguindo sugeridos...")
                                    window.Refresh()
                                    for element in elements:
                                        if element.get_text() == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                time.sleep(1)
                                try:
                                    d(resourceId='com.instagram.android:id/button_text').click()
                                except:
                                    pass
                                time.sleep(3)
                                try:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                except:
                                    time.sleep(2)
                                    d(resourceId='com.instagram.android:id/tab_avatar').click()
                                sms = False
                            except Exception as e:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Reabrindo Instagram.')
                                window.Refresh()
                                d.app_stop('com.instagram.android')
                                d.app_start('com.instagram.android')
                                time.sleep(20)
                                pass
                        else:
                            if seguido is True:
                                seguido = False
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] SMS seguidos, Trocando de número.')
                                window.Refresh()
                                d.app_start('pl.rs.sip.softphone.newapp')
                                time.sleep(4)
                                d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                                d.xpath(
                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                                window.Refresh()
                                sms = True
                            elif seguido is False:
                                seguido = True
                            try:
                                conteudo = config['vpn']

                                # Executa a função correspondente ao conteúdo do arquivo
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                            except Exception as e:
                                raise Exception('skip')
                                continue
                except Exception as e:
                    print(e)
                    if conteudo == "AVG":
                        vpn_avg()
                    elif conteudo == "SurfShark":
                        vpn_surf()
                    elif conteudo == "Nenhuma":
                        nenhuma_vpn()
                    elif conteudo == "Avast":
                        vpn_avast()
                    elif conteudo == "ExpressVPN":
                        vpn_express()
                    elif conteudo == "PiaVPN":
                        vpn_pia()
                    elif conteudo == "TunnelBear":
                        vpn_tunnelbear()
                    elif conteudo == "BetterNet":
                        vpn_better()
                    elif conteudo == "CyberGhost":
                        vpn_cyberghost()
                    elif conteudo == "NordVPN":
                        vpn_nord()
                    elif conteudo == "HotspotShield":
                        vpn_hotspotshield()
                    elif conteudo == "WindscribeVPN":
                        vpn_windscribe()
                    elif conteudo == "HmaVPN":
                        vpn_hma()
                    else:
                        window['output'].print(
                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                        window.Refresh()
                    sms = True
                    raise Exception('skip')
                while sms is False:
                    senha = gerar_senha(12)
                    try:
                        time.sleep(3)
                        try:
                            d(resourceId='com.instagram.android:id/profile_tab').click(timeout=120)
                        except:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu algum erro nesta conta.')
                            window.Refresh()
                            raise Exception('Erro na conta')
                        window['output'].print(linha_ret)
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Criação de outro perfil.')
                        window.Refresh()
                        seguido = False
                        # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True)
                        # Clicar no botão de perfil

                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/action_bar_title_chevron').click()
                        time.sleep(2)
                        # Clicar em perfis
                        try:
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout[2]/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.ListView/android.widget.LinearLayout[last()]/android.widget.FrameLayout/android.widget.ImageView').click()
                        except Exception as e:
                            print(e)
                            print('Erro aq')
                            time.sleep(200)
                        # Clicar em adicionar conta
                        d.xpath(
                            '//android.widget.Button[@content-desc="Criar nova conta"]').click()

                        time.sleep(3)
                        # Gerar nome de usuário, digitar no campo e clicar em avançae
                        lista_user = random.choices(range(0, 9), k=2)
                        lista_letras = random.choices(letras, k=1)

                        with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                            nomes = nomes_arquivo.readlines()

                        with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                            sobrenomes = sobrenomes_arquivo.readlines()

                        nomea = fake.first_name_male().replace(" ", "")
                        nome = unicodedata.normalize('NFKD', nomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        sobrenomea = fake.last_name().replace(" ", "").lower()
                        sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        nome_completo = nome + sobrenome
                        numeros_concatenados = ''.join(
                            str(numero) for numero in lista_user)
                        user_completo1 = nome_completo + '' + \
                            str(numeros_concatenados) + ''.join(lista_letras)

                        user_completo = random.randint(1, len(user_completo1))
                        # Insira o ponto no índice aleatório
                        string_with_dot = user_completo1[:user_completo] + \
                            '_' + user_completo1[user_completo:]
                        user_completo_antigo = string_with_dot.lower()

                        escolha = random.choice(["_", "."])
                        user_completo = nome + escolha + sobrenome + \
                            str(numeros_concatenados) + ''.join(lista_letras)
                        print(user_completo)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: ' + user_completo)
                        window.Refresh()
                        d(resourceId='com.instagram.android:id/username').set_text(
                            user_completo)
                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/button_text').click()
                        # Digitar senha e avançar
                        time.sleep(3)
                        try:
                            d(resourceId='com.instagram.android:id/password').set_text(
                                senha)
                        except:
                            try:
                                conteudo = config['vpn']
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()

                            except Exception as e:
                                raise Exception('skip')
                        d(resourceId='com.instagram.android:id/button_text').click()
                        # Clicar em concluir cadastro
                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/button_text').click()

                        time.sleep(4)
                        feedback = d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.View')
                        if feedback.exists:
                            sms = True

                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
                        window.Refresh()
                        # WebDriverWait(driver, 40).until(EC.visibility_of_element_located)(((By.XPATH,
                        #                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')

                        verificar = d(
                            resourceId='com.instagram.android:id/connect_text')
                        if verificar.exists(timeout=60):
                            time.sleep(20)
                            verificar = d(
                                resourceId='com.instagram.android:id/connect_text')
                        if verificar.exists:
                            try:
                                conteudo = config['vpn']
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                                window.Refresh()
                                contagem += 1
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")

                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))

                                window['total'].update(num_rows)
                                try:
                                    random_number = random.random()

                                    # Definir a chance desejada (10%)
                                    chance = 0.2

                                    # Verificar se o número aleatório está abaixo da chance
                                    if random_number < chance and not user_mysql == "wn3":
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                 "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                            funcionamento, scope)
                                        client = gspread.authorize(creds)

                                        spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                        sheet_name = 'relatorio_geral'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                                  conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:G{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)
                                except:
                                    pass

                                window.Refresh()
                                arquivo = open(
                                    'configuracoes/contas/contas_criadas.txt', 'a')
                                # Escreva mais conteúdo no arquivo
                                arquivo.write(user_completo +
                                              ' ' + senha + "\n")
                                arquivo = open(
                                    'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                                # Escreva mais conteúdo no arquivo
                                arquivo.write(
                                    email + '\n' + user_completo + '\n' + senha + "\n\n")
                                window.Refresh()
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(1)
                                d(resourceId='com.instagram.android:id/negative_button').click()
                                time.sleep(3)
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(1)
                                try:
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Seguindo sugeridos...')
                                    window.Refresh()
                                    for element in elements:
                                        if element.get_text() == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                except Exception as e:
                                    print(e)
                                    d(resourceId='com.instagram.android:id/skip_button').click()
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window.Refresh()
                                    for element in elements:
                                        if element.text == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()

                                time.sleep(1)
                                time.sleep(3)
                                try:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                except Exception as e:
                                    print(e)
                                    d(resourceId='com.instagram.android:id/button_text').click()
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                sms = False
                            except Exception as e:
                                print(e)

                        else:
                            try:
                                conteudo = config['vpn']
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()

                            except Exception as e:
                                sms = True
                                if not str(e) == '':
                                    traceback.print_exc()
                                if not e == 'skip' or not e == 'Manutenção.':
                                    try:
                                        d.screenshot(
                                            f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                                    except Exception as e:
                                        print(e)
                                        pass
                    except Exception as e:
                        import traceback
                        if not str(e) == '':
                            traceback.print_exc()
                        print(e)
                        if not e == 'skip' or not e == 'Manutenção.':
                            try:
                                d.screenshot(
                                    f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                            except Exception as e:
                                print(e)
                                pass
                        sms = True

            except Exception as e:
                print(e)
                if not str(e) == '':
                    traceback.print_exc()
                if not e == 'skip' or not e == 'Manutenção.':
                    try:
                        d.screenshot(
                            f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                    except Exception as e:
                        print(e)
                        pass

        except Exception as e:
            print(e)
            import traceback
            if not str(e) == '':
                traceback.print_exc()
            if not e == 'skip' or not e == 'Manutenção.':
                try:
                    d.screenshot(
                        f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                except Exception as e:
                    print(e)
                    pass

            pass


def insta_face_lite():
    try:
        with open("config.json", "r") as f:
            config = json.load(f)
    except FileNotFoundError:
        config = {}
    SPREADSHEET_ID = config['spreadsheet']
    conteudo = config['vpn']
    senha = gerar_senha(12)
    maquina = config['maquina']
    tentativa = False
    email = 'InstaFace'
    seguido = False
    app = 'Lite'
    global recebido
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    # Código que gera a saída
    import os
    import time
    from datetime import datetime
    import requests
    import hashlib
    import subprocess

    # verifica se o arquivo existe na pasta do bo
    try:
        from py_random_useragent import UserAgent
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['pip', 'install', 'py_random_useragent'])
        from py_random_useragent import UserAgent

    try:
        import uiautomator2 as u2
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'uiautomator2==2.16.25'])
        subprocess.run(['deactivate'], shell=True)
        subprocess.run(['pip', 'install', '--upgrade', 'requests'])
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        import requests
        time.sleep(10)
        import uiautomator2 as u2

    try:

        import psutil
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['pip', 'install', 'psutil'])
        import psutil
    try:
        from gologin import GoLogin
    except:
        pass
    import os
    import time
    import requests
    import hashlib
    import subprocess
    from colorama import init, Fore, Back, Style
    from faker import Faker
    # teste

    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random
    try:
        import undetected_chromedriver as uc
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'undetected_chromedriver'])
        subprocess.run(['deactivate'], shell=True)
        import undetected_chromedriver as uc
    try:
        import phonenumbers
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'phonenumbers'])
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        import phonenumbers
    import string

    from minuteinbox import Inbox
    try:
        from selenium_profiles.webdriver import Chrome
        from selenium_profiles.profiles import profiles
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'selenium-profiles'])
        subprocess.run(['deactivate'], shell=True)
        from selenium_profiles.webdriver import Chrome
        from selenium_profiles.profiles import profiles
    # import seleniumwire.undetected_chromedriver as uc
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.common.keys import Keys
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.service import Service
    from selenium.webdriver import ChromeOptions

    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import NoSuchElementException
    from mailtm import Email
    import re
    import logging
    from phonenumbers import PhoneNumberFormat, geocoder
    logger = logging.getLogger(__name__)

    handler = logging.FileHandler('log.txt')
    handler.setLevel(logging.ERROR)

    logger.addHandler(handler)

    def vpn_avast():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Avast', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop("com.avast.android.vpn")
            d.app_start("com.avast.android.vpn", ".app.wizard.WizardActivity")
            time.sleep(10)
        except Exception as e:
            print(e)
        abc = False

    def nenhuma_vpn():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.facebook.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        time.sleep(10)

    def vpn_hotspotshield():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HotspotShield',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('hotspotshield.android.vpn')
            d.app_start('hotspotshield.android.vpn')
        except Exception as e:
            print(e)
        d(resourceId='hotspotshield.android.vpn:id/tryAgainButton').click()
        time.sleep(5)
        d(resourceId='hotspotshield.android.vpn:id/btnVpnConnect').click()

        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_pia():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da PiaVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.privateinternetaccess.android')
            d.app_start('com.privateinternetaccess.android')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()
        time.sleep(3)
        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()

        abc = False

    def vpn_express():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da ExpressVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.expressvpn.vpn')
            d.app_start('com.expressvpn.vpn')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.expressvpn.vpn:id/obiButton').click()
        time.sleep(3)
        d(resourceId='com.expressvpn.vpn:id/obiButton').click()

        abc = False

    def vpn_nord():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da NordVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        sms = True
        try:
            d.app_stop('com.nordvpn.android')
            d.app_start('com.nordvpn.android', '.MainActivity')

        except:
            pass
        time.sleep(10)
        time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_surf():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('com.surfshark.vpnclient.android')
            d.app_start('com.surfshark.vpnclient.android')
        except:
            pass
        time.sleep(15)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_better():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da BetterNet', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        try:
            d.app_stop('com.freevpnintouch')
            d.app_start('com.freevpnintouch')
        except:
            pass
        time.sleep(10)
        dialog = d(resourceId='com.freevpnintouch:id/dialogCtaPositive')
        connect = d(resourceId='com.freevpnintouch:id/buttonConnect').text
        if dialog.exists:
            d(resourceId='com.freevpnintouch:id/dialogCtaPositive').click()
            time.sleep(3)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            # time.sleep(5)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
        while connect == 'CONNECT':
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            time.sleep(4)
            connect = d(resourceId='com.freevpnintouch:id/buttonConnect').text
            # WebDriverWait(driver, 20).until(
            # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        ip = '127.0.0.1:' + porta

        output = subprocess.check_output(
            ['adb', '-s', ip, 'shell', 'ifconfig'])

        # Verifica se a conexão VPN está ativa
        if not "tun0" in str(output):
            window['output'].print("Não conectado na BetterNet.")
            window.Refresh()
            try:
                connect = d(
                    resourceId='com.freevpnintouch:id/buttonConnect').text
                d.app_stop('com.freevpnintouch')
                d.app_start('com.freevpnintouch')
                while connect == 'CONNECT':
                    d(resourceId='com.freevpnintouch:id/buttonConnect').click()
                    time.sleep(4)
                    connect = d(
                        resourceId='com.freevpnintouch:id/buttonConnect').text
            except:
                pass
        abc = False

    def vpn_cyberghost():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da CyberGhost', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('de.mobileconcepts.cyberghost')
            d.app_start('de.mobileconcepts.cyberghost')
        except:
            pass
        # time.sleep(3)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        rate = d(resourceId='de.mobileconcepts.cyberghost:id/rate_me_text')
        if rate.exists:
            d(resourceId='android:id/button2').click()
        time.sleep(2)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        abc = False

    def vpn_tunnelbear():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.tunnelbear.android')
            d.app_start("com.tunnelbear.android")
            while True:
                output = subprocess.check_output(
                    ['adb', '-s', porta, 'shell', 'ifconfig'])
                # print(str(output))
                if "tun0" in str(output):
                    print('Conectada')
                    break
                elif not "tun0" in str(output):
                    print('Reconectando')
                    try:
                        d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                        time.sleep(10)
                    except:
                        pass
        except Exception as e:
            print(e)
            pass

    def vpn_avg():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da AVG', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.avg.android.vpn')
            d.app_start("com.avg.android.vpn",
                        "com.avast.android.vpn.app.wizard.WizardActivity")
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #               stderr=subprocess.DEVNULL, check=True, shell=True)

        time.sleep(30)

    def vpn_windscribe():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Windscribe', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)
            d.app_stop("com.windscribe.vpn")
            d.app_start("com.windscribe.vpn")
        except:
            pass
        d(resourceId='com.windscribe.vpn:id/on_off_button').click()
        time.sleep(10)

    def vpn_hma():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HMA', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)

            d.app_stop("com.hidemyass.hidemyassprovpn")
            time.sleep(3)
            d.app_start('com.hidemyass.hidemyassprovpn',
                        'com.avast.android.vpn.activity.HmaOnboardingActivity')
        except:
            pass
        time.sleep(10)

    def gerar_id():
        chars = string.ascii_lowercase + string.digits
        android_id = ''.join(random.choice(chars) for i in range(16))
        return android_id

    def trocar_email():
        global nomea
        global nome
        global sobrenomea
        global sobrenome
        global nome_completo
        global nome_completo_s
        try:
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Trocando e-mail.')
            window.Refresh()

            chrome.get('https://accountscenter.instagram.com/personal_info/')
            try:
                WebDriverWait(chrome, 10).until(EC.element_to_be_clickable((By.XPATH,
                                                                            '/html/body/div[1]/div/div[1]/div/div[1]/div/div/div/div[1]/div[1]/div[2]/div[1]/div[2]/div/div/div/div[2]/main/div/div/div[3]/div/div[1]/div/div/a[2]/div[1]/div/div[1]/div/div/span[2]'))).click()
            except:
                WebDriverWait(chrome, 10).until(EC.element_to_be_clickable((By.XPATH,
                                                                            '/html/body/div/div/div[1]/div/div[1]/div/div/div/div[1]/div[1]/div[2]/div[1]/div[2]/div/div/div/div[2]/main/div/div/div[3]/div/div[1]/div/div/a[2]'))).click()
            time.sleep(10)

            chrome.get('https://accountscenter.instagram.com/accounts/')
            WebDriverWait(chrome, 35).until(EC.element_to_be_clickable((By.XPATH,
                                                                        "/html/body/div/div/div[1]/div/div[1]/div/div/div/div[1]/div[1]/div[2]/div[1]/div[2]/div/div/div/div[2]/main/main/div[3]/div/div/div/div[1]/div/div[2]/div/a/div/div[1]/div/span/span"))).click()
            try:
                WebDriverWait(chrome, 35).until(EC.element_to_be_clickable((By.XPATH,
                                                                            "/html/body/div[1]/div/div[1]/div/div[3]/div/div/div[2]/div/div/div/div/div/div/div/div[4]/div[3]/div/div/div/div/div/div/div/div/div[1]/div/span/span"))).click()

            except:
                WebDriverWait(chrome, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                           "/html/body/div/div/div[1]/div/div[3]/div/div/div[2]/div/div/div/div/div/div/div/div[6]/div[3]/div/div/div/div/div/div/div/div/div[1]/div/span/span"))).click()

            try:
                WebDriverWait(chrome, 35).until(EC.element_to_be_clickable((By.XPATH,
                                                                            "/html/body/div[1]/div/div[1]/div/div[3]/div/div/div[2]/div/div/div/div/div/div/div/div[4]/div[3]/div/div/div/div/div[1]/div[1]/div/div/div[1]/div/span/span"))).click()

            except:
                WebDriverWait(chrome, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                           "/html/body/div/div/div[1]/div/div[3]/div/div/div[2]/div/div/div/div/div/div/div/div[6]/div[3]/div/div/div/div/div[1]/div[1]/div/div/div[1]/div/span/span"))).click()

            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Facebook desvinculado à conta.')
            window.Refresh()
            chrome.get(
                'https://accountscenter.instagram.com/personal_info/contact_points/')
            try:
                WebDriverWait(chrome, 10).until(EC.element_to_be_clickable((By.XPATH,
                                                                            "/html/body/div/div/div[1]/div/div[3]/div/div/div[2]/div/div/div/div/div/div/div/div[3]/div[2]/div[4]/div/div/div[2]/div/div/div/div/div[1]/div[1]/div/div[2]/div/div/span[1]"))).click()

            except:
                WebDriverWait(chrome, 10).until(EC.element_to_be_clickable((By.XPATH,
                                                                            "/html/body/div[1]/div/div[1]/div/div[3]/div/div/div[2]/div/div/div/div/div/div/div/div[5]/div[2]/div[1]/div/div/div[2]/div/div/div/div/div[1]/div[1]/div/div[2]/div/div/span[1]"))).click()

            try:
                WebDriverWait(chrome, 10).until(EC.element_to_be_clickable((By.XPATH,
                                                                            "/html/body/div/div/div[1]/div/div[3]/div/div/div[2]/div/div/div/div/div/div/div/div[3]/div[2]/div[4]/div/div/div[2]/div[2]/div/div/div/div/div[1]/div/div/div/div/span"))).click()

            except:
                WebDriverWait(chrome, 10).until(EC.element_to_be_clickable((By.XPATH,
                                                                            "/html/body/div[1]/div/div[1]/div/div[3]/div/div/div[2]/div/div/div/div/div/div/div/div[5]/div[2]/div[1]/div/div/div[2]/div[2]/div/div/div/div/div[1]/div/div/div/div/span"))).click()

            try:
                WebDriverWait(chrome, 10).until(EC.element_to_be_clickable((By.XPATH,
                                                                            "/html/body/div[2]/div[1]/div/div[2]/div/div/div/div[3]/div[2]/div/div/div/div[1]/div/span/span"))).click()

            except:
                WebDriverWait(chrome, 10).until(EC.element_to_be_clickable((By.XPATH,
                                                                            "/html/body/div[3]/div[1]/div/div[2]/div/div/div/div[3]/div[2]/div/div/div/div[1]/div/span/span"))).click()

            try:
                WebDriverWait(chrome, 10).until(EC.element_to_be_clickable((By.XPATH,
                                                                            "/html/body/div/div/div[1]/div/div[3]/div/div/div[2]/div/div/div/div/div/div[2]/div/div[3]/div[2]/div[4]/div/div/div[1]/div[2]/span[2]/div"))).click()

            except:
                WebDriverWait(chrome, 10).until(EC.element_to_be_clickable((By.XPATH,
                                                                            "/html/body/div[1]/div/div[1]/div/div[3]/div/div/div[2]/div/div/div/div/div/div[2]/div/div[5]/div[2]/div[1]/div/div/div[1]/div[2]/span[2]/div"))).click()

            test = Email()
            while True:
                try:
                    nomea = fake.first_name_male().replace(" ", "")
                    nome = unicodedata.normalize('NFKD', nomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    sobrenomea = fake.last_name().replace(" ", "").lower()
                    sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    nome_completo = nome + ' ' + sobrenome
                    nome_completo_s = nome + sobrenome
                    test.register(username=nome_completo_s +
                                  str(random.randint(000, 999)), password=senha)
                    break  # Saia do loop se o registro for bem-sucedido

                except requests.exceptions.HTTPError as e:
                    nomea = fake.first_name_male().replace(" ", "")
                    nome = unicodedata.normalize('NFKD', nomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    sobrenomea = fake.last_name().replace(" ", "").lower()
                    sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    nome_completo = nome + ' ' + sobrenome
                    nome_completo_s = nome + sobrenome
                    if e.response.status_code == 422:
                        print("Erro 422: Unprocessable Entity. Tentando novamente...")
                        # Espere um segundo antes de tentar novamente
                        time.sleep(1)
                        continue  # Volte ao início do loop
                    else:
                        # Outro código de tratamento de erros, se necessário
                        # ...
                        break  # Saia do loop se ocorrer um erro diferente

                except requests.exceptions.RequestException as e:
                    nomea = fake.first_name_male().replace(" ", "")
                    nome = unicodedata.normalize('NFKD', nomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    sobrenomea = fake.last_name().replace(" ", "").lower()
                    sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    nome_completo = nome + ' ' + sobrenome
                    nome_completo_s = nome + sobrenome
                    # Tratamento de erros de conexão, se necessário
                    # ...
                    break  # Saia do loop se ocorrer um erro de conexão
            email = str(test.address)

            try:
                WebDriverWait(chrome, 10).until(EC.element_to_be_clickable((By.XPATH,
                                                                            "/html/body/div/div/div[1]/div/div[3]/div/div/div[2]/div/div/div/div/div/div/div/div[3]/div[2]/div[4]/div[2]/div/div/div/div/input"))).send_keys(
                    email)
            except:
                WebDriverWait(chrome, 10).until(EC.element_to_be_clickable((By.XPATH,
                                                                            "/html/body/div[1]/div/div[1]/div/div[3]/div/div/div[2]/div/div/div/div/div/div/div/div[5]/div[2]/div[1]/div[2]/div/div/div/div/input"))).send_keys(
                    email)

            try:
                WebDriverWait(chrome, 10).until(EC.element_to_be_clickable((By.XPATH,
                                                                            "/html/body/div/div/div[1]/div/div[3]/div/div/div[2]/div/div/div/div/div/div/div/div[4]/div[3]/div/div/div/div/div/div/div/div/div[1]/div/span/span"))).click()

            except:
                WebDriverWait(chrome, 10).until(EC.element_to_be_clickable((By.XPATH,
                                                                            "/html/body/div[1]/div/div[1]/div/div[3]/div/div/div[2]/div/div/div/div/div/div/div/div[6]/div[3]/div/div/div/div/div/div/div/div/div[1]/div/span/span"))).click()

            codigo = 0
        except Exception as e:
            print(e)
            pass

        def listener(message):
            global nome
            global sobrenome
            global cod
            time.sleep(10)
            if 'Instagram' in message['text']:
                cod = re.search(r'\d{6}', message['text']).group(0)
                global recebido
                recebido = True

        try:
            test.start(listener, interval=15)
            codigo = 0
            while codigo != 20:
                time.sleep(2)
                codigo = codigo + 1
            codigo = cod
        except Exception as e:
            if "Too Many Requests" in str(e):
                pass
            else:
                pass
        test.stop()
        if recebido is False:
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Codigo não recebido')
            window.Refresh()
            raise Exception('Codigo não recebido.')
        try:
            WebDriverWait(chrome, 10).until(EC.element_to_be_clickable((By.XPATH,
                                                                        "/html/body/div/div/div[1]/div/div[3]/div/div/div[2]/div/div/div/div/div/div[2]/div/div[3]/div[2]/div[4]/div[2]/div/div/div/div/input"))).send_keys(
                codigo)

        except:
            WebDriverWait(chrome, 10).until(EC.element_to_be_clickable((By.XPATH,
                                                                        "/html/body/div[1]/div/div[1]/div/div[3]/div/div/div[2]/div/div/div/div/div/div[2]/div/div[5]/div[2]/div[1]/div[2]/div/div/div/div/input"))).send_keys(
                codigo)

        try:
            WebDriverWait(chrome, 10).until(EC.element_to_be_clickable((By.XPATH,
                                                                        "/html/body/div/div/div[1]/div/div[3]/div/div/div[2]/div/div/div/div/div/div[2]/div/div[4]/div[3]/div/div/div/div/div/div/div/div/div[1]/div/span/span"))).click()

        except:
            WebDriverWait(chrome, 10).until(EC.element_to_be_clickable((By.XPATH,
                                                                        "/html/body/div[1]/div/div[1]/div/div[3]/div/div/div[2]/div/div/div/div/div/div[2]/div/div[6]/div[3]/div/div/div/div/div/div/div/div/div[1]/div/span/span"))).click()

        time.sleep(10)
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Email alterado com sucesso.')
        window.Refresh()
        chrome.get('https://instagram.com/accounts/logout')

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    window.Refresh()

    num = 'InstaFace'
    try:
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.')
        window.Refresh()
        scope = ["https://spreadsheets.google.com/feeds",
                 "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name(
            'credentials.json', scope)
        client = gspread.authorize(creds)

        spreadsheet_id = config['spreadsheet']
        sheet_name = 'contas'
        # Insert user, password, and timestamp into first empty row
        sheet = client.open_by_key(spreadsheet_id).worksheet(sheet_name)
        values = sheet.col_values(1)

        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
        rows = sheet.get_all_values()

        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
        regex = re.compile(r'\S+\s\S+')
        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
        num_rows = sum(1 for row in rows if regex.match(row[0]))
        window['total'].update(num_rows)
    except:
        pass
    first = True
    parar = False
    while parar is False:
        senha = gerar_senha(12)
        if parar is True:
            print('Parando Thread')
            break
        try:
            try:
                chrome.quit()
            except:
                pass
            try:
                gl.stop()
                gl.delete(profile_id)
            except:
                pass
        except:
            pass

        try:
            random_port = str(random.randint(1000, 9999))
            # gl = GoLogin({
            #    "token": apigologin,
            #    'extra_params': ['--window-position=0,0'],
            #    "port": random_port
            #    })
            # profile_id = gl.create({
            #    "name": 'Creator-FB',
            #    "os": 'win',
            #    "navigator": {
            #        "language": 'pt-BR',
            #        "userAgent": 'random', # Your userAgent (if you don't want to change, leave it at 'random')
            #        "resolution": '800x1800', # Your resolution (if you want a random resolution - set it to 'random')
            #        "platform": 'Win32',
            #    },
            #    'proxyEnabled': True, # Specify 'false' if not using proxy
            #    'proxy': {
            #        'mode': 'http',
            #        #'autoProxyRegion': 'br'
            #        'host': ip,
            #        'port': porta2,
            #        'username': usuario,
            #        'password': senha2,
            #    },
            #    "webRTC": {
            #        "mode": "alerted",
            #        "enabled": True,
            #    },
            # })
            #
            # gl = GoLogin({
            #    "token": apigologin,
            #    "port": random_port,
            #    'extra_params': ['--window-position=0,0', ],
            #    "profile_id": profile_id
            #    })

            UA = UserAgent()

            random_user_agent = UA.get_ua()

            chrome_driver_path = "chromedriver.exe"
            profile = profiles.Windows()  # or .Android()
            # debugger_address = gl.start()
            chrome_options = ChromeOptions()
            chrome_options.page_load_strategy = 'eager'
            if senha2 == '':
                chrome_options.add_argument(
                    f'--proxy-server=http://{ip}:{porta2}')
                options = {
                    'request_storage_base_dir': 'storage\\'
                    # 'ca_cert': 'C:\\Users\\welli\\Desktop\\Outros\\Creator 2.0.1\\ca.crt'
                }
            else:
                # options = {
                # 'request_storage_base_dir': 'storage\\'
                # 'ca_cert': 'C:\\Users\\welli\\Desktop\\Outros\\Creator 2.0.1\\ca.crt'  # Use own root certificate
                # 'proxy': {
                #    'http': f'http://{usuario}:{senha2}@{ip}:{porta2}'
                # }
                profile["proxy"] = {
                    "proxy": f"http://{usuario}:{senha2}@{ip}:{porta2}"
                }
            chrome_options.add_argument(f'user-agent={random_user_agent}')
            chrome_options.add_argument('--ignore-certificate-errors')
            chrome_options.add_argument('--ignore-ssl-errors')

            chrome_options.add_argument("--headless=new")
            # chrome_options.add_experimental_option("debuggerAddress", debugger_address)
            service = Service(executable_path=chrome_driver_path)
            # chrome = uc.Chrome(service=service, options=chrome_options)
            chrome = Chrome(service=service,
                            options=chrome_options, profile=profile)
            chrome.set_window_size(700, 2000)
            chrome.implicitly_wait(30)
            window['output'].print(linha_ret)
            window.Refresh()
            window['output'].print(
                f"[{datetime.now().strftime('%H:%M:%S')}] Abrindo site do Facebook")
            window.Refresh()
            chrome.get("https://www.facebook.com/signup/")
            ddi = random.choice(["2199", "1199", "2198", "1198"])
            final_number = ddi + str(random.randint(0, 9999999)).zfill(7)
            lista_user = random.choices(range(0, 9), k=2)
            lista_letras = random.choices(letras, k=1)
            nomea = fake.first_name_male().replace(" ", "")
            nome = unicodedata.normalize('NFKD', nomea).encode(
                'ASCII', 'ignore').decode('ASCII')
            sobrenomea = fake.last_name().replace(" ", "").lower()
            sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                'ASCII', 'ignore').decode('ASCII')
            nome_completo = nome + ' ' + sobrenome
            nome_completo_s = nome + sobrenome
            numeros_concatenados = ''.join(str(numero)
                                           for numero in lista_user)
            user_completo = nome_completo_s + '' + \
                str(numeros_concatenados) + ''.join(lista_letras)
            # chrome.get("https://www.facebook.com/signup/")
            chrome.find_element(By.NAME, "firstname").send_keys(nomea)
            chrome.find_element(By.NAME, "lastname").send_keys(sobrenomea)

            chrome.find_element(By.NAME, "reg_email__").send_keys(
                f'+55 {final_number}')
            chrome.find_element(By.NAME, "reg_passwd__").send_keys(senha)
            chrome.find_element(By.NAME, "birthday_day").send_keys(
                random.randint(10, 27))
            chrome.find_element(By.NAME, "birthday_year").send_keys(
                random.randint(1970, 2003))
            url = chrome.current_url
            chrome.find_element(By.NAME, "sex").click()
            # /html/body/div[1]/div[2]/div[1]/div[2]/div/div[2]/div/div/div[1]/form/div[1]/div[7]/span/span[1]/input

            time.sleep(5)
            chrome.find_element(By.NAME, "websubmit").click()
            substrings = ["confirmemail", "checkpoint"]
            cont = 1
            while True:
                # Aguardar um intervalo de tempo (opcional)
                # Coloque aqui qualquer espera necessária antes de capturar a URL novamente

                # Capturar a URL atual novamente
                nova_url = chrome.current_url

                # Verificar se a URL mudou e contém uma das substrings
                if nova_url != url and any(substring in nova_url for substring in substrings):
                    # Realizar ação quando a condição for atendida
                    print("A URL mudou.")
                    break
                else:
                    print("A URL não mudou.")
                    cont += 1
                    if cont >= 10:
                        window['output'].print(
                            f"[{datetime.now().strftime('%H:%M:%S')}] Algum erro no navegador, reiniciando.")
                        window.Refresh()
                        raise Exception("SMS.")
                    time.sleep(5)
                # Atualizar a URL anterior
                url = nova_url
            if "checkpoint" in nova_url:
                window['output'].print(
                    f"[{datetime.now().strftime('%H:%M:%S')}] SMS", text_color=('red'))
                window.Refresh()
                raise Exception("SMS.")
            chrome.find_element(By.XPATH,
                                "/html/body/div[1]/div[2]/div[1]/div/div/div[1]/div[2]/form/div[2]/div/a").click()

            def listener(message):
                global nome
                global sobrenome
                global cod
                if 'Facebook' in message['subject']:
                    cod = re.search(r'\d+', message['subject']).group(0)

            test = Email()
            while True:
                try:
                    nomea = fake.first_name_male().replace(" ", "")
                    nome = unicodedata.normalize('NFKD', nomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    sobrenomea = fake.last_name().replace(" ", "").lower()
                    sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    nome_completo = nome + ' ' + sobrenome
                    nome_completo_s = nome + sobrenome
                    test.register(username=nome_completo_s +
                                  str(random.randint(000, 999)), password=senha)
                    break  # Saia do loop se o registro for bem-sucedido

                except requests.exceptions.HTTPError as e:
                    nomea = fake.first_name_male().replace(" ", "")
                    nome = unicodedata.normalize('NFKD', nomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    sobrenomea = fake.last_name().replace(" ", "").lower()
                    sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    nome_completo = nome + ' ' + sobrenome
                    nome_completo_s = nome + sobrenome
                    if e.response.status_code == 422:
                        print("Erro 422: Unprocessable Entity. Tentando novamente...")
                        # Espere um segundo antes de tentar novamente
                        time.sleep(1)
                        continue  # Volte ao início do loop
                    else:
                        # Outro código de tratamento de erros, se necessário
                        # ...
                        break  # Saia do loop se ocorrer um erro diferente

                except requests.exceptions.RequestException as e:
                    nomea = fake.first_name_male().replace(" ", "")
                    nome = unicodedata.normalize('NFKD', nomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    sobrenomea = fake.last_name().replace(" ", "").lower()
                    sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    nome_completo = nome + ' ' + sobrenome
                    nome_completo_s = nome + sobrenome
                    # Tratamento de erros de conexão, se necessário
                    # ...
                    break  # Saia do loop se ocorrer um erro de conexão
            #

            email = str(test.address)
            window['output'].print(
                f"[{datetime.now().strftime('%H:%M:%S')}] Email: " + email)
            #
            window.Refresh()
            time.sleep(5)
            chrome.find_element(By.NAME, "contactpoint").send_keys(email)
            chrome.find_element(
                By.XPATH, "/html/body/div[5]/div[2]/div/div/form/div[3]/button").click()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando codigo...')
            window.Refresh()
            # fetch all emails in the inbox
            codigo = 0
            print(codigo)
            recebido = False

            def listener(message):
                global nome
                global sobrenome
                global cod
                if 'Facebook' in message['subject']:
                    global recebido
                    recebido = True
                    cod = re.search(r'\d+', message['subject']).group(0)

            try:
                test.start(listener, interval=5)
                codigo = 0
                while codigo != 20:
                    time.sleep(2)
                    codigo = codigo + 1
                codigo = cod
            except Exception as e:
                if "Too Many Requests" in str(e):
                    pass
                else:
                    pass
            print(codigo)
            if recebido is False:
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Codigo não recebido')
                window.Refresh()
                raise Exception('Codigo não recebido.')
            #
            test.stop()
            # chrome.execute_script("window.open('about:blank', '_blank');")
            # chrome.switch_to.window(chrome.window_handles[1])  # Mude para a nova guia
            # chrome.get('https://moakt.com/pt')
            # WebDriverWait(chrome, 35).until(EC.element_to_be_clickable((By.NAME, "random"))).click()
            # email = WebDriverWait(chrome, 35).until(EC.element_to_be_clickable((By.ID, "email-address"))).text
            # window['output'].print(f"[{datetime.now().strftime('%H:%M:%S')}] Email: " + email)
            # window.Refresh()
            # chrome.switch_to.window(chrome.window_handles[0])
            # chrome.find_element(By.NAME, "contactpoint").send_keys(email)
            # chrome.find_element(By.XPATH, "/html/body/div[5]/div[2]/div/div/form/div[3]/button").click()
            # window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando codigo...')
            # window.Refresh()
            # chrome.switch_to.window(chrome.window_handles[1])
            ##
            # cod = chrome.find_elements(By.XPATH, '/html/body/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div/table/tbody/tr[2]/td[1]/a')
            # while True:
            # chrome.refresh()
            # time.sleep(5)
            # cod = chrome.find_elements(By.XPATH, '/html/body/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div/table/tbody/tr[2]/td[1]/a')
            # if len(cod) == 1:
            # cod = chrome.find_element(By.XPATH, '/html/body/div[1]/div[1]/div[2]/div[2]/div[2]/div[2]/div/table/tbody/tr[2]/td[1]/a').text
            # codigo = re.search(r'\d+', cod).group(0)
            # print(cod)
            # chrome.close()
            # chrome.switch_to.window(chrome.window_handles[0])
            # break
            # else:
            # pass
            # WebDriverWait(chrome, 35).until(EC.element_to_be_clickable((By.XPATH, ""))).click()
            # WebDriverWait(chrome, 35).until(EC.element_to_be_clickable((By.XPATH, ""))).click()
            # WebDriverWait(chrome, 35).until(EC.element_to_be_clickable((By.XPATH, ""))).click()
            # WebDriverWait(chrome, 35).until(EC.element_to_be_clickable((By.XPATH, ""))).click()
            # WebDriverWait(chrome, 35).until(EC.element_to_be_clickable((By.XPATH, ""))).click()

            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
            window.Refresh()
            # test.stop()
            chrome.find_element(By.NAME, "code").send_keys(codigo)
            chrome.find_element(By.NAME, "confirm").click()
            WebDriverWait(chrome, 35).until(
                EC.element_to_be_clickable((By.XPATH, "/html/body/div[4]/div[2]/div/div/div/div[3]/div/a"))).click()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
            window.Refresh()
            time.sleep(10)
            if chrome.current_url == 'https://web.facebook.com/' or chrome.current_url == 'https://www.facebook.com/':
                window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Facebook criado com sucesso',
                                       text_color='cyan')
                window.Refresh()
            else:
                window['output'].print(
                    f"[{datetime.now().strftime('%H:%M:%S')}] SMS", text_color=('red'))
                window.Refresh()
                raise Exception('SMS')
            chrome.get("https://www.instagram.com/")
            try:
                WebDriverWait(chrome, 15).until(EC.element_to_be_clickable((By.XPATH,
                                                                            "/html/body/div[2]/div/div/div[1]/div/div/div/div[1]/section/main/article/div[2]/div[1]/div[2]/form/div/div[last()]/button"))).click()
            except:
                chrome.refresh()
                WebDriverWait(chrome, 15).until(EC.element_to_be_clickable((By.XPATH,
                                                                            "/html/body/div[2]/div/div/div[1]/div/div/div/div[1]/section/main/article/div[2]/div[1]/div[2]/form/div/div[last()]/button"))).click()
            try:
                confirm = chrome.find_element(By.NAME, "__CONFIRM__")
                confirm.click()
            except:
                chrome.refresh()
                confirm = chrome.find_element(By.NAME, "__CONFIRM__")
                confirm.click()
            while len(chrome.find_elements(By.NAME, "__CONFIRM__")) == 1:
                confirm = chrome.find_element(By.NAME, "__CONFIRM__")
                confirm.click()
                time.sleep(5)
            time.sleep(5)
            while not 'disclosure' in chrome.current_url:
                chrome.get("https://www.instagram.com/")
                WebDriverWait(chrome, 35).until(EC.element_to_be_clickable((By.XPATH,
                                                                            "/html/body/div[2]/div/div/div[1]/div/div/div/div[1]/section/main/article/div[2]/div[1]/div[2]/form/div/div[last()]/button"))).click()
                time.sleep(5)
                if len(chrome.find_elements(By.NAME, "__CONFIRM__")) == 1:
                    chrome.find_element(By.NAME, "__CONFIRM__").click()
                time.sleep(10)

            chrome.find_element(By.XPATH,
                                "/html/body/div[2]/div/div/div[1]/div/div/div/div[1]/section/main/div[2]/div/div/div/div/div[3]/button").click()
            time.sleep(2)
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
            chrome.find_element(By.NAME, "username").send_keys(user_completo)
            chrome.find_element(By.NAME, "password").send_keys(senha)
            url = chrome.current_url
            chrome.find_element(By.XPATH,
                                "/html/body/div[2]/div/div/div[1]/div/div/div/div[1]/div[1]/div/div[3]/form/div[4]/div/button").click()

            substrings = ["checkpoint"]
            while True:
                time.sleep(10)
                # Coloque aqui qualquer espera necessária antes de capturar a URL novamente

                # Capturar a URL atual novamente
                nova_url = chrome.current_url

                # Verificar se a URL mudou e contém uma das substrings
                if nova_url != url:
                    # Realizar ação quando a condição for atendida
                    print("A URL mudou.")
                    break
                elif len(chrome.find_elements(By.ID, 'ssfErrorAlert')) == 1:
                    chrome.get("https://www.instagram.com/")
                    time.sleep(5)
                    if len(chrome.find_elements(By.NAME, 'username')) == 1:
                        chrome.find_element(
                            By.NAME, "username").send_keys(user_completo)
                        chrome.find_element(
                            By.NAME, "password").send_keys(senha)
                        url_antiga = chrome.current_url
                        chrome.find_element(By.XPATH,
                                            "/html/body/div[2]/div/div/div[1]/div/div/div/div[1]/section/main/article/div[2]/div[1]/div[2]/form/div/div[3]/button").click()
                        # while url_antiga ==
                        time.sleep(15)
                    else:
                        chrome.find_element(By.XPATH,
                                            "/html/body/div[2]/div/div/div[1]/div/div/div/div[1]/section/main/article/div[2]/div/div[2]/div[2]/button").click()
                        WebDriverWait(chrome, 35).until(EC.element_to_be_clickable((By.XPATH,
                                                                                    "/html/body/div[2]/div/div/div[2]/div/div/div[1]/div/div[2]/div/div/div/div/div[2]/div/div/div[3]/button[1]")))
                        time.sleep(10)

                else:
                    print("A URL não mudou.")
                    time.sleep(5)
                # Atualizar a URL anterior
                url = nova_url
            if chrome.current_url == 'https://www.instagram.com/':
                conteudo = config['vpn']
                window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                       text_color=('lime'))
                window.Refresh()
                contagem += 1

                window['criadas'].update(contagem)
                window.Refresh()
                try:
                    now = datetime.now()
                    now_brasilia = tz.localize(now)
                    timestamp = now_brasilia.strftime("%d/%m/%Y %H:%M:%S")

                    scope = ["https://spreadsheets.google.com/feeds",
                             "https://www.googleapis.com/auth/drive"]
                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                        'credentials.json', scope)
                    client = gspread.authorize(creds)

                    spreadsheet_id = config['spreadsheet']
                    sheet_name = 'contas'
                    # Insert user, password, and timestamp into first empty row
                    sheet = client.open_by_key(
                        spreadsheet_id).worksheet(sheet_name)
                    values = sheet.col_values(1)
                    last_row = len(values)
                    values = [user_completo + ' ' + senha, email, timestamp, maquina, conteudo + ' - ' + app,
                              regiao_vpn, user_mysql]
                    cell_list = sheet.range(f'A{last_row + 1}:G{last_row + 1}')
                    for i, val in enumerate(values):
                        cell_list[i].value = val
                    sheet.update_cells(cell_list)

                    rows = sheet.get_all_values()

                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                    regex = re.compile(r'\S+\s\S+')

                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                    num_rows = sum(1 for row in rows if regex.match(row[0]))
                    window['total'].update(num_rows)

                    scope = ["https://spreadsheets.google.com/feeds",
                             "https://www.googleapis.com/auth/drive"]
                    creds = ServiceAccountCredentials.from_json_keyfile_dict(
                        funcionamento, scope)
                    client = gspread.authorize(creds)

                    spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                    sheet_name = 'relatorio_geral'
                    # Insert user, password, and timestamp into first empty row
                    sheet = client.open_by_key(
                        spreadsheet_id).worksheet(sheet_name)
                    values = sheet.col_values(1)
                    last_row = len(values)
                    values = [user_completo + ' ' + senha, email, timestamp, maquina, conteudo + ' - ' + app,
                              user_mysql]
                    cell_list = sheet.range(f'A{last_row + 1}:F{last_row + 1}')
                    for i, val in enumerate(values):
                        cell_list[i].value = val
                    sheet.update_cells(cell_list)

                    window.Refresh()
                    arquivo = open(
                        'configuracoes/contas/contas_criadas.txt', 'a')
                    # Escreva mais conteúdo no arquivo
                    arquivo.write(user_completo + ' ' + senha + "\n")
                    arquivo = open(
                        'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                    # Escreva mais conteúdo no arquivo
                    arquivo.write(email + '\n' + user_completo +
                                  '\n' + senha + "\n\n")
                    window.Refresh()
                except:
                    pass
                try:
                    trocar_email()
                except:
                    pass
                sms = False

            else:
                window['output'].print(
                    f"[{datetime.now().strftime('%H:%M:%S')}] SMS", text_color=('red'))
                window.Refresh()
                try:
                    chrome.quit()
                except:
                    pass
                gl.delete(profile_id)
                raise Exception('SMS')

            try:
                window['output'].print(linha_ret)
                window.Refresh()
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Criação de outro perfil.')
                window.Refresh()
                try:
                    with open("config.json", "r") as f:
                        config = json.load(f)
                except FileNotFoundError:
                    config = {}
                if config['app'] == '-instalite-':
                    pass
                elif config['app'] == '-insta-':
                    chrome.quit()
                    try:
                        gl.stop()
                    except:
                        pass
                    try:
                        comando = f"adb connect {porta}"
                        subprocess.run(comando, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True,
                                       shell=True)
                    except:
                        pass
                    try:
                        comando = f"adb connect {porta}"
                        subprocess.run(comando, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True,
                                       shell=True)
                        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                                       stdout=subprocess.DEVNULL,
                                       stderr=subprocess.DEVNULL, shell=True)
                        subprocess.run(
                            f'adb -s {porta} shell settings put global transition_animation_scale 0',
                            stdout=subprocess.DEVNULL,
                            stderr=subprocess.DEVNULL, shell=True)
                        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                                       stdout=subprocess.DEVNULL,
                                       stderr=subprocess.DEVNULL, shell=True)
                    except:
                        pass

                    def gerar_id():
                        chars = string.ascii_lowercase + string.digits
                        android_id = ''.join(random.choice(chars)
                                             for i in range(16))
                        return android_id

                    gerar_id()
                    android_id = gerar_id()
                    subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                                   stdout=subprocess.DEVNULL,
                                   stderr=subprocess.DEVNULL, shell=True)
                    try:
                        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                       stdout=subprocess.DEVNULL,
                                       stderr=subprocess.DEVNULL, check=True, shell=True)
                    except:
                        pass
                    d = u2.connect(f'{porta}')

                    d.set_fastinput_ime(True)
                    d.app_start('com.instagram.android')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo instagram.')
                    window.Refresh()
                    time.sleep(10)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Nome de usuário, email ou número de celular"]').wait(
                            timeout=80)
                        d.xpath(
                            '//android.view.View[@content-desc="Nome de usuário, email ou número de celular"]').set_text(
                            user_completo)
                    except Exception as e:
                        print(e)
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                    d.xpath(
                        '//android.view.View[@content-desc="Senha"]').set_text(senha)
                    d.xpath(
                        '//android.view.View[@content-desc="Entrar"]').click()
                    d.xpath(
                        '//android.view.View[@content-desc="Salvar suas informações de login?"]').wait(20)
                    if d.xpath('//android.view.View[@content-desc="Salvar suas informações de login?"]').exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Conta logada.')
                        window.Refresh()
                    while sms is False:
                        senha = gerar_senha(12)
                        d(resourceId='com.instagram.android:id/profile_tab').click()
                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/action_bar_title_chevron').click(timeout=50)
                        time.sleep(2)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout[2]/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.ListView/android.widget.LinearLayout[last()]/android.widget.FrameLayout/android.widget.ImageView').click()
                        time.sleep(4)
                        d.xpath(
                            '//android.widget.Button[@content-desc="Criar nova conta"]').click()
                        time.sleep(3)
                        # Gerar nome de usuário, digitar no campo e clicar em avançae
                        lista_user = random.choices(range(0, 9), k=2)
                        lista_letras = random.choices(letras, k=1)
                        nomea = fake.first_name_male().replace(" ", "")
                        nome = unicodedata.normalize('NFKD', nomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        sobrenomea = fake.last_name().replace(" ", "").lower()
                        sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        nome_completo = nome + sobrenome
                        numeros_concatenados = ''.join(
                            str(numero) for numero in lista_user)
                        user_completo = nome_completo + '' + \
                            str(numeros_concatenados) + ''.join(lista_letras)

                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: ' + user_completo)
                        window.Refresh()
                        d(resourceId='com.instagram.android:id/username').set_text(user_completo)
                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/button_text').click()
                        # Digitar senha e avançar
                        time.sleep(3)
                        try:
                            d(resourceId='com.instagram.android:id/password').set_text(senha)
                        except:
                            try:
                                conteudo = config['vpn']
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()

                            except:
                                sms = True
                        d(resourceId='com.instagram.android:id/button_text').click()
                        # Clicar em concluir cadastro
                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/button_text').click()

                        time.sleep(4)
                        feedback = d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.View')
                        if feedback.exists:
                            sms = True

                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
                        window.Refresh()
                        # WebDriverWait(driver, 40).until(EC.visibility_of_element_located)(((By.XPATH,
                        #                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')))
                        # d(resourceId='com.instagram.android:id/connect_text').wait()
                        verificar = d(
                            resourceId='com.instagram.android:id/connect_text')
                        if verificar.exists(timeout=30):
                            try:
                                conteudo = config['vpn']
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                                window.Refresh()
                                contagem += 1
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")

                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                          conteudo + ' - ' + app]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                                window['total'].update(num_rows)
                                time.sleep(4)
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                    funcionamento, scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                sheet_name = 'relatorio_geral'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                          conteudo + ' - ' + app, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:F{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                            except:
                                pass

                            senha = gerar_senha(12)
                            window.Refresh()
                            arquivo = open(
                                'configuracoes/contas/contas_criadas.txt', 'a')
                            # Escreva mais conteúdo no arquivo
                            arquivo.write(user_completo + ' ' + senha + "\n")
                            arquivo = open(
                                'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                            # Escreva mais conteúdo no arquivo
                            arquivo.write(
                                email + '\n' + user_completo + '\n' + senha + "\n\n")
                            window.Refresh()
                            d(resourceId='com.instagram.android:id/skip_button').click()
                            time.sleep(1)
                            d(resourceId='com.instagram.android:id/negative_button').click()
                            time.sleep(3)
                            d(resourceId='com.instagram.android:id/skip_button').click()
                            time.sleep(1)
                            try:
                                d.xpath(
                                    '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                            except:
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                d.xpath(
                                    '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()

                            time.sleep(1)
                            time.sleep(3)
                            try:
                                d(resourceId='com.instagram.android:id/profile_tab').click()
                            except:
                                d(resourceId='com.instagram.android:id/button_text').click()
                                d(resourceId='com.instagram.android:id/profile_tab').click()
                            sms = False
                            window['output'].print(linha_ret)
                            window.Refresh()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Criação de outro perfil.')
                            window.Refresh()
                        else:
                            try:
                                conteudo = config['vpn']
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()

                            except Exception as e:
                                sms = True
                                pass
                    else:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Houve algum erro ao logar.')
                        window.Refresh()
                        sms = True
                else:
                    try:
                        WebDriverWait(chrome, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                                   "/html/body/div[2]/div/div/div[1]/div/div/div/div[1]/section/main/article/div[2]/div[1]/div[2]/form/div/div[last()]/button"))).click()
                    except:
                        WebDriverWait(chrome, 5).until(EC.element_to_be_clickable((By.XPATH,
                                                                                   "/html/body/div[2]/div/div/div[1]/div/div/div/div[1]/section/main/div/div/div/div[2]/form/div/div[5]/button"))).click()
                    while not 'disclosure' in chrome.current_url:
                        chrome.get("https://www.instagram.com/")
                        WebDriverWait(chrome, 35).until(EC.element_to_be_clickable((By.XPATH,
                                                                                    "/html/body/div[2]/div/div/div[1]/div/div/div/div[1]/section/main/article/div[2]/div[1]/div[2]/form/div/div[last()]/button"))).click()
                        time.sleep(10)
                    chrome.find_element(By.XPATH,
                                        "/html/body/div[2]/div/div/div[1]/div/div/div/div[1]/section/main/div[2]/div/div/div/div/div[3]/button").click()
                    time.sleep(2)
                    lista_user = random.choices(range(0, 9), k=2)
                    lista_letras = random.choices(letras, k=1)
                    nomea = fake.first_name_male().replace(" ", "")
                    nome = unicodedata.normalize('NFKD', nomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    sobrenomea = fake.last_name().replace(" ", "").lower()
                    sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    nome_completo = nome + ' ' + sobrenome
                    nome_completo_s = nome + sobrenome
                    numeros_concatenados = ''.join(
                        str(numero) for numero in lista_user)
                    user_completo = nome_completo_s + '' + \
                        str(numeros_concatenados) + ''.join(lista_letras)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                    chrome.find_element(
                        By.NAME, "username").send_keys(user_completo)
                    chrome.find_element(By.NAME, "password").send_keys(senha)
                    url = chrome.current_url
                    chrome.find_element(By.XPATH,
                                        "/html/body/div[2]/div/div/div[1]/div/div/div/div[1]/div[1]/div/div[3]/form/div[4]/div/button").click()

                    substrings = ["checkpoint"]
                    while True:
                        # Aguardar um intervalo de tempo (opcional)
                        # Coloque aqui qualquer espera necessária antes de capturar a URL novamente

                        # Capturar a URL atual novamente
                        nova_url = chrome.current_url

                        # Verificar se a URL mudou e contém uma das substrings
                        if nova_url != url:
                            # Realizar ação quando a condição for atendida
                            print("A URL mudou.")
                            break
                        elif len(chrome.find_elements(By.ID, 'ssfErrorAlert')) == 1:
                            chrome.get("https://www.instagram.com/")
                            time.sleep(5)
                            if len(chrome.find_elements(By.NAME, 'username')) == 1:
                                chrome.find_element(
                                    By.NAME, "username").send_keys(user_completo)
                                chrome.find_element(
                                    By.NAME, "password").send_keys(senha)
                                chrome.find_element(By.XPATH,
                                                    "/html/body/div[2]/div/div/div[1]/div/div/div/div[1]/section/main/article/div[2]/div[1]/div[2]/form/div/div[3]/button").click()
                                time.sleep(10)
                            else:
                                chrome.find_element(By.XPATH,
                                                    "/html/body/div[2]/div/div/div[1]/div/div/div/div[1]/section/main/article/div[2]/div/div[2]/div[2]/button").click()
                                WebDriverWait(chrome, 35).until(EC.element_to_be_clickable((By.XPATH,
                                                                                            "/html/body/div[2]/div/div/div[2]/div/div/div[1]/div/div[2]/div/div/div/div/div[2]/div/div/div[3]/button[1]")))
                                time.sleep(10)

                        else:
                            print("A URL não mudou.")
                            time.sleep(5)
                        # Atualizar a URL anterior
                        url = nova_url
                    if chrome.current_url == 'https://www.instagram.com/':
                        conteudo = config['vpn']
                        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                               text_color=('lime'))
                        window.Refresh()
                        contagem += 1

                        trocar_email()

                        window['criadas'].update(contagem)
                        window.Refresh()
                        now = datetime.now()
                        now_brasilia = tz.localize(now)
                        timestamp = now_brasilia.strftime("%d/%m/%Y %H:%M:%S")

                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                            'credentials.json', scope)
                        client = gspread.authorize(creds)

                        spreadsheet_id = config['spreadsheet']
                        sheet_name = 'contas'
                        # Insert user, password, and timestamp into first empty row
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)
                        values = sheet.col_values(1)
                        last_row = len(values)
                        values = [user_completo + ' ' + senha, email, timestamp, maquina, conteudo + ' - ' + app,
                                  regiao_vpn, user_mysql]
                        cell_list = sheet.range(
                            f'A{last_row + 1}:G{last_row + 1}')
                        for i, val in enumerate(values):
                            cell_list[i].value = val
                        sheet.update_cells(cell_list)

                        rows = sheet.get_all_values()

                        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                        regex = re.compile(r'\S+\s\S+')

                        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                        num_rows = sum(
                            1 for row in rows if regex.match(row[0]))
                        window['total'].update(num_rows)

                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_dict(
                            funcionamento, scope)
                        client = gspread.authorize(creds)
                        try:
                            spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                            sheet_name = 'relatorio_geral'
                            # Insert user, password, and timestamp into first empty row
                            sheet = client.open_by_key(
                                spreadsheet_id).worksheet(sheet_name)
                            values = sheet.col_values(1)
                            last_row = len(values)
                            values = [user_completo + ' ' + senha, email, timestamp, maquina, conteudo + ' - ' + app,
                                      user_mysql]
                            cell_list = sheet.range(
                                f'A{last_row + 1}:F{last_row + 1}')
                            for i, val in enumerate(values):
                                cell_list[i].value = val
                            sheet.update_cells(cell_list)

                            window.Refresh()
                            arquivo = open(
                                'configuracoes/contas/contas_criadas.txt', 'a')
                            # Escreva mais conteúdo no arquivo
                            arquivo.write(user_completo + ' ' + senha + "\n")
                            arquivo = open(
                                'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                            # Escreva mais conteúdo no arquivo
                            arquivo.write(
                                email + '\n' + user_completo + '\n' + senha + "\n\n")
                            window.Refresh()
                            sms = False
                        except:
                            pass

                    else:
                        window['output'].print(
                            f"[{datetime.now().strftime('%H:%M:%S')}] SMS", text_color=('red'))
                        window.Refresh()
                        try:
                            chrome.quit()
                        except:
                            pass
                        gl.delete(profile_id)
                        raise Exception('SMS')
            except Exception as e:
                print(e)
                try:
                    if not os.path.exists('error_log'):
                        os.makedirs('error_log')
                    now = datetime.now()
                    timestamp = now.strftime('%Y%m%d_%H%M%S')

                    # Tirar o print da página
                    screenshot_path = os.path.join(
                        'error_log', f'screenshot_{timestamp}.png')
                    chrome.save_screenshot(screenshot_path)
                except:
                    pass
                try:
                    chrome.quit()
                except:
                    pass
                gl.delete(profile_id)
                sms = True
                continue

        except Exception as e:
            print(e)
            if not 'SMS.' in str(e):
                try:
                    if not os.path.exists('error_log'):
                        os.makedirs('error_log')
                    now = datetime.now()
                    timestamp = now.strftime('%Y%m%d_%H%M%S')

                    # Tirar o print da página
                    screenshot_path = os.path.join(
                        'error_log', f'screenshot_{timestamp}.png')
                    chrome.save_screenshot(screenshot_path)
                except:
                    pass
            try:
                chrome.quit()
            except:
                pass
            try:
                gl.stop()
                gl.delete(profile_id)
            except:
                pass
            sms = True
            continue


def executar_creator_2nr():
    global email
    global stop_event
    import time
    import re
    import requests
    import os
    os.environ['WDM_LOG_LEVEL'] = '0'
    import random
    import PySimpleGUI as sg
    import json
    from datetime import datetime
    import threading
    import subprocess
    from mailtm import Email
    import string
    import zipfile
    try:
        from fake_useragent import UserAgent
        ua = UserAgent()
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'fake_useragent'])
        subprocess.run(['deactivate'], shell=True)
        from fake_useragent import UserAgent
        ua = UserAgent()

    def acessar_url(url_2nr):
        try:
            from selenium import webdriver
            from selenium.webdriver.common.by import By
            from selenium.webdriver.chrome.service import Service
            try:
                import undetected_chromedriver as uc
            except:
                subprocess.run(
                    ['venv/scripts/activate.bat'], shell=True)
                subprocess.run(
                    ['pip', 'install', 'undetected_chromedriver'])
                import undetected_chromedriver as uc
            import time
            from selenium.webdriver.support.ui import WebDriverWait
            from selenium.webdriver.support import expected_conditions as EC
            url = 'https://temporary-phone-number.com/'
            chromedriver_path = '.\\storage\\driver\\chromedriver.exe'
            chrome_options = uc.ChromeOptions()
            # chrome_options.add_argument("--blink-settings=imagesEnabled=false")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument('--ignore-ssl-errors=yes')
            chrome_options.add_argument(
                '--ignore-certificate-errors')
            chrome_options.add_argument("--no-sandbox")
            chrome_options.binary_location = '.\\storage\\driver\\chrome.exe'
            # chrome_options.add_extension('.\\storage\\adblock.crx')
            chrome_options.add_argument(
                f"--load-extension={caminho_atual}\\storage\\adblock\\")
            chrome_options.page_load_strategy = 'eager'
            # Configurando o Selenium para usar o Chrome Driver local
            service = Service(executable_path=chromedriver_path)
            chrome = uc.Chrome(
                service=service, headless=True, version_main=116, options=chrome_options)
            chrome.get(url_2nr)
            try:
                # Esperar até que o estado do documento seja 'complete'
                WebDriverWait(chrome, 10).until(
                    lambda x: x.execute_script(
                        "return document.readyState") == "complete"
                )
                print("Página carregada com sucesso!")

                # Aqui você pode adicionar qualquer outra ação que deseja realizar na página após o carregamento completo

            except Exception as e:
                print("Ocorreu um erro:", e)
                try:
                    chrome.close()
                except:
                    pass
                try:
                    chrome.quit()
                except:
                    pass

            finally:
                try:
                    chrome.close()
                except:
                    pass
                try:
                    chrome.quit()
                except:
                    pass

        except:
            try:
                chrome.close()
            except:
                pass
            try:
                chrome.quit()
            except:
                pass

    file_path = './storage/adblock.crx'

    def baixar_arquivo(url, caminho_arquivo, pasta_destino):
        # Verifica e cria a pasta destino, se necessário
        if os.path.exists(pasta_destino):
            return
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Baixando navegador...')
        window.Refresh()
        # Se a pasta não existir, cria a pasta destino
        os.makedirs(pasta_destino)

        # Continua com o download do arquivo
        resposta = requests.get(url, stream=True)
        tamanho_total = int(resposta.headers.get('content-length', 0))

        with open(caminho_arquivo, 'wb') as file:
            for dados in resposta.iter_content(chunk_size=4096):
                file.write(dados)

        # Extrai o arquivo
        with zipfile.ZipFile(caminho_arquivo, 'r') as zip_ref:
            zip_ref.extractall(pasta_destino)

        # Apaga o arquivo zip após a extração
        os.remove(caminho_arquivo)
        print("\nDownload e extração concluídos.")

    url = 'https://www.dropbox.com/scl/fi/9juftou3q4k4kj2o7mzhq/chrome-win.zip?rlkey=84n9pwxouhu9punpcjg32onbz&dl=1'
    caminho_arquivo = './storage/driver/driver.zip'
    pasta_destino = './storage/driver/'

    baixar_arquivo(url, caminho_arquivo, pasta_destino)
    if os.path.exists("./storage/adblock/"):
        result = f"A pasta 'adblock' já existe em '{file_path}'."
    else:
        # URL para download
        url = 'https://www.dropbox.com/scl/fi/2tu2g6ulqwr2xk20kut1x/adblock.crx?rlkey=55rysc1sspa7t81ldybg8t6iy&dl=1'

        # Fazendo o download do arquivo
        response = requests.get(url)
        if response.status_code == 200:
            with open(file_path, 'wb') as file:
                file.write(response.content)
            print("Arquivo 'adblock.crx' baixado e salvo em './storage/adblock.crx'.")
            # Caminho do arquivo original (altere para o seu caminho de arquivo)
            caminho_original = './storage/adblock.crx'
            novo_caminho = './storage/adblock.zip'

            # Renomear o arquivo
            os.rename(caminho_original, novo_caminho)

            # Caminho do arquivo zip
            caminho_zip = './storage/adblock.zip'

            # Diretório de destino para extrair
            diretorio_destino = './storage/adblock/'

            # Remover um arquivo anterior, se existir
            arquivo_antigo = './storage/adblock'
            if os.path.exists(arquivo_antigo):
                os.remove(arquivo_antigo)

            # Criar o diretório de destino se ele não existir
            if not os.path.exists(diretorio_destino):
                os.makedirs(diretorio_destino)

            # Extrair o arquivo zip
            with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                zip_ref.extractall(diretorio_destino)

            print("Arquivo extraído com sucesso!")
            os.remove('./storage/adblock.zip')

        else:
            result = "Não foi possível baixar o arquivo. Status Code: " + \
                str(response.status_code)
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import NoSuchElementException
    try:
        from minuteinbox import Inbox
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'minuteinbox'])
        subprocess.run(['deactivate'], shell=True)
        from minuteinbox import Inbox
    from faker import Faker
    linha_ret = '_________________________________________________\n'
    fake = Faker('pt_BR')
    try:
        import uiautomator2 as u2
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'uiautomator2==2.16.25'])
        subprocess.run(['deactivate'], shell=True)
        subprocess.run(['pip', 'install', '--upgrade', 'requests'])
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        import requests
        time.sleep(10)
        import uiautomator2 as u2
    try:
        import soundcard as sc
    except:
        subprocess.run(['pip', 'install', 'soundcard'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        import soundcard as sc
    try:
        import soundfile as sf
    except:
        subprocess.run(['pip', 'install', 'soundfile'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        import soundfile as sf
    import tempfile
    try:
        import speech_recognition as sr
    except:
        subprocess.run(['pip', 'install', 'SpeechRecognition'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        import speech_recognition as sr
    
    # use without parameters to create a new inbox
    # inbox = Inbox()

    try:
        with open("config2nr.json", "r") as f:
            config = json.load(f)
    except FileNotFoundError:
        config = {}
    d = u2.connect(f'{porta}')
    subprocess.run(f'adb -s {porta} uninstall io.appium.uiautomator2.server.test',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    subprocess.run(f'adb -s {porta} uninstall io.appium.uiautomator2.server',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)

    def listener(message):
        global nome
        global sobrenome
        global cod
        if '2nr' in message['subject']:

            urls = re.findall(
                "(?P<url>https?://[^\s]+)", message['text'] if message['text'] else message['html'])

            # Acessar cada URL
            for url in urls:
                if url.startswith('https://api.2nr.xyz/register/?'):
                    response = requests.get(url)
                    print(url)
                    # Verificar o código de status
                    if response.status_code == 200:
                        pass
                    else:
                        print(
                            f"Erro ao acessar o link: {response.status_code}")

    contagem = 0
    troca_ip = 0

    def gerar_id():
        chars = string.ascii_lowercase + string.digits
        android_id = ''.join(random.choice(chars) for i in range(16))
        return android_id

    def vpn_avast():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Avast', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop("com.avast.android.vpn")
            d.app_start("com.avast.android.vpn", ".app.wizard.WizardActivity")
            time.sleep(10)
        except Exception as e:
            print(e)
        abc = False

    def nenhuma_vpn():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.facebook.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        time.sleep(10)

    def vpn_hotspotshield():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HotspotShield',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('hotspotshield.android.vpn')
            d.app_start('hotspotshield.android.vpn')
        except Exception as e:
            print(e)
        d(resourceId='hotspotshield.android.vpn:id/tryAgainButton').click()
        time.sleep(5)
        d(resourceId='hotspotshield.android.vpn:id/btnVpnConnect').click()

        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_pia():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da PiaVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()

        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.privateinternetaccess.android')
            d.app_start('com.privateinternetaccess.android')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()
        time.sleep(3)
        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()

        abc = False

    def vpn_express():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da ExpressVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()

        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.expressvpn.vpn')
            d.app_start('com.expressvpn.vpn')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.expressvpn.vpn:id/obiButton').click()
        time.sleep(3)
        d(resourceId='com.expressvpn.vpn:id/obiButton').click()

        abc = False

    def vpn_nord():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da NordVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        sms = True
        try:
            d.app_stop('com.nordvpn.android')
            d.app_start('com.nordvpn.android', '.MainActivity')
        except:
            pass
        time.sleep(10)
        time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_surf():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('com.surfshark.vpnclient.android')
            d.app_start('com.surfshark.vpnclient.android')
        except:
            pass
        time.sleep(15)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_better():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da BetterNet', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        try:
            d.app_stop('com.freevpnintouch')
            d.app_start('com.freevpnintouch')
        except:
            pass
        time.sleep(10)
        dialog = d(resourceId='com.freevpnintouch:id/dialogCtaPositive')
        connect = d(
            resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
        if dialog.exists:
            d(resourceId='com.freevpnintouch:id/dialogCtaPositive').click()
            time.sleep(3)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            # time.sleep(5)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
        while connect == 'CONNECT':
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            time.sleep(4)
            connect = d(
                resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            # WebDriverWait(driver, 20).until(
            # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        ip = '' + porta

        output = subprocess.check_output(
            ['adb', '-s', ip, 'shell', 'ifconfig'])

        # Verifica se a conexão VPN está ativa
        if not "tun0" in str(output):
            window['output'].print("Não conectado na BetterNet.")
            window.Refresh()
            try:
                connect = d(
                    resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
                d.app_stop('com.freevpnintouch')
                d.app_start('com.freevpnintouch')
                while connect == 'CONNECT':
                    d(resourceId='com.freevpnintouch:id/buttonConnect').click()
                    time.sleep(4)
                    connect = d(
                        resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            except:
                pass
        abc = False

    def vpn_cyberghost():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da CyberGhost', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('de.mobileconcepts.cyberghost')
            d.app_start('de.mobileconcepts.cyberghost')
        except:
            pass
        # time.sleep(3)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        rate = d(resourceId='de.mobileconcepts.cyberghost:id/rate_me_text')
        if rate.exists:
            d(resourceId='android:id/button2').click()
        time.sleep(2)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        abc = False

    def vpn_tunnelbear():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.tunnelbear.android')
            d.app_start("com.tunnelbear.android")
            while True:
                output = subprocess.check_output(
                    ['adb', '-s', porta, 'shell', 'ifconfig'])
                # print(str(output))
                if "tun0" in str(output):
                    print('Conectada')
                    break
                elif not "tun0" in str(output):
                    print('Reconectando')
                    try:
                        d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                        time.sleep(10)
                    except:
                        pass
        except Exception as e:
            print(e)
            pass

    def vpn_avg():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da AVG', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.avg.android.vpn')
            d.app_start("com.avg.android.vpn",
                        "com.avast.android.vpn.app.wizard.WizardActivity")
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #               stderr=subprocess.DEVNULL, check=True, shell=True)

        time.sleep(30)

    def vpn_windscribe():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Windscribe', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)
            d.app_stop("com.windscribe.vpn")
            d.app_start("com.windscribe.vpn")
        except:
            pass
        d(resourceId='com.windscribe.vpn:id/on_off_button').click()
        time.sleep(10)

    def vpn_hma():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HMA', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)

            d.app_stop("com.hidemyass.hidemyassprovpn")
            time.sleep(3)
            d.app_start('com.hidemyass.hidemyassprovpn',
                        'com.avast.android.vpn.activity.HmaOnboardingActivity')
        except:
            pass
        time.sleep(10)

    def testeprivado():
        global email
        from selenium import webdriver
        from selenium.webdriver.common.by import By
        from selenium.webdriver.chrome.service import Service
        from webdriver_manager.chrome import ChromeDriverManager
        import time
        from selenium.common.exceptions import NoSuchElementException
        from selenium.webdriver.support.ui import WebDriverWait
        from selenium.webdriver.support.ui import Select
        import requests
        from selenium.webdriver.support import expected_conditions as EC
        import undetected_chromedriver as uc
        from bs4 import BeautifulSoup
        import re

        import random
        sites = ['tmail.gg']
        site = random.choice(sites)
        print(site)

        if site == 'tmail.gg':
            try:
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] https://tmail.gg/')
                window.Refresh()
                url = f"https://tmail.gg/"

                chromedriver_path = '.\\storage\\driver\\chromedriver.exe'
                chrome_options = uc.ChromeOptions()
                # chrome_options.add_argument("--blink-settings=imagesEnabled=false")
                chrome_options.add_argument("--disable-gpu")
                chrome_options.add_argument("--no-sandbox")
                chrome_options.add_argument(
                    f"--load-extension={caminho_atual}\\storage\\adblock\\")
                # chrome_options.page_load_strategy = 'eager'
                chrome_options.binary_location = '.\\storage\\driver\\chrome.exe'
                # Configurando o Selenium para usar o Chrome Driver local
                service = Service(executable_path=chromedriver_path)
                chrome = uc.Chrome(
                    service=service, options=chrome_options, headless=True, version_main=116)
                chrome.get(url)
                chrome.save_screenshot('teste.png')
                chrome.execute_script("document.body.style.zoom='50%'")
                chrome.set_window_size(1920, 1080)
                while True:
                    email_value = WebDriverWait(chrome, 55).until(
                        EC.presence_of_element_located((By.ID, 'trsh_mail'))
                    )
                    email = email_value.get_attribute('value')
                    if '@' in email:
                        break
                    else:
                        pass

                print(email)
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Email: {email}')
                window.Refresh()
                d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text(email)
                d(resourceId='pl.rs.sip.softphone.newapp:id/inputPasswordEditText').set_text(senha)
                d(resourceId='pl.rs.sip.softphone.newapp:id/repeat_password_edit_text').set_text(senha)
                d(resourceId='pl.rs.sip.softphone.newapp:id/checkPrivacyPolicy').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonRegister').click()

                body = email_value = WebDriverWait(chrome, 55).until(
                    EC.presence_of_element_located((By.ID, 'trsh_mail'))
                )
                tentativa = 0
                subject = ''
                criou_2nr = False
                criou_2nr2 = False
                while criou_2nr is False:
                    try:
                        subject = WebDriverWait(chrome, 10).until(
                            EC.presence_of_element_located(
                                (By.CLASS_NAME, 'sender_email'))
                        ).text
                    except:
                        print('N chegou')
                    if 'Mobilelabs Sp' in subject:
                        click_content = WebDriverWait(chrome, 25).until(
                            EC.presence_of_element_located((By.CLASS_NAME, 'view_email')))
                        chrome.execute_script(
                            "arguments[0].click();", click_content)
                        time.sleep(3)

                        chrome.execute_script("document.body.style.zoom='50%'")

                        iframe = WebDriverWait(chrome, 10).until(
                            EC.presence_of_element_located((By.ID, "myIframe"))
                        )
                        # Mude o contexto do WebDriver para o iframe
                        chrome.switch_to.frame(iframe)
                        while criou_2nr2 is False:

                            iframe_html = chrome.page_source
                            # print(iframe_hstml)
                            urls = re.findall(
                                "(?P<url>https?://[^\s]+)", iframe_html)
                            print(urls)
                            # Acessar cada URL
                            print(0)
                            for url in urls:
                                print(0.5)
                                print(url)
                                if url.startswith('https://api.2nr.xyz/register/?'):
                                    print(1)
                                    try:
                                        url = url.replace('</p></div>', '')
                                        url = url.replace('&amp;', '&')
                                    except:
                                        pass
                                    print(2)
                                    response = requests.get(url)
                                    print(url)
                                    try:
                                        chrome.close()
                                    except:
                                        pass
                                    try:
                                        chrome.quit()
                                    except:
                                        pass
                                    # Verificar o código de status
                                    if response.status_code == 200:
                                        pass
                                    else:
                                        print(
                                            f"Erro ao acessar o link: {response.status_code}")
                                    criou_2nr = True
                                    criou_2nr2 = True
                                    break

                    else:
                        tentativa += 1
                        if tentativa == 6:
                            try:
                                chrome.close()
                            except:
                                pass
                            try:
                                chrome.quit()
                            except:
                                pass
                            print('n chegou')
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Código não chegou.')
                            window.Refresh()
                            try:
                                tentativa = 0
                                conteudo = config['vpn']
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                                raise Exception('Código não chegou.')

                            except Exception as e:
                                print(e)
                                tentativa = 0
                                try:
                                    chrome.close()
                                except:
                                    pass
                                try:
                                    chrome.quit()
                                except:
                                    pass
                                raise Exception('Código não chegou.')
            except Exception as e:
                try:
                    chrome.close()
                except:
                    pass
                try:
                    chrome.quit()
                except:
                    pass
                if not str(e) == '':
                    traceback.print_exc()

    try:
        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global transition_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass
    opcao_executar = config['opcao']
    troca_ip = 0
    reconhecer_captcha = 0
    if opcao_executar == '-criarambos-':
        while True:
            window['output'].print(linha_ret)
            window.Refresh()
            gerar_id()
            android_id = gerar_id()
            subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, shell=True)
            print('\n')
            # try:
            #    # Executa o comando adb para obter o Android ID
            #    result = subprocess.run(['adb', '-s', f'{porta}', 'shell', 'settings', 'get', 'secure', 'android_id'], capture_output=True, text=True)
            #
            #    # Obtém o Android ID do resultado
            #    android_id = result.stdout.strip()
            #
            #    # Imprime o Android ID
            #    print(f"Android ID: {android_id}")
            #
            # except subprocess.CalledProcessError as e:
            #    # Em caso de erro, imprime a mensagem de erro
            #    print(f"Erro: {e}")
            # except Exception as e:
            #    print(f"Erro desconhecido: {e}")
            try:
                if troca_ip == 0:
                    try:
                        troca_ip = 0
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()

                    except Exception as e:
                        print(e)
                        troca_ip = 0
                nome = fake.first_name()
                sobrenome = fake.last_name()
                if event == sg.WINDOW_CLOSED:
                    break
                try:
                    # if thread_parar:
                    #    break
                    try:
                        subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                       stdout=subprocess.DEVNULL,
                                       stderr=subprocess.DEVNULL, check=True, shell=True)
                    except:
                        pass

                    senha = config['senha2nr']

                    quantidade = 0
                    if d(resourceId='android:id/aerr_restart').exists:
                        d(resourceId='android:id/aerr_restart').click()
                        time.sleep(5)
                        while True:
                            if d(resourceId='android:id/aerr_restart').exists:
                                d(resourceId='android:id/aerr_restart').click()
                                time.sleep(5)
                            else:
                                erro_exec = False
                                break
                    d.app_start('pl.rs.sip.softphone.newapp', use_monkey=True)
                    d.set_fastinput_ime(True)
                    if d(resourceId='android:id/aerr_restart').exists:
                        d(resourceId='android:id/aerr_restart').click()
                        time.sleep(5)
                        while True:
                            if d(resourceId='android:id/aerr_restart').exists:
                                d(resourceId='android:id/aerr_restart').click()
                                time.sleep(5)
                            else:
                                erro_exec = False
                                break
                    time.sleep(3)
                    try:
                        d(resourceId='pl.rs.sip.softphone.newapp:id/registerButton').click()
                    except:
                        if d(resourceId='pl.rs.sip.softphone.newapp:id/settings').exists:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Deslogando...')
                            window.Refresh()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/settings').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogout').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/registerButton').click()
                            d.app_stop('pl.rs.sip.softphone.newapp')
                            raise Exception('')
                        else:
                            pass
                        erro_exec = True
                        while erro_exec is True:
                            if d(resourceId='android:id/aerr_restart').exists:
                                d(resourceId='android:id/aerr_restart').click()
                                time.sleep(5)
                                while True:
                                    if d(resourceId='android:id/aerr_restart').exists:
                                        d(resourceId='android:id/aerr_restart').click()
                                        time.sleep(5)
                                    else:
                                        erro_exec = False
                                        break
                            else:
                                erro_exec = False
                                break
                            time.sleep(3)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/registerButton').click()
                    try:
                        subprocess.run(
                            f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.READ_CONTACTS',
                            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                        subprocess.run(
                            f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.CAMERA',
                            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                        subprocess.run(
                            f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.RECORD_AUDIO',
                            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                        try:
                            subprocess.run(
                                f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.ACCESS_NOTIFICATION_POLICY',
                                stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        subprocess.run(
                            f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.POST_NOTIFICATIONS',
                            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    except:
                        pass
                    # inbox = Inbox(
                    #    address="",
                    #    token="",
                    # )

                    # address = inbox.address
                    # token = inbox.token

                    # extend the expiration of the inbox by 10 minutes
                    # inbox.extend_10m()
                    lista_user = random.choices(range(1, 9), k=3)
                    nome_completo_s = nome + sobrenome
                    numeros_concatenados = ''.join(
                        str(numero) for numero in lista_user)
                    user_completo = nome_completo_s + \
                        '.' + str(numeros_concatenados)
                    tentativa = 1

                    def gerar_senha(tamanho=12):
                        if tamanho < 6:
                            raise ValueError(
                                "A senha deve ter pelo menos 6 caracteres.")

                        letras_maiusculas = [random.choice(
                            string.ascii_uppercase) for _ in range(tamanho // 2)]
                        letras_minusculas = [random.choice(
                            string.ascii_lowercase) for _ in range(tamanho // 2)]

                        senha = ''.join(''.join(pair) for pair in zip(
                            letras_maiusculas, letras_minusculas))

                        caracteres_permitidos = string.ascii_letters + string.digits + string.punctuation
                        caracteres_permitidos = caracteres_permitidos.replace(
                            "~", "")

                        senha += ''.join(random.choice(caracteres_permitidos)
                                         for _ in range(tamanho - len(senha) - 3))
                        senha += random.choice(string.ascii_uppercase)
                        senha += random.choice(string.digits)
                        senha += "@"

                        senha = ''.join(random.sample(senha, len(senha)))

                        return senha

                        # Exemplo de uso

                    senha = gerar_senha(12)
                    email_escolhido = config['email_escolhido']

                    if email_escolhido == 'GmailTemp':
                        from selenium import webdriver
                        from selenium.webdriver.chrome.service import Service
                        try:
                            from webdriver_manager.chrome import ChromeDriverManager
                        except:
                            subprocess.run(
                                ['pip', 'install', 'webdriver-manager'])
                            from webdriver_manager.chrome import ChromeDriverManager
                        from selenium.webdriver.common.by import By
                        from selenium.webdriver.support.ui import WebDriverWait
                        from selenium.webdriver.support import expected_conditions as EC
                        chrome_options = webdriver.ChromeOptions()
                        chrome_options.add_argument(
                            "--blink-settings=imagesEnabled=false")
                        chrome_options.add_argument("--disable-gpu")
                        chrome_options.add_argument("--headless")
                        chrome_options.add_argument("--log-level=3")
                        try:
                            driver = webdriver.Chrome(options=chrome_options,
                                                      service=Service(ChromeDriverManager().install()))

                            driver.get(
                                'https://mail10year.com/TOOL/gmail/server2.php')
                            driver.maximize_window()
                            WebDriverWait(driver, 30).until(
                                EC.presence_of_element_located((By.NAME, "change_email"))).click()
                            time.sleep(3)
                            email_real = WebDriverWait(driver, 30).until(
                                EC.presence_of_element_located((By.NAME, "username"))).get_attribute("value")
                            log, dominio = email_real.split('@')
                            numero_aleatorio = random.randint(0, 9999)
                            email = f'{log}+{numero_aleatorio:04}@{dominio}'
                            # email = email_real
                            print(email)
                        except:
                            driver.close()
                            driver.quit()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Email: {email}')
                        window.Refresh()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text(email)

                        d(resourceId='pl.rs.sip.softphone.newapp:id/inputPasswordEditText').set_text(senha)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/repeat_password_edit_text').set_text(senha)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/checkPrivacyPolicy').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonRegister').click()
                        time.sleep(5)
                        email_existente = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/buttonOk')
                        if not email_existente:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Email já utilizado.')
                            window.Refresh()
                            numero_aleatorio = random.randint(0, 9999)
                            email = f'{log}+{numero_aleatorio:04}@{dominio}'
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Novo email: {email}')
                            window.Refresh()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text('')
                            d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text(email)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonRegister').click()
                            time.sleep(10)

                        # use with address and token to reuse an existing inbox

                        tentativa = 1
                        while True:
                            if tentativa == 7:
                                driver.close()
                                driver.quit()
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Código não chegou.')
                                window.Refresh()
                                try:
                                    tentativa = 0
                                    conteudo = config['vpn']
                                    if conteudo == "AVG":
                                        vpn_avg()
                                    elif conteudo == "SurfShark":
                                        vpn_surf()
                                    elif conteudo == "Nenhuma":
                                        nenhuma_vpn()
                                    elif conteudo == "Avast":
                                        vpn_avast()
                                    elif conteudo == "ExpressVPN":
                                        vpn_express()
                                    elif conteudo == "PiaVPN":
                                        vpn_pia()
                                    elif conteudo == "TunnelBear":
                                        vpn_tunnelbear()
                                    elif conteudo == "BetterNet":
                                        vpn_better()
                                    elif conteudo == "CyberGhost":
                                        vpn_cyberghost()
                                    elif conteudo == "NordVPN":
                                        vpn_nord()
                                    elif conteudo == "HotspotShield":
                                        vpn_hotspotshield()
                                    elif conteudo == "WindscribeVPN":
                                        vpn_windscribe()
                                    elif conteudo == "HmaVPN":
                                        vpn_hma()
                                    else:
                                        window['output'].print(
                                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                        window.Refresh()

                                except Exception as e:
                                    print(e)
                                    tentativa = 0
                                raise Exception('Código não chegou.')
                            try:
                                time.sleep(5)
                                WebDriverWait(driver, 30).until(
                                    EC.presence_of_element_located((By.NAME, "check_email"))).click()
                                time.sleep(5)
                                body = WebDriverWait(driver, 30).until(
                                    EC.presence_of_element_located((By.ID, "copyClone"))).text
                                body = body.replace(' ', '')
                                inicio = body.find("(") + 1
                                fim = body.find(")")
                                # print(body)
                                body = body[inicio:fim]
                                body = body.replace('3D', '')

                                inicio_email = body.find(
                                    "email=") + len("email=")
                                inicio_token = body.find(
                                    "&token=") + len("&token=")

                                # Extrair as partes relevantes da string
                                email_parte = body[inicio_email:inicio_token]
                                token_parte = body[inicio_token:]

                                # Remover '=' exceto em "&token="
                                email_parte_formatado = "email=" + \
                                    email_parte.replace("=", "")
                                token_parte_formatado = "&token=" + \
                                    token_parte.replace("=", "")

                                # Juntar as partes formatadas
                                body = "https://api.2nr.xyz/register/?" + \
                                    email_parte_formatado + token_parte_formatado
                                body = body.replace('&token&token=', '&token=')
                                # print(body)
                                if '2nr' in body:
                                    urls = re.findall("(?P<url>https?://[^\s]+)",
                                                      body if body else body)

                                    # Acessar cada URL
                                    for url in urls:
                                        try:
                                            url = url.replace('</p></div>', '')
                                            url = url.replace('&amp;', '&')
                                        except:
                                            pass
                                        try:
                                            response = requests.get(url)
                                            if response.status_code == 200:
                                                pass
                                            else:
                                                pass
                                        except requests.exceptions.RequestException as e:
                                            print(f"Erro na requisição: {e}")
                                    try:
                                        driver.close()
                                        driver.quit()
                                    except:
                                        driver.quit()
                                        driver.close()
                                    break

                            except:
                                driver.close()
                                driver.quit()
                                raise Exception('Ocorreu algum erro.')
                            tentativa += 1
                    elif email_escolhido == 'GmailTemp2':
                        from wsgiref.headers import tspecials
                        try:
                            from tempinbox import TempEmail
                        except:
                            import requests
                            import os
                            from pathlib import Path

                            url = "https://www.dropbox.com/scl/fi/ll7cbtfled6dy1209fw4r/nome_do_arquivo.tar.gz?rlkey=aljtozyyj9vzzhcnqwr86tfnd&dl=1"
                            nome_do_arquivo = "gmail2.tar.gz"
                            caminho_do_arquivo = Path(
                                __file__).parent / nome_do_arquivo

                            # Baixar o arquivo da URL
                            response = requests.get(url)
                            with open(caminho_do_arquivo, 'wb') as arquivo:
                                arquivo.write(response.content)

                            # Instalar o pacote localmente usando pip com aspas duplas no caminho
                            os.system(f'pip install "{caminho_do_arquivo}"')
                        # try:
                        # inbox = Inbox(
                        # address="",
                        # token="",
                        # )
                        # email = inbox.address
                        # window['output'].print("Email: " + email)
                        # window.Refresh()
                        # except Exception as e:
                        # print(e)
                        client = TempEmail()

                        # Generate a temporary email address with specific options
                        email = client.generate_temp_email(
                            domain=False, dot_gmail=True, plus_gmail=True)["email"][0]
                        print(email)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Email: {email}')
                        window.Refresh()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text(email)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/inputPasswordEditText').set_text(senha)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/repeat_password_edit_text').set_text(senha)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/checkPrivacyPolicy').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonRegister').click()
                        time.sleep(5)
                        email_existente = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/buttonOk')
                        if not email_existente:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Email já utilizado.')
                            window.Refresh()
                            email_real = email
                            log, dominio = email_real.split('@')
                            numero_aleatorio = random.randint(0, 9999)
                            email = f'{log}+{numero_aleatorio:04}@{dominio}'
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Novo email: {email}')
                            window.Refresh()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text('')
                            d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text(email)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonRegister').click()
                            time.sleep(10)
                        # use with address and token to reuse an existing inbox

                        time.sleep(2)

                        codigo = None
                        tentativa = 1
                        while True:
                            email_list = client.get_mail_list(email)
                            time.sleep(10)
                            # Acessando a lista de mensagens
                            message_list = email_list.get('messageData', [])

                            # Verificando se há mensagens na lista
                            message_list = email_list.get('messageData', [])

                            # Verificando se há mensagens na lista
                            id_msg = 0
                            if message_list:
                                for message in message_list:
                                    # Acessando o assunto da mensagem
                                    subject = message.get('subject', '')
                                    id_msg += 1
                                    # Verificar se o assunto contém '2nr'
                                    if '2nr' in subject:
                                        break
                                    else:
                                        print("Aguardando código...")

                            email_list = client.get_mail_list(email)
                            if '2nr' in subject:
                                break
                            else:
                                tentativa += 1
                                if tentativa == 10:
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Email não chegou.')
                                    window.Refresh()
                                    raise Exception('Email não chegou.')
                        # Get the content of a specific email (ID=2)
                        email_content = client.get_mail_content(
                            email, id=id_msg)
                        urls = re.findall(
                            r"https://api\.2nr\.xyz/register/\?[\S]*", email_content)
                        # Acessar cada URL
                        for url in urls:
                            try:
                                url = url.replace('</p></div>', '')
                                url = url.replace('&amp;', '&')
                                print(url)
                            except:
                                pass
                            try:
                                acessar_url(url)
                            except Exception as e:
                                print(f"Erro na requisição: {e}")

                    elif email_escolhido == 'MailTM':
                        while True:
                            try:
                                test.register(
                                    username=None, password='rumo100k')
                                # Se chegou até aqui sem lançar exceção, a conta foi criada com sucesso
                                break
                            except Exception as e:
                                print(
                                    f"Tentativa {tentativa} falhou. Erro: {e}")
                                time.sleep(30)
                                tentativa += 1
                        email = str(test.address)
                        # try:
                        # inbox = Inbox(
                        # address="",
                        # token="",
                        # )
                        # email = inbox.address
                        # window['output'].print("Email: " + email)
                        # window.Refresh()
                        # except Exception as e:
                        # print(e)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Email: {email}')
                        window.Refresh()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text(email)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/inputPasswordEditText').set_text(senha)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/repeat_password_edit_text').set_text(senha)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/checkPrivacyPolicy').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonRegister').click()

                        # use with address and token to reuse an existing inbox

                        time.sleep(2)

                        codigo = None

                        try:
                            test.start(listener, interval=10)
                            codigo = 0
                            while codigo != 5:
                                time.sleep(2)
                                codigo = codigo + 1
                        except Exception as e:
                            if "Too Many Requests" in str(e):
                                pass
                            else:
                                pass
                        subject = False

                        def make_request(url):
                            try:
                                response = requests.get(url)
                                if response.status_code == 200:
                                    pass
                                else:
                                    print(
                                        f"Falha na requisição. Código de status: {response.status_code}")
                            except requests.exceptions.RequestException as e:
                                print(f"Erro na requisição: {e}")

                        def listener(message):
                            global nome
                            global sobrenome
                            global cod
                            if '2nr' in message['subject']:

                                urls = re.findall("(?P<url>https?://[^\s]+)",
                                                  message['text'] if message['text'] else message['html'])

                                # Acessar cada URL
                                for url in urls:
                                    make_request(url)
                                    time.sleep(0.5)
                                    print(url)
                                subject = True

                    elif email_escolhido == 'wnmail.shop':

                        import requests
                        from requests.auth import HTTPBasicAuth
                        user = random.randint(000000, 999999)
                        # Substitua com as suas credenciais e dados
                        cpanel_user = 'wnmailsh'
                        cpanel_password = 'V.5k7lV3l8PB*q'
                        cpanel_domain = 'mi3-ss120.a2hosting.com'
                        email_user = user
                        email_domain = 'wnmail.shop'
                        email_password = senha
                        quota = 1  # 0 para ilimitada, ou defina um limite específico

                        # URL para a função add_pop da API UAPI
                        url = f'https://{cpanel_domain}:2083/execute/Email/add_pop'
                        params = {
                            'email': email_user,
                            'domain': email_domain,
                            'password': email_password,
                            'quota': quota,
                            'send_welcome_email': 0,  # Altere para 1 se quiser enviar um e-mail de boas-vindas
                            'skip_update_db': 1
                        }

                        # Faça a solicitação para a API
                        response = requests.post(url, params=params, auth=HTTPBasicAuth(cpanel_user, cpanel_password),
                                                 verify=True)

                        # Verifique a resposta
                        if response.status_code == 200:
                            print("Conta de e-mail criada com sucesso!")
                            email = response.json()['data']
                            email = email.replace('+', '@')
                            email2 = email
                            print('Email: ', email)
                            print('Senha: ', senha)

                        else:
                            print("Falha na criação da conta de e-mail.")
                            print(response.text)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Email: {email}')
                        window.Refresh()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text(email)

                        d(resourceId='pl.rs.sip.softphone.newapp:id/inputPasswordEditText').set_text(senha)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/repeat_password_edit_text').set_text(senha)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/checkPrivacyPolicy').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonRegister').click()

                        # use with address and token to reuse an existing inbox

                        tentativa = 1
                        sair = False
                        while sair is False:
                            try:
                                def get_email_body(msg):
                                    if msg.is_multipart():
                                        for part in msg.walk():
                                            content_type = part.get_content_type()
                                            content_disposition = str(
                                                part.get("Content-Disposition"))

                                            if "attachment" not in content_disposition:
                                                if content_type == "text/plain" or content_type == "text/html":
                                                    return part.get_payload(decode=True).decode()
                                    else:
                                        content_type = msg.get_content_type()
                                        if content_type == "text/plain" or content_type == "text/html":
                                            return msg.get_payload(decode=True).decode()
                                    return ""

                                import imaplib
                                import email
                                time.sleep(10)

                                email_user = email2
                                email_password = senha

                                # Configurações do servidor IMAP
                                # Substitua com o host do servidor IMAP do seu provedor
                                imap_host = 'mi3-ss120.a2hosting.com'
                                imap_port = 993  # Porta comum para IMAP sobre SSL

                                # Conectar ao servidor IMAP
                                mail = imaplib.IMAP4_SSL(imap_host, imap_port)

                                # Autenticar
                                mail.login(email_user, email_password)

                                # Selecionar caixa de entrada
                                mail.select("inbox")

                                # Buscar e-mails
                                status, messages = mail.search(None, 'ALL')
                                # print(f'Status da busca: {status}')

                                # Verificar se messages não está vazio
                                # Verificar se messages não está vazio
                                if status == 'OK' and messages:
                                    try:
                                        # Pegar o último ID da mensagem
                                        last_mail_id = messages[0].split()[-1]
                                    except Exception as e:
                                        if 'list index out of range' in str(e):
                                            print(tentativa)
                                            tentativa += 1
                                            if tentativa == 10:
                                                try:
                                                    tentativa = 0
                                                    conteudo = config['vpn']
                                                    if conteudo == "AVG":
                                                        vpn_avg()
                                                    elif conteudo == "SurfShark":
                                                        vpn_surf()
                                                    elif conteudo == "Nenhuma":
                                                        nenhuma_vpn()
                                                    elif conteudo == "Avast":
                                                        vpn_avast()
                                                    elif conteudo == "ExpressVPN":
                                                        vpn_express()
                                                    elif conteudo == "PiaVPN":
                                                        vpn_pia()
                                                    elif conteudo == "TunnelBear":
                                                        vpn_tunnelbear()
                                                    elif conteudo == "BetterNet":
                                                        vpn_better()
                                                    elif conteudo == "CyberGhost":
                                                        vpn_cyberghost()
                                                    elif conteudo == "NordVPN":
                                                        vpn_nord()
                                                    elif conteudo == "HotspotShield":
                                                        vpn_hotspotshield()
                                                    elif conteudo == "WindscribeVPN":
                                                        vpn_windscribe()
                                                    elif conteudo == "HmaVPN":
                                                        vpn_hma()
                                                    else:
                                                        window['output'].print(
                                                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                                        window.Refresh()

                                                except Exception as e:
                                                    print(e)
                                                    tentativa = 0
                                            raise Exception('')
                                    status, data = mail.fetch(
                                        last_mail_id, '(RFC822)')
                                    if status == 'OK':
                                        for response_part in data:
                                            if isinstance(response_part, tuple):
                                                msg = email.message_from_bytes(
                                                    response_part[1])
                                                email_subject = msg['subject']
                                                email_from = msg['from']
                                                email_body = get_email_body(
                                                    msg)
                                                # print('From:', email_from)
                                                # print('Subject:', email_subject)
                                                # print('Body:', email_body)
                                                # print('\n')
                                else:
                                    print(
                                        "Nenhuma mensagem encontrada ou erro na busca.")

                                if '2nr' in email_subject:
                                    urls = re.findall("(?P<url>https?://[^\s]+)",
                                                      email_body if email_body else email_body)

                                    # Acessar cada URL
                                    for url in urls:
                                        try:
                                            url = url.replace('</p></div>', '')
                                            url = url.replace('&amp;', '&')
                                        except:
                                            pass
                                        try:
                                            response = requests.get(url)
                                            if response.status_code == 200:
                                                email = email2
                                                sair = True
                                                mail.close()
                                                mail.logout()
                                                pass
                                            else:
                                                mail.close()
                                                mail.logout()
                                                print(
                                                    f"Falha na requisição. Código de status: {response.status_code}")
                                        except requests.exceptions.RequestException as e:
                                            print(f"Erro na requisição: {e}")

                                        time.sleep(0.5)

                                else:
                                    print(tentativa)
                                    tentativa += 1
                                    if tentativa == 10:
                                        try:
                                            tentativa = 0
                                            conteudo = config['vpn']
                                            if conteudo == "AVG":
                                                vpn_avg()
                                            elif conteudo == "SurfShark":
                                                vpn_surf()
                                            elif conteudo == "Nenhuma":
                                                nenhuma_vpn()
                                            elif conteudo == "Avast":
                                                vpn_avast()
                                            elif conteudo == "ExpressVPN":
                                                vpn_express()
                                            elif conteudo == "PiaVPN":
                                                vpn_pia()
                                            elif conteudo == "TunnelBear":
                                                vpn_tunnelbear()
                                            elif conteudo == "BetterNet":
                                                vpn_better()
                                            elif conteudo == "CyberGhost":
                                                vpn_cyberghost()
                                            elif conteudo == "NordVPN":
                                                vpn_nord()
                                            elif conteudo == "HotspotShield":
                                                vpn_hotspotshield()
                                            elif conteudo == "WindscribeVPN":
                                                vpn_windscribe()
                                            elif conteudo == "HmaVPN":
                                                vpn_hma()
                                            else:
                                                window['output'].print(
                                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                                window.Refresh()

                                        except Exception as e:
                                            print(e)
                                            tentativa = 0
                            except:
                                pass
                    elif email_escolhido == 'GuerrilaMail':
                        try:
                            from guerrillamail import GuerrillaMailSession
                        except:
                            subprocess.run(
                                ['venv/scripts/activate.bat'], shell=True)
                            subprocess.run(
                                ['pip', 'install', 'python-guerrillamail'])
                            subprocess.run(['deactivate'], shell=True)
                            from guerrillamail import GuerrillaMailSession

                        # Crie uma sessão Guerrilla Mail
                        session = GuerrillaMailSession()
                        email_address = session.get_session_state()[
                            'email_address']
                        email = email_address

                        email = email.replace(
                            '@guerrillamailblock.com', '@pokemail.net')
                        # try:
                        # inbox = Inbox(
                        # address="",
                        # token="",
                        # )
                        # email = inbox.address
                        # window['output'].print("Email: " + email)
                        # window.Refresh()
                        # except Exception as e:
                        # print(e)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Email: {email}')
                        window.Refresh()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text(email)

                        d(resourceId='pl.rs.sip.softphone.newapp:id/inputPasswordEditText').set_text(senha)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/repeat_password_edit_text').set_text(senha)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/checkPrivacyPolicy').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonRegister').click()

                        # use with address and token to reuse an existing inbox

                        tentativa = 1
                        while True:
                            time.sleep(10)
                            email_summary = session.get_email_list()[0]
                            email = session.get_email(email_summary.guid)
                            if '2nr' in email.subject:
                                urls = re.findall("(?P<url>https?://[^\s]+)",
                                                  email.body if email.body else email.body)

                                # Acessar cada URL
                                for url in urls:
                                    try:
                                        url = url.replace('</p></div>', '')
                                        url = url.replace('&amp;', '&')
                                    except:
                                        pass
                                    try:
                                        response = requests.get(url)
                                        if response.status_code == 200:
                                            pass
                                        else:
                                            print(
                                                f"Falha na requisição. Código de status: {response.status_code}")
                                    except requests.exceptions.RequestException as e:
                                        print(f"Erro na requisição: {e}")

                                    time.sleep(0.5)
                                email = email_address

                                email = email.replace(
                                    '@guerrillamailblock.com', '@pokemail.net')
                                break
                            print(tentativa)
                            tentativa += 1
                            if tentativa == 10:
                                try:
                                    tentativa = 0
                                    conteudo = config['vpn']
                                    if conteudo == "AVG":
                                        vpn_avg()
                                    elif conteudo == "SurfShark":
                                        vpn_surf()
                                    elif conteudo == "Nenhuma":
                                        nenhuma_vpn()
                                    elif conteudo == "Avast":
                                        vpn_avast()
                                    elif conteudo == "ExpressVPN":
                                        vpn_express()
                                    elif conteudo == "PiaVPN":
                                        vpn_pia()
                                    elif conteudo == "TunnelBear":
                                        vpn_tunnelbear()
                                    elif conteudo == "BetterNet":
                                        vpn_better()
                                    elif conteudo == "CyberGhost":
                                        vpn_cyberghost()
                                    elif conteudo == "NordVPN":
                                        vpn_nord()
                                    elif conteudo == "HotspotShield":
                                        vpn_hotspotshield()
                                    elif conteudo == "WindscribeVPN":
                                        vpn_windscribe()
                                    elif conteudo == "HmaVPN":
                                        vpn_hma()
                                    else:
                                        window['output'].print(
                                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                        window.Refresh()

                                except Exception as e:
                                    print(e)
                                    tentativa = 0
                    elif email_escolhido == 'GmailTemp3':
                        from selenium.webdriver.common.by import By
                        from selenium.webdriver.chrome.service import Service
                        import time
                        from selenium.common.exceptions import NoSuchElementException
                        from selenium.webdriver.support.ui import WebDriverWait
                        from selenium.webdriver.support.ui import Select
                        import requests
                        from selenium.webdriver.support import expected_conditions as EC
                        import undetected_chromedriver as uc
                        import re
                        import random
                        try:
                            from seleniumbase import SB
                        except:
                            print('Instalando SeleniumBase')
                            subprocess.run(
                                ['pip', 'install', 'seleniumbase'])
                            from seleniumbase import SB
                        try:
                            with SB(uc=True, headless=True, locale_code='pt-br', extension_dir=r'.\storage\adblock') as chrome:
                                url = f"https://emailnator.com/"
                                chrome.set_window_size(1920, 1080)
                                chrome.driver.uc_open_with_reconnect(url, 10)

                                try:
                                    chrome.save_screenshot('erro_nav.png')
                                    chrome.switch_to_frame(
                                        'iframe[id^="cf-chl"]', timeout=1)
                                    print(chrome.driver.find_elements(
                                        By.XPATH, '//*[@id="challenge-stage"]/div/label/input'))
                                    # chrome.driver.uc_click('//*[@id="challenge-stage"]/div/label/input')
                                    chrome.driver.uc_click(
                                        'span.mark')
                                    chrome.save_screenshot('erro_nav.png')
                                    # chrome.driver.execute_script("arguments[0].click();", chrome.driver.find_element(By.XPATH, '//*[@id="challenge-stage"]/div/label/input'))
                                except Exception as e:
                                    print(e)
                                    print('Sem Captcha')
                                chrome.switch_to_parent_frame()
                                try:
                                    if chrome.wait_for_element('button.cf-btn.cf-btn-danger', timeout=10):
                                        chrome.driver.uc_click('button.cf-btn.cf-btn-danger')
                                except:
                                    pass
                                try:
                                    chrome.wait_for_element(
                                        '#custom-switch-domain').click()
                                except:
                                    raise Exception('Não abriu pagina do email')

                                # Clicar no elemento com ID 'custom-switch-googleMail'
                                chrome.wait_for_element(
                                    '#custom-switch-googleMail').click()

                                # Clicar no elemento com ID 'custom-switch-plusGmail'
                                chrome.wait_for_element(
                                    '#custom-switch-plusGmail').click()

                                # Clicar no botão com texto 'Generate New'
                                chrome.wait_for_element(
                                    '//button[contains(text(), "Generate New")]').click()
                                # Encontrar o elemento de entrada de texto pelo XPath
                                time.sleep(10)
                                # Encontrar o elemento de entrada de texto pelo XPath
                                input_element = WebDriverWait(chrome.driver, 10).until(
                                    EC.visibility_of_element_located(
                                        (By.XPATH, '//input[@placeholder="Email Address"]'))
                                )

                                # Obter o valor do atributo 'value' do elemento
                                email = input_element.get_attribute('value')
                                email_antigo = email
                                email_real = email
                                log, dominio = email_real.split('@')
                                numero_aleatorio = random.randint(0, 9999)
                                email = f'{log}+{numero_aleatorio:04}@{dominio}'
                                print(email)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Email: {email}')
                                window.Refresh()
                                d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text(email)
                                d(resourceId='pl.rs.sip.softphone.newapp:id/inputPasswordEditText').set_text(senha)
                                d(resourceId='pl.rs.sip.softphone.newapp:id/repeat_password_edit_text').set_text(senha)
                                d(resourceId='pl.rs.sip.softphone.newapp:id/checkPrivacyPolicy').click()
                                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonRegister').click()
                                time.sleep(5)
                                email_existente = d(
                                    resourceId='pl.rs.sip.softphone.newapp:id/buttonOk')
                                if not email_existente:
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Email já utilizado.')
                                    window.Refresh()
                                    email_real = email_antigo
                                    log, dominio = email_real.split('@')
                                    numero_aleatorio = random.randint(0, 9999)
                                    email = f'{log}+{numero_aleatorio:04}@{dominio}'
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Novo email: {email}')
                                    window.Refresh()
                                    d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text('')
                                    d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text(email)
                                    d(resourceId='pl.rs.sip.softphone.newapp:id/buttonRegister').click()
                                    time.sleep(10)
                                # use with address and token to reuse an existing inbox

                                time.sleep(10)
                                # Obter o valor do atributo "value" do elemento

                                WebDriverWait(chrome.driver, 55).until(
                                    EC.presence_of_element_located(
                                        (By.NAME, 'goBtn'))
                                ).click()
                                chegou_cod = False
                                tentativa = 1
                                while chegou_cod is False:
                                    try:
                                        try:
                                            td_element = WebDriverWait(chrome.driver, 10).until(
                                                EC.visibility_of_element_located(
                                                    (By.XPATH, "/html/body/div[1]/div/section/div/div/div[3]/div/div[2]/div[2]/div/table/tbody/tr[2]"))
                                            )
                                            td_element.click()
                                            time.sleep(4)
                                        except:
                                            tentativa += 1
                                            if tentativa == 10:
                                                window['output'].print(
                                                    f'[{datetime.now().strftime("%H:%M:%S")}] Email não chegou.')
                                                window.Refresh()
                                                try:
                                                    conteudo = config['vpn']
                                                    if conteudo == "AVG":
                                                        vpn_avg()
                                                    elif conteudo == "SurfShark":
                                                        vpn_surf()
                                                    elif conteudo == "Nenhuma":
                                                        nenhuma_vpn()
                                                    elif conteudo == "Avast":
                                                        vpn_avast()
                                                    elif conteudo == "ExpressVPN":
                                                        vpn_express()
                                                    elif conteudo == "PiaVPN":
                                                        vpn_pia()
                                                    elif conteudo == "TunnelBear":
                                                        vpn_tunnelbear()
                                                    elif conteudo == "BetterNet":
                                                        vpn_better()
                                                    elif conteudo == "CyberGhost":
                                                        vpn_cyberghost()
                                                    elif conteudo == "NordVPN":
                                                        vpn_nord()
                                                    elif conteudo == "HotspotShield":
                                                        vpn_hotspotshield()
                                                    elif conteudo == "WindscribeVPN":
                                                        vpn_windscribe()
                                                    elif conteudo == "HmaVPN":
                                                        vpn_hma()
                                                    else:
                                                        window['output'].print(
                                                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                                        window.Refresh()

                                                except Exception as e:
                                                    print(e)
                                                raise Exception(
                                                    'Email não chegou.')

                                        page_html = WebDriverWait(chrome.driver, 55).until(
                                            EC.presence_of_element_located(
                                                (By.CLASS_NAME, 'card-body'))
                                        ).text
                                        # Encontrar URLs que começam com "https://api.2nr.xyz/register/?"
                                        urls = re.findall(
                                            r"https://api.2nr.xyz/register/?[^'\"\\]+", page_html)
                                        print('URLs:' + str(urls))
                                        # Imprimir os URLs encontrados
                                        print('----------------------------')
                                        for url in urls:
                                            try:
                                                url_pattern = r'https?://\S+'

                                                # Encontrar a URL na variável body
                                                url_match = re.search(
                                                    url_pattern, url)

                                                # Se a URL for encontrada, imprima
                                                if url_match:
                                                    url = url_match.group()
                                                    print(url)
                                                else:
                                                    print(
                                                        "Nenhuma URL encontrada na variável body.")
                                                url = url.replace(
                                                    '</p></div>', '')
                                                url = url.replace('&amp;', '&')
                                                url = url.replace(
                                                    ' </td> </tr></tbody></table></td> </tr><tr><td class=', '')
                                            except:
                                                pass
                                            print("URL:", url +
                                                  '\n----------------------------')

                                            headers = {
                                                'User-Agent': ua.random,
                                                'User-Agent': ua.random
                                                }
                                            print(headers)
                                            # d.open_url(url)
                                            # time.sleep(10)
                                            # d.app_start('pl.rs.sip.softphone.newapp', use_monkey=True)
                                            from threading import Thread, Lock
                                            from queue import Queue
                                            import re
                                            import random
                                            # URL da API para obter os proxies

                                            test_urls = [
                                                url
                                            ]

                                            api_url = "https://api.proxyscrape.com/v3/free-proxy-list/get?request=displayproxies&protocol=http&proxy_format=protocolipport&format=text&timeout=20000"
                                            #api_url = "https://api.proxyscrape.com/v2/?request=displayproxies&protocol=http&proxy_format=protocolipport&timeout=10000&country=all&ssl=all&anonymity=all"

                                            # Função para obter proxies da API
                                            def fetch_proxies(api_url):
                                                try:
                                                    response = requests.get(api_url)
                                                    proxies = response.text.split('\n')
                                                    return [proxy.strip() for proxy in proxies if proxy.strip()]
                                                except requests.RequestException as e:
                                                    print(f"Erro ao obter proxies: {e}")
                                                    return []

                                            # Obter proxies da API
                                            proxies_list = fetch_proxies(api_url)

                                            # Aleatorizar a ordem dos proxies
                                            #random.shuffle(proxies_list)

                                            # Fila de proxies
                                            proxy_queue = Queue()

                                            # Adiciona proxies à fila
                                            for proxy in proxies_list:
                                                proxy_queue.put(f"{proxy}")

                                            # Lista para armazenar proxies válidos
                                            valid_proxies = []

                                            # Lock para proteger o acesso à lista de proxies válidos
                                            list_lock = Lock()

                                            # Variável de controle para parar threads
                                            stop_event = False

                                            def check_proxy():
                                                global stop_event
                                                while not proxy_queue.empty() and not stop_event:
                                                    proxy = proxy_queue.get()
                                                    successes = [False] * len(test_urls)  # Lista para acompanhar os sucessos em cada URL
                                                    try:
                                                        for i, test_url in enumerate(test_urls):
                                                            response = requests.get(test_url, headers=headers, proxies={"http": proxy, "https": proxy}, timeout=1)
                                                            if response.status_code == 200:
                                                                successes[i] = True
                                                                print(response.status_code)
                                                            else:
                                                                successes[i] = False
                                                    except requests.RequestException:
                                                        successes = [False] * len(test_urls)

                                                    if all(successes):  # Se todos os testes forem bem-sucedidos
                                                        with list_lock:
                                                            if proxy not in valid_proxies:
                                                                valid_proxies.append(proxy)
                                                                print(f"Proxy válido: {proxy}")
                                                                if len(valid_proxies) >= 2:
                                                                    stop_event = True
                                                    else:
                                                        pass
                                                        #print(f"Proxy inválido: {proxy}")

                                                    proxy_queue.task_done()

                                            # Número de threads
                                            num_threads = 20

                                            # Criar e iniciar as threads
                                            threads = []
                                            for i in range(num_threads):
                                                thread = Thread(target=check_proxy)
                                                thread.start()
                                                threads.append(thread)

                                            # Aguardar todas as threads terminarem
                                            for thread in threads:
                                                thread.join()

                                            # Escolher um proxy aleatório entre os válidos encontrados
                                            if valid_proxies:
                                                print(valid_proxies)
                                                chosen_proxy = random.choice(valid_proxies)
                                                print("Proxy escolhido aleatoriamente:", chosen_proxy)
                                            else:
                                                print("Nenhum proxy válido encontrado")
                                            def get_proxies(proxy):
                                                if proxy.startswith('http://'):
                                                    return {'http': proxy}
                                                elif proxy.startswith('https://'):
                                                    return {'http': proxy.replace('https://', 'http://'), 'https': proxy}
                                                elif proxy.startswith('socks4://'):
                                                    return {'http': proxy, 'https': proxy}
                                                else:
                                                    raise ValueError("Unsupported proxy protocol")
                                            proxies2 = get_proxies(proxy)
                                            #print(proxies2)
                                            try:
                                                response = requests.get(
                                                    url, headers=headers)
                                                if response.status_code == 200:
                                                    print(response.status_code)
                                                else:
                                                    print(response.status_code)
                                                    d.open_url(url)
                                                    time.sleep(20)
                                                    print('Verificado com o chrome')
                                                    d.app_start('pl.rs.sip.softphone.newapp')
                                                    try:
                                                        d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').wait(timeout=20)
                                                    except:
                                                        pass
                                                    if d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton'):
                                                        d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click()

                                            except requests.exceptions.RequestException as e:
                                                print(
                                                    f"Erro na requisição: {e}")

                                            try:
                                                chrome.close()
                                            except:
                                                pass
                                            try:
                                                chrome.quit()
                                            except:
                                                pass
                                            chegou_cod = True

                                    except:
                                        WebDriverWait(chrome.driver, 55).until(
                                            EC.presence_of_element_located(
                                                (By.NAME, 'reload'))
                                        ).click()
                                        if tentativa == 4:
                                            chrome.refresh()
                                            time.sleep(5)
                                        if tentativa == 10:
                                            chegou_cod = True
                                            raise Exception(
                                                'Email não chegou.')

                        except Exception as e:
                            try:
                                chrome.close()
                            except:
                                pass
                            try:
                                chrome.quit()
                            except:
                                pass
                            traceback.print_exc()

                    elif email_escolhido == 'SmailProAPI':
                        import time
                        import requests
                        import re
                        import random
                        try:
                            url = "https://temp-gmail.p.rapidapi.com/list"

                            querystring = {
                                "page": random.randint(1, 500),
                                "limit": "1"
                            }

                            headers = {
                                "x-rapidapi-key": apismailpro,
                                "x-rapidapi-host": "temp-gmail.p.rapidapi.com"
                            }

                            response = requests.get(url, headers=headers, params=querystring)

                            data = response.json()['data'][0]
                            email = data['email']
                            timestamp2 = data['timestamp']

                            email_antigo = email
                            print(email)
                            print(timestamp2)
                            email_real = email
                            log, dominio = email_real.split('@')
                            numero_aleatorio = random.randint(0, 9999)
                            email = f'{log}+{numero_aleatorio:04}@{dominio}'

                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Email: {email}')
                            window.Refresh()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text(email)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/inputPasswordEditText').set_text(senha)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/repeat_password_edit_text').set_text(senha)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/checkPrivacyPolicy').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonRegister').click()
                            time.sleep(5)
                            email_existente = d(
                                resourceId='pl.rs.sip.softphone.newapp:id/buttonOk')
                            if not email_existente:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Email já utilizado.')
                                window.Refresh()
                                email_real = email_antigo
                                log, dominio = email_real.split('@')
                                numero_aleatorio = random.randint(0, 9999)
                                email = f'{log}+{numero_aleatorio:04}@{dominio}'
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Novo email: {email}')
                                window.Refresh()
                                d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text('')
                                d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text(email)
                                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonRegister').click()
                                time.sleep(10)
                            # use with address and token to reuse an existing inbox

                            # Obter o valor do atributo "value" do elemento
                            #### VERIFICAR EMAILS
                            data['textSubject'] = ''
                            time.sleep(30)
                            tentativa = 0
                            while True:
                                #time.sleep(30)
                                url = "https://temp-gmail.p.rapidapi.com/inbox"

                                querystring = {
                                    "email":email_real,
                                    "timestamp":timestamp2
                                }

                                headers = {
                                    "x-rapidapi-key": apismailpro,
                                    "x-rapidapi-host": "temp-gmail.p.rapidapi.com"
                                }

                                response = requests.get(url, headers=headers, params=querystring)
                                print(response.json())
                                try:
                                    data = response.json()['messages'][0]
                                    mid = data['mid']
                                    textTo = data['textTo']
                                    textFrom = data['textFrom']
                                    textSubject = data['textSubject']
                                    textDate = data['textDate']

                                    print(mid)
                                    print(textSubject)
                                except Exception as e:
                                    if 'list index out of range' in str(e):
                                        print('Não chegou nenhum código')
                                        tentativa += 1
                                        if tentativa == 3:
                                            window['output'].print(
                                                f'[{datetime.now().strftime("%H:%M:%S")}] Email não chegou.')
                                            window.Refresh()
                                            raise Exception('Email não chegou.')
                                        time.sleep(30)
                                    if 'email address is under' in str(e):
                                        window['output'].print(
                                                f'[{datetime.now().strftime("%H:%M:%S")}] Email não disponivel.')
                                        window.Refresh()
                                        raise Exception('Email não disponivel.')

                                    else:
                                        print(e)
                                if '2nr' in data['textSubject']:
                                    print('Email chegou')

                                    url = "https://temp-gmail.p.rapidapi.com/message"

                                    querystring = {"email":email,"mid":mid}

                                    headers = {
                                        "x-rapidapi-key": apismailpro,
                                        "x-rapidapi-host": "temp-gmail.p.rapidapi.com"
                                    }

                                    response = requests.get(url, headers=headers, params=querystring)
                                    url = response.json()
                                    url = url['body']
                                    print(response.json())
                                    break
                                
                                
                                        
                            
                            print('----------------------------')
                            import re
                            #url = url['body']
                            urls = re.findall(
                                "(?P<url>https?://[^\s]+)", url)
                            for url in urls:
                                if url.startswith('https://api.2nr.xyz/register/?'):
                                    try:
                                        url = url.replace('</p></div>', '')
                                        url = url.replace('&amp;', '&')
                                    except:
                                        pass
                                    print(url)
                                    print("URL:", url +
                                        '\n----------------------------')

                                    headers = {
                                        'User-Agent': ua.random,
                                        'User-Agent': ua.random
                                        }
                                    print(headers)
                                    # d.open_url(url)
                                    # time.sleep(10)
                                    # d.app_start('pl.rs.sip.softphone.newapp', use_monkey=True)
                                    from threading import Thread, Lock
                                    from queue import Queue
                                    import re
                                    import random
                                    # URL da API para obter os proxies

                                    test_urls = [
                                        url
                                    ]

                                    api_url = "https://api.proxyscrape.com/v3/free-proxy-list/get?request=displayproxies&protocol=http&proxy_format=protocolipport&format=text&timeout=20000"
                                    #api_url = "https://api.proxyscrape.com/v2/?request=displayproxies&protocol=http&proxy_format=protocolipport&timeout=10000&country=all&ssl=all&anonymity=all"

                                    # Função para obter proxies da API
                                    def fetch_proxies(api_url):
                                        try:
                                            response = requests.get(api_url)
                                            proxies = response.text.split('\n')
                                            return [proxy.strip() for proxy in proxies if proxy.strip()]
                                        except requests.RequestException as e:
                                            print(f"Erro ao obter proxies: {e}")
                                            return []

                                    # Obter proxies da API
                                    proxies_list = fetch_proxies(api_url)

                                    # Aleatorizar a ordem dos proxies
                                    #random.shuffle(proxies_list)

                                    # Fila de proxies
                                    proxy_queue = Queue()

                                    # Adiciona proxies à fila
                                    for proxy in proxies_list:
                                        proxy_queue.put(f"{proxy}")

                                    # Lista para armazenar proxies válidos
                                    valid_proxies = []

                                    # Lock para proteger o acesso à lista de proxies válidos
                                    list_lock = Lock()

                                    # Variável de controle para parar threads
                                    stop_event = False

                                    def check_proxy():
                                        global stop_event
                                        while not proxy_queue.empty() and not stop_event:
                                            proxy = proxy_queue.get()
                                            successes = [False] * len(test_urls)  # Lista para acompanhar os sucessos em cada URL
                                            try:
                                                for i, test_url in enumerate(test_urls):
                                                    response = requests.get(test_url, headers=headers, proxies={"http": proxy, "https": proxy}, timeout=1)
                                                    if response.status_code == 200:
                                                        successes[i] = True
                                                        print(response.status_code)
                                                    else:
                                                        successes[i] = False
                                            except requests.RequestException:
                                                successes = [False] * len(test_urls)

                                            if all(successes):  # Se todos os testes forem bem-sucedidos
                                                with list_lock:
                                                    if proxy not in valid_proxies:
                                                        valid_proxies.append(proxy)
                                                        print(f"Proxy válido: {proxy}")
                                                        if len(valid_proxies) >= 2:
                                                            stop_event = True
                                            else:
                                                pass
                                                #print(f"Proxy inválido: {proxy}")

                                            proxy_queue.task_done()

                                    # Número de threads
                                    num_threads = 20

                                    # Criar e iniciar as threads
                                    threads = []
                                    for i in range(num_threads):
                                        thread = Thread(target=check_proxy)
                                        thread.start()
                                        threads.append(thread)

                                    # Aguardar todas as threads terminarem
                                    for thread in threads:
                                        thread.join()

                                    # Escolher um proxy aleatório entre os válidos encontrados
                                    if valid_proxies:
                                        print(valid_proxies)
                                        chosen_proxy = random.choice(valid_proxies)
                                        print("Proxy escolhido aleatoriamente:", chosen_proxy)
                                    else:
                                        print("Nenhum proxy válido encontrado")
                                    def get_proxies(proxy):
                                        if proxy.startswith('http://'):
                                            return {'http': proxy}
                                        elif proxy.startswith('https://'):
                                            return {'http': proxy.replace('https://', 'http://'), 'https': proxy}
                                        elif proxy.startswith('socks4://'):
                                            return {'http': proxy, 'https': proxy}
                                        else:
                                            raise ValueError("Unsupported proxy protocol")
                                    proxies2 = get_proxies(proxy)
                                    #print(proxies2)
                                    try:
                                        response = requests.get(
                                            url, headers=headers)
                                        if response.status_code == 200:
                                            print(response.status_code)
                                        else:
                                            print(response.status_code)
                                            d.open_url(url)
                                            time.sleep(20)
                                            print('Verificado com o chrome')
                                            d.app_start('pl.rs.sip.softphone.newapp')
                                            try:
                                                d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').wait(timeout=20)
                                            except:
                                                pass
                                            if d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton'):
                                                d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click()

                                    except requests.exceptions.RequestException as e:
                                        print(
                                            f"Erro na requisição: {e}")

                                    chegou_cod = True

                                

                        except Exception as e:
                            if 'Email não chegou.' in str(e):
                                raise Exception('')
                            traceback.print_exc()


                    elif email_escolhido == '1SecMail':

                        def get_random_email():
                            url = "https://www.1secmail.com/api/v1/?action=genRandomMailbox&count=1"
                            response = requests.get(url)

                            if response.status_code == 200:
                                data = response.json()
                                email = data[0]
                                log, dominio = email.split('@')
                                return log, dominio
                            else:
                                print("Erro na requisição. Código de status:",
                                      response.status_code)
                                return None, None

                        def check_and_read_messages(log, dominio):
                            tentativa = 1
                            while tentativa < 6:
                                # Verifica se há novas mensagens
                                check_url = f"https://www.1secmail.com/api/v1/?action=getMessages&login={log}&domain={dominio}"
                                messages_response = requests.get(check_url)

                                if messages_response.status_code == 200:
                                    messages_data = messages_response.json()

                                    if messages_data:
                                        # Se houver mensagens, pega a chave ID da primeira mensagem
                                        first_message_id = messages_data[0]['id']

                                        # Lê a mensagem usando a ID
                                        read_url = f"https://www.1secmail.com/api/v1/?action=readMessage&login={log}&domain={dominio}&id={first_message_id}"
                                        read_response = requests.get(read_url)

                                        if read_response.status_code == 200:
                                            read_data = read_response.json()

                                            # Pega o corpo (body) da mensagem
                                            body = read_data['body']

                                            # Salva a ID e o corpo da mensagem
                                            save_message(
                                                first_message_id, body)

                                            # Pode sair do loop se quiser
                                            break
                                        else:
                                            print("Erro ao ler a mensagem. Código de status:",
                                                  read_response.status_code)
                                else:
                                    print("Erro ao verificar mensagens. Código de status:",
                                          messages_response.status_code)

                                # Espera um pouco antes de verificar novamente
                                time.sleep(5)
                                tentativa += 1
                                if tentativa == 5:
                                    try:
                                        conteudo = config['vpn']
                                        if conteudo == "AVG":
                                            vpn_avg()
                                        elif conteudo == "SurfShark":
                                            vpn_surf()
                                        elif conteudo == "Nenhuma":
                                            nenhuma_vpn()
                                        elif conteudo == "Avast":
                                            vpn_avast()
                                        elif conteudo == "ExpressVPN":
                                            vpn_express()
                                        elif conteudo == "PiaVPN":
                                            vpn_pia()
                                        elif conteudo == "TunnelBear":
                                            vpn_tunnelbear()
                                        elif conteudo == "BetterNet":
                                            vpn_better()
                                        elif conteudo == "CyberGhost":
                                            vpn_cyberghost()
                                        elif conteudo == "NordVPN":
                                            vpn_nord()
                                        elif conteudo == "HotspotShield":
                                            vpn_hotspotshield()
                                        elif conteudo == "WindscribeVPN":
                                            vpn_windscribe()
                                        elif conteudo == "HmaVPN":
                                            vpn_hma()
                                        else:
                                            window['output'].print(
                                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                            window.Refresh()
                                    except Exception as e:
                                        print(e)

                        def save_message(message_id, body):
                            # Aqui você pode implementar a lógica para salvar a mensagem como desejar
                            print(f"Mensagem recebida! ID: {message_id}")
                            tentativa = 1
                            urls = re.findall("(?P<url>https?://[^\s]+)",
                                              body if body else body)

                            # Acessar cada URL
                            for url in urls:
                                try:
                                    url = url.replace('</p></div>', '')
                                    url = url.replace('&amp;', '&')
                                except:
                                    pass
                                try:
                                    response = requests.get(url)
                                    if response.status_code == 200:
                                        pass
                                    else:
                                        pass
                                except requests.exceptions.RequestException as e:
                                    print(f"Erro na requisição: {e}")

                        # Obtém um e-mail aleatório
                        log, dominio = get_random_email()

                        if log and dominio:
                            print(f"E-mail gerado: {log}@{dominio}")
                            email = f'{log}@{dominio}'

                        else:
                            print("Não foi possível obter um e-mail aleatório.")
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Email: {email}')
                        window.Refresh()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text(email)

                        d(resourceId='pl.rs.sip.softphone.newapp:id/inputPasswordEditText').set_text(senha)

                        d(resourceId='pl.rs.sip.softphone.newapp:id/repeat_password_edit_text').set_text(senha)

                        d(resourceId='pl.rs.sip.softphone.newapp:id/checkPrivacyPolicy').click()

                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonRegister').click()

                        # use with address and token to reuse an existing inbox

                        tentativa = 1

                        # Verifica e lê as mensagens continuamente
                        check_and_read_messages(log, dominio)

                    elif email_escolhido == 'MinuteInBox':

                        try:
                            inbox = Inbox(
                                address="",
                                token="",
                            )
                            email = inbox.address
                            # window['output'].print("Email: " + email)
                            # window.Refresh()
                        except Exception as e:
                            print(e)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Email: {email}')
                        window.Refresh()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text(email)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/inputPasswordEditText').set_text(senha)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/repeat_password_edit_text').set_text(senha)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/checkPrivacyPolicy').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonRegister').click()

                        # use with address and token to reuse an existing inbox

                        time.sleep(2)

                        codigo = None

                        # try:
                        #    test.start(listener, interval=10)
                        #    codigo = 0
                        #    while codigo != 5:
                        #        time.sleep(2)
                        #        codigo = codigo + 1
                        # except Exception as e:
                        #    if "Too Many Requests" in str(e):
                        #        pass
                        #    else:
                        #        pass
                        subject = False

                        def make_request(url):
                            try:
                                print(url)
                                response = requests.get(url)
                                if response.status_code == 200:
                                    pass
                                else:
                                    print(
                                        f"Falha na requisição. Código de status: {response.status_code}")
                            except requests.exceptions.RequestException as e:
                                print(f"Erro na requisição: {e}")

                        subject = False
                        while subject == False:
                            for mail in inbox.mails:
                                cod = mail.subject
                                print(mail.subject)
                                if '2nr' in mail.subject:
                                    print(mail.content)
                                    urls = re.findall("(?P<url>https?://[^\s]+)",
                                                      mail.content if mail.content else mail.content)
                                    print(urls)
                                    # Acessar cada URL
                                    for url in urls:
                                        make_request(url)
                                        time.sleep(0.5)
                                    subject = True

                    troca_ip = 0
                    try:
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonOk').click()
                    except:
                        pass

                    print(f"Requisição bem-sucedida!")
                    d.xpath(
                        '//android.widget.LinearLayout[@content-desc="Log in"]/android.widget.TextView').click()

                    d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email)

                    d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha)
                    time.sleep(2)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()

                    time.sleep(5)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/addNumber').click()

                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] 2NR criado com sucesso.',
                                           text_color=('cyan'))
                    contagem = contagem + 1
                    try:
                        arquivo = open(
                            'configuracoes/contas/contas_2nr_novas.txt', 'x')
                    except FileExistsError:
                        arquivo = open(
                            'configuracoes/contas/contas_2nr_novas.txt', 'a')
                    arquivo.write(email + ' ' + senha + "\n")
                    arquivo.close()
                    try:
                        arquivo = open(
                            'configuracoes/contas/todas_contas_2nr.txt', 'x')
                    except FileExistsError:
                        arquivo = open(
                            'configuracoes/contas/todas_contas_2nr.txt', 'a')
                    try:
                        random_number = random.random()
                        chance2 = 0.15
                        now = datetime.now()
                        now_brasilia = tz.localize(now)
                        timestamp = now_brasilia.strftime("%d/%m/%Y %H:%M:%S")
                        # Verificar se o número aleatório está abaixo da chance
                        if random_number < chance2 and not user_mysql == "wn3":
                            scope = ["https://spreadsheets.google.com/feeds",
                                     "https://www.googleapis.com/auth/drive"]
                            creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                funcionamento, scope)
                            client = gspread.authorize(creds)
                            spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                            sheet_name = 'relatorio_geral2nr'
                            # Insert user, password, and timestamp into first empty row
                            sheet = client.open_by_key(
                                spreadsheet_id).worksheet(sheet_name)
                            values = sheet.col_values(1)
                            last_row = len(values)
                            values = [email + ' ' + senha,
                                      timestamp, user_mysql]
                            cell_list = sheet.range(
                                f'A{last_row + 1}:C{last_row + 1}')
                            for i, val in enumerate(values):
                                cell_list[i].value = val
                            sheet.update_cells(cell_list)
                    except:
                        pass
                    arquivo.write(email + ' ' + senha + "\n")
                    arquivo.close()
                    window['criadas'].update(contagem)
                    window.Refresh()
                    time.sleep(3)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/inputNumberName').set_text(
                        random.choice(list(range(1, 100))))
                    time.sleep(2)
                    # draw_number = 'None'
                    # try:
                    #    draw_number = d(resourceId='pl.rs.sip.softphone.newapp:id/textContent').get_text(timeout=2)
                    # except:
                    #    pass
                    # if draw_number == 'You need to draw for a phone number':
                    #    while True:
                    #        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonOk').click()
                    #        #subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_BACK', stdout=subprocess.DEVNULL,
                    #        #        stderr=subprocess.DEVNULL, check=True, shell=True)
                    #        #d(resourceId='pl.rs.sip.softphone.newapp:id/addNumber').click()
                    #        #d(resourceId='pl.rs.sip.softphone.newapp:id/inputNumberName').set_text(
                    #        #    random.choice(list(range(1, 100))))
                    #        #time.sleep(5)
                    #        #d(resourceId='pl.rs.sip.softphone.newapp:id/save').click()
                    #        #time.sleep(2)
                    #        d.swipe(340, 480, 340, 880)
                    #        time.sleep(3)
                    #        d(resourceId='pl.rs.sip.softphone.newapp:id/save').click()
                    #        time.sleep(2)
                    #        try:
                    #            draw_number = d(resourceId='pl.rs.sip.softphone.newapp:id/textContent').get_text(timeout=2)
                    #        except:
                    #            draw_number = 'None'
                    #        try:
                    #            if draw_number == 'You need to draw for a phone number':
                    #                pass
                    #            else:
                    #                break
                    #        except Exception as e:
                    #            print(e)
                    #            break
                    number = d(
                        resourceId='pl.rs.sip.softphone.newapp:id/phoneNumber').get_text()
                    tries = 0
                    if number is None or tries == 30:
                        while True:
                            if tries == '30':
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Máximo de números criados.')
                                window.Refresh()
                                raise Exception('Máximo de números criados.')
                            d.swipe(340, 480, 340, 880)
                            time.sleep(3)
                            number = d(
                                resourceId='pl.rs.sip.softphone.newapp:id/phoneNumber').get_text()
                            tries += 1
                            if not number is None:
                                d(resourceId='pl.rs.sip.softphone.newapp:id/save').click()
                                time.sleep(2)
                                break
                    else:
                        d(resourceId='pl.rs.sip.softphone.newapp:id/save').click()
                        time.sleep(2)
                    if tries == 30:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Máximo de números criados.')
                        window.Refresh()
                        raise Exception('Máximo de números criados.')

                    tries = 0
                    d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                    time.sleep(1)
                    if d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').exists():
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                    d(resourceId='pl.rs.sip.softphone.newapp:id/save').click()
                    try:
                        success = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/captchaCode').get_text()
                    except:
                        pass
                    tries = 0
                    success = 'Null'
                    while success != 'Successful verification' or tries < 30:
                        try:
                            success = d(
                                resourceId='pl.rs.sip.softphone.newapp:id/captchaCode').get_text()
                        except:
                            pass
                        if success == 'Successful verification':
                            break
                        elif success == 'Veryfication failed':
                            while True:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Falha na verificação.')
                                window.Refresh()
                                d.swipe(340, 480, 340, 880)
                                time.sleep(7)
                                success = d(
                                    resourceId='pl.rs.sip.softphone.newapp:id/captchaCode').get_text()
                                if success == 'Successful verification':
                                    break
                        elif d(resourceId='recaptcha-audio-button') or d(resourceId='audio-response'):
                            time.sleep(random.randint(1,30))
                            import soundcard as sc
                            import soundfile as sf
                            import tempfile
                            import speech_recognition as sr
                            OUTPUT_FILE_NAME = "out.wav"    # Nome do arquivo de saída.
                            SAMPLE_RATE = 48000             # Taxa de amostragem em Hz.
                            RECORD_SEC = 10                  # Duração da gravação em segundos.

                            # Criando um arquivo temporário para salvar o áudio.
                            with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_file:
                                temp_file_name = temp_file.name

                                with sc.get_microphone(id=str(sc.default_speaker().name), include_loopback=True).recorder(samplerate=SAMPLE_RATE) as mic:
                                    # Gravando áudio com loopback do alto-falante padrão.
                                    try:
                                        d(resourceId='recaptcha-audio-button').click(timeout=3)
                                    except:
                                        pass
                                    def clicar_captcha():
                                        time.sleep(2)
                                        d(text='Pressione REPRODUZIR para ouvir').click()
                                    audio_thread = threading.Thread(target=clicar_captcha)
                                    audio_thread.start()
                                    data = mic.record(numframes=SAMPLE_RATE * RECORD_SEC)

                                    # Salvando os dados de áudio no arquivo temporário.
                                    sf.write(file=temp_file_name, data=data[:, 0], samplerate=SAMPLE_RATE)

                            # Aqui você pode usar o arquivo temporário (temp_file_name) conforme necessário.
                            print(f"Áudio salvo em: {temp_file_name}")
                            r = sr.Recognizer()

                            with sr.AudioFile(temp_file_name) as source:
                                audio_data = r.record(source)  # Lê o áudio do arquivo

                                try:
                                    text = r.recognize_google(audio_data, language='en-US')  # Reconhecimento usando Google Speech Recognition API
                                    print("Texto reconhecido:", text)
                                     # Excluir o arquivo temporário após o uso, se necessário.
                                    import os
                                    try: os.remove(temp_file_name)
                                    except: pass
                                    d(resourceId='audio-response').set_text(text)
                                    d(resourceId='recaptcha-verify-button').click()
                                    time.sleep(5)
                                    if success == 'Successful verification':
                                        break
                                    elif d(resourceId='audio-response'):
                                        pass
                                except sr.UnknownValueError:
                                    print("Não foi possível reconhecer a fala")
                                    if reconhecer_captcha == 6:
                                        reconhecer_captcha = 0
                                        raise Exception('Não foi possível reconhecer a fala')
                                    d(resourceId='recaptcha-reload-button').click()
                                    reconhecer_captcha += 1


                                except sr.RequestError as e:
                                    print("Erro na requisição para o serviço de reconhecimento; {0}".format(e))

                            # raise Exception('Falha na verificação.')
                        time.sleep(0.5)

                        tries += 1
                    time.sleep(5)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/save').click()
                    window.Refresh()
                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Número criado com sucesso.',
                                           text_color=('lime'))
                    window.Refresh()
                    sms = False
                    criadas = 1
                    tentativa2 = 1
                    while sms is False:
                        if criadas >= 4:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Número criado com sucesso.',
                                text_color=('lime'))
                            window.Refresh()
                            raise Exception('Máximo de números criados.')
                        try:
                            if d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').exists():
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Número criado com sucesso.',
                                    text_color=('lime'))
                                criadas = criadas + 1

                            try:
                                d(resourceId='pl.rs.sip.softphone.newapp:id/settings').click(timeout=5)

                            except:
                                subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_BACK',
                                               stdout=subprocess.DEVNULL,
                                               stderr=subprocess.DEVNULL, check=True, shell=True)
                                if tentativa2 == 2:
                                    tentativa2 = 0
                                    raise Exception('')
                                tentativa2 += 1
                            d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                            time.sleep(2)
                            # d(resourceId='pl.rs.sip.softphone.newapp:id/save').click()
                            # draw_number = 'None'
                            # try:
                            #    draw_number = d(resourceId='pl.rs.sip.softphone.newapp:id/textContent').get_text(timeout=2)
                            # except:
                            #    pass
                            # if draw_number == 'You need to draw for a phone number':
                            #    while True:
                            #        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonOk').click()
                            #        #subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_BACK', stdout=subprocess.DEVNULL,
                            #        #        stderr=subprocess.DEVNULL, check=True, shell=True)
                            #        #d(resourceId='pl.rs.sip.softphone.newapp:id/addNumber').click()
                            #        #d(resourceId='pl.rs.sip.softphone.newapp:id/inputNumberName').set_text(
                            #        #    random.choice(list(range(1, 100))))
                            #        #time.sleep(5)
                            #        #d(resourceId='pl.rs.sip.softphone.newapp:id/save').click()
                            #        #time.sleep(2)
                            #        d.swipe(340, 480, 340, 880)
                            #        time.sleep(3)
                            #        d(resourceId='pl.rs.sip.softphone.newapp:id/save').click()
                            #        time.sleep(2)
                            #        try:
                            #            draw_number = d(resourceId='pl.rs.sip.softphone.newapp:id/textContent').get_text(timeout=2)
                            #        except:
                            #            draw_number = 'None'
                            #        try:
                            #            if draw_number == 'You need to draw for a phone number':
                            #                pass
                            #            else:
                            #                break
                            #        except Exception as e:
                            #            print(e)
                            #            break
                            number = d(
                                resourceId='pl.rs.sip.softphone.newapp:id/phoneNumber').get_text()
                            tries = 0
                            if number is None or tries == 30:
                                while True:
                                    if tries == 30:
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Máximo de números criados.')
                                        window.Refresh()
                                        raise Exception(
                                            'Máximo de números criados.')
                                    d.swipe(340, 480, 340, 880)
                                    time.sleep(3)
                                    number = d(
                                        resourceId='pl.rs.sip.softphone.newapp:id/phoneNumber').get_text()
                                    tries += 1
                                    if not number is None:
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/save').click()
                                        time.sleep(2)
                                        break
                            else:
                                d(resourceId='pl.rs.sip.softphone.newapp:id/save').click()
                                time.sleep(2)
                            if tries == '30':
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Máximo de números criados.')
                                window.Refresh()
                                raise Exception('Máximo de números criados.')

                            tries = 0
                            try:
                                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click(timeout=5)
                                time.sleep(3)
                            except:
                                pass
                            if d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').exists():
                                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/save').click()
                            try:
                                success = d(
                                    resourceId='pl.rs.sip.softphone.newapp:id/captchaCode').get_text()
                            except:
                                pass
                            tries = 0
                            success = 'Null'
                            while success != 'Successful verification' or tries < 30:
                                try:
                                    success = d(
                                        resourceId='pl.rs.sip.softphone.newapp:id/captchaCode').get_text()
                                except:
                                    pass
                                if success == 'Successful verification':
                                    break
                                elif success == 'Veryfication failed':
                                    while True:
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Falha na verificação.')
                                        window.Refresh()
                                        d.swipe(340, 480, 340, 880)
                                        time.sleep(7)
                                        success = d(
                                            resourceId='pl.rs.sip.softphone.newapp:id/captchaCode').get_text()
                                        if success == 'Successful verification':
                                            break
                                elif d(resourceId='recaptcha-audio-button') or d(resourceId='audio-response'):
                                    time.sleep(random.randint(1,30))
                                    import soundcard as sc
                                    import soundfile as sf
                                    import tempfile
                                    import speech_recognition as sr
                                    OUTPUT_FILE_NAME = "out.wav"    # Nome do arquivo de saída.
                                    SAMPLE_RATE = 48000             # Taxa de amostragem em Hz.
                                    RECORD_SEC = 10                  # Duração da gravação em segundos.

                                    # Criando um arquivo temporário para salvar o áudio.
                                    with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_file:
                                        temp_file_name = temp_file.name

                                        with sc.get_microphone(id=str(sc.default_speaker().name), include_loopback=True).recorder(samplerate=SAMPLE_RATE) as mic:
                                            # Gravando áudio com loopback do alto-falante padrão.
                                            try:
                                                d(resourceId='recaptcha-audio-button').click(timeout=3)
                                            except:
                                                pass
                                            def clicar_captcha():
                                                time.sleep(2)
                                                d(text='Pressione REPRODUZIR para ouvir').click()
                                            audio_thread = threading.Thread(target=clicar_captcha)
                                            audio_thread.start()
                                            data = mic.record(numframes=SAMPLE_RATE * RECORD_SEC)

                                            # Salvando os dados de áudio no arquivo temporário.
                                            sf.write(file=temp_file_name, data=data[:, 0], samplerate=SAMPLE_RATE)

                                    # Aqui você pode usar o arquivo temporário (temp_file_name) conforme necessário.
                                    print(f"Áudio salvo em: {temp_file_name}")
                                    r = sr.Recognizer()

                                    with sr.AudioFile(temp_file_name) as source:
                                        audio_data = r.record(source)  # Lê o áudio do arquivo

                                        try:
                                            text = r.recognize_google(audio_data, language='en-US')  # Reconhecimento usando Google Speech Recognition API
                                            print("Texto reconhecido:", text)
                                            # Excluir o arquivo temporário após o uso, se necessário.
                                            import os
                                            try: os.remove(temp_file_name)
                                            except: pass
                                            d(resourceId='audio-response').set_text(text)
                                            d(resourceId='recaptcha-verify-button').click()
                                            time.sleep(5)
                                            if success == 'Successful verification':
                                                break
                                            elif d(resourceId='audio-response'):
                                                pass
                                        except sr.UnknownValueError:
                                            print("Não foi possível reconhecer a fala")
                                            if reconhecer_captcha == 6:
                                                reconhecer_captcha = 0
                                                raise Exception('Não foi possível reconhecer a fala')
                                            d(resourceId='recaptcha-reload-button').click()
                                            reconhecer_captcha += 1

                                        except sr.RequestError as e:
                                            print("Erro na requisição para o serviço de reconhecimento; {0}".format(e))

                                        # raise Exception('Falha na verificação.')
                                    time.sleep(0.5)

                                    tries += 1
                            time.sleep(3)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/save').click()
                            time.sleep(3)

                            # d(resourceId='pl.rs.sip.softphone.newapp:id/settings').click()
                            # d(resourceId='pl.rs.sip.softphone.newapp:id/settings').click()
                            # d(resourceId='pl.rs.sip.softphone.newapp:id/settings').click()
                            # d(resourceId='pl.rs.sip.softphone.newapp:id/settings').click()
                        except Exception as e:
                            print(e)
                            sms = True

                except Exception as e:
                    print(e)
            except Exception as e:
                print(e)
    elif opcao_executar == '-criarcontas-':
        while True:
            window['output'].print(linha_ret)
            window.Refresh()
            gerar_id()
            android_id = gerar_id()
            subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, shell=True)
            print('\n')
            # try:
            #    # Executa o comando adb para obter o Android ID
            #    result = subprocess.run(['adb', '-s', f'{porta}', 'shell', 'settings', 'get', 'secure', 'android_id'], capture_output=True, text=True)
            #
            #    # Obtém o Android ID do resultado
            #    android_id = result.stdout.strip()
            #
            #    # Imprime o Android ID
            #    print(f"Android ID: {android_id}")
            #
            # except subprocess.CalledProcessError as e:
            #    # Em caso de erro, imprime a mensagem de erro
            #    print(f"Erro: {e}")
            # except Exception as e:
            #    print(f"Erro desconhecido: {e}")
            try:

                nome = fake.first_name()
                sobrenome = fake.last_name()
                if event == sg.WINDOW_CLOSED:
                    break
                try:
                    # if thread_parar:
                    #    break
                    try:
                        subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                       stdout=subprocess.DEVNULL,
                                       stderr=subprocess.DEVNULL, check=True, shell=True)
                    except:
                        pass

                    senha = config['senha2nr']

                    quantidade = 0

                    d.app_start('pl.rs.sip.softphone.newapp', use_monkey=True)
                    d.set_fastinput_ime(True)
                    try:
                        d(resourceId='pl.rs.sip.softphone.newapp:id/registerButton').click()
                    except:
                        if d(resourceId='pl.rs.sip.softphone.newapp:id/settings').exists:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Deslogando...')
                            window.Refresh()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/settings').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogout').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/registerButton').click()
                            d.app_stop('pl.rs.sip.softphone.newapp')
                            raise Exception('')
                        else:
                            d(resourceId='pl.rs.sip.softphone.newapp:id/registerButton').click()
                    try:
                        subprocess.run(
                            f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.READ_CONTACTS',
                            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                        subprocess.run(
                            f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.CAMERA',
                            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                        subprocess.run(
                            f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.RECORD_AUDIO',
                            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                        try:
                            subprocess.run(
                                f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.ACCESS_NOTIFICATION_POLICY',
                                stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        subprocess.run(
                            f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.POST_NOTIFICATIONS',
                            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    except:
                        pass
                    # inbox = Inbox(
                    #    address="",
                    #    token="",
                    # )

                    # address = inbox.address
                    # token = inbox.token

                    # extend the expiration of the inbox by 10 minutes
                    # inbox.extend_10m()
                    lista_user = random.choices(range(1, 9), k=3)
                    nome_completo_s = nome + sobrenome
                    numeros_concatenados = ''.join(
                        str(numero) for numero in lista_user)
                    user_completo = nome_completo_s + \
                        '.' + str(numeros_concatenados)
                    tentativa = 1

                    def gerar_senha(tamanho=12):
                        if tamanho < 6:
                            raise ValueError(
                                "A senha deve ter pelo menos 6 caracteres.")

                        # Define uma lista de letras maiúsculas e minúsculas
                        letras_maiusculas = [random.choice(
                            string.ascii_uppercase) for _ in range(tamanho // 2)]
                        letras_minusculas = [random.choice(
                            string.ascii_lowercase) for _ in range(tamanho // 2)]

                        # Intercale as letras maiúsculas e minúsculas
                        senha = ''.join(''.join(pair) for pair in zip(
                            letras_maiusculas, letras_minusculas))

                        # Adiciona caracteres especiais, números e @
                        caracteres_permitidos = string.ascii_letters + string.digits + string.punctuation
                        caracteres_permitidos = caracteres_permitidos.replace(
                            "~", "")  # Remove ~ e outros acentos

                        senha += ''.join(random.choice(caracteres_permitidos)
                                         for _ in range(tamanho - len(senha) - 3))
                        # Adiciona pelo menos uma letra maiúscula
                        senha += random.choice(string.ascii_uppercase)
                        # Adiciona pelo menos um número
                        senha += random.choice(string.digits)
                        senha += "@"

                        # Mistura os caracteres
                        senha = ''.join(random.sample(senha, len(senha)))

                        return senha

                        # Exemplo de uso

                    senha = gerar_senha(12)
                    email_escolhido = config['email_escolhido']
                    if os.path.exists('testeprivado'):
                        testeprivado()

                    elif email_escolhido == 'GmailTemp':
                        from selenium import webdriver
                        from selenium.webdriver.chrome.service import Service
                        try:
                            from webdriver_manager.chrome import ChromeDriverManager
                        except:
                            subprocess.run(
                                ['pip', 'install', 'webdriver-manager'])
                            from webdriver_manager.chrome import ChromeDriverManager

                        from selenium.webdriver.common.by import By
                        from selenium.webdriver.support.ui import WebDriverWait
                        from selenium.webdriver.support import expected_conditions as EC
                        chrome_options = webdriver.ChromeOptions()
                        chrome_options.add_argument(
                            "--blink-settings=imagesEnabled=false")
                        chrome_options.add_argument("--disable-gpu")
                        chrome_options.add_argument("--headless")
                        chrome_options.add_argument("--log-level=3")
                        try:
                            driver = webdriver.Chrome(options=chrome_options,
                                                      service=Service(ChromeDriverManager().install()))

                            driver.get('https://mail10year.com/TOOL/gmail/')
                            driver.maximize_window()
                            WebDriverWait(driver, 30).until(
                                EC.presence_of_element_located((By.NAME, "change_email"))).click()
                            time.sleep(3)
                            email_real = WebDriverWait(driver, 30).until(
                                EC.presence_of_element_located((By.NAME, "username"))).get_attribute("value")
                            log, dominio = email_real.split('@')
                            numero_aleatorio = random.randint(0, 999)
                            email = f'{log}+{numero_aleatorio:03}@{dominio}'
                            print(email)
                        except:
                            driver.close()
                            driver.quit()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Email: {email}')
                        window.Refresh()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text(email)

                        d(resourceId='pl.rs.sip.softphone.newapp:id/inputPasswordEditText').set_text(senha)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/repeat_password_edit_text').set_text(senha)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/checkPrivacyPolicy').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonRegister').click()

                        # use with address and token to reuse an existing inbox

                        tentativa = 1
                        while True:
                            if tentativa == 7:
                                driver.close()
                                driver.quit()
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Código não chegou.')
                                window.Refresh()
                                try:
                                    tentativa = 0
                                    conteudo = config['vpn']
                                    if conteudo == "AVG":
                                        vpn_avg()
                                    elif conteudo == "SurfShark":
                                        vpn_surf()
                                    elif conteudo == "Nenhuma":
                                        nenhuma_vpn()
                                    elif conteudo == "Avast":
                                        vpn_avast()
                                    elif conteudo == "ExpressVPN":
                                        vpn_express()
                                    elif conteudo == "PiaVPN":
                                        vpn_pia()
                                    elif conteudo == "TunnelBear":
                                        vpn_tunnelbear()
                                    elif conteudo == "BetterNet":
                                        vpn_better()
                                    elif conteudo == "CyberGhost":
                                        vpn_cyberghost()
                                    elif conteudo == "NordVPN":
                                        vpn_nord()
                                    elif conteudo == "HotspotShield":
                                        vpn_hotspotshield()
                                    elif conteudo == "WindscribeVPN":
                                        vpn_windscribe()
                                    elif conteudo == "HmaVPN":
                                        vpn_hma()
                                    else:
                                        window['output'].print(
                                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                        window.Refresh()

                                except Exception as e:
                                    print(e)
                                    tentativa = 0
                                raise Exception('Código não chegou.')
                            try:
                                time.sleep(5)
                                WebDriverWait(driver, 30).until(
                                    EC.presence_of_element_located((By.NAME, "check_email"))).click()
                                time.sleep(5)
                                body = WebDriverWait(driver, 30).until(
                                    EC.presence_of_element_located((By.ID, "copyClone"))).text

                                if '2nr' in body:
                                    urls = re.findall("(?P<url>https?://[^\s]+)",
                                                      body if body else body)

                                    # Acessar cada URL
                                    for url in urls:
                                        try:
                                            url = url.replace('</p></div>', '')
                                            url = url.replace('&amp;', '&')
                                        except:
                                            pass
                                        try:
                                            response = requests.get(url)
                                            if response.status_code == 200:
                                                pass
                                            else:
                                                pass
                                        except requests.exceptions.RequestException as e:
                                            print(f"Erro na requisição: {e}")
                                    try:
                                        driver.close()
                                        driver.quit()
                                    except:
                                        driver.quit()
                                        driver.close()
                                    break

                            except:
                                driver.close()
                                driver.quit()
                                raise Exception('Ocorreu algum erro.')
                            tentativa += 1

                    elif email_escolhido == 'GmailTemp2':
                        from wsgiref.headers import tspecials
                        try:
                            from tempinbox import TempEmail
                        except:
                            import requests
                            import os
                            from pathlib import Path

                            url = "https://www.dropbox.com/scl/fi/ll7cbtfled6dy1209fw4r/nome_do_arquivo.tar.gz?rlkey=aljtozyyj9vzzhcnqwr86tfnd&dl=1"
                            nome_do_arquivo = "gmail2.tar.gz"
                            caminho_do_arquivo = Path(
                                __file__).parent / nome_do_arquivo

                            # Baixar o arquivo da URL
                            response = requests.get(url)
                            with open(caminho_do_arquivo, 'wb') as arquivo:
                                arquivo.write(response.content)

                            # Instalar o pacote localmente usando pip com aspas duplas no caminho
                            os.system(f'pip install "{caminho_do_arquivo}"')
                        # try:
                        # inbox = Inbox(
                        # address="",
                        # token="",
                        # )
                        # email = inbox.address
                        # window['output'].print("Email: " + email)
                        # window.Refresh()
                        # except Exception as e:
                        # print(e)
                        client = TempEmail()

                        # Generate a temporary email address with specific options
                        email = client.generate_temp_email(
                            domain=False, dot_gmail=True, plus_gmail=True)["email"][0]
                        print(email)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Email: {email}')
                        window.Refresh()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text(email)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/inputPasswordEditText').set_text(senha)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/repeat_password_edit_text').set_text(senha)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/checkPrivacyPolicy').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonRegister').click()
                        time.sleep(5)
                        email_existente = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/buttonOk')
                        if not email_existente:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Email já utilizado.')
                            window.Refresh()
                            email_real = email
                            log, dominio = email_real.split('@')
                            numero_aleatorio = random.randint(0, 9999)
                            email = f'{log}+{numero_aleatorio:04}@{dominio}'
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Novo email: {email}')
                            window.Refresh()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text('')
                            d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text(email)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonRegister').click()
                            time.sleep(10)

                        time.sleep(2)

                        codigo = None
                        tentativa = 1
                        while True:
                            email_list = client.get_mail_list(email)
                            time.sleep(10)
                            # Acessando a lista de mensagens
                            message_list = email_list.get('messageData', [])

                            # Verificando se há mensagens na lista
                            message_list = email_list.get('messageData', [])

                            # Verificando se há mensagens na lista
                            id_msg = 0
                            if message_list:
                                for message in message_list:
                                    # Acessando o assunto da mensagem
                                    subject = message.get('subject', '')
                                    id_msg += 1
                                    # Verificar se o assunto contém '2nr'
                                    if '2nr' in subject:
                                        break
                                    else:
                                        print("Aguardando código...")

                            email_list = client.get_mail_list(email)
                            if '2nr' in subject:
                                break
                            else:
                                tentativa += 1
                                if tentativa == 50:
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Email não chegou.')
                                    window.Refresh()
                                    raise Exception('Email não chegou.')
                        # Get the content of a specific email (ID=2)
                        email_content = client.get_mail_content(
                            email, id=id_msg)
                        urls = re.findall(
                            r"https://api\.2nr\.xyz/register/\?[\S]*", email_content)
                        # Acessar cada URL
                        for url in urls:
                            try:
                                url = url.replace('</p></div>', '')
                                url = url.replace('&amp;', '&')
                                print(url)
                            except:
                                pass
                            try:
                                acessar_url(url)
                            except Exception as e:
                                print(f"Erro na requisição: {e}")

                    elif email_escolhido == 'GmailTemp3':
                        from selenium.webdriver.common.by import By
                        from selenium.webdriver.chrome.service import Service
                        import time
                        from selenium.common.exceptions import NoSuchElementException
                        from selenium.webdriver.support.ui import WebDriverWait
                        from selenium.webdriver.support.ui import Select
                        import requests
                        from selenium.webdriver.support import expected_conditions as EC
                        import undetected_chromedriver as uc
                        import re
                        import random
                        try:
                            from seleniumbase import SB
                        except:
                            print('Instalando SeleniumBase')
                            subprocess.run(
                                ['pip', 'install', 'seleniumbase'])
                            from seleniumbase import SB
                        try:
                            with SB(uc=True, headless=True, locale_code='pt-br', extension_dir=r'.\storage\adblock') as chrome:
                                url = f"https://emailnator.com/"
                                chrome.set_window_size(1920, 1080)
                                chrome.driver.uc_open_with_reconnect(url, 10)

                                try:
                                    chrome.save_screenshot('erro_nav.png')
                                    chrome.switch_to_frame(
                                        'iframe[id^="cf-chl"]', timeout=1)
                                    print(chrome.driver.find_elements(
                                        By.XPATH, '//*[@id="challenge-stage"]/div/label/input'))
                                    # chrome.driver.uc_click('//*[@id="challenge-stage"]/div/label/input')
                                    chrome.driver.uc_click(
                                        'span.mark')
                                    chrome.save_screenshot('erro_nav.png')
                                    # chrome.driver.execute_script("arguments[0].click();", chrome.driver.find_element(By.XPATH, '//*[@id="challenge-stage"]/div/label/input'))
                                except Exception as e:
                                    print(e)
                                    print('Sem Captcha')
                                chrome.switch_to_parent_frame()
                                try:
                                    if chrome.wait_for_element('button.cf-btn.cf-btn-danger', timeout=10):
                                        chrome.driver.uc_click('button.cf-btn.cf-btn-danger')
                                except:
                                    pass
                                try:
                                    chrome.wait_for_element(
                                        '#custom-switch-domain').click()
                                except:
                                    raise Exception('Não abriu pagina do email')

                                # Clicar no elemento com ID 'custom-switch-googleMail'
                                chrome.wait_for_element(
                                    '#custom-switch-googleMail').click()

                                # Clicar no elemento com ID 'custom-switch-plusGmail'
                                chrome.wait_for_element(
                                    '#custom-switch-plusGmail').click()

                                # Clicar no botão com texto 'Generate New'
                                chrome.wait_for_element(
                                    '//button[contains(text(), "Generate New")]').click()
                                # Encontrar o elemento de entrada de texto pelo XPath
                                time.sleep(10)
                                # Encontrar o elemento de entrada de texto pelo XPath
                                input_element = WebDriverWait(chrome.driver, 10).until(
                                    EC.visibility_of_element_located(
                                        (By.XPATH, '//input[@placeholder="Email Address"]'))
                                )

                                # Obter o valor do atributo 'value' do elemento
                                email = input_element.get_attribute('value')
                                email_antigo = email
                                email_real = email
                                log, dominio = email_real.split('@')
                                numero_aleatorio = random.randint(0, 9999)
                                email = f'{log}+{numero_aleatorio:04}@{dominio}'
                                print(email)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Email: {email}')
                                window.Refresh()
                                d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text(email)
                                d(resourceId='pl.rs.sip.softphone.newapp:id/inputPasswordEditText').set_text(senha)
                                d(resourceId='pl.rs.sip.softphone.newapp:id/repeat_password_edit_text').set_text(senha)
                                d(resourceId='pl.rs.sip.softphone.newapp:id/checkPrivacyPolicy').click()
                                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonRegister').click()
                                time.sleep(5)
                                email_existente = d(
                                    resourceId='pl.rs.sip.softphone.newapp:id/buttonOk')
                                if not email_existente:
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Email já utilizado.')
                                    window.Refresh()
                                    email_real = email_antigo
                                    log, dominio = email_real.split('@')
                                    numero_aleatorio = random.randint(0, 9999)
                                    email = f'{log}+{numero_aleatorio:04}@{dominio}'
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Novo email: {email}')
                                    window.Refresh()
                                    d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text('')
                                    d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text(email)
                                    d(resourceId='pl.rs.sip.softphone.newapp:id/buttonRegister').click()
                                    time.sleep(10)
                                # use with address and token to reuse an existing inbox

                                time.sleep(10)
                                # Obter o valor do atributo "value" do elemento

                                WebDriverWait(chrome.driver, 55).until(
                                    EC.presence_of_element_located(
                                        (By.NAME, 'goBtn'))
                                ).click()
                                chegou_cod = False
                                tentativa = 1
                                while chegou_cod is False:
                                    try:
                                        try:
                                            td_element = WebDriverWait(chrome.driver, 10).until(
                                                EC.visibility_of_element_located(
                                                    (By.XPATH, "/html/body/div[1]/div/section/div/div/div[3]/div/div[2]/div[2]/div/table/tbody/tr[2]"))
                                            )
                                            td_element.click()
                                            time.sleep(4)
                                        except:
                                            tentativa += 1
                                            if tentativa == 10:
                                                window['output'].print(
                                                    f'[{datetime.now().strftime("%H:%M:%S")}] Email não chegou.')
                                                window.Refresh()
                                                try:
                                                    conteudo = config['vpn']
                                                    if conteudo == "AVG":
                                                        vpn_avg()
                                                    elif conteudo == "SurfShark":
                                                        vpn_surf()
                                                    elif conteudo == "Nenhuma":
                                                        nenhuma_vpn()
                                                    elif conteudo == "Avast":
                                                        vpn_avast()
                                                    elif conteudo == "ExpressVPN":
                                                        vpn_express()
                                                    elif conteudo == "PiaVPN":
                                                        vpn_pia()
                                                    elif conteudo == "TunnelBear":
                                                        vpn_tunnelbear()
                                                    elif conteudo == "BetterNet":
                                                        vpn_better()
                                                    elif conteudo == "CyberGhost":
                                                        vpn_cyberghost()
                                                    elif conteudo == "NordVPN":
                                                        vpn_nord()
                                                    elif conteudo == "HotspotShield":
                                                        vpn_hotspotshield()
                                                    elif conteudo == "WindscribeVPN":
                                                        vpn_windscribe()
                                                    elif conteudo == "HmaVPN":
                                                        vpn_hma()
                                                    else:
                                                        window['output'].print(
                                                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                                        window.Refresh()

                                                except Exception as e:
                                                    print(e)
                                                raise Exception(
                                                    'Email não chegou.')

                                        page_html = WebDriverWait(chrome.driver, 55).until(
                                            EC.presence_of_element_located(
                                                (By.CLASS_NAME, 'card-body'))
                                        ).text
                                        # Encontrar URLs que começam com "https://api.2nr.xyz/register/?"
                                        urls = re.findall(
                                            r"https://api.2nr.xyz/register/?[^'\"\\]+", page_html)
                                        print('URLs:' + str(urls))
                                        # Imprimir os URLs encontrados
                                        print('----------------------------')
                                        for url in urls:
                                            try:
                                                url_pattern = r'https?://\S+'

                                                # Encontrar a URL na variável body
                                                url_match = re.search(
                                                    url_pattern, url)

                                                # Se a URL for encontrada, imprima
                                                if url_match:
                                                    url = url_match.group()
                                                    print(url)
                                                else:
                                                    print(
                                                        "Nenhuma URL encontrada na variável body.")
                                                url = url.replace(
                                                    '</p></div>', '')
                                                url = url.replace('&amp;', '&')
                                                url = url.replace(
                                                    ' </td> </tr></tbody></table></td> </tr><tr><td class=', '')
                                            except:
                                                pass
                                            print("URL:", url +
                                                  '\n----------------------------')
                                            headers = {
                                                'User-Agent': ua.random,
                                                'User-Agent': ua.random
                                                }
                                            print(headers)
                                            # d.open_url(url)
                                            # time.sleep(10)
                                            # d.app_start('pl.rs.sip.softphone.newapp', use_monkey=True)
                                            from threading import Thread, Lock
                                            from queue import Queue
                                            import re
                                            import random
                                            # URL da API para obter os proxies
                                            
                                            test_urls = [
                                                url
                                            ]

                                            api_url = "https://api.proxyscrape.com/v3/free-proxy-list/get?request=displayproxies&protocol=http&proxy_format=protocolipport&format=text&timeout=20000"
                                            #api_url = "https://api.proxyscrape.com/v2/?request=displayproxies&protocol=http&proxy_format=protocolipport&timeout=10000&country=all&ssl=all&anonymity=all"

                                            # Função para obter proxies da API
                                            def fetch_proxies(api_url):
                                                try:
                                                    response = requests.get(api_url)
                                                    proxies = response.text.split('\n')
                                                    return [proxy.strip() for proxy in proxies if proxy.strip()]
                                                except requests.RequestException as e:
                                                    print(f"Erro ao obter proxies: {e}")
                                                    return []

                                            # Obter proxies da API
                                            proxies_list = fetch_proxies(api_url)

                                            # Aleatorizar a ordem dos proxies
                                            #random.shuffle(proxies_list)

                                            # Fila de proxies
                                            proxy_queue = Queue()

                                            # Adiciona proxies à fila
                                            for proxy in proxies_list:
                                                proxy_queue.put(f"{proxy}")

                                            # Lista para armazenar proxies válidos
                                            valid_proxies = []

                                            # Lock para proteger o acesso à lista de proxies válidos
                                            list_lock = Lock()

                                            # Variável de controle para parar threads
                                            stop_event = False

                                            def check_proxy():
                                                global stop_event
                                                while not proxy_queue.empty() and not stop_event:
                                                    proxy = proxy_queue.get()
                                                    successes = [False] * len(test_urls)  # Lista para acompanhar os sucessos em cada URL
                                                    try:
                                                        for i, test_url in enumerate(test_urls):
                                                            response = requests.get(test_url, headers=headers, proxies={"http": proxy, "https": proxy}, timeout=1)
                                                            if response.status_code == 200:
                                                                successes[i] = True
                                                                print(response.status_code)
                                                            else:
                                                                successes[i] = False
                                                    except requests.RequestException:
                                                        successes = [False] * len(test_urls)

                                                    if all(successes):  # Se todos os testes forem bem-sucedidos
                                                        with list_lock:
                                                            if proxy not in valid_proxies:
                                                                valid_proxies.append(proxy)
                                                                print(f"Proxy válido: {proxy}")
                                                                if len(valid_proxies) >= 2:
                                                                    stop_event = True
                                                    else:
                                                        pass
                                                        #print(f"Proxy inválido: {proxy}")

                                                    proxy_queue.task_done()

                                            # Número de threads
                                            num_threads = 20

                                            # Criar e iniciar as threads
                                            threads = []
                                            for i in range(num_threads):
                                                thread = Thread(target=check_proxy)
                                                thread.start()
                                                threads.append(thread)

                                            # Aguardar todas as threads terminarem
                                            for thread in threads:
                                                thread.join()

                                            # Escolher um proxy aleatório entre os válidos encontrados
                                            if valid_proxies:
                                                print(valid_proxies)
                                                chosen_proxy = random.choice(valid_proxies)
                                                print("Proxy escolhido aleatoriamente:", chosen_proxy)
                                            else:
                                                print("Nenhum proxy válido encontrado")
                                            def get_proxies(proxy):
                                                if proxy.startswith('http://'):
                                                    return {'http': proxy}
                                                elif proxy.startswith('https://'):
                                                    return {'http': proxy.replace('https://', 'http://'), 'https': proxy}
                                                elif proxy.startswith('socks4://'):
                                                    return {'http': proxy, 'https': proxy}
                                                else:
                                                    raise ValueError("Unsupported proxy protocol")
                                            proxies2 = get_proxies(proxy)
                                            #print(proxies2)
                                            try:
                                                response = requests.get(
                                                    url, headers=headers)
                                                if response.status_code == 200:
                                                    print(response.status_code)
                                                else:
                                                    print(response.status_code)
                                                    d.open_url(url)
                                                    time.sleep(20)
                                                    print('Verificado com o chrome')
                                                    d.app_start('pl.rs.sip.softphone.newapp')
                                                    try:
                                                        d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').wait(timeout=20)
                                                    except:
                                                        pass
                                                    if d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton'):
                                                        d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click()
                                            except requests.exceptions.RequestException as e:
                                                print(
                                                    f"Erro na requisição: {e}")

                                            try:
                                                chrome.close()
                                            except:
                                                pass
                                            try:
                                                chrome.quit()
                                            except:
                                                pass
                                            chegou_cod = True

                                    except:
                                        WebDriverWait(chrome.driver, 55).until(
                                            EC.presence_of_element_located(
                                                (By.NAME, 'reload'))
                                        ).click()
                                        if tentativa == 4:
                                            chrome.refresh()
                                            time.sleep(5)
                                        if tentativa == 10:
                                            chegou_cod = True
                                            raise Exception(
                                                'Email não chegou.')

                        except Exception as e:
                            try:
                                chrome.close()
                            except:
                                pass
                            try:
                                chrome.quit()
                            except:
                                pass
                            traceback.print_exc()
                    elif email_escolhido == 'SmailProAPI':
                        import time
                        import requests
                        import re
                        import random
                        try:
                            url = "https://temp-gmail.p.rapidapi.com/list"

                            querystring = {
                                "page": random.randint(1, 500),
                                "limit": "1"
                            }

                            headers = {
                                "x-rapidapi-key": apismailpro,
                                "x-rapidapi-host": "temp-gmail.p.rapidapi.com"
                            }

                            response = requests.get(url, headers=headers, params=querystring)

                            data = response.json()['data'][0]
                            email = data['email']
                            timestamp2 = data['timestamp']

                            email_antigo = email
                            print(email)
                            print(timestamp2)
                            email_real = email
                            log, dominio = email_real.split('@')
                            numero_aleatorio = random.randint(0, 9999)
                            email = f'{log}+{numero_aleatorio:04}@{dominio}'

                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Email: {email}')
                            window.Refresh()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text(email)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/inputPasswordEditText').set_text(senha)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/repeat_password_edit_text').set_text(senha)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/checkPrivacyPolicy').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonRegister').click()
                            time.sleep(5)
                            email_existente = d(
                                resourceId='pl.rs.sip.softphone.newapp:id/buttonOk')
                            if not email_existente:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Email já utilizado.')
                                window.Refresh()
                                email_real = email_antigo
                                log, dominio = email_real.split('@')
                                numero_aleatorio = random.randint(0, 9999)
                                email = f'{log}+{numero_aleatorio:04}@{dominio}'
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Novo email: {email}')
                                window.Refresh()
                                d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text('')
                                d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text(email)
                                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonRegister').click()
                                time.sleep(10)
                            # use with address and token to reuse an existing inbox

                            time.sleep(30)
                            # Obter o valor do atributo "value" do elemento
                            #### VERIFICAR EMAILS
                            data['textSubject'] = ''
                            tentativa = 0
                            while True:
                                #time.sleep(30)
                                url = "https://temp-gmail.p.rapidapi.com/inbox"

                                querystring = {
                                    "email":email_real,
                                    "timestamp":timestamp2
                                }

                                headers = {
                                    "x-rapidapi-key": apismailpro,
                                    "x-rapidapi-host": "temp-gmail.p.rapidapi.com"
                                }

                                response = requests.get(url, headers=headers, params=querystring)
                                print(response.json())
                                try:
                                    data = response.json()['messages'][0]
                                    mid = data['mid']
                                    textTo = data['textTo']
                                    textFrom = data['textFrom']
                                    textSubject = data['textSubject']
                                    textDate = data['textDate']

                                    print(mid)
                                    print(textSubject)
                                except Exception as e:
                                    if 'list index out of range' in str(e):
                                        print('Não chegou nenhum código')
                                        tentativa += 1
                                        if tentativa == 3:
                                            window['output'].print(
                                                f'[{datetime.now().strftime("%H:%M:%S")}] Email não chegou.')
                                            window.Refresh()
                                            raise Exception('Email não chegou.')
                                        time.sleep(30)
                                    if 'email address is under' in str(e):
                                        window['output'].print(
                                                f'[{datetime.now().strftime("%H:%M:%S")}] Email não disponivel.')
                                        window.Refresh()
                                        raise Exception('Email não disponivel.')
                                    else:
                                        print(e)
                                if '2nr' in data['textSubject']:
                                    print('Email chegou')

                                    url = "https://temp-gmail.p.rapidapi.com/message"

                                    querystring = {"email":email,"mid":mid}

                                    headers = {
                                        "x-rapidapi-key": apismailpro,
                                        "x-rapidapi-host": "temp-gmail.p.rapidapi.com"
                                    }

                                    response = requests.get(url, headers=headers, params=querystring)
                                    url = response.json()
                                    url = url['body']
                                    print(response.json())
                                    break
                                        
                            
                            print('----------------------------')
                            import re
                            #url = url['body']
                            urls = re.findall(
                                "(?P<url>https?://[^\s]+)", url)
                            for url in urls:
                                if url.startswith('https://api.2nr.xyz/register/?'):
                                    try:
                                        url = url.replace('</p></div>', '')
                                        url = url.replace('&amp;', '&')
                                    except:
                                        pass
                                    print(url)
                                    print("URL:", url +
                                        '\n----------------------------')

                                    headers = {
                                        'User-Agent': ua.random,
                                        'User-Agent': ua.random
                                        }
                                    print(headers)
                                    # d.open_url(url)
                                    # time.sleep(10)
                                    # d.app_start('pl.rs.sip.softphone.newapp', use_monkey=True)
                                    from threading import Thread, Lock
                                    from queue import Queue
                                    import re
                                    import random
                                    # URL da API para obter os proxies

                                    test_urls = [
                                        url
                                    ]

                                    api_url = "https://api.proxyscrape.com/v3/free-proxy-list/get?request=displayproxies&protocol=http&proxy_format=protocolipport&format=text&timeout=20000"
                                    #api_url = "https://api.proxyscrape.com/v2/?request=displayproxies&protocol=http&proxy_format=protocolipport&timeout=10000&country=all&ssl=all&anonymity=all"

                                    # Função para obter proxies da API
                                    def fetch_proxies(api_url):
                                        try:
                                            response = requests.get(api_url)
                                            proxies = response.text.split('\n')
                                            return [proxy.strip() for proxy in proxies if proxy.strip()]
                                        except requests.RequestException as e:
                                            print(f"Erro ao obter proxies: {e}")
                                            return []

                                    # Obter proxies da API
                                    proxies_list = fetch_proxies(api_url)

                                    # Aleatorizar a ordem dos proxies
                                    #random.shuffle(proxies_list)

                                    # Fila de proxies
                                    proxy_queue = Queue()

                                    # Adiciona proxies à fila
                                    for proxy in proxies_list:
                                        proxy_queue.put(f"{proxy}")

                                    # Lista para armazenar proxies válidos
                                    valid_proxies = []

                                    # Lock para proteger o acesso à lista de proxies válidos
                                    list_lock = Lock()

                                    # Variável de controle para parar threads
                                    stop_event = False

                                    def check_proxy():
                                        global stop_event
                                        while not proxy_queue.empty() and not stop_event:
                                            proxy = proxy_queue.get()
                                            successes = [False] * len(test_urls)  # Lista para acompanhar os sucessos em cada URL
                                            try:
                                                for i, test_url in enumerate(test_urls):
                                                    response = requests.get(test_url, headers=headers, proxies={"http": proxy, "https": proxy}, timeout=1)
                                                    if response.status_code == 200:
                                                        successes[i] = True
                                                        print(response.status_code)
                                                    else:
                                                        successes[i] = False
                                            except requests.RequestException:
                                                successes = [False] * len(test_urls)

                                            if all(successes):  # Se todos os testes forem bem-sucedidos
                                                with list_lock:
                                                    if proxy not in valid_proxies:
                                                        valid_proxies.append(proxy)
                                                        print(f"Proxy válido: {proxy}")
                                                        if len(valid_proxies) >= 2:
                                                            stop_event = True
                                            else:
                                                pass
                                                #print(f"Proxy inválido: {proxy}")

                                            proxy_queue.task_done()

                                    # Número de threads
                                    num_threads = 20

                                    # Criar e iniciar as threads
                                    threads = []
                                    for i in range(num_threads):
                                        thread = Thread(target=check_proxy)
                                        thread.start()
                                        threads.append(thread)

                                    # Aguardar todas as threads terminarem
                                    for thread in threads:
                                        thread.join()

                                    # Escolher um proxy aleatório entre os válidos encontrados
                                    if valid_proxies:
                                        print(valid_proxies)
                                        chosen_proxy = random.choice(valid_proxies)
                                        print("Proxy escolhido aleatoriamente:", chosen_proxy)
                                    else:
                                        print("Nenhum proxy válido encontrado")
                                    def get_proxies(proxy):
                                        if proxy.startswith('http://'):
                                            return {'http': proxy}
                                        elif proxy.startswith('https://'):
                                            return {'http': proxy.replace('https://', 'http://'), 'https': proxy}
                                        elif proxy.startswith('socks4://'):
                                            return {'http': proxy, 'https': proxy}
                                        else:
                                            raise ValueError("Unsupported proxy protocol")
                                    proxies2 = get_proxies(proxy)
                                    #print(proxies2)
                                    try:
                                        response = requests.get(
                                            url, headers=headers)
                                        if response.status_code == 200:
                                            print(response.status_code)
                                        else:
                                            print(response.status_code)
                                            d.open_url(url)
                                            time.sleep(20)
                                            print('Verificado com o chrome')
                                            d.app_start('pl.rs.sip.softphone.newapp')
                                            try:
                                                d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').wait(timeout=20)
                                            except:
                                                pass
                                            if d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton'):
                                                d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click()

                                    except requests.exceptions.RequestException as e:
                                        print(
                                            f"Erro na requisição: {e}")

                                    
                                    chegou_cod = True

                                

                        except Exception as e:
                            if 'Email não chegou.' in str(e):
                                raise Exception('')
                            traceback.print_exc()
                    elif email_escolhido == 'wnmail.shop':

                        import requests
                        from requests.auth import HTTPBasicAuth
                        user = random.randint(000000, 999999)
                        # Substitua com as suas credenciais e dados
                        cpanel_user = 'wnmailsh'
                        cpanel_password = 'V.5k7lV3l8PB*q'
                        cpanel_domain = 'mi3-ss120.a2hosting.com'
                        email_user = user
                        email_domain = 'wnmail.shop'
                        email_password = senha
                        quota = 1  # 0 para ilimitada, ou defina um limite específico

                        # URL para a função add_pop da API UAPI
                        url = f'https://{cpanel_domain}:2083/execute/Email/add_pop'
                        params = {
                            'email': email_user,
                            'domain': email_domain,
                            'password': email_password,
                            'quota': quota,
                            'send_welcome_email': 0,  # Altere para 1 se quiser enviar um e-mail de boas-vindas
                            'skip_update_db': 1
                        }

                        # Faça a solicitação para a API
                        response = requests.post(url, params=params, auth=HTTPBasicAuth(cpanel_user, cpanel_password),
                                                 verify=True)

                        # Verifique a resposta
                        if response.status_code == 200:
                            print("Conta de e-mail criada com sucesso!")
                            email = response.json()['data']
                            email = email.replace('+', '@')
                            email2 = email
                            print('Email: ', email2)
                            print('Senha: ', senha)
                        else:
                            print("Falha na criação da conta de e-mail.")
                            print(response.text)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Email: {email}')
                        window.Refresh()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text(email)

                        d(resourceId='pl.rs.sip.softphone.newapp:id/inputPasswordEditText').set_text(senha)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/repeat_password_edit_text').set_text(senha)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/checkPrivacyPolicy').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonRegister').click()

                        # use with address and token to reuse an existing inbox

                        tentativa = 1
                        sair = False
                        while sair is False:
                            def get_email_body(msg):
                                if msg.is_multipart():
                                    for part in msg.walk():
                                        content_type = part.get_content_type()
                                        content_disposition = str(
                                            part.get("Content-Disposition"))

                                        if "attachment" not in content_disposition:
                                            if content_type == "text/plain" or content_type == "text/html":
                                                return part.get_payload(decode=True).decode()
                                else:
                                    content_type = msg.get_content_type()
                                    if content_type == "text/plain" or content_type == "text/html":
                                        return msg.get_payload(decode=True).decode()
                                return ""

                            import imaplib
                            import email
                            time.sleep(10)

                            email_user = email2
                            email_password = senha

                            # Configurações do servidor IMAP
                            # Substitua com o host do servidor IMAP do seu provedor
                            imap_host = 'mi3-ss120.a2hosting.com'
                            imap_port = 993  # Porta comum para IMAP sobre SSL

                            # Conectar ao servidor IMAP
                            mail = imaplib.IMAP4_SSL(imap_host, imap_port)

                            # Autenticar
                            mail.login(email_user, email_password)

                            # Selecionar caixa de entrada
                            mail.select("inbox")

                            # Buscar e-mails
                            status, messages = mail.search(None, 'ALL')
                            # print(f'Status da busca: {status}')

                            # Verificar se messages não está vazio
                            # Verificar se messages não está vazio
                            if status == 'OK' and messages:
                                try:
                                    # Pegar o último ID da mensagem
                                    last_mail_id = messages[0].split()[-1]
                                except Exception as e:
                                    if 'list index out of range' in str(e):
                                        print(tentativa)
                                        if tentativa == 0:
                                            break
                                        tentativa += 1
                                        if tentativa == 10:
                                            try:
                                                tentativa = 0
                                                conteudo = config['vpn']
                                                if conteudo == "AVG":
                                                    vpn_avg()
                                                elif conteudo == "SurfShark":
                                                    vpn_surf()
                                                elif conteudo == "Nenhuma":
                                                    nenhuma_vpn()
                                                elif conteudo == "Avast":
                                                    vpn_avast()
                                                elif conteudo == "ExpressVPN":
                                                    vpn_express()
                                                elif conteudo == "PiaVPN":
                                                    vpn_pia()
                                                elif conteudo == "TunnelBear":
                                                    vpn_tunnelbear()
                                                elif conteudo == "BetterNet":
                                                    vpn_better()
                                                elif conteudo == "CyberGhost":
                                                    vpn_cyberghost()
                                                elif conteudo == "NordVPN":
                                                    vpn_nord()
                                                elif conteudo == "HotspotShield":
                                                    vpn_hotspotshield()
                                                elif conteudo == "WindscribeVPN":
                                                    vpn_windscribe()
                                                elif conteudo == "HmaVPN":
                                                    vpn_hma()
                                                else:
                                                    window['output'].print(
                                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                                    window.Refresh()

                                            except Exception as e:
                                                print(e)
                                                tentativa = 0
                                    else:
                                        print('Erro')
                                try:
                                    status, data = mail.fetch(
                                        last_mail_id, '(RFC822)')

                                    if status == 'OK':
                                        for response_part in data:
                                            if isinstance(response_part, tuple):
                                                msg = email.message_from_bytes(
                                                    response_part[1])
                                                email_subject = msg['subject']
                                                email_from = msg['from']
                                                email_body = get_email_body(
                                                    msg)
                                                # print('From:', email_from)
                                                # print('Subject:', email_subject)
                                                # print('Body:', email_body)
                                                # print('\n')
                                except:
                                    print('Código não chegou')
                            else:
                                print(
                                    "Nenhuma mensagem encontrada ou erro na busca.")
                            try:
                                if '2nr' in email_subject:
                                    urls = re.findall("(?P<url>https?://[^\s]+)",
                                                      email_body if email_body else email_body)

                                    # Acessar cada URL
                                    for url in urls:
                                        try:
                                            url = url.replace('</p></div>', '')
                                            url = url.replace('&amp;', '&')
                                        except:
                                            pass
                                        try:
                                            response = requests.get(url)
                                            if response.status_code == 200:
                                                email = email2
                                                sair = True
                                                mail.close()
                                                mail.logout()
                                                pass
                                            else:
                                                mail.close()
                                                mail.logout()
                                                print(
                                                    f"Falha na requisição. Código de status: {response.status_code}")
                                        except requests.exceptions.RequestException as e:
                                            print(f"Erro na requisição: {e}")

                                        time.sleep(0.5)

                                else:
                                    print(tentativa)
                                    if tentativa == 0:
                                        break
                                    tentativa += 1
                                    if tentativa == 10:
                                        try:
                                            tentativa = 0
                                            conteudo = config['vpn']
                                            if conteudo == "AVG":
                                                vpn_avg()
                                            elif conteudo == "SurfShark":
                                                vpn_surf()
                                            elif conteudo == "Nenhuma":
                                                nenhuma_vpn()
                                            elif conteudo == "Avast":
                                                vpn_avast()
                                            elif conteudo == "ExpressVPN":
                                                vpn_express()
                                            elif conteudo == "PiaVPN":
                                                vpn_pia()
                                            elif conteudo == "TunnelBear":
                                                vpn_tunnelbear()
                                            elif conteudo == "BetterNet":
                                                vpn_better()
                                            elif conteudo == "CyberGhost":
                                                vpn_cyberghost()
                                            elif conteudo == "NordVPN":
                                                vpn_nord()
                                            elif conteudo == "HotspotShield":
                                                vpn_hotspotshield()
                                            elif conteudo == "WindscribeVPN":
                                                vpn_windscribe()
                                            elif conteudo == "HmaVPN":
                                                vpn_hma()
                                            else:
                                                window['output'].print(
                                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                                window.Refresh()

                                        except Exception as e:
                                            print(e)
                                            tentativa = 0
                                            sair = True
                                            break
                            except:
                                print('Código não chegou')
                    elif email_escolhido == 'MailTM':
                        while True:
                            try:
                                test.register()
                                # Se chegou até aqui sem lançar exceção, a conta foi criada com sucesso
                                break
                            except Exception as e:
                                print(
                                    f"Tentativa {tentativa} falhou. Erro: {e}")
                                time.sleep(30)
                                tentativa += 1
                        email = str(test.address)
                        # try:
                        # inbox = Inbox(
                        # address="",
                        # token="",
                        # )
                        # email = inbox.address
                        # window['output'].print("Email: " + email)
                        # window.Refresh()
                        # except Exception as e:
                        # print(e)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Email: {email}')
                        window.Refresh()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text(email)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/inputPasswordEditText').set_text(senha)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/repeat_password_edit_text').set_text(senha)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/checkPrivacyPolicy').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonRegister').click()

                        # use with address and token to reuse an existing inbox

                        time.sleep(2)

                        codigo = None

                        try:
                            test.start(listener, interval=10)
                            codigo = 0
                            while codigo != 5:
                                time.sleep(2)
                                codigo = codigo + 1
                        except Exception as e:
                            if "Too Many Requests" in str(e):
                                pass
                            else:
                                pass
                        subject = False

                        def make_request(url):
                            try:
                                response = requests.get(url)
                                if response.status_code == 200:
                                    pass
                                else:
                                    print(
                                        f"Falha na requisição. Código de status: {response.status_code}")
                            except requests.exceptions.RequestException as e:
                                print(f"Erro na requisição: {e}")

                        def listener(message):
                            global nome
                            global sobrenome
                            global cod
                            if '2nr' in message['subject']:

                                urls = re.findall("(?P<url>https?://[^\s]+)",
                                                  message['text'] if message['text'] else message['html'])

                                # Acessar cada URL
                                for url in urls:
                                    make_request(url)
                                    time.sleep(0.5)
                                subject = True

                    elif email_escolhido == 'GuerrilaMail':
                        try:
                            from guerrillamail import GuerrillaMailSession
                        except:
                            subprocess.run(
                                ['venv/scripts/activate.bat'], shell=True)
                            subprocess.run(
                                ['pip', 'install', 'python-guerrillamail'])
                            subprocess.run(['deactivate'], shell=True)
                            from guerrillamail import GuerrillaMailSession

                        # Crie uma sessão Guerrilla Mail
                        session = GuerrillaMailSession()
                        email_address = session.get_session_state()[
                            'email_address']
                        email = email_address

                        email = email.replace(
                            '@guerrillamailblock.com', '@pokemail.net')
                        # try:
                        # inbox = Inbox(
                        # address="",
                        # token="",
                        # )
                        # email = inbox.address
                        # window['output'].print("Email: " + email)
                        # window.Refresh()
                        # except Exception as e:
                        # print(e)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Email: {email}')
                        window.Refresh()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text(email)

                        d(resourceId='pl.rs.sip.softphone.newapp:id/inputPasswordEditText').set_text(senha)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/repeat_password_edit_text').set_text(senha)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/checkPrivacyPolicy').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonRegister').click()

                        # use with address and token to reuse an existing inbox

                        tentativa = 1
                        while True:
                            time.sleep(10)
                            email_summary = session.get_email_list()[0]
                            email = session.get_email(email_summary.guid)
                            if '2nr' in email.subject:
                                urls = re.findall("(?P<url>https?://[^\s]+)",
                                                  email.body if email.body else email.body)

                                # Acessar cada URL
                                for url in urls:
                                    try:
                                        url = url.replace('</p></div>', '')
                                        url = url.replace('&amp;', '&')
                                    except:
                                        pass
                                    try:
                                        response = requests.get(url)
                                        if response.status_code == 200:
                                            pass
                                        else:
                                            print(
                                                f"Falha na requisição. Código de status: {response.status_code}")
                                    except requests.exceptions.RequestException as e:
                                        print(f"Erro na requisição: {e}")
                                    time.sleep(0.5)
                                email = email_address

                                email = email.replace(
                                    '@guerrillamailblock.com', '@pokemail.net')
                                break
                            print(tentativa)
                            tentativa += 1
                            if tentativa == 10:
                                try:
                                    tentativa = 0
                                    conteudo = config['vpn']
                                    if conteudo == "AVG":
                                        vpn_avg()
                                    elif conteudo == "SurfShark":
                                        vpn_surf()
                                    elif conteudo == "Nenhuma":
                                        nenhuma_vpn()
                                    elif conteudo == "Avast":
                                        vpn_avast()
                                    elif conteudo == "ExpressVPN":
                                        vpn_express()
                                    elif conteudo == "PiaVPN":
                                        vpn_pia()
                                    elif conteudo == "TunnelBear":
                                        vpn_tunnelbear()
                                    elif conteudo == "BetterNet":
                                        vpn_better()
                                    elif conteudo == "CyberGhost":
                                        vpn_cyberghost()
                                    elif conteudo == "NordVPN":
                                        vpn_nord()
                                    elif conteudo == "HotspotShield":
                                        vpn_hotspotshield()
                                    elif conteudo == "WindscribeVPN":
                                        vpn_windscribe()
                                    elif conteudo == "HmaVPN":
                                        vpn_hma()
                                    else:
                                        window['output'].print(
                                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                        window.Refresh()

                                except Exception as e:
                                    print(e)
                                    tentativa = 0
                    elif email_escolhido == '1SecMail':

                        def get_random_email():
                            url = "https://www.1secmail.com/api/v1/?action=genRandomMailbox&count=1"
                            response = requests.get(url)

                            if response.status_code == 200:
                                data = response.json()
                                email = data[0]
                                log, dominio = email.split('@')
                                return log, dominio
                            else:
                                print("Erro na requisição. Código de status:",
                                      response.status_code)
                                return None, None

                        def check_and_read_messages(log, dominio):
                            tentativa = 1
                            while tentativa < 6:
                                # Verifica se há novas mensagens
                                check_url = f"https://www.1secmail.com/api/v1/?action=getMessages&login={log}&domain={dominio}"
                                messages_response = requests.get(check_url)

                                if messages_response.status_code == 200:
                                    messages_data = messages_response.json()

                                    if messages_data:
                                        # Se houver mensagens, pega a chave ID da primeira mensagem
                                        first_message_id = messages_data[0]['id']

                                        # Lê a mensagem usando a ID
                                        read_url = f"https://www.1secmail.com/api/v1/?action=readMessage&login={log}&domain={dominio}&id={first_message_id}"
                                        read_response = requests.get(read_url)

                                        if read_response.status_code == 200:
                                            read_data = read_response.json()

                                            # Pega o corpo (body) da mensagem
                                            body = read_data['body']

                                            # Salva a ID e o corpo da mensagem
                                            save_message(
                                                first_message_id, body)

                                            # Pode sair do loop se quiser
                                            break
                                        else:
                                            print("Erro ao ler a mensagem. Código de status:",
                                                  read_response.status_code)
                                else:
                                    print("Erro ao verificar mensagens. Código de status:",
                                          messages_response.status_code)

                                # Espera um pouco antes de verificar novamente
                                time.sleep(5)
                                tentativa += 1
                                if tentativa == 5:
                                    try:
                                        conteudo = config['vpn']
                                        if conteudo == "AVG":
                                            vpn_avg()
                                        elif conteudo == "SurfShark":
                                            vpn_surf()
                                        elif conteudo == "Nenhuma":
                                            nenhuma_vpn()
                                        elif conteudo == "Avast":
                                            vpn_avast()
                                        elif conteudo == "ExpressVPN":
                                            vpn_express()
                                        elif conteudo == "PiaVPN":
                                            vpn_pia()
                                        elif conteudo == "TunnelBear":
                                            vpn_tunnelbear()
                                        elif conteudo == "BetterNet":
                                            vpn_better()
                                        elif conteudo == "CyberGhost":
                                            vpn_cyberghost()
                                        elif conteudo == "NordVPN":
                                            vpn_nord()
                                        elif conteudo == "HotspotShield":
                                            vpn_hotspotshield()
                                        elif conteudo == "WindscribeVPN":
                                            vpn_windscribe()
                                        elif conteudo == "HmaVPN":
                                            vpn_hma()
                                        else:
                                            window['output'].print(
                                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                            window.Refresh()
                                    except Exception as e:
                                        print(e)

                        def save_message(message_id, body):
                            # Aqui você pode implementar a lógica para salvar a mensagem como desejar
                            print(f"Mensagem recebida! ID: {message_id}")
                            tentativa = 1
                            urls = re.findall("(?P<url>https?://[^\s]+)",
                                              body if body else body)

                            # Acessar cada URL
                            for url in urls:
                                try:
                                    url = url.replace('</p></div>', '')
                                    url = url.replace('&amp;', '&')
                                except:
                                    pass
                                try:
                                    response = requests.get(url)
                                    if response.status_code == 200:
                                        pass
                                    else:
                                        pass
                                except requests.exceptions.RequestException as e:
                                    print(f"Erro na requisição: {e}")

                        # Obtém um e-mail aleatório
                        log, dominio = get_random_email()

                        if log and dominio:
                            print(f"E-mail gerado: {log}@{dominio}")
                            email = f'{log}@{dominio}'

                        else:
                            print("Não foi possível obter um e-mail aleatório.")
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Email: {email}')
                        window.Refresh()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text(email)

                        d(resourceId='pl.rs.sip.softphone.newapp:id/inputPasswordEditText').set_text(senha)

                        d(resourceId='pl.rs.sip.softphone.newapp:id/repeat_password_edit_text').set_text(senha)

                        d(resourceId='pl.rs.sip.softphone.newapp:id/checkPrivacyPolicy').click()

                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonRegister').click()

                        # use with address and token to reuse an existing inbox

                        tentativa = 1

                        # Verifica e lê as mensagens continuamente
                        check_and_read_messages(log, dominio)

                    elif email_escolhido == 'MinuteInBox':

                        try:
                            inbox = Inbox(
                                address="",
                                token="",
                            )
                            email = inbox.address
                            # window['output'].print("Email: " + email)
                            # window.Refresh()
                        except Exception as e:
                            print(e)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Email: {email}')
                        window.Refresh()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/inputEmailEditText').set_text(email)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/inputPasswordEditText').set_text(senha)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/repeat_password_edit_text').set_text(senha)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/checkPrivacyPolicy').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonRegister').click()

                        # use with address and token to reuse an existing inbox

                        time.sleep(2)

                        codigo = None

                        # try:
                        #    test.start(listener, interval=10)
                        #    codigo = 0
                        #    while codigo != 5:
                        #        time.sleep(2)
                        #        codigo = codigo + 1
                        # except Exception as e:
                        #    if "Too Many Requests" in str(e):
                        #        pass
                        #    else:
                        #        pass
                        subject = False

                        def make_request(url):
                            try:
                                print(url)
                                response = requests.get(url)
                                if response.status_code == 200:
                                    pass
                                else:
                                    print(
                                        f"Falha na requisição. Código de status: {response.status_code}")
                            except requests.exceptions.RequestException as e:
                                print(f"Erro na requisição: {e}")

                        subject = False
                        while subject == False:
                            for mail in inbox.mails:
                                cod = mail.subject
                                print(mail.subject)
                                if '2nr' in mail.subject:
                                    print(mail.content)
                                    urls = re.findall("(?P<url>https?://[^\s]+)",
                                                      mail.content if mail.content else mail.content)
                                    print(urls)

                                    # Acessar cada URL
                                    for url in urls:
                                        make_request(url)
                                        time.sleep(0.5)
                                    subject = True

                    troca_ip += 1
                    try:
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonOk').click()
                    except:
                        pass

                    print(f"Requisição bem-sucedida!")
                    d.xpath(
                        '//android.widget.LinearLayout[@content-desc="Log in"]/android.widget.TextView').click()

                    d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email)

                    d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha)
                    time.sleep(2)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()

                    time.sleep(5)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/addNumber').click()

                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] 2NR criado com sucesso.',
                                           text_color=('cyan'))
                    contagem = contagem + 1
                    try:
                        arquivo = open(
                            'configuracoes/contas/contas_2nr_novas.txt', 'x')
                    except FileExistsError:
                        arquivo = open(
                            'configuracoes/contas/contas_2nr_novas.txt', 'a')
                    arquivo.write(email + ' ' + senha + "\n")
                    arquivo.close()
                    try:
                        arquivo = open(
                            'configuracoes/contas/todas_contas_2nr.txt', 'x')
                    except FileExistsError:
                        arquivo = open(
                            'configuracoes/contas/todas_contas_2nr.txt', 'a')

                    arquivo.write(email + ' ' + senha + "\n")
                    arquivo.close()
                    window['criadas'].update(contagem)
                    window.Refresh()
                    try:
                        troca_ip = 0
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()

                    except Exception as e:
                        print(e)
                        troca_ip = 0

                except Exception as e:
                    print(e)
            except Exception as e:
                print(e)
    elif opcao_executar == '-criarnumeros-':

        print('\n')
        multiline_text = dialog_values['-linhas-'].split('\n')
        print(f"Contas adicionadas: {len(multiline_text)}")
        window['output'].print(f'{len(multiline_text)} contas adicionadas.')
        for linha in multiline_text:
            print('\n')
            window.Refresh()
            window['output'].print(linha_ret)
            window.Refresh()
            gerar_id()
            android_id = gerar_id()
            subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, shell=True)
            # Faça o que quiser com cada linha, por exemplo, imprimir
            print(linha)
            try:
                subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            try:
                subprocess.run(
                    f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.READ_CONTACTS',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                subprocess.run(
                    f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.CAMERA',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                subprocess.run(
                    f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.RECORD_AUDIO',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                try:
                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.ACCESS_NOTIFICATION_POLICY',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                except:
                    pass

                subprocess.run(
                    f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.POST_NOTIFICATIONS',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            if troca_ip == 5:
                try:
                    troca_ip = 0
                    conteudo = config['vpn']
                    if conteudo == "AVG":
                        vpn_avg()
                    elif conteudo == "SurfShark":
                        vpn_surf()
                    elif conteudo == "Nenhuma":
                        nenhuma_vpn()
                    elif conteudo == "Avast":
                        vpn_avast()
                    elif conteudo == "ExpressVPN":
                        vpn_express()
                    elif conteudo == "PiaVPN":
                        vpn_pia()
                    elif conteudo == "TunnelBear":
                        vpn_tunnelbear()
                    elif conteudo == "BetterNet":
                        vpn_better()
                    elif conteudo == "CyberGhost":
                        vpn_cyberghost()
                    elif conteudo == "NordVPN":
                        vpn_nord()
                    elif conteudo == "HotspotShield":
                        vpn_hotspotshield()
                    elif conteudo == "WindscribeVPN":
                        vpn_windscribe()
                    elif conteudo == "HmaVPN":
                        vpn_hma()
                    else:
                        window['output'].print(
                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                        window.Refresh()

                except Exception as e:
                    print(e)
                    troca_ip = 0
            nome = fake.first_name()
            sobrenome = fake.last_name()
            if event == sg.WINDOW_CLOSED:
                break
            try:
                # if thread_parar:
                #    break

                senha = config['senha2nr']

                quantidade = 0

                d.app_start('pl.rs.sip.softphone.newapp', use_monkey=True)
                d.set_fastinput_ime(True)
                partes = linha.split(' ')
                email = partes[0].strip()
                senha = partes[1].strip()
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Email: {email}')
                window.Refresh()
                try:
                    d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click()
                except:
                    if d(resourceId='pl.rs.sip.softphone.newapp:id/settings').exists:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Deslogando...')
                        window.Refresh()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/settings').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogout').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click()
                        d.app_stop('pl.rs.sip.softphone.newapp')
                        raise Exception('')
                    else:
                        d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email)
                d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha)
                time.sleep(2)
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                time.sleep(5)
                try:
                    d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                except:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Conta inexistente.')
                    window.Refresh()
                    raise Exception('Conta inexistente')
                if d(resourceId='pl.rs.sip.softphone.newapp:id/addNumber').exists(timeout=30):
                    d(resourceId='pl.rs.sip.softphone.newapp:id/addNumber').click()
                elif not d(resourceId='pl.rs.sip.softphone.newapp:id/addNumber').exists:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Conta já contem máximo de números.')
                    window.Refresh()
                    raise Exception('Conta já contem máximo de números.')

                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta existente.')
                window.Refresh()
                contagem = contagem + 1
                troca_ip += 1
                try:
                    arquivo = open(
                        'configuracoes/contas/contas_2nr_numerosadd.txt', 'x')
                except FileExistsError:
                    arquivo = open(
                        'configuracoes/contas/contas_2nr_numerosadd.txt', 'a')

                arquivo.write(email + ' ' + senha + "\n")
                arquivo.close()
                try:
                    random_number = random.random()
                    chance2 = 0.15
                    now = datetime.now()
                    now_brasilia = tz.localize(now)
                    timestamp = now_brasilia.strftime("%d/%m/%Y %H:%M:%S")
                    # Verificar se o número aleatório está abaixo da chance
                    if random_number < chance2 and not user_mysql == "wn3":
                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_dict(
                            funcionamento, scope)
                        client = gspread.authorize(creds)
                        spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                        sheet_name = 'relatorio_geral2nr'
                        # Insert user, password, and timestamp into first empty row
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)
                        values = sheet.col_values(1)
                        last_row = len(values)
                        values = [email + ' ' + senha, timestamp, user_mysql]
                        cell_list = sheet.range(
                            f'A{last_row + 1}:C{last_row + 1}')
                        for i, val in enumerate(values):
                            cell_list[i].value = val
                        sheet.update_cells(cell_list)
                except:
                    pass
                window['criadas'].update(contagem)
                window.Refresh()
                time.sleep(3)
                d(resourceId='pl.rs.sip.softphone.newapp:id/inputNumberName').set_text(
                    random.choice(list(range(1, 100))))
                time.sleep(2)
                # draw_number = 'None'
                # try:
                #    draw_number = d(resourceId='pl.rs.sip.softphone.newapp:id/textContent').get_text(timeout=2)
                # except:
                #    pass
                # if draw_number == 'You need to draw for a phone number':
                #    while True:
                #        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonOk').click()
                #        #subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_BACK', stdout=subprocess.DEVNULL,
                #        #        stderr=subprocess.DEVNULL, check=True, shell=True)
                #        #d(resourceId='pl.rs.sip.softphone.newapp:id/addNumber').click()
                #        #d(resourceId='pl.rs.sip.softphone.newapp:id/inputNumberName').set_text(
                #        #    random.choice(list(range(1, 100))))
                #        #time.sleep(5)
                #        #d(resourceId='pl.rs.sip.softphone.newapp:id/save').click()
                #        #time.sleep(2)
                #        d.swipe(340, 480, 340, 880)
                #        time.sleep(3)
                #        d(resourceId='pl.rs.sip.softphone.newapp:id/save').click()
                #        time.sleep(2)
                #        try:
                #            draw_number = d(resourceId='pl.rs.sip.softphone.newapp:id/textContent').get_text(timeout=2)
                #        except:
                #            draw_number = 'None'
                #        try:
                #            if draw_number == 'You need to draw for a phone number':
                #                pass
                #            else:
                #                break
                #        except Exception as e:
                #            print(e)
                #            break
                number = d(
                    resourceId='pl.rs.sip.softphone.newapp:id/phoneNumber').get_text()
                tries = 0
                if number is None or tries == 30:
                    while True:
                        if tries == '30':
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Máximo de números criados.')
                            window.Refresh()
                            raise Exception('Máximo de números criados.')
                        d.swipe(340, 480, 340, 880)
                        time.sleep(3)
                        number = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/phoneNumber').get_text()
                        tries += 1
                        print(tries)
                        if not number is None:
                            d(resourceId='pl.rs.sip.softphone.newapp:id/save').click()
                            time.sleep(2)
                            break
                else:
                    d(resourceId='pl.rs.sip.softphone.newapp:id/save').click()
                    time.sleep(2)
                if tries == 30:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Máximo de números criados.')
                    window.Refresh()
                    raise Exception('Máximo de números criados.')

                tries = 0
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                time.sleep(1)
                if d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').exists():
                    d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/save').click()
                try:
                    success = d(
                        resourceId='pl.rs.sip.softphone.newapp:id/captchaCode').get_text()
                except:
                    pass
                tries = 0
                success = 'Null'
                while success != 'Successful verification' or tries < 30:
                    try:
                        success = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/captchaCode').get_text()
                    except:
                        pass
                    if success == 'Successful verification':
                        break
                    elif success == 'Veryfication failed':
                        while True:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Falha na verificação.')
                            window.Refresh()
                            d.swipe(340, 480, 340, 880)
                            time.sleep(7)
                            success = d(
                                resourceId='pl.rs.sip.softphone.newapp:id/captchaCode').get_text()
                            if success == 'Successful verification':
                                break
                    elif d(resourceId='recaptcha-audio-button') or d(resourceId='audio-response'):
                        time.sleep(random.randint(1,30))
                        import soundcard as sc
                        import soundfile as sf
                        import tempfile
                        import speech_recognition as sr
                        OUTPUT_FILE_NAME = "out.wav"    # Nome do arquivo de saída.
                        SAMPLE_RATE = 48000             # Taxa de amostragem em Hz.
                        RECORD_SEC = 10                  # Duração da gravação em segundos.

                        # Criando um arquivo temporário para salvar o áudio.
                        with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_file:
                            temp_file_name = temp_file.name
                            
                            with sc.get_microphone(id=str(sc.default_speaker().name), include_loopback=True).recorder(samplerate=SAMPLE_RATE) as mic:
                                # Gravando áudio com loopback do alto-falante padrão.
                                try:
                                    d(resourceId='recaptcha-audio-button').click(timeout=3)
                                except:
                                    pass
                                def clicar_captcha():
                                    time.sleep(2)
                                    d(text='Pressione REPRODUZIR para ouvir').click()
                                audio_thread = threading.Thread(target=clicar_captcha)
                                audio_thread.start()
                                data = mic.record(numframes=SAMPLE_RATE * RECORD_SEC)
                                
                                # Salvando os dados de áudio no arquivo temporário.
                                sf.write(file=temp_file_name, data=data[:, 0], samplerate=SAMPLE_RATE)

                        # Aqui você pode usar o arquivo temporário (temp_file_name) conforme necessário.
                        print(f"Áudio salvo em: {temp_file_name}")
                        r = sr.Recognizer()

                        with sr.AudioFile(temp_file_name) as source:
                            audio_data = r.record(source)  # Lê o áudio do arquivo
                            
                            try:
                                text = r.recognize_google(audio_data, language='en-US')  # Reconhecimento usando Google Speech Recognition API
                                print("Texto reconhecido:", text)
                                 # Excluir o arquivo temporário após o uso, se necessário.
                                import os
                                try: os.remove(temp_file_name)
                                except: pass
                                d(resourceId='audio-response').set_text(text)
                                d(resourceId='recaptcha-verify-button').click()
                                time.sleep(5)
                                if success == 'Successful verification':
                                    break
                                elif d(resourceId='audio-response'):
                                    pass
                            except sr.UnknownValueError:
                                print("Não foi possível reconhecer a fala")
                                if reconhecer_captcha == 6:
                                    reconhecer_captcha = 0
                                    raise Exception('Não foi possível reconhecer a fala')
                                d(resourceId='recaptcha-reload-button').click()
                                reconhecer_captcha += 1
                            
                            except sr.RequestError as e:
                                print("Erro na requisição para o serviço de reconhecimento; {0}".format(e))

                        # raise Exception('Falha na verificação.')
                    time.sleep(0.5)

                    tries += 1
                time.sleep(5)
                d(resourceId='pl.rs.sip.softphone.newapp:id/save').click()
                window.Refresh()
                window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Número criado com sucesso.',
                                       text_color=('lime'))
                window.Refresh()
                sms = False
                criadas = 1
                while sms is False:
                    if criadas >= 4:
                        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Número criado com sucesso.',
                                               text_color=('lime'))
                        window.Refresh()
                        raise Exception('Máximo de números criados.')
                    try:
                        if d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').exists():
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Número criado com sucesso.',
                                text_color=('lime'))
                            criadas = criadas + 1

                        try:
                            d(resourceId='pl.rs.sip.softphone.newapp:id/settings').click(timeout=5)

                        except:
                            subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_BACK',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                            if tentativa2 == 2:
                                tentativa2 = 0
                                raise Exception('')
                            tentativa2 += 1
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(2)
                        # d(resourceId='pl.rs.sip.softphone.newapp:id/save').click()
                        # draw_number = 'None'
                        # try:
                        #    draw_number = d(resourceId='pl.rs.sip.softphone.newapp:id/textContent').get_text(timeout=2)
                        # except:
                        #    pass
                        # if draw_number == 'You need to draw for a phone number':
                        #    while True:
                        #        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonOk').click()
                        #        #subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_BACK', stdout=subprocess.DEVNULL,
                        #        #        stderr=subprocess.DEVNULL, check=True, shell=True)
                        #        #d(resourceId='pl.rs.sip.softphone.newapp:id/addNumber').click()
                        #        #d(resourceId='pl.rs.sip.softphone.newapp:id/inputNumberName').set_text(
                        #        #    random.choice(list(range(1, 100))))
                        #        #time.sleep(5)
                        #        #d(resourceId='pl.rs.sip.softphone.newapp:id/save').click()
                        #        #time.sleep(2)
                        #        d.swipe(340, 480, 340, 880)
                        #        time.sleep(3)
                        #        d(resourceId='pl.rs.sip.softphone.newapp:id/save').click()
                        #        time.sleep(2)
                        #        try:
                        #            draw_number = d(resourceId='pl.rs.sip.softphone.newapp:id/textContent').get_text(timeout=2)
                        #        except:
                        #            draw_number = 'None'
                        #        try:
                        #            if draw_number == 'You need to draw for a phone number':
                        #                pass
                        #            else:
                        #                break
                        #        except Exception as e:
                        #            print(e)
                        #            break
                        number = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/phoneNumber').get_text()
                        tries = 0
                        if number is None:
                            while True:
                                if tries == 30:
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Máximo de números criados.')
                                    window.Refresh()
                                    raise Exception(
                                        'Máximo de números criados.')
                                d.swipe(340, 480, 340, 880)
                                time.sleep(3)
                                number = d(
                                    resourceId='pl.rs.sip.softphone.newapp:id/phoneNumber').get_text()
                                tries += 1
                                print(tries)
                                if not number is None:
                                    d(resourceId='pl.rs.sip.softphone.newapp:id/save').click()
                                    time.sleep(2)
                                    break
                        else:
                            d(resourceId='pl.rs.sip.softphone.newapp:id/save').click()
                            time.sleep(2)
                        if tries == '30':
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Máximo de números criados.')
                            window.Refresh()
                            raise Exception('Máximo de números criados.')

                        tries = 0
                        try:
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click(timeout=5)
                            time.sleep(3)
                        except:
                            pass
                        if d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').exists():
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/save').click()
                        try:
                            success = d(
                                resourceId='pl.rs.sip.softphone.newapp:id/captchaCode').get_text()
                        except:
                            pass
                        tries = 0
                        success = 'Null'
                        while success != 'Successful verification' or tries < 30:
                            try:
                                success = d(
                                    resourceId='pl.rs.sip.softphone.newapp:id/captchaCode').get_text()
                            except:
                                pass
                            if success == 'Successful verification':
                                break
                            elif success == 'Veryfication failed':
                                while True:
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Falha na verificação.')
                                    window.Refresh()
                                    d.swipe(340, 480, 340, 880)
                                    time.sleep(7)
                                    success = d(
                                        resourceId='pl.rs.sip.softphone.newapp:id/captchaCode').get_text()
                                    if success == 'Successful verification':
                                        break
                            elif d(resourceId='recaptcha-audio-button') or d(resourceId='audio-response'):
                                time.sleep(random.randint(1,30))
                                import soundcard as sc
                                import soundfile as sf
                                import tempfile
                                import speech_recognition as sr
                                OUTPUT_FILE_NAME = "out.wav"    # Nome do arquivo de saída.
                                SAMPLE_RATE = 48000             # Taxa de amostragem em Hz.
                                RECORD_SEC = 10                  # Duração da gravação em segundos.

                                # Criando um arquivo temporário para salvar o áudio.
                                with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_file:
                                    temp_file_name = temp_file.name
                                    
                                    with sc.get_microphone(id=str(sc.default_speaker().name), include_loopback=True).recorder(samplerate=SAMPLE_RATE) as mic:
                                        # Gravando áudio com loopback do alto-falante padrão.
                                        try:
                                            d(resourceId='recaptcha-audio-button').click(timeout=3)
                                        except:
                                            pass
                                        def clicar_captcha():
                                            time.sleep(2)
                                            d(text='Pressione REPRODUZIR para ouvir').click()
                                        audio_thread = threading.Thread(target=clicar_captcha)
                                        audio_thread.start()
                                        data = mic.record(numframes=SAMPLE_RATE * RECORD_SEC)
                                        
                                        # Salvando os dados de áudio no arquivo temporário.
                                        sf.write(file=temp_file_name, data=data[:, 0], samplerate=SAMPLE_RATE)

                                # Aqui você pode usar o arquivo temporário (temp_file_name) conforme necessário.
                                print(f"Áudio salvo em: {temp_file_name}")
                                r = sr.Recognizer()

                                with sr.AudioFile(temp_file_name) as source:
                                    audio_data = r.record(source)  # Lê o áudio do arquivo
                                    
                                    try:
                                        text = r.recognize_google(audio_data, language='en-US')  # Reconhecimento usando Google Speech Recognition API
                                        print("Texto reconhecido:", text)
                                         # Excluir o arquivo temporário após o uso, se necessário.
                                        import os
                                        try: os.remove(temp_file_name)
                                        except: pass
                                        d(resourceId='audio-response').set_text(text)
                                        d(resourceId='recaptcha-verify-button').click()
                                        time.sleep(5)
                                        if success == 'Successful verification':
                                            break
                                        elif d(resourceId='audio-response'):
                                            pass
                                    except sr.UnknownValueError:
                                        print("Não foi possível reconhecer a fala")
                                        if reconhecer_captcha == 6:
                                            reconhecer_captcha = 0
                                            raise Exception('Não foi possível reconhecer a fala')
                                        d(resourceId='recaptcha-reload-button').click()
                                        reconhecer_captcha += 1
                                    
                                    except sr.RequestError as e:
                                        print("Erro na requisição para o serviço de reconhecimento; {0}".format(e))

                               
                                # raise Exception('Falha na verificação.')
                            time.sleep(0.5)

                            tries += 1
                        time.sleep(3)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/save').click()
                        time.sleep(3)

                        # d(resourceId='pl.rs.sip.softphone.newapp:id/settings').click()
                        # d(resourceId='pl.rs.sip.softphone.newapp:id/settings').click()
                        # d(resourceId='pl.rs.sip.softphone.newapp:id/settings').click()
                        # d(resourceId='pl.rs.sip.softphone.newapp:id/settings').click()
                    except Exception as e:
                        print(e)
                        sms = True

            except Exception as e:
                print(e)
        print('Todas as contas concluídas.')
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Todas as contas concluídas.',
                               text_color=('cyan'))
        window.Refresh()

def creator_TWILIO():
    global email
    global stop_event
    import time
    import re
    import requests
    import os
    os.environ['WDM_LOG_LEVEL'] = '0'
    import random
    import PySimpleGUI as sg
    import json
    from datetime import datetime
    import threading
    import subprocess
    from mailtm import Email
    import string
    import zipfile

    
    file_path = './storage/adblock.crx'

    def baixar_arquivo(url, caminho_arquivo, pasta_destino):
        # Verifica e cria a pasta destino, se necessário
        if os.path.exists(pasta_destino):
            return
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Baixando navegador...')
        window.Refresh()
        # Se a pasta não existir, cria a pasta destino
        os.makedirs(pasta_destino)

        # Continua com o download do arquivo
        resposta = requests.get(url, stream=True)
        tamanho_total = int(resposta.headers.get('content-length', 0))

        with open(caminho_arquivo, 'wb') as file:
            for dados in resposta.iter_content(chunk_size=4096):
                file.write(dados)

        # Extrai o arquivo
        with zipfile.ZipFile(caminho_arquivo, 'r') as zip_ref:
            zip_ref.extractall(pasta_destino)

        # Apaga o arquivo zip após a extração
        os.remove(caminho_arquivo)
        print("\nDownload e extração concluídos.")
    file_path = './storage/recaptcha.crx'
    import zipfile

    if os.path.exists("./storage/recaptcha/"):
        result = f"A pasta 'recaptcha' já existe em '{file_path}'."
    else:
        # URL para download
        url = 'https://www.dropbox.com/scl/fi/ezzl75hi49jq9rq84vvpl/recaptcha.crx?rlkey=z2vyoo7rqc407l36atsjfajzg&st=cmpklgle&dl=1'

        # Fazendo o download do arquivo
        response = requests.get(url)
        if response.status_code == 200:
            with open(file_path, 'wb') as file:
                file.write(response.content)
            print("Arquivo 'recaptcha.crx' baixado e salvo em './storage/recaptcha.crx'.")
            # Caminho do arquivo original (altere para o seu caminho de arquivo)
            caminho_original = './storage/recaptcha.crx'
            novo_caminho = './storage/recaptcha.zip'

            # Renomear o arquivo
            os.rename(caminho_original, novo_caminho)

            # Caminho do arquivo zip
            caminho_zip = './storage/recaptcha.zip'

            # Diretório de destino para extrair
            diretorio_destino = './storage/recaptcha/'

            # Remover um arquivo anterior, se existir
            arquivo_antigo = './storage/recaptcha'
            if os.path.exists(arquivo_antigo):
                os.remove(arquivo_antigo)

            # Criar o diretório de destino se ele não existir
            if not os.path.exists(diretorio_destino):
                os.makedirs(diretorio_destino)

            # Extrair o arquivo zip
            with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                zip_ref.extractall(diretorio_destino)

            print("Arquivo extraído com sucesso!")
            os.remove('./storage/recaptcha.zip')

        else:
            result = "Não foi possível baixar o arquivo. Status Code: " + \
                str(response.status_code)
    
    if os.path.exists("./storage/adblock/"):
        result = f"A pasta 'adblock' já existe em '{file_path}'."
    else:
        # URL para download
        url = 'https://www.dropbox.com/scl/fi/2tu2g6ulqwr2xk20kut1x/adblock.crx?rlkey=55rysc1sspa7t81ldybg8t6iy&dl=1'

        # Fazendo o download do arquivo
        response = requests.get(url)
        if response.status_code == 200:
            with open(file_path, 'wb') as file:
                file.write(response.content)
            print("Arquivo 'adblock.crx' baixado e salvo em './storage/adblock.crx'.")
            # Caminho do arquivo original (altere para o seu caminho de arquivo)
            caminho_original = './storage/adblock.crx'
            novo_caminho = './storage/adblock.zip'

            # Renomear o arquivo
            os.rename(caminho_original, novo_caminho)

            # Caminho do arquivo zip
            caminho_zip = './storage/adblock.zip'

            # Diretório de destino para extrair
            diretorio_destino = './storage/adblock/'

            # Remover um arquivo anterior, se existir
            arquivo_antigo = './storage/adblock'
            if os.path.exists(arquivo_antigo):
                os.remove(arquivo_antigo)

            # Criar o diretório de destino se ele não existir
            if not os.path.exists(diretorio_destino):
                os.makedirs(diretorio_destino)

            # Extrair o arquivo zip
            with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                zip_ref.extractall(diretorio_destino)

            print("Arquivo extraído com sucesso!")
            os.remove('./storage/adblock.zip')

        else:
            result = "Não foi possível baixar o arquivo. Status Code: " + \
                str(response.status_code)
    from selenium import webdriver
    from selenium.webdriver.chrome.service import Service
    from selenium.webdriver.chrome.options import Options
    from seleniumbase import SB
    from seleniumbase import Driver
    from bs4 import BeautifulSoup
    import random
    try:
        from pywinauto import Desktop
    except:
        subprocess.run(
            ['pip', 'install', 'pywinauto'])
        from pywinauto import Desktop

        
    try:
        import pyautogui
    except:
        subprocess.run(
            ['pip', 'install', 'pyautogui'])
        import pyautogui
    import uiautomator2 as u2
    from selenium.webdriver.common.keys import Keys
    try:
        from minuteinbox import Inbox
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'minuteinbox'])
        subprocess.run(['deactivate'], shell=True)
        from minuteinbox import Inbox
    from faker import Faker
    linha_ret = '_________________________________________________\n'
    fake = Faker('pt_BR')
    try:
        import uiautomator2 as u2
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'uiautomator2==2.16.25'])
        subprocess.run(['deactivate'], shell=True)
        subprocess.run(['pip', 'install', '--upgrade', 'requests'])
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        import requests
        time.sleep(10)
        import uiautomator2 as u2

    # use without parameters to create a new inbox
    # inbox = Inbox()

    try:
        with open('configuracoes\\configTwilio.json', 'r') as file:
            configTwilio = json.load(file)
    except FileNotFoundError:
        configTwilio = {}
    try:
        with open('configuracoes\\configTwilio.json', 'r') as file:
            config = json.load(file)
    except FileNotFoundError:
        config = {}
    d = u2.connect(f'{porta}')
    subprocess.run(f'adb -s {porta} uninstall io.appium.uiautomator2.server.test',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    subprocess.run(f'adb -s {porta} uninstall io.appium.uiautomator2.server',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)

    import random
    from selenium.webdriver.remote.webelement import WebElement
    import string
    import re
    import pygetwindow as gw
    from wsgiref.headers import tspecials
    try:
        from tempinbox import TempEmail
    except:
        import requests
        import os
        from pathlib import Path
        url = "https://www.dropbox.com/scl/fi/ll7cbtfled6dy1209fw4r/nome_do_arquivo.tar.gz?rlkey=aljtozyyj9vzzhcnqwr86tfnd&dl=1"
        nome_do_arquivo = "gmail2.tar.gz"
        caminho_do_arquivo = Path(
            __file__).parent / nome_do_arquivo
        # Baixar o arquivo da URL
        response = requests.get(url)
        with open(caminho_do_arquivo, 'wb') as arquivo:
            arquivo.write(response.content)
        # Instalar o pacote localmente usando pip com aspas duplas no caminho
        os.system(f'pip install "{caminho_do_arquivo}"')

    contagem = 0
    troca_ip = 0

    def gerar_id():
        chars = string.ascii_lowercase + string.digits
        android_id = ''.join(random.choice(chars) for i in range(16))
        return android_id

    def vpn_avast():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Avast', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop("com.avast.android.vpn")
            d.app_start("com.avast.android.vpn", ".app.wizard.WizardActivity")
            time.sleep(10)
        except Exception as e:
            print(e)
        abc = False

    def nenhuma_vpn():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.facebook.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        time.sleep(10)

    def vpn_hotspotshield():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HotspotShield',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('hotspotshield.android.vpn')
            d.app_start('hotspotshield.android.vpn')
        except Exception as e:
            print(e)
        d(resourceId='hotspotshield.android.vpn:id/tryAgainButton').click()
        time.sleep(5)
        d(resourceId='hotspotshield.android.vpn:id/btnVpnConnect').click()

        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_pia():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da PiaVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()

        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.privateinternetaccess.android')
            d.app_start('com.privateinternetaccess.android')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()
        time.sleep(3)
        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()

        abc = False

    def vpn_express():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da ExpressVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()

        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.expressvpn.vpn')
            d.app_start('com.expressvpn.vpn')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.expressvpn.vpn:id/obiButton').click()
        time.sleep(3)
        d(resourceId='com.expressvpn.vpn:id/obiButton').click()

        abc = False

    def vpn_nord():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da NordVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        sms = True
        try:
            d.app_stop('com.nordvpn.android')
            d.app_start('com.nordvpn.android', '.MainActivity')
        except:
            pass
        time.sleep(10)
        time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_surf():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('com.surfshark.vpnclient.android')
            d.app_start('com.surfshark.vpnclient.android')
        except:
            pass
        time.sleep(15)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_better():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da BetterNet', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        try:
            d.app_stop('com.freevpnintouch')
            d.app_start('com.freevpnintouch')
        except:
            pass
        time.sleep(10)
        dialog = d(resourceId='com.freevpnintouch:id/dialogCtaPositive')
        connect = d(
            resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
        if dialog.exists:
            d(resourceId='com.freevpnintouch:id/dialogCtaPositive').click()
            time.sleep(3)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            # time.sleep(5)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
        while connect == 'CONNECT':
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            time.sleep(4)
            connect = d(
                resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            # WebDriverWait(driver, 20).until(
            # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        ip = '' + porta

        output = subprocess.check_output(
            ['adb', '-s', ip, 'shell', 'ifconfig'])

        # Verifica se a conexão VPN está ativa
        if not "tun0" in str(output):
            window['output'].print("Não conectado na BetterNet.")
            window.Refresh()
            try:
                connect = d(
                    resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
                d.app_stop('com.freevpnintouch')
                d.app_start('com.freevpnintouch')
                while connect == 'CONNECT':
                    d(resourceId='com.freevpnintouch:id/buttonConnect').click()
                    time.sleep(4)
                    connect = d(
                        resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            except:
                pass
        abc = False

    def vpn_cyberghost():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da CyberGhost', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('de.mobileconcepts.cyberghost')
            d.app_start('de.mobileconcepts.cyberghost')
        except:
            pass
        # time.sleep(3)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        rate = d(resourceId='de.mobileconcepts.cyberghost:id/rate_me_text')
        if rate.exists:
            d(resourceId='android:id/button2').click()
        time.sleep(2)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        abc = False

    def vpn_tunnelbear():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.tunnelbear.android')
            d.app_start("com.tunnelbear.android")
            while True:
                output = subprocess.check_output(
                    ['adb', '-s', porta, 'shell', 'ifconfig'])
                # print(str(output))
                if "tun0" in str(output):
                    print('Conectada')
                    break
                elif not "tun0" in str(output):
                    print('Reconectando')
                    try:
                        d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                        time.sleep(10)
                    except:
                        pass
        except Exception as e:
            print(e)
            pass

    def vpn_avg():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da AVG', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.avg.android.vpn')
            d.app_start("com.avg.android.vpn",
                        "com.avast.android.vpn.app.wizard.WizardActivity")
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #               stderr=subprocess.DEVNULL, check=True, shell=True)

        time.sleep(30)

    def vpn_windscribe():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Windscribe', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)
            d.app_stop("com.windscribe.vpn")
            d.app_start("com.windscribe.vpn")
        except:
            pass
        d(resourceId='com.windscribe.vpn:id/on_off_button').click()
        time.sleep(10)

    def vpn_hma():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HMA', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)

            d.app_stop("com.hidemyass.hidemyassprovpn")
            time.sleep(3)
            d.app_start('com.hidemyass.hidemyassprovpn',
                        'com.avast.android.vpn.activity.HmaOnboardingActivity')
        except:
            pass
        time.sleep(10)


    try:
        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global transition_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass
    troca_ip = 0
    
    while True:
        try:
            window['output'].print(linha_ret)
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo 2NR')
            window.Refresh()

            try:
                scope = ["https://spreadsheets.google.com/feeds",
                        "https://www.googleapis.com/auth/drive"]
                creds = ServiceAccountCredentials.from_json_keyfile_name(
                    'credentials.json', scope)
                client = gspread.authorize(creds)
                #
                spreadsheet_id = config['spreadsheet']
                sheet_name = 'contas'
                # Insert user, password, and timestamp into first empty row
                sheet = client.open_by_key(
                    spreadsheet_id).worksheet(sheet_name)
                values = sheet.col_values(1)
                #
                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                rows = sheet.get_all_values()
                #
                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                regex = re.compile(r'\S+\s\S+')
                #
                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                num_rows = sum(1 for row in rows if regex.match(row[0]))
                window['total'].update(num_rows)
            except Exception as e:
                print(e)
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu algum erro ao acessar a planilha.')
                window.Refresh()
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Tentando novamente em 1 minuto.')
                window.Refresh()
                time.sleep(60)
                raise Exception('skip')

            try:
                subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                            stdout=subprocess.DEVNULL,
                            stderr=subprocess.DEVNULL, check=True, shell=True)
            except Exception as e:
                print(e)
                pass
            try:
                subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server.test',
                            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)
                subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server',
                            stdout=subprocess.DEVNULL,
                            stderr=subprocess.DEVNULL, shell=True)
            except:
                pass
            window.Refresh()

            try:
                # time.sleep(10)

                gerar_id()
                android_id = gerar_id()
                subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                            shell=True)
                try:
                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.READ_CONTACTS',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.CAMERA',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.RECORD_AUDIO',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    try:
                        subprocess.run(
                            f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.ACCESS_NOTIFICATION_POLICY',
                            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    except:
                        pass

                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.POST_NOTIFICATIONS',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                except:
                    pass
                try:
                    d.app_start('pl.rs.sip.softphone.newapp')
                except:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu algum erro ao abrir o 2NR, tentando novamente.')
                    window.Refresh()
                time.sleep(3)
                scope = ["https://spreadsheets.google.com/feeds",
                        "https://www.googleapis.com/auth/drive"]
                creds = ServiceAccountCredentials.from_json_keyfile_name(
                    'credentials.json', scope)
                client = gspread.authorize(creds)

                spreadsheet_id = config['spreadsheet']
                sheet_name = config['2nr']

                sheet = client.open_by_key(
                    spreadsheet_id).worksheet(sheet_name)
                # Obtém todas as células
                cells = sheet.get_all_values()

                # Armazena as células que correspondem à condição
                matches = [cell for row in cells for cell in row if
                        re.match(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', cell)]

                # Armazena a lista de células correspondentes à condição em uma variável
                regex2nr = matches
                while len(regex2nr) == 0:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nenhuma conta do 2NR encontrada.\nTentando novamente em 5 min.')
                    window.Refresh()
                    scope = ["https://spreadsheets.google.com/feeds",
                            "https://www.googleapis.com/auth/drive"]
                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                        'credentials.json', scope)
                    client = gspread.authorize(creds)

                    spreadsheet_id = config['spreadsheet']

                    sheet_name = config['2nr']
                    sheet = client.open_by_key(
                        spreadsheet_id).worksheet(sheet_name)
                    # Insert user, password, and timestamp into first empty row
                    sheet = client.open_by_key(
                        spreadsheet_id).worksheet(sheet_name)
                    values = sheet.col_values(1)

                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                    rows = sheet.get_all_values()

                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                    regex = re.compile(r'\S+\s\S+')
                    sheet_name = config['2nr']
                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                    try:
                        num_rows = sum(1 for row in rows if regex.match(row[0]))
                    except:
                        pass
                    window['total'].update(num_rows)

                    time.sleep(300)
                    cells = sheet.get_all_values()

                    # Armazena as células que correspondem à condição
                    matches = [cell for row in cells for cell in row if
                            re.match(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', cell)]

                    # Armazena a lista de células correspondentes à condição em uma variável
                    regex2nr = matches
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] {len(regex2nr)} conta(s) encontrada.')
                window.Refresh()
                time.sleep(3)
                try:
                    d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(timeout=60)
                except Exception as e:
                    print(e)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao clicar em login. Tentando novamente.')
                    window.Refresh()
                    subprocess.run(
                        f'uiautomator2 -s {porta} uninstall com.github.uiautomator',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    raise Exception('Ocorreu um erro ao clicar em login.')
                time.sleep(5)
                spreadsheet_id = config['spreadsheet']
                sheet_name = config['2nr']
                sheet = client.open_by_key(
                    spreadsheet_id).worksheet(sheet_name)
                # Obtém todas as células

                # Define a faixa de células para leitura
                first_linha = sheet.cell(1, 1).value

                # Divide a string em duas partes separadas por um espaço em branco
                partes = first_linha.split(' ')

                # Atribui a primeira parte (endereço de e-mail) à variável email2nr
                email2nr = partes[0]

                # Atribui a segunda parte (texto) à variável senha2nr
                senha2nr = partes[1]
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Email 2NR: {email2nr}')
                window.Refresh()
                d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email2nr)
                time.sleep(0.5)
                d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha2nr)
                time.sleep(0.5)
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                time.sleep(3)
                perm = d(resourceId='pl.rs.sip.softphone.newapp:id/messages')
                if perm.exists(timeout=30):
                    time.sleep(10)
                    pass
                else:
                    try:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Conta não existe.')
                        window.Refresh()
                        scope = ["https://spreadsheets.google.com/feeds",
                                "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                            'credentials.json', scope)
                        client = gspread.authorize(creds)
                        # Abre a planilha e a planilha de uma determinada aba
                        spreadsheet_id = config['spreadsheet']
                        sheet_name = config['2nr']
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)

                        # Apaga a primeira célula da coluna A e desloca as células abaixo
                        sheet.delete_rows(1, 1)
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')
                    except Exception as e:
                        print(e)
                        raise Exception('skip')
                try:
                    qtd_num2 = d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[*]/androidx.appcompat.widget.LinearLayoutCompat/android.widget.LinearLayout/android.widget.TextView[1]')
                    qtd_num = qtd_num2.all()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] {len(qtd_num)} número(s) encontrado.')
                except Exception as e:
                    print(e)
                if len(qtd_num) == 0:
                    try:
                        scope = ["https://spreadsheets.google.com/feeds",
                                "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                            'credentials.json', scope)
                        client = gspread.authorize(creds)
                        # Abre a planilha e a planilha de uma determinada aba
                        spreadsheet_id = config['spreadsheet']
                        sheet_name = config['2nr']
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)

                        # Apaga a primeira célula da coluna A e desloca as células abaixo
                        sheet.delete_rows(1, 1)
                    except Exception as e:
                        print(e)
                    continue
                window.Refresh()
                try:
                    num = d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat/android.widget.LinearLayout/android.widget.TextView[1]').get_text()
                    num = num.replace(' ', '')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Número: +48{num}')
                    window.Refresh()
                    email = num
                except Exception as e:
                    print(e)
                d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonSettings').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
            except Exception as e:
                print(e)
                print('Erro no processo de login no 2nr')
                raise Exception('skip')
            lista_user = random.choices(range(0, 9), k=2)
            lista_letras = random.choices(letras, k=2)
            nomea = fake.first_name_male().replace(" ", "")
            nome = unicodedata.normalize('NFKD', nomea).encode(
                'ASCII', 'ignore').decode('ASCII')
            sobrenomea = fake.last_name().replace(" ", "").lower()
            sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                'ASCII', 'ignore').decode('ASCII')
            nome_completo = nome + ' ' + sobrenome
            nome_completo_s = nome + sobrenome
            numeros_concatenados = ''.join(str(numero)
                                        for numero in lista_user)
            user_completo1 = nome_completo_s + '' + \
                str(numeros_concatenados) + ''.join(lista_letras)
            user_completo = random.randint(1, len(user_completo1))
            string_with_dot = user_completo1[:user_completo] + \
                '_' + user_completo1[user_completo:]
            user_completo_antigo = string_with_dot.lower()
            escolha = random.choice(["_", "."])
            user_completo = nome + escolha + sobrenome + \
                str(numeros_concatenados) + ''.join(lista_letras)

            def gerar_senha(tamanho=12):
                if tamanho < 6:
                    raise ValueError("A senha deve ter pelo menos 6 caracteres.")

                # Define uma lista de letras maiúsculas e minúsculas
                letras_maiusculas = [random.choice(
                    string.ascii_uppercase) for _ in range(tamanho // 2)]
                letras_minusculas = [random.choice(
                    string.ascii_lowercase) for _ in range(tamanho // 2)]

                # Intercale as letras maiúsculas e minúsculas
                senha = ''.join(''.join(pair)
                                for pair in zip(letras_maiusculas, letras_minusculas))

                # Adiciona caracteres especiais, números e @
                caracteres_permitidos = string.ascii_letters + string.digits + string.punctuation
                caracteres_permitidos = caracteres_permitidos.replace(
                    "~", "")  # Remove ~ e outros acentos

                senha += ''.join(random.choice(caracteres_permitidos)
                                for _ in range(tamanho - len(senha) - 3))
                # Adiciona pelo menos uma letra maiúscula
                senha += random.choice(string.ascii_uppercase)
                senha += random.choice(string.digits)  # Adiciona pelo menos um número
                senha += "@"

                # Mistura os caracteres
                senha = ''.join(random.sample(senha, len(senha)))

                return senha
            if vpn_nav == 'SurfShark':
                vpn_usada = 'surfshark'
                chosen_proxy = None
            elif vpn_nav == 'Minhas Proxies':
                with open('.\\proxies.txt', 'r') as f:
                    linhas = f.readlines()  # Lê todas as linhas e armazena em uma lista

                # Escolhe uma linha aleatória
                linha_aleatoria = random.choice(linhas)  # Escolhe uma linha aleatória

                # Remove espaços em branco nas extremidades da linha
                chosen_proxy = linha_aleatoria.strip()

                # Imprime a linha aleatória
                print(f"Proxy: {chosen_proxy}")
            elif vpn_nav == 'Proxy Gratuito': 
                from threading import Thread, Lock
                from queue import Queue
                import re
                import random
                window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Procurando proxies válidos')
                window.Refresh()
                # URL da API para obter os proxies
                
                test_urls = [
                    "https://ipinfo.io/json",
                    "https://www.twilio.com"
                ]

                api_url = "https://api.proxyscrape.com/v3/free-proxy-list/get?request=displayproxies&proxy_format=protocolipport&format=text&anonymity=Elite&timeout=1000"
                #api_url = "https://api.proxyscrape.com/v2/?request=displayproxies&protocol=http&proxy_format=protocolipport&timeout=10000&country=all&ssl=all&anonymity=all"

                # Função para obter proxies da API
                def fetch_proxies(api_url):
                    try:
                        response = requests.get(api_url)
                        proxies = response.text.split('\n')
                        return [proxy.strip() for proxy in proxies if proxy.strip()]
                    except requests.RequestException as e:
                        print(f"Erro ao obter proxies: {e}")
                        return []

                # Obter proxies da API
                proxies_list = fetch_proxies(api_url)

                # Aleatorizar a ordem dos proxies
                random.shuffle(proxies_list)

                # Fila de proxies
                proxy_queue = Queue()

                # Adiciona proxies à fila
                for proxy in proxies_list:
                    proxy_queue.put(f"{proxy}")

                # Lista para armazenar proxies válidos
                valid_proxies = []

                # Lock para proteger o acesso à lista de proxies válidos
                list_lock = Lock()

                # Variável de controle para parar threads
                stop_event = False

                def check_proxy():
                    global stop_event
                    while not proxy_queue.empty() and not stop_event:
                        proxy = proxy_queue.get()
                        successes = [False] * len(test_urls)  # Lista para acompanhar os sucessos em cada URL
                        try:
                            for i, test_url in enumerate(test_urls):
                                response = requests.get(test_url, proxies={"http": proxy, "https": proxy}, timeout=2)
                                if response.status_code == 200:
                                    successes[i] = True
                                else:
                                    successes[i] = False
                        except requests.RequestException:
                            successes = [False] * len(test_urls)

                        if all(successes):  # Se todos os testes forem bem-sucedidos
                            with list_lock:
                                if proxy not in valid_proxies:
                                    valid_proxies.append(proxy)
                                    print(f"Proxy válido: {proxy}")
                                    if len(valid_proxies) >= 5:
                                        stop_event = True
                        else:
                            pass
                            #print(f"Proxy inválido: {proxy}")

                        proxy_queue.task_done()

                # Número de threads
                num_threads = 20

                # Criar e iniciar as threads
                threads = []
                for i in range(num_threads):
                    thread = Thread(target=check_proxy)
                    thread.start()
                    threads.append(thread)

                # Aguardar todas as threads terminarem
                for thread in threads:
                    thread.join()

                # Escolher um proxy aleatório entre os válidos encontrados
                if valid_proxies:
                    chosen_proxy = random.choice(valid_proxies)
                    print("Proxy escolhido aleatoriamente:", chosen_proxy)
                else:
                    print("Nenhum proxy válido encontrado")
            if vpn_nav == 'Minhas Proxies':
                caminho_extrecaptcha = rf'.\storage\recaptcha'
            elif vpn_nav == 'Proxy Gratuito':
                caminho_extrecaptcha = rf'.\storage\recaptcha'
            elif vpn_nav != 'Proxy Gratuito':
                caminho_extrecaptcha = rf'.\storage\recaptcha,{caminho_atual}\storage\{vpn_usada}'
                chosen_proxy = None
            
            
            with SB(uc=True,pls='eager', ad_block_on=True, locale_code='pt-br', demo=False, incognito=True, extension_dir=caminho_extrecaptcha, proxy=chosen_proxy) as chrome:
                time.sleep(2)
                
                try:
                    from pywinauto import Desktop
                except:
                    subprocess.run(
                        ['pip', 'install', 'pywinauto'])
                    from pywinauto import Desktop
                desktop = Desktop(backend="uia")

                # Definir variáveis para armazenar a janela ativa e seu handle
                active_window = None
                active_handle = None

                # Iterar sobre todas as janelas do desktop
                for window2 in desktop.windows():
                    if window2.is_active():
                        active_window = window2
                        active_handle = window2.handle
                        print(f"Handle da janela ativa: {active_handle}")
                        print(f"Título da janela ativa: {active_window.window_text()}")
                        break  # Para assim que encontrar a janela ativa
                else:
                    pass
                    #print("Nenhuma janela ativa encontrada.")
                time.sleep(3)
                if vpn_nav == 'SurfShark':
                    file_path = './storage/surfshark.crx'
                    import zipfile
#
                    if os.path.exists("./storage/surfshark/"):
                        result = f"A pasta 'surfshark' já existe em '{file_path}'."
                    else:
                        # URL para download
                        url = 'https://www.dropbox.com/scl/fi/e4f4h29zl5s5tywjp1ev2/surfshark.crx?rlkey=zb499vqpr8swexgd8yrsu6rvc&dl=1'
#
                        # Fazendo o download do arquivo
                        response = requests.get(url)
                        if response.status_code == 200:
                            with open(file_path, 'wb') as file:
                                file.write(response.content)
                            print("Arquivo 'surfshark.crx' baixado e salvo em './storage/surfshark.crx'.")
                            # Caminho do arquivo original (altere para o seu caminho de arquivo)
                            caminho_original = './storage/surfshark.crx'
                            novo_caminho = './storage/surfshark.zip'
#
                            # Renomear o arquivo
                            os.rename(caminho_original, novo_caminho)
#
                            # Caminho do arquivo zip
                            caminho_zip = './storage/surfshark.zip'
#
                            # Diretório de destino para extrair
                            diretorio_destino = './storage/surfshark/'
#
                            # Remover um arquivo anterior, se existir
                            arquivo_antigo = './storage/surfshark'
                            if os.path.exists(arquivo_antigo):
                                os.remove(arquivo_antigo)
#
                            # Criar o diretório de destino se ele não existir
                            if not os.path.exists(diretorio_destino):
                                os.makedirs(diretorio_destino)
#
                            # Extrair o arquivo zip
                            with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                                zip_ref.extractall(diretorio_destino)
#
                            print("Arquivo extraído com sucesso!")
                            os.remove('./storage/surfshark.zip')
#
                        else:
                            result = "Não foi possível baixar o arquivo. Status Code: " + \
                                str(response.status_code)
                    try:
                        
                        chrome.set_window_size(800, 800)
                        # Alternar para a nova aba
                        chrome.driver.switch_to.window(
                            chrome.driver.window_handles[-1])
#
                        # Verificar se a URL está correta e fechar a aba
                        if chrome.driver.current_url == "https://surfshark.com/pt-br/download/chrome/onboarding":
                            chrome.driver.close()
#
                        # Alternar de volta para a aba original
                        chrome.driver.switch_to.window(
                            chrome.driver.window_handles[0])
                        chrome.open('chrome://extensions/')
                        extensoes = chrome.execute_script(
                            'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                        )
#
                        id_extensao = None
                        for ext in extensoes:
                            nome_ext = chrome.execute_script(
                                'return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                            if "Surf" in nome_ext:
                                id_extensao = chrome.execute_script(
                                    'return arguments[0].getAttribute("id");', ext)
                                break
#
                        if id_extensao:
                            url_extensao = f'chrome-extension://{id_extensao}/index.html'
                            # chrome.get(url_extensao)
                            # print(f"Página da extensão aberta em {url_extensao}")
                        else:
                            print("ID da extensão não encontrado")
                        # Continuar com outras operações na aba original, se necessário
                    except Exception as e:
                        print(e)
                    if os.path.exists(r'.\storage\cookies_surf.json'):
                        chrome.driver.uc_open_with_reconnect(
                            'https://my.surfshark.com/auth/login', 4)
                        try:
                            chrome.save_screenshot('erro_nav.png')
                            chrome.switch_to_frame(
                                'iframe[id^="cf-chl"]', timeout=1)
                            print(chrome.driver.find_elements(
                                By.XPATH, '//*[@id="challenge-stage"]/div/label/input'))
                            # chrome.driver.uc_click('//*[@id="challenge-stage"]/div/label/input')
                            chrome.driver.uc_click(
                                'span')
                            chrome.save_screenshot('erro_nav.png')
                            # chrome.driver.execute_script("arguments[0].click();", chrome.driver.find_element(By.XPATH, '//*[@id="challenge-stage"]/div/label/input'))
                        except Exception as e:
                            print('Sem Cloudflare')
                        with open(r'.\storage\cookies_surf.json', 'r') as file:
                            cookies = json.load(file)
#
                        # Adiciona os cookies salvos ao navegador
                        for cookie in cookies:
                            chrome.driver.add_cookie(cookie)
#
                        # Recarrega a página para usar os cookies
                        print('Adicionou os cookies')
                        time.sleep(2)
                        chrome.refresh()
                        time.sleep(2)
                        if chrome.driver.current_url == 'https://my.surfshark.com/home/dashboard':
                            chrome.driver.get(url_extensao)
                            chrome.wait_for_element(
                                "//button[@data-test='login-in-button']").click()
                            time.sleep(3)
                        elif 'https://my.surfshark.com/auth/login' in chrome.driver.current_url:
                            try:
                                chrome.driver.get(url_extensao)
                                chrome.wait_for_element(
                                    "//button[@data-test='login-in-button']").click()
#
                                time.sleep(5)
                                nova_janela = chrome.driver.window_handles[-1]
                                chrome.driver.switch_to.window(nova_janela)
                                time.sleep(4)
                                if chrome.driver.current_url == 'https://my.surfshark.com/account/extension-login-success':
#
                                    time.sleep(5)
                                    chrome.driver.close()
                                nova_janela = chrome.driver.window_handles[0]
                                chrome.driver.switch_to.window(nova_janela)
#
                                time.sleep(3)
                            except Exception as e:
                                print(e)
                    else:
                        chrome.driver.switch_to.window(
                            chrome.driver.window_handles[0])
                        import time
                        # Abre uma nova aba para a extensão (geralmente chrome-extension://<extension-id>/)
                        chrome.driver.get(url_extensao)
                        chrome.wait_for_element(
                            "//button[@data-test='login-in-button']").click()
                        time.sleep(3)
                        janela_principal = chrome.driver.window_handles[0]
                        nova_janela = chrome.driver.window_handles[1]
                        chrome.driver.switch_to.window(nova_janela)
                        print(chrome.driver.current_url)
                        email_surf = emailvpn
                        senha_surf = senhavpn
                        try:
                            chrome.save_screenshot('erro_nav.png')
                            chrome.switch_to_frame(
                                'iframe[id^="cf-chl"]', timeout=1)
                            print(chrome.driver.find_elements(
                                By.XPATH, '//*[@id="challenge-stage"]/div/label/input'))
                            # chrome.driver.uc_click('//*[@id="challenge-stage"]/div/label/input')
                            chrome.driver.uc_click(
                                'span')
                            chrome.save_screenshot('erro_nav.png')
                            # chrome.driver.execute_script("arguments[0].click();", chrome.driver.find_element(By.XPATH, '//*[@id="challenge-stage"]/div/label/input'))
                        except Exception as e:
                            print('Sem Cloudflare 2')
                        chrome.send_keys(
                            "//input[@name='emailField']", email_surf)
                        chrome.send_keys(
                            "//input[@name='passwordField']", senha_surf)
                        chrome.click(("//button[@id='loginSubmit']"))
                        time.sleep(10)
                        if chrome.driver.current_url == 'https://my.surfshark.com/account/extension-login-success':
#
                            cookies = chrome.driver.get_cookies()
#
                            # Guarde os cookies em um arquivo JSON
                            with open(r'.\storage\cookies_surf.json', 'w') as file:
                                json.dump(cookies, file)
                        else:
                            print('Falha ao logar na surfshark')
                        chrome.driver.close()
                        chrome.driver.switch_to.window(janela_principal)
#
                    if 'https://my.surfshark.com/auth/login' in chrome.driver.current_url:
                        print('Falha ao logar na surfshark')
                        chrome.driver.switch_to.window(
                            chrome.driver.window_handles[0])
                        import time
                        # Abre uma nova aba para a extensão (geralmente chrome-extension://<extension-id>/)
                        chrome.driver.get(url_extensao)
                        chrome.wait_for_element(
                            "//button[@data-test='login-in-button']").click()
                        time.sleep(3)
                        janela_principal = chrome.driver.window_handles[0]
                        nova_janela = chrome.driver.window_handles[1]
                        chrome.driver.switch_to.window(nova_janela)
                        print(chrome.driver.current_url)
                        email_surf = 'americanplayer@protonmail.com'
                        senha_surf = 'Kotinha10@'
                        chrome.send_keys(
                            "//input[@name='emailField']", email_surf)
                        chrome.send_keys(
                            "//input[@name='passwordField']", senha_surf)
                        chrome.click(("//button[@id='loginSubmit']"))
                        time.sleep(10)
                        if chrome.driver.current_url == 'https://my.surfshark.com/account/extension-login-success':
                            if os.path.exists(r'.\storage\cookies_surf.json'):
                                # Apaga o arquivo
                                os.remove(
                                    r'.\storage\cookies_surf.json')
                                print(
                                    f"cookies_surf.json foi apagado com sucesso.")
                            else:
                                print(f"cookies_surf.json não existe.")
                            cookies = chrome.driver.get_cookies()
#
                            # Guarde os cookies em um arquivo JSON
                            with open(r'.\storage\cookies_surf.json', 'w') as file:
                                json.dump(cookies, file)
                            chrome.driver.close()
                            chrome.switch_to.window(janela_principal)
                        else:
                            print('Falha ao logar na surfshark')
                    print('Logou com sucesso na surfshark')
#
                    locais = ['Canada', 'USA', 'Brazil']
                    local_vpn = random.choice(locais)
                    print(f'Regiao escolhida {local_vpn}')
                    chrome.driver.refresh()
                    time.sleep(5)
                    try:
                        chrome.send_keys(
                            "//input[@data-test='location-search-input']", local_vpn)
                    except:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Erro ao logar na VPN.')
                        window.Refresh()
                        if os.path.exists(r'.\storage\cookies_surf.json'):
                            # Apaga o arquivo
                            os.remove(
                                r'.\storage\cookies_surf.json')
                            print(
                                f"cookies_surf.json foi apagado com sucesso.")
                    chrome.click("//div[@data-test='location-title']")
                    try:
                        chrome.wait_for_element(
                            "//button[@data-test='disconnect-button']")
#
                        print('VPN conectada')
                        time.sleep(5)
                    except Exception as e:
                        print(e)
                window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo Twilio')
                window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando 1 minuto')
                window.Refresh()
                chrome.driver.uc_open_with_reconnect('https://www.twilio.com/try-twilio', 40)
                
                
                client = TempEmail()
                email = client.generate_temp_email(
                    domain=False, dot_gmail=True, plus_gmail=True)["email"][0]
                email_real = email
                log, dominio = email_real.split('@')
                numero_aleatorio = random.randint(0, 9999)
                email = f'{log}+{numero_aleatorio:04}@{dominio}'
                print(email)
                window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Email: {email}')
                window.Refresh()

                senha = gerar_senha(tamanho=16)
                timeout = 60
                start_time = time.time()
                while time.time() - start_time < timeout:
                    try:
                        if chrome.find_elements('iframe[id^="cf-chl"]'):
                            chrome.switch_to_frame("iframe")
                            chrome.assert_element("div#success svg#success-icon")
                            break
                    except Exception as e:
                        print(f'Captcha não solucionado: {e}')
                        try:
                            chrome.switch_to_default_content()
                        except:
                            pass
                        pass
                    #element = chrome.find_element('iframe[id^="cf-chl"]')
                    #captcha_value = element.get_attribute('value')
                    #if captcha_value:
                    #    break
                    try:
                        try:
                            if chrome.find_elements('iframe[id^="cf-chl"]'):
                                chrome.switch_to_frame("iframe")
                                print("Clicando com uc")
                                chrome.driver.uc.click('span', 10)
                                print("Clicou")
                                chrome.assert_element("div#success svg#success-icon")
                                print(1)
                                break

                        except:
                            try:
                                chrome.switch_to_default_content()
                            except:
                                pass
                            if chrome.find_elements('iframe[id^="cf-chl"]'):
                                chrome.driver.minimize_window()
                                time.sleep(0.5)
                                #if active_window:
                                #    # Mover a janela para o topo
                                #    active_window.set_focus()
                                #    print("Janela movida para o topo.")
                                #    rect = window2.rectangle()
                                #    x = rect.left
                                #    y = rect.top
                                #    width = rect.width()
                                #    height = rect.height()
#
                                #    print(f"Coordenadas da janela ativa: ({x}, {y})")
                                #    print(f"Tamanho da janela ativa: {width}x{height}")
#
                                #    ## Clicar no centro da janela
                                #    #window2.click_input(coords=(x + width // 2, y + height // 2))
                                #    #
                                #    #print("Clicou no centro da janela.")
                                #else:
                                #    pass
                                chrome.uc_gui_handle_cf()
                                
                                print(2)
                                break
                            else:
                                chrome.driver.minimize_window()
                                time.sleep(0.5)
                                #if active_window:
                                #    # Mover a janela para o topo
                                #    active_window.set_focus()
                                #    print("Janela movida para o topo.")
                                #    rect = window2.rectangle()
                                #    x = rect.left
                                #    y = rect.top
                                #    width = rect.width()
                                #    height = rect.height()
#
                                #    print(f"Coordenadas da janela ativa: ({x}, {y})")
                                #    print(f"Tamanho da janela ativa: {width}x{height}")
#
                                #    ## Clicar no centro da janela
                                #    #window2.click_input(coords=(x + width // 2, y + height // 2))
                                #    #
                                #    #print("Clicou no centro da janela.")
                                #else:
                                #    pass
                                chrome.uc_gui_handle_cf()
                                
                                print(3)
                                break
                    except Exception as e:
                        print(e)
                        pass
                    time.sleep(1)  # Espera 1 segundo antes de tentar novamente

                # Verifica se o campo 'captcha' foi preenchido corretamente dentro do tempo limite
                #assert captcha_value, "O campo 'captcha' não foi preenchido dentro do tempo limite."
                try:
                    chrome.switch_to_default_content()
                except:
                    pass

                def digitar_como_humano(elemento: WebElement, texto: str, min_delay=0.1, max_delay=0.2):
                    """
                    Digita o texto em um elemento da página, simulando digitação humana.

                    :param elemento: O elemento do Selenium onde o texto será digitado.
                    :param texto: O texto a ser digitado no elemento.
                    :param min_delay: Atraso mínimo entre as teclas, em segundos.
                    :param max_delay: Atraso máximo entre as teclas, em segundos.
                    """
                    for char in texto:
                        elemento.send_keys(char)
                        time.sleep(random.uniform(min_delay, max_delay))

                
                digitar_como_humano(chrome.wait_for_element('#first-name'), nome)
                time.sleep(1)
                digitar_como_humano(chrome.wait_for_element('#last-name'), sobrenome)
                #chrome.wait_for_element('#last-name').send_keys(sobrenome)
                time.sleep(1)
                digitar_como_humano(chrome.wait_for_element('#email'), email)
                #chrome.wait_for_element('#email').send_keys(email)
                time.sleep(1)
                digitar_como_humano(chrome.wait_for_element('#password'), senha)
                print(senha)
                #chrome.wait_for_element('#password').send_keys(senha)
                time.sleep(1)
                chrome.js_click('id','terms-of-service')
                time.sleep(1)
                chrome.wait_for_element('button[name=action]').click()
                chrome.reconnect(15)
                time.sleep(1)
                
                chrome.wait_for_element('#verification_code', timeout=60)
                time.sleep(3)
                print('Esperando código')
                # Get the content of a specific email (ID=2)
                codigo = None
                tentativa = 1
                while True:
                    email_list = client.get_mail_list(email)
                    time.sleep(10)
                    # Acessando a lista de mensagens
                    message_list = email_list.get('messageData', [])
                    # Verificando se há mensagens na lista
                    message_list = email_list.get('messageData', [])
                    # Verificando se há mensagens na lista
                    id_msg = 0
                    if message_list:
                        for message in message_list:
                            # Acessando o assunto da mensagem
                            subject = message.get('from', '')
                            id_msg += 1
                            # Verificar se o assunto contém '2nr'
                            if 'Twilio' in subject:
                                break
                            else:
                                print("Aguardando código...")
                    email_list = client.get_mail_list(email)
                    if 'Twilio' in subject:
                        break
                    else:
                        tentativa += 1
                        if tentativa == 10:
                            raise Exception('Email não chegou.')
                email_content = client.get_mail_content(
                    email, id=id_msg)
                match = re.search(r'\b[A-Z0-9]{6}\b', email_content)
                soup = BeautifulSoup(email_content, 'html.parser')

                # Encontrando o elemento com id "verification-code"
                verification_code_element = soup.find(id="verification-code")

                # Extraindo o texto do elemento
                if verification_code_element:
                    verification_code = verification_code_element.get_text()
                    print("Verification Code:", verification_code)
                else:
                    print("Verification code not found.")
                window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Email verificado')
                window.Refresh()
                digitar_como_humano(chrome.wait_for_element('#verification_code'), verification_code)
                #chrome.wait_for_element('#verification_code').send_keys(verification_code)
                chrome.wait_for_element("//span[text()='Verify']").click()
                chrome.wait_for_element('button[data-testid=country-reset-button]', timeout=60)
                time.sleep(4)
                chrome.wait_for_element('button[data-testid=country-reset-button]', timeout=30).click()
                time.sleep(2)
                #digitar_como_humano(chrome.wait_for_element('#downshift-1-menu'), "+48")
                chrome.wait_for_element('#downshift-1-input').send_keys("+48")
                time.sleep(1)
                chrome.wait_for_element('#downshift-1-menu').click()
                digitar_como_humano(chrome.wait_for_element('input[name=phoneNumber]'), num)
                time.sleep(3)
                #chrome.wait_for_element('input[name=phoneNumber]').send_keys(f"{num}")
                chrome.wait_for_element("//span[text()='Send code via SMS']").click()
                chrome.wait_for_element("//span[text()='Enter verification code']", timeout=30)
                window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código')
                window.Refresh()
                d.app_start("pl.rs.sip.softphone.newapp")
                time.sleep(5)
                if d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').exists:
                    print('2NR deslogou')
                    d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(timeout=60)
                    time.sleep(5)

                    d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email2nr)
                    time.sleep(0.5)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha2nr)
                    time.sleep(0.5)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                    time.sleep(3)

                d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()


                try:
                    cod = d(
                        resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=60)

                except:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido')
                    window.Refresh()
                    d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click(timeout=30)
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                    d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                    d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                    window.Refresh()
                    raise Exception('Código não recebido')
                
                cod = cod.replace(' ', '')
                codigo = re.sub('[^0-9]', '', cod)[:6]
                code2nr = codigo
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                window.Refresh()
                d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonSettings').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                digitar_como_humano(chrome.wait_for_element('input[name=verificationCode]'), code2nr)
                time.sleep(2)
                #chrome.wait_for_element('input[name=verificationCode]').send_keys(f"{code2nr}")
                chrome.js_click("//span[text()='Verify']")
                chrome.reconnect(3)
                d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click(timeout=30)
                time.sleep(4)
                d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                window.Refresh()
                recovery_code = chrome.wait_for_element('input[data-testid=recovery-code]', timeout=30)
                recovery_code = recovery_code.get_attribute('value')
                print(recovery_code)
                chrome.js_click("//span[text()='Continue']")
                chrome.disconnect()
                chrome.reconnect(timeout=15)
                try:
                    chrome.wait_for_element("//span[text()='What do you plan to build with Twilio?']",timeout=80)
                except Exception as e:
                    if chrome.wait_for_element("//h1[text()='Verify your phone number']"):
                        print('Verificando com novo número')
                        d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonSettings').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        try:
                            num = d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat/android.widget.LinearLayout/android.widget.TextView[1]').get_text()
                            num = num.replace(' ', '')
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Número novo: +48{num}')
                            window.Refresh()
                            email = num
                        except Exception as e:
                            print(e)
                        chrome.wait_for_element('button[data-testid=country-reset-button]').click()
                        chrome.wait_for_element('#downshift-8-input').send_keys("+48")
                        chrome.wait_for_element('#downshift-8-menu').click()
                        chrome.wait_for_element('input[id=phone-input-mobile]').send_keys(f"{num}")
                        chrome.js_click("//span[text()='Send Verification Code']")
                        chrome.reconnect(timeout=10)
                        chrome.wait_for_element("//h1[text()='Enter verification code']")
                        
                        d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()


                        try:
                            cod = d(
                                resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=60)

                        except:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido')
                            window.Refresh()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click(timeout=30)
                            time.sleep(1)
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                            window.Refresh()
                            raise Exception('Código não recebido')
                        
                        cod = cod.replace(' ', '')
                        codigo = re.sub('[^0-9]', '', cod)[:6]
                        code2nr = codigo

                        chrome.wait_for_element('input[id=phone-code-input-mobile]').send_keys(f"{codigo}")
                        chrome.js_click("//span[text()='Submit']")
                        chrome.reconnect(timeout=10)
                        try:
                            chrome.wait_for_element("//span[text()='What do you plan to build with Twilio?']",timeout=60)
                        except:
                            print('Não foi possivel criar a conta')
                            raise Exception('Não foi possivel criar a conta')
                    elif chrome.wait_for_element("//p[text()='We are sorry that something went wrong, let’s get you up and running!"):
                        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta bloqueada')
                        window.Refresh()
                        print('Conta bloqueada')
                        raise Exception('Conta bloqueada')
                    else:
                        print('Tentando logar')
                        chrome.wait_for_element('#email').send_keys(email)
                        chrome.js_click("//div[text()='Continue']")
                        chrome.switch_to_frame(
                            'iframe[id^="cf-chl"]')
                        chrome.driver.uc_click(
                            'span')
                        chrome.switch_to_default_content()
                        chrome.wait_for_element('#password').send_keys(senha)

                    
                print('Conta criada com sucesso')
                window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                window.Refresh()
                contagem += 1
                window['criadas'].update(contagem)
                window.Refresh()
                chrome.wait_for_element("input[id=downshift-0-input]").click()
                chrome.wait_for_element("input[id=downshift-0-input]").send_keys(Keys.DOWN)
                chrome.wait_for_element("input[id=downshift-0-input]").send_keys(Keys.ENTER)
                chrome.wait_for_element("/html/body/div[1]/div/div[2]/div[2]/div[1]/div/div/div[3]/div/fieldset/div/div[4]").click()
                chrome.wait_for_element("/html/body/div[1]/div/div[2]/div[2]/div[2]/div/div/div/div/fieldset/div/div[3]").click()
                chrome.wait_for_element("//label[contains(., 'What is your goal today?')]/following-sibling::div//input").click()
                chrome.wait_for_element("//label[contains(., 'What is your goal today?')]/following-sibling::div//input").send_keys(Keys.DOWN)
                chrome.wait_for_element("//label[contains(., 'What is your goal today?')]/following-sibling::div//input").send_keys(Keys.ENTER)
                chrome.js_click("//span[text()='Get Started with Twilio']")
                sid = chrome.wait_for_element('input[data-testid=account-sid-input-value]', timeout=120)
                sid = sid.get_attribute('value')
                print(sid)
                chrome.js_click("//span[text()='Show']")
                token = chrome.wait_for_element('input[data-testid=auth-token-input-value]', timeout=30)
                token = token.get_attribute('value')
                print(token)
                try:
                    arquivo = open(
                        'configuracoes/contas/twilio.txt', 'x')
                except FileExistsError:
                    arquivo = open(
                        'configuracoes/contas/twilio.txt', 'a')
                arquivo.write(sid + ' ' + token + "\n")
                arquivo.close()
        except Exception as e:
            sms = True
            if not str(e) == '':
                traceback.print_exc()

pool = concurrent.futures.ThreadPoolExecutor()
while True:
    try:
        with open("config.json", "r") as f:
            config = json.load(f)
    except FileNotFoundError:
        config = {}
    event, values = inicio.read()

    if event == sg.WINDOW_CLOSED:
        break

    if event == 'CREATOR':
        dialog_layout = [
            [sg.Text('Digite a porta:', font=('Open Sans', 10))],
            [sg.Input(key='port', font=('Open Sans', 10))],
            [sg.Radio('Emulador', 'dispositivo', key='-emulador-', default=True),
             sg.Radio('Celular', 'dispositivo', key='-celular-')],
            [sg.Button('Avançar', font=('Open Sans', 10), button_color='#1c2024'),
             sg.Button('?', button_color=('white', sg.theme_background_color()), border_width=0,
                       tooltip='Mostrar dispositivos')]
        ]
        try:
            state = config['fixtop']
            if state:
                dialog_window = sg.Window(
                    'Digite a porta do emulador.', dialog_layout, keep_on_top=True)
            else:
                dialog_window = sg.Window(
                    'Digite a porta do emulador.', dialog_layout, keep_on_top=False)
        except:
            dialog_window = sg.Window(
                'Digite a porta do emulador.', dialog_layout, keep_on_top=False)

        # Loop principal da janela de diálogo
        while True:
            dialog_event, dialog_values = dialog_window.read()

            # Finaliza a janela de diálogo se o usuário fechar a janela
            if dialog_event == sg.WINDOW_CLOSED:
                break
            if dialog_event == '?':
                def get_adb_devices():
                    processo = subprocess.Popen(['adb', 'devices'], stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                                                text=True)
                    saida, erro = processo.communicate()
                    saida = saida.replace('List of devices attached\n', '')
                    return erro if erro else saida
                    # Conteúdo para o pop-up

                adb_output = get_adb_devices()

                # Layout do pop-up com texto selecionável
                popup_layout = [
                    [sg.Text('Dispositivos:', font=('Open Sans', 10))],
                    [sg.Multiline(adb_output, size=(20, 4), disabled=True)],
                    [sg.Button('Fechar', font=('Open Sans', 10), button_color='#1c2024')]]
                sg.Window('...', popup_layout).read(close=True)
            # Avança para a janela principal se o usuário clicar no botão
            if dialog_event == 'Avançar':
                if dialog_values['-emulador-']:
                    port = dialog_values['port']
                    porta = f'127.0.0.1:{port}'
                elif dialog_values['-celular-']:
                    porta = dialog_values['port']

                break

        dialog_window.close()
        port = porta
        time_img = 'storage\\img\\time.png'
        url = "https://i.ibb.co/5vJ5sQz/time.png"
        filename = 'time.png'
        # Diretório onde você deseja verificar a existência do arquivo
        diretorio = 'storage/img/'

        caminho_arquivo = os.path.join(diretorio, filename)

        if not os.path.exists(caminho_arquivo):
            response = requests.get(url)

            if response.status_code == 200:
                image_content = response.content

                with open(caminho_arquivo, 'wb') as image_file:
                    image_file.write(image_content)
                print("Imagem baixada com sucesso.")
            else:
                print("Falha ao baixar a imagem.")
        else:
            pass

        layout = [
            [
                sg.Frame('WNx3 CREATOR', [
                    [sg.Multiline(font=('Open Sans', 10),
                                  key='output', size=(50, 15), disabled=True)]
                ], border_width=5, title_location='n')
            ],
            [
                sg.Button('Executar', button_color='#1c2024'),
                sg.Button('Configurações', key='-config-',
                          button_color='#1c2024'),
                sg.Image(filename=check_img, pad=((40, 0), 0)
                         ), sg.Text('0', key='total'),
                sg.Image(filename=criada_img, pad=((0, 0), 0)
                         ), sg.Text('0', key='criadas'),
                sg.Image(filename=time_img, pad=((0, 0), 0)), sg.Text(
                    "00:00:00", key="-TIME-", pad=((0, 0), 0))
            ]
        ]
        try:
            state = config['fixtop']
            if state:
                window = sg.Window(
                    f'CREATOR WNx3 | Porta: {porta}', layout, keep_on_top=True)
            else:
                window = sg.Window(
                    f'CREATOR WNx3 | Porta: {porta}', layout, keep_on_top=False)
        except:
            window = sg.Window(
                f'CREATOR WNx3 | Porta: {porta}', layout, keep_on_top=False)

        inicio.close()
        while True:
            global parar
            minha_thread = None
            parar = False
            event, values = window.read()

            # Finaliza a janela se o usuário fechar a janela
            if event == sg.WINDOW_CLOSED:

                parar = True
                time_thread.join()
                try:
                    chrome.close()
                except:
                    pass
                try:
                    chrome.quit()
                except:
                    pass
                minha_thread.join()
                try:
                    chrome.quit()
                except:
                    pass
                break

            # Executa o código e atualiza a saída na Multiline em tempo real
            if event == 'Executar':
                contagem = 0
                running = True

                def format_time(seconds):
                    hours = seconds // 3600
                    minutes = (seconds % 3600) // 60
                    seconds = seconds % 60
                    return f"{hours:02d}:{minutes:02d}:{seconds:02d}"

                #

                def update_time(window):
                    start_time = time.time()  # Armazena o tempo inicial
                    while running:
                        current_time = time.time() - start_time
                        window["-TIME-"].update(format_time(int(current_time)))
                        window['criadas'].update(contagem)
                        window.refresh()  # Atualiza a interface do usuário

                time_thread = threading.Thread(
                    target=update_time, args=(window,))
                time_thread.start()
                # tentativa = False
                if not os.path.exists("credentials.json"):
                    # se o arquivo não existe, pede o nome do arquivo ao usuário e armazena em uma variável global
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nenhum credentials.json encontrado.')
                    window.Refresh()
                    time.sleep(200)
                else:
                    pass
                try:
                    with open("config.json", "r") as f:
                        config = json.load(f)
                except FileNotFoundError:
                    config = {}

                if 'senha' not in config or config['maquina'] == '':
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Configure o bot primeiro.')
                    window.Refresh()
                    time.sleep(200)
                if '2nr' not in config or config['maquina'] == '':
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Configure o bot primeiro.')
                    window.Refresh()
                    time.sleep(200)
                if config['email'] == '-mailtm-':
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Email selecionado: Mail.TM')
                    window.Refresh()
                    minha_thread = threading.Thread(target=executar_mailtm)
                    minha_thread.start()
                elif config['email'] == '-minuteinbox-':
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Email selecionado: MinuteInBox')
                    window.Refresh()
                    minha_thread = threading.Thread(
                        target=executar_minuteinbox)
                    minha_thread.start()
                elif config['email'] == '-2nr-' and config['app'] == '-instalite-':
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] 2NR selecionado.')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Instagram Lite selecionado.')
                    window.Refresh()
                    minha_thread = threading.Thread(target=executar_2nr)
                    minha_thread.start()
                elif config['email'] == '-2nr-' and config['app'] == '-insta-':
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] 2NR selecionado.')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Instagram selecionado.')
                    window.Refresh()
                    minha_thread = threading.Thread(target=executar_2nr_insta)
                    minha_thread.start()

                elif config['email'] == '-instaface-':
                    window['Executar'].update(disabled=True)
                    window.Refresh()
                    try:
                        with open('configuracoes\\config3.json', 'r') as file:
                            config2 = json.load(file)
                    except FileNotFoundError:
                        config2 = {}

                    dialog_layout = [
                        [sg.Radio('Criar Facebook', 'RADIO1', key='-instaface_criarface-',
                                  default=config2.get("metodo", "") == "-instaface_criarface-"),
                         sg.Radio('Criar Instagram', 'RADIO1', key='-instaface_criarinsta-',
                                  default=config2.get("metodo", "") == "-instaface_criarinsta-")],
                        [sg.Button('Executar', button_color='#1c2024')]
                    ]

                    try:
                        with open('configuracoes\\config3.json', 'r') as file:
                            config2 = json.load(file)
                    except FileNotFoundError:
                        config2 = {}

                    try:
                        state = config['fixtop']
                        if state:
                            dialog_window = sg.Window(
                                'Selecione a opção:', dialog_layout, keep_on_top=True)
                        else:
                            dialog_window = sg.Window(
                                'Selecione a opção:', dialog_layout, keep_on_top=False)
                    except:
                        dialog_window = sg.Window(
                            'Selecione a opção:', dialog_layout, keep_on_top=False)

                    # Loop principal da janela de diálogo
                    while True:
                        dialog_event, dialog_values = dialog_window.read()

                        # Finaliza a janela de diálogo se o usuário fechar a janela
                        if dialog_event == sg.WINDOW_CLOSED:
                            break

                        # Avança para a janela principal se o usuário clicar no botão
                        if dialog_event == 'Executar':
                            if dialog_values['-instaface_criarface-']:
                                metodo = '-instaface_criarface-'
                            elif dialog_values['-instaface_criarinsta-']:
                                metodo = '-instaface_criarinsta-'
                            config2 = {
                                "metodo": metodo
                            }
                            # Salva os valores no arquivo JSON
                            with open('configuracoes\\config3.json', 'w') as file:
                                json.dump(config2, file)

                            dialog_window.close()

                        if config2['metodo'] == '-instaface_criarface-':
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] InstaFace - Criar Facebook selecionado.')
                            window.Refresh()
                            try:
                                with open('configuracoes\\config4.json', 'r') as file:
                                    config4 = json.load(file)
                            except FileNotFoundError:
                                config4 = {}
                            vpn_list = ["Nenhuma", "AVG", "Avast", "SurfShark", "ExpressVPN", "PiaVPN", "BetterNet",
                                        "NordVPN", "CyberGhost",
                                        "HotspotShield", "HmaVPN", "WindscribeVPN"]
                            dialog_layout = [
                                [sg.Radio('4g', 'RADIO1', key='-4g-', default=config4.get("metodo", "") == "-4g-"),
                                 sg.Radio('VPN', 'RADIO1', key='-vpn-', default=config4.get("metodo", "") == "-vpn-")],
                                [sg.HorizontalSeparator()],
                                [sg.Combo(vpn_list, default_value=config4.get("metodo", ""), readonly=True,
                                          key='-vpnlista-', visible=False)],
                                [sg.Button('Executar', button_color='#1c2024')]
                            ]

                            # Criação da janela de diálogo
                            state = config.get('fixtop', False)
                            dialog_window = sg.Window(
                                'Selecione a opção:', dialog_layout, keep_on_top=state)

                            # Loop principal da janela de diálogo
                            while True:
                                dialog_event, dialog_values = dialog_window.read(
                                    timeout=100)
                                # Se o botão de rádio '4g' for selecionado
                                if dialog_values['-4g-']:
                                    dialog_window['-vpnlista-'].update(
                                        visible=False)

                                elif dialog_values['-vpn-']:
                                    dialog_window['-vpnlista-'].update(
                                        visible=True)

                                if dialog_event == sg.WINDOW_CLOSED:
                                    break

                                if dialog_event == 'Executar':
                                    if dialog_values['-4g-']:
                                        ip = '-4g-'
                                    elif dialog_values['-vpn-']:
                                        ip = dialog_values['-vpnlista-']
                                    config4 = {"metodo": ip}
                                    with open('configuracoes\\config4.json', 'w') as file:
                                        json.dump(config4, file)
                                    break

                            dialog_window.close()
                            minha_thread = threading.Thread(
                                target=instaface_criarface)
                            minha_thread.start()
                        elif config2['metodo'] == '-instaface_criarinsta-':
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] InstaFace - Criar Instagram selecionado.')
                            window.Refresh()

                            def create_dialog_window():
                                layout = [
                                    # Campo de texto multiline
                                    [sg.Multiline(
                                        key='-MULTILINE-', size=(40, 10))],
                                    [sg.Checkbox(
                                        "Navegador oculto", key="-navvisivel-", enable_events=True)],
                                    [sg.Button('Executar', button_color='#1c2024'),
                                     sg.Button('Cancelar', button_color='#1c2024')]  # Botões Executar e Cancelar
                                ]

                                return sg.Window('Adicione as contas', layout, modal=True)

                            # Criar a janela de diálogo
                            dialog_window = create_dialog_window()

                            # Loop de eventos
                            while True:
                                event, values = dialog_window.read()

                                # Verificar ação do usuário
                                if event == sg.WIN_CLOSED or event == 'Cancelar':
                                    break
                                elif event == 'Executar':
                                    # Salvar o texto digitado em uma variável
                                    texto_digitado = values['-MULTILINE-']
                                    navvisivel = values['-navvisivel-']
                                    # Exibir o texto (opcional)
                                    print("Contas:", texto_digitado)
                                    break

                            # Fechar a janela de diálogo
                            dialog_window.close()
                            minha_thread = threading.Thread(
                                target=instaface_criarinsta, args=(), daemon=True)
                            minha_thread.start()
                elif config['email'] == '-freesms-' and config['app'] == '-insta-':
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Free SMS selecionado.')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Instagram selecionado.')
                    window.Refresh()
                    minha_thread = threading.Thread(target=free_sms)
                    minha_thread.start()
                elif config['email'] == '-freesmsbeta-' and config['app'] == '-instalite-':
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Free SMS BETA selecionado.')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Instagram Lite selecionado.')
                    window.Refresh()
                    minha_thread = threading.Thread(target=free_sms_lite)
                    minha_thread.start()
                elif config['email'] == '-liteemail-':
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] LITE + EMAIL selecionado.')
                    window.Refresh()
                    minha_thread = threading.Thread(target=creator_LITE_EMAIL)
                    minha_thread.start()
                elif config['email'] == '-cloneremail-':
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] CLONER + EMAIL selecionado.')
                    window.Refresh()
                    minha_thread = threading.Thread(target=creator_CLONER_EMAIL)
                    minha_thread.start()
                elif config['email'] == '-2nrv2-':
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] 2NRv2 selecionado.')
                    window.Refresh()
                    minha_thread = threading.Thread(target=creator_2NRv2)
                    minha_thread.start()
                elif config['email'] == '-twilio-':
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] TWILIO selecionado.')
                    window.Refresh()
                    minha_thread = threading.Thread(target=creator_TWILIO_INSTA)
                    minha_thread.start()
                elif config['email'] == '-clonernum-':
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] CLONER + NUM selecionado.')
                    window.Refresh()
                    minha_thread = threading.Thread(target=creator_CLONER_NUM)
                    minha_thread.start()
                elif config['email'] == '-freesmsbeta-' and config['app'] == '-insta-':
                    window['Executar'].update(disabled=True)
                    window.Refresh()
                    try:
                        with open('configuracoes\\config3.json', 'r') as file:
                            config2 = json.load(file)
                    except FileNotFoundError:
                        config2 = {}

                    # Define o layout da janela de diálogo
                    lista_site = ['quackr.io', 'receive-smss.com',
                                  'freereceivesms.com', 'temporary-phone-number.com']
                    if user_mysql == "wn3" or user_mysql == "mb":
                        lista_site.append("smstome.com")
                    dialog_layout = [
                        [sg.Text('Provedor: ', font=('Open Sans', 12)),
                         sg.Combo(lista_site, default_value=config2.get("site_escolhido", ""), readonly=True,
                                  key='-site_escolhido-')],
                        [sg.Button('Executar', button_color='#1c2024')]
                    ]

                    dialog_window = sg.Window(
                        '...', dialog_layout, keep_on_top=False)

                    # Loop principal da janela de diálogo
                    while True:
                        dialog_event, dialog_values = dialog_window.read()

                        # Finaliza a janela de diálogo se o usuário fechar a janela
                        if dialog_event == sg.WINDOW_CLOSED:
                            raise Exception("Janela fechada")

                        # Avança para a janela principal se o usuário clicar no botão
                        if dialog_event == 'Executar':
                            config2 = {
                                "site_escolhido": dialog_values['-site_escolhido-']
                            }
                            with open('configuracoes\\config3.json', 'w') as file:
                                json.dump(config2, file)
                            break
                    dialog_window.close()
                    site_escolhido = config2['site_escolhido']
                    if site_escolhido == "quackr.io":
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Quackr.io selecionado.')
                        window.Refresh()
                        minha_thread = threading.Thread(target=quackr_io)
                        minha_thread.start()
                    if site_escolhido == "receive-smss.com":
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] receive-smss.com selecionado.')
                        window.Refresh()
                        minha_thread = threading.Thread(target=receive_smss)
                        minha_thread.start()
                    if site_escolhido == "freereceivesms.com":
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] freereceivesms.com selecionado.')
                        window.Refresh()
                        minha_thread = threading.Thread(
                            target=freereceivesms_com)
                        minha_thread.start()
                    if site_escolhido == "temporary-phone-number.com":
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] temporary-phone-number.com selecionado.')
                        window.Refresh()
                        minha_thread = threading.Thread(
                            target=temporary_phone_number_com)
                        minha_thread.start()
                    if site_escolhido == "smstome.com":
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] smstome.com selecionado.')
                        window.Refresh()
                        minha_thread = threading.Thread(target=smstome_com)
                        minha_thread.start()

                elif config['email'] == '-freesmsnav-':
                    window['Executar'].update(disabled=True)
                    window.Refresh()
                    try:
                        with open('configuracoes\\config7.json', 'r') as file:
                            config7 = json.load(file)
                    except FileNotFoundError:
                        config7 = {}

                    lista_site = ['Aleatório', 'quackr.io', 'temporary-phone-number.com', 'smstome.com']
                    vpn_list = ["Aleatorio", "SurfShark", "TouchVPN", "CyberGhost", "ZenMate", "PlanetVPN", "VeePN", "Troywell","UrbanVPN"]
                    dialog_layout = [
                        [sg.Text('Provedor: ', font=('Open Sans', 12)),
                         sg.Combo(lista_site, default_value=config7.get("site_escolhido", ""), readonly=True,
                                  key='-site_escolhido-')],
                        [sg.Checkbox('Usar essa aba como troca de IP', key='-troca_ip-',
                                     default=config7.get('usar_troca_ip', False))],
                        [sg.Combo(vpn_list, default_value=config7.get("metodo", ""), readonly=True,
                                  key='-vpnlista-', visible=False)],
                        [sg.InputText(key="-emailvpn-", visible=False,
                                      default_text=config7.get("emailvpn", "Email VPN"))],
                        [sg.InputText(key="-senhavpn-", visible=False,
                                      default_text=config7.get("senhavpn", "Senha VPN"))],
                        [sg.Checkbox('Navegador oculto', key='-navegador_oculto-',
                                     default=config7.get('navegador_oculto', False))],
                        [sg.Button('Executar', button_color='#1c2024')]
                    ]

                    dialog_window = sg.Window(
                        '...', dialog_layout, keep_on_top=False)

                    # Loop principal da janela de diálogo
                    while True:
                        dialog_event, dialog_values = dialog_window.read(timeout=100)

                        # Finaliza a janela de diálogo se o usuário fechar a janela
                        if dialog_event == sg.WINDOW_CLOSED:
                            raise Exception("Janela fechada")
                        if dialog_values['-troca_ip-']:
                            dialog_window['-vpnlista-'].update(
                                visible=True)
                            dialog_window['-emailvpn-'].update(
                                visible=True)
                            dialog_window['-senhavpn-'].update(
                                visible=True)
                        elif not dialog_values['-troca_ip-']:
                            dialog_window['-vpnlista-'].update(
                                visible=False)
                            dialog_window['-emailvpn-'].update(
                                visible=False)
                            dialog_window['-senhavpn-'].update(
                                visible=False)
                        # Avança para a janela principal se o usuário clicar no botão
                        if dialog_event == 'Executar':
                            if dialog_values['-troca_ip-']:
                                ip = dialog_values['-vpnlista-']
                            config7 = {
                                "site_escolhido": dialog_values['-site_escolhido-'],
                                "usar_troca_ip": dialog_values['-troca_ip-'],
                                "navegador_oculto": dialog_values['-navegador_oculto-'],
                                "emailvpn": dialog_values['-emailvpn-'],
                                "senhavpn": dialog_values['-senhavpn-'],
                                "metodo": ip
                            }
                            with open('configuracoes\\config7.json', 'w') as file:
                                json.dump(config7, file)
                            break
                    dialog_window.close()
                    site_escolhido = config7['site_escolhido']
                    window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] {site_escolhido} selecionado.')
                    window.Refresh()
                    vpn_nav = dialog_values['-vpnlista-']
                    minha_thread = threading.Thread(target=creator_FREESMS_NAV)
                    minha_thread.start()
                    

                elif config['email'] == '-5sim-':
                    window['Executar'].update(disabled=True)
                    window.Refresh()
                    try:
                        with open('configuracoes\\config5.json', 'r') as file:
                            config5 = json.load(file)
                    except FileNotFoundError:
                        config5 = {}

                    dialog_layout = [
                        [sg.Text('Token do 5sim: ', font=('Open Sans', 12)),
                         sg.InputText(default_text=config5.get("5simapi", ""), readonly=False, key='-5simapi-')],
                        [sg.Button('Executar', button_color='#1c2024')]
                    ]

                    dialog_window = sg.Window(
                        '...', dialog_layout, keep_on_top=False)

                    # Loop principal da janela de diálogo
                    while True:
                        dialog_event, dialog_values = dialog_window.read()

                        # Finaliza a janela de diálogo se o usuário fechar a janela
                        if dialog_event == sg.WINDOW_CLOSED:
                            raise Exception("Janela fechada")

                        # Avança para a janela principal se o usuário clicar no botão
                        if dialog_event == 'Executar':
                            config5 = {
                                "5simapi": dialog_values['-5simapi-']
                            }
                            with open('configuracoes\\config5.json', 'w') as file:
                                json.dump(config5, file)
                            break
                    dialog_window.close()
                    fivesimapi = config5['5simapi']
                    minha_thread = threading.Thread(target=insta_5sim_normal)
                    minha_thread.start()

                elif config['email'] == '-2nrnav-':
                    window['Executar'].update(disabled=True)
                    window.Refresh()
                    try:
                        with open('configuracoes\\config6.json', 'r') as file:
                            config6 = json.load(file)
                    except FileNotFoundError:
                        config6 = {}
                    vpn_list = ["Aleatorio", "SurfShark", "TouchVPN", "CyberGhost", "ZenMate", "PlanetVPN", "VeePN", "Troywell","UrbanVPN"]
                    dialog_layout = [
                        [sg.Checkbox('Usar essa aba como troca de IP', key='-troca_ip-',
                                     default=config6.get('usar_troca_ip', False))],
                        [sg.Combo(vpn_list, default_value=config6.get("metodo", ""), readonly=True,
                                  key='-vpnlista-', visible=False)],
                        [sg.InputText(key="-emailvpn-", visible=False,
                                      default_text=config6.get("emailvpn", "Email VPN"))],
                        [sg.InputText(key="-senhavpn-", visible=False,
                                      default_text=config6.get("senhavpn", "Senha VPN"))],
                        [sg.Checkbox('Navegador oculto', key='-navegador_oculto-',
                                     default=config6.get('navegador_oculto', False))],
                        [sg.Checkbox('Criar por cima', key='-criar_por_cima-', visible=True,
                                     default=config6.get('criar_por_cima', False))],
                        [sg.Button('Executar', button_color='#1c2024')]
                    ]

                    dialog_window = sg.Window(
                        '...', dialog_layout, keep_on_top=False)

                    # Loop principal da janela de diálogo
                    while True:
                        dialog_event, dialog_values = dialog_window.read(
                            timeout=100)

                        # Finaliza a janela de diálogo se o usuário fechar a janela
                        if dialog_event == sg.WINDOW_CLOSED:
                            raise Exception("Janela fechada")
                        if dialog_values['-troca_ip-']:
                            dialog_window['-vpnlista-'].update(
                                visible=True)
                            dialog_window['-emailvpn-'].update(
                                visible=True)
                            dialog_window['-senhavpn-'].update(
                                visible=True)
                        elif not dialog_values['-troca_ip-']:
                            dialog_window['-vpnlista-'].update(
                                visible=False)
                            dialog_window['-emailvpn-'].update(
                                visible=False)
                            dialog_window['-senhavpn-'].update(
                                visible=False)

                        # Avança para a janela principal se o usuário clicar no botão
                        if dialog_event == 'Executar':
                            if dialog_values['-troca_ip-']:
                                ip = dialog_values['-vpnlista-']
                            config6 = {
                                "usar_troca_ip": dialog_values['-troca_ip-'],
                                "navegador_oculto": dialog_values['-navegador_oculto-'],
                                "criar_por_cima": dialog_values['-criar_por_cima-'],
                                "emailvpn": dialog_values['-emailvpn-'],
                                "senhavpn": dialog_values['-senhavpn-'],
                                "metodo": ip
                            }

                            with open('configuracoes\\config6.json', 'w') as file:
                                json.dump(config6, file)
                            vpn_nav = dialog_values['-vpnlista-']
                            break
                    dialog_window.close()
                    emailvpn = dialog_values['-emailvpn-']
                    senhavpn = dialog_values['-senhavpn-']
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando 2NR + NAV.')
                    window.Refresh()
                    minha_thread = threading.Thread(target=creator_2NR_NAV)
                    minha_thread.start()

            if event == 'clear':
                window['output'].update('')
                if not os.path.exists("credentials.json"):
                    # se o arquivo não existe, pede o nome do arquivo ao usuário e armazena em uma variável global
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nenhum credentials.json encontrado.')
                    window.Refresh()
                    time.sleep(200)
                else:
                    pass
                if 'senha' not in config or config['maquina'] == '':
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Configure o bot primeiro.')
                    window.Refresh()
                    time.sleep(200)
            if event == '-config-':
                if os.path.exists('beta'):
                    beta_folder_exists = True
                else:
                    beta_folder_exists = False
                if os.path.exists('wn3'):
                    wn3_folder_exists = True
                else:
                    wn3_folder_exists = False
                if user_mysql == "wn3" or user_mysql == "mb":
                    privado = True
                else:
                    privado = False
                layout_configuracoes = [
                    [sg.Text("Senha dos perfis: ", font=('Open Sans', 12)),
                     sg.InputText(key="-senha-", default_text=config.get("senha", ""))],
                    [sg.Text('VPN: ', font=('Open Sans', 12)),
                     sg.Combo(vpn_list, default_value=config.get("vpn", ""), readonly=True, key='-vpn-')],
                    # sg.OptionMenu(vpn_list, size=(7, 19), key="-vpn-", default_value=config.get("vpn", ""))],
                    [sg.Text('Email ou número: ', font=('Open Sans', 12)),
                     sg.Radio('Mail.TM', 'RADIO1', key='-mailtm-',
                              default=config.get("email", "") == "-mailtm-"),
                     sg.Radio('MinuteInBox', 'RADIO1', key='-minuteinbox-',
                              default=config.get("email", "") == "-minuteinbox-"),
                     sg.Radio('2NR', 'RADIO1', key='-2nr-',
                              default=config.get("email", "") == "-2nr-"),
                     sg.Radio('2NRv2', 'RADIO1', key='-2nrv2-',
                              default=config.get("email", "") == "-2nrv2-"),
                     sg.Radio('TWILIO', 'RADIO1', key='-twilio-',
                              default=config.get("email", "") == "-twilio-"),
                     sg.Radio('InstaFace', 'RADIO1', key='-instaface-',
                              default=config.get("email", "") == "-instaface-")],
                     [sg.Radio('CLONER + EMAIL', 'RADIO1', key='-cloneremail-',
                              default=config.get("email", "") == "-cloneremail-"),
                     sg.Radio('CLONER + NUM', 'RADIO1', key='-clonernum-',
                              default=config.get("email", "") == "-clonernum-"),
                     sg.Radio('5sim.net', 'RADIO1', visible=privado, key='-5sim-',
                              default=config.get("email", "") == "-5sim-"),
                     sg.Radio('LITE + EMAIL', 'RADIO1', key='-liteemail-', visible=False,
                              default=config.get("email", "") == "-liteemail-"),
                     sg.Radio('2NR + NAV', 'RADIO1', key='-2nrnav-',
                              default=config.get("email", "") == "-2nrnav-"),
                     sg.Radio('Free SMS + NAV', 'RADIO1', visible=True, key='-freesmsnav-',
                              default=config.get("email", "") == "-freesmsnav-"),
                     sg.Radio('Free SMS2', 'RADIO1', visible=beta_folder_exists, key='-freesms-',
                              default=config.get("email", "") == "-freesms-"),
                     sg.Radio('Free SMS', 'RADIO1', visible=True, key='-freesmsbeta-',
                              default=config.get("email", "") == "-freesmsbeta-")],
                    [sg.Radio('Instagram Lite', 'RADIO2', key='-instalite-',
                              default=config.get("app", "") == "-instalite-"),
                     sg.Radio('Instagram', 'RADIO2', key='-insta-', default=config.get("app", "") == "-insta-")],
                    [sg.HorizontalSeparator()],
                    [sg.Text("Nome da maquina: "), sg.InputText(
                        key="maquina", default_text=config.get("maquina", ""))],
                    [sg.Text("SpreadsheetID: "),
                     sg.InputText(key="spreadsheet", default_text=config.get("spreadsheet", ""))],
                    [sg.Text("Planilha 2NR: "), sg.InputText(
                        key="2nr", default_text=config.get("2nr", ""))],
                    [sg.Button("Salvar", button_color='#1c2024'),
                     sg.Checkbox("Sempre no topo", key="-FIXED_TOP-", enable_events=True,
                                 default=config.get("fixtop", "")),
                     sg.Checkbox("Remover num e adicionar email (2NRv2)", key="-removenum_addemail-", enable_events=True,
                                 default=config.get("removenum_addemail", ""))]
                ]

                # Criar a janela da GUI de configuração
                try:
                    state = config['fixtop']
                    if state:
                        janela_configuracoes = sg.Window(
                            "Configurações", layout_configuracoes, keep_on_top=True)
                    else:
                        janela_configuracoes = sg.Window(
                            "Configurações", layout_configuracoes, keep_on_top=False)
                except:
                    janela_configuracoes = sg.Window(
                        "Configurações", layout_configuracoes, keep_on_top=False)
                while True:
                    # janela_configuracoes = sg.Window('Configurações', layout_configuracoes)
                    evento, valores = janela_configuracoes.read()

                    if evento == sg.WINDOW_CLOSED:
                        break

                    if evento == "Salvar":
                        janela_configuracoes.close()
                        if valores["-instalite-"]:
                            app = '-instalite-'
                        elif valores["-insta-"]:
                            app = '-insta-'
                        if valores["-mailtm-"]:
                            email = '-mailtm-'
                        elif valores['-minuteinbox-']:
                            email = '-minuteinbox-'
                        elif valores['-2nr-']:
                            email = '-2nr-'
                        elif valores['-2nrv2-']:
                            email = '-2nrv2-'
                        elif valores['-twilio-']:
                            email = '-twilio-'
                        elif valores['-instaface-']:
                            email = '-instaface-'
                        elif valores['-freesms-']:
                            email = '-freesms-'
                        elif valores['-freesmsbeta-']:
                            email = '-freesmsbeta-'
                        elif valores['-5sim-']:
                            email = '-5sim-'
                        elif valores['-2nrnav-']:
                            email = '-2nrnav-'
                        elif valores['-freesmsnav-']:
                            email = '-freesmsnav-'
                        elif valores['-liteemail-']:
                            email = '-liteemail-'
                        elif valores['-cloneremail-']:
                            email = '-cloneremail-'
                        elif valores['-clonernum-']:
                            email = '-clonernum-'

                        # Salvar as configurações em um arquivo JSON
                        config = {
                            "senha": valores["-senha-"],
                            "vpn": valores["-vpn-"],
                            "email": email,
                            "app": app,
                            "maquina": valores['maquina'],
                            "spreadsheet": valores['spreadsheet'],
                            "2nr": valores['2nr'],
                            "fixtop": valores['-FIXED_TOP-'],
                            "removenum_addemail": valores['-removenum_addemail-']

                        }
                        with open("config.json", "w") as f:
                            json.dump(config, f)
                        

        window.close()
        try:
            chrome.close()
        except:
            pass
        try:
            chrome.quit()
        except:
            pass
        minha_thread.join()
    if event == 'CREATOR 2NR':
        dialog_layout = [
            [sg.Text('Digite a porta:', font=('Open Sans', 10))],
            [sg.Input(key='port', font=('Open Sans', 10))],
            [sg.Radio('Emulador', 'dispositivo', key='-emulador-', default=True),
             sg.Radio('Celular', 'dispositivo', key='-celular-')],
            [sg.Button('Avançar', font=('Open Sans', 10), button_color='#1c2024'),
             sg.Button('?', button_color=('white', sg.theme_background_color()), border_width=0,
                       tooltip='Mostrar dispositivos')]
        ]
        try:
            state = config['fixtop']
            if state:
                dialog_window = sg.Window(
                    'Digite a porta do celular.', dialog_layout, keep_on_top=True)
            else:
                dialog_window = sg.Window(
                    'Digite a porta do celular.', dialog_layout, keep_on_top=False)
        except:
            dialog_window = sg.Window(
                'Digite a porta do celular.', dialog_layout, keep_on_top=False)

        # Loop principal da janela de diálogo
        while True:
            dialog_event, dialog_values = dialog_window.read()

            # Finaliza a janela de diálogo se o usuário fechar a janela
            if dialog_event == sg.WINDOW_CLOSED:
                break
            if dialog_event == '?':
                def get_adb_devices():
                    processo = subprocess.Popen(['adb', 'devices'], stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                                                text=True)
                    saida, erro = processo.communicate()
                    saida = saida.replace('List of devices attached\n', '')
                    return erro if erro else saida
                    # Conteúdo para o pop-up

                adb_output = get_adb_devices()

                # Layout do pop-up com texto selecionável
                popup_layout = [
                    [sg.Text('Dispositivos:', font=('Open Sans', 10))],
                    [sg.Multiline(adb_output, size=(20, 4), disabled=True)],
                    [sg.Button('Fechar', font=('Open Sans', 10), button_color='#1c2024')]]
                sg.Window('...', popup_layout).read(close=True)
            # Avança para a janela principal se o usuário clicar no botão
            # Avança para a janela principal se o usuário clicar no botão
            if dialog_event == 'Avançar':
                if dialog_values['-emulador-']:
                    port = dialog_values['port']
                    porta = f'127.0.0.1:{port}'
                elif dialog_values['-celular-']:
                    porta = dialog_values['port']

                break

        dialog_window.close()
        port = porta
        time_img = 'storage\\img\\time.png'
        url = "https://i.ibb.co/5vJ5sQz/time.png"
        filename = 'time.png'
        # Diretório onde você deseja verificar a existência do arquivo
        diretorio = 'storage/img/'

        caminho_arquivo = os.path.join(diretorio, filename)

        if not os.path.exists(caminho_arquivo):
            response = requests.get(url)

            if response.status_code == 200:
                image_content = response.content

                with open(caminho_arquivo, 'wb') as image_file:
                    image_file.write(image_content)
                print("Imagem baixada com sucesso.")
            else:
                print("Falha ao baixar a imagem.")
        else:
            pass

        layout = [
            [
                sg.Frame('WNx3 CREATOR', [
                    [sg.Multiline(font=('Open Sans', 10),
                                  key='output', size=(50, 15), disabled=True)]
                ], border_width=5, title_location='n')
            ],
            [
                sg.Button('Executar', button_color='#1c2024'),
                sg.Button('Configurações', key='-config-',
                          button_color='#1c2024'),
                sg.Image(filename=check_img, pad=((40, 0), 0)
                         ), sg.Text('0', key='total'),
                sg.Image(filename=criada_img, pad=((0, 0), 0)
                         ), sg.Text('0', key='criadas'),
                sg.Image(filename=time_img, pad=((0, 0), 0)), sg.Text(
                    "00:00:00", key="-TIME-", pad=((0, 0), 0))
            ]
        ]
        window = sg.Window(
            f'CREATOR 2NR WNx3 | Porta: {porta}', layout, keep_on_top=False)

        inicio.close()
        while True:
            global thread_parar
            minha_thread = None
            parar = False
            event, values = window.read()

            # Finaliza a janela se o usuário fechar a janela
            if event == sg.WINDOW_CLOSED:
                parar = True
                time_thread.join()
                break

            # Executa o código e atualiza a saída na Multiline em tempo real
            if event == 'Executar':
                try:
                    with open("config2nr.json", "r") as f:
                        config = json.load(f)
                except FileNotFoundError:
                    config = {}
                if config['opcao'] == '-criarnumeros-':
                    dialog_layout = [
                        [sg.Text('Insira as contas do 2NR:')],
                        [sg.Multiline(size=(50, 10), key='-linhas-')],
                        [sg.Button('Executar')]
                    ]
                    dialog_window = sg.Window(
                        'Insira as contas do 2NR', dialog_layout)
                    #
                    # Loop principal da janela de diálogo
                    while True:
                        dialog_event, dialog_values = dialog_window.read()
                        #
                        # Finaliza a janela de diálogo se o usuário fechar a janela
                        if dialog_event == sg.WINDOW_CLOSED:
                            break
                        #
                        # Avança para a janela principal se o usuário clicar no botão
                        if dialog_event == 'Executar':
                            linhas = dialog_values['-linhas-']
                            #
                            break

                    dialog_window.close()
                contagem = 0
                running = True

                def format_time(seconds):
                    hours = seconds // 3600
                    minutes = (seconds % 3600) // 60
                    seconds = seconds % 60
                    return f"{hours:02d}:{minutes:02d}:{seconds:02d}"

                #

                def update_time(window):
                    start_time = time.time()  # Armazena o tempo inicial
                    while running:
                        current_time = time.time() - start_time
                        window["-TIME-"].update(format_time(int(current_time)))
                        window.refresh()  # Atualiza a interface do usuário
                
                try:
                    with open('configuracoes\\config8.json', 'r') as file:
                        config8 = json.load(file)
                except FileNotFoundError:
                    config8 = {}
                try:
                    with open("config2nr.json", "r") as f:
                        config = json.load(f)
                except FileNotFoundError:
                    config = {}
                if config['email_escolhido'] == 'SmailProAPI':
                    dialog_layout = [
                            [sg.Text("API KEY", font=('Open Sans', 10)),
                            
                            sg.InputText(key="-apismailpro-",
                                        default_text=config8.get("apismailpro", "API KEY"))],
                            [sg.Button('Executar', button_color='#1c2024')]
                            ]
                        

                    dialog_window = sg.Window(
                        '...', dialog_layout, keep_on_top=False)

                    # Loop principal da janela de diálogo
                    while True:
                        dialog_event, dialog_values = dialog_window.read(timeout=100)

                        # Finaliza a janela de diálogo se o usuário fechar a janela
                        if dialog_event == sg.WINDOW_CLOSED:
                            raise Exception("Janela fechada")
                        if dialog_event == 'Executar':
                            config8 = {
                                "apismailpro": dialog_values['-apismailpro-']
                            }
                            with open('configuracoes\\config8.json', 'w') as file:
                                json.dump(config8, file)
                            break
                    dialog_window.close()
                    apismailpro = dialog_values['-apismailpro-']
                    print(f'Key: {apismailpro}')
                time_thread = threading.Thread(
                    target=update_time, args=(window,))
                time_thread.start()
                # tentativa = False
                if not os.path.exists("credentials.json"):
                    # se o arquivo não existe, pede o nome do arquivo ao usuário e armazena em uma variável global
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nenhum credentials.json encontrado.')
                    window.Refresh()
                    time.sleep(200)
                else:
                    pass

                contagem = 0
                thread_parar = False
                window['Executar'].update(disabled=True)
                window['output'].print(f'Bot iniciado.')
                window.Refresh()
                try:
                    with open("config2nr.json", "r") as f:
                        config = json.load(f)
                except FileNotFoundError:
                    config = {}

                minha_thread = threading.Thread(target=executar_creator_2nr)
                minha_thread.start()
            if event == 'clear':
                window['output'].update('')
                if not os.path.exists("credentials.json"):
                    # se o arquivo não existe, pede o nome do arquivo ao usuário e armazena em uma variável global
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nenhum credentials.json encontrado.')
                    window.Refresh()
                    time.sleep(200)
                else:
                    pass
                if 'senha' not in config or config['maquina'] == '':
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Configure o bot primeiro.')
                    window.Refresh()
                    time.sleep(200)
            if event == '-config-':
                if user_mysql == 'wn3':
                    estado_user = True
                else:
                    estado_user = True
                try:
                    with open("config2nr.json", "r") as f:
                        config = json.load(f)
                except FileNotFoundError:
                    config = {}
                email_list = ["wnmail.shop", "MailTM", "GuerrilaMail", "MinuteInBox", "1SecMail", "GmailTemp",
                              "GmailTemp2", "GmailTemp3", "SmailProAPI"]
                layout_configuracoes = [
                    [sg.Text("Senha dos perfis: ", font=('Open Sans', 12)),
                     sg.InputText(key="-senha2nr-", default_text=config.get("senha2nr", "@SenhaPadrao2023"))],
                    [sg.Text('VPN: ', font=('Open Sans', 12)),
                     sg.Combo(vpn_list, default_value=config.get("vpn", ""), readonly=True, key='-vpn-')],
                    [sg.Text('Email: ', font=('Open Sans', 12)),
                     sg.Combo(email_list, default_value=config.get("email_escolhido", ""), readonly=True,
                              key='-email_escolhido-')],
                    [sg.Radio('Criar contas do 2NR', 'RADIO1', key='-criarcontas-',
                              default=config.get("opcao", "") == "-criarcontas-"),
                     sg.Radio('Criar números', 'RADIO1', key='-criarnumeros-',
                              default=config.get("opcao", "") == "-criarnumeros-"),
                     sg.Radio('Ambos', 'RADIO1', key='-criarambos-', visible=estado_user,
                              default=config.get("opcao", "") == "-criarambos-")],
                    [sg.Button("Salvar")]
                ]

                # Criar a janela da GUI de configuração
                janela_configuracoes = sg.Window(
                    "Configurações", layout_configuracoes)

                while True:
                    # janela_configuracoes = sg.Window('Configurações', layout_configuracoes)
                    evento, valores = janela_configuracoes.read()

                    if evento == sg.WINDOW_CLOSED:
                        thread_parar = True
                        break

                    if evento == "Salvar":
                        if valores["-criarcontas-"]:
                            opcao = '-criarcontas-'
                        elif valores["-criarnumeros-"]:
                            opcao = '-criarnumeros-'
                        elif valores["-criarambos-"]:
                            opcao = '-criarambos-'
                        # Salvar as configurações em um arquivo JSON
                        config = {
                            "senha2nr": valores['-senha2nr-'],
                            "vpn": valores["-vpn-"],
                            "email_escolhido": valores["-email_escolhido-"],
                            "opcao": opcao
                        }
                        with open("config2nr.json", "w") as f:
                            json.dump(config, f)

                        # Atualizar os valores padrão dos campos na GUI de configuração
                    janela_configuracoes.close()
    if event == 'CREATOR TWILIO':
        dialog_layout = [
            [sg.Text('Digite a porta:', font=('Open Sans', 10))],
            [sg.Input(key='port', font=('Open Sans', 10))],
            [sg.Radio('Emulador', 'dispositivo', key='-emulador-', default=True),
             sg.Radio('Celular', 'dispositivo', key='-celular-')],
            [sg.Button('Avançar', font=('Open Sans', 10), button_color='#1c2024'),
             sg.Button('?', button_color=('white', sg.theme_background_color()), border_width=0,
                       tooltip='Mostrar dispositivos')]
        ]
        try:
            state = config['fixtop']
            if state:
                dialog_window = sg.Window(
                    'Digite a porta do celular.', dialog_layout, keep_on_top=True)
            else:
                dialog_window = sg.Window(
                    'Digite a porta do celular.', dialog_layout, keep_on_top=False)
        except:
            dialog_window = sg.Window(
                'Digite a porta do celular.', dialog_layout, keep_on_top=False)

        # Loop principal da janela de diálogo
        while True:
            dialog_event, dialog_values = dialog_window.read()

            # Finaliza a janela de diálogo se o usuário fechar a janela
            if dialog_event == sg.WINDOW_CLOSED:
                break
            if dialog_event == '?':
                def get_adb_devices():
                    processo = subprocess.Popen(['adb', 'devices'], stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                                                text=True)
                    saida, erro = processo.communicate()
                    saida = saida.replace('List of devices attached\n', '')
                    return erro if erro else saida
                    # Conteúdo para o pop-up

                adb_output = get_adb_devices()

                # Layout do pop-up com texto selecionável
                popup_layout = [
                    [sg.Text('Dispositivos:', font=('Open Sans', 10))],
                    [sg.Multiline(adb_output, size=(20, 4), disabled=True)],
                    [sg.Button('Fechar', font=('Open Sans', 10), button_color='#1c2024')]]
                sg.Window('...', popup_layout).read(close=True)
            # Avança para a janela principal se o usuário clicar no botão
            # Avança para a janela principal se o usuário clicar no botão
            if dialog_event == 'Avançar':
                if dialog_values['-emulador-']:
                    port = dialog_values['port']
                    porta = f'127.0.0.1:{port}'
                elif dialog_values['-celular-']:
                    porta = dialog_values['port']

                break

        dialog_window.close()
        port = porta
        time_img = 'storage\\img\\time.png'
        url = "https://i.ibb.co/5vJ5sQz/time.png"
        filename = 'time.png'
        # Diretório onde você deseja verificar a existência do arquivo
        diretorio = 'storage/img/'

        caminho_arquivo = os.path.join(diretorio, filename)

        if not os.path.exists(caminho_arquivo):
            response = requests.get(url)

            if response.status_code == 200:
                image_content = response.content

                with open(caminho_arquivo, 'wb') as image_file:
                    image_file.write(image_content)
                print("Imagem baixada com sucesso.")
            else:
                print("Falha ao baixar a imagem.")
        else:
            pass

        layout = [
            [
                sg.Frame('WNx3 CREATOR', [
                    [sg.Multiline(font=('Open Sans', 10),
                                  key='output', size=(50, 15), disabled=True)]
                ], border_width=5, title_location='n')
            ],
            [
                sg.Button('Executar', button_color='#1c2024'),
                sg.Button('Configurações', key='-config-',
                          button_color='#1c2024'),
                sg.Image(filename=check_img, pad=((40, 0), 0)
                         ), sg.Text('0', key='total'),
                sg.Image(filename=criada_img, pad=((0, 0), 0)
                         ), sg.Text('0', key='criadas'),
                sg.Image(filename=time_img, pad=((0, 0), 0)), sg.Text(
                    "00:00:00", key="-TIME-", pad=((0, 0), 0))
            ]
        ]
        window = sg.Window(
            f'CREATOR TWILIO WNx3 | Porta: {porta}', layout, keep_on_top=False)

        inicio.close()
        while True:
            minha_thread = None
            parar = False
            event, values = window.read()

            # Finaliza a janela se o usuário fechar a janela
            if event == sg.WINDOW_CLOSED:
                parar = True
                time_thread.join()
                break

            # Executa o código e atualiza a saída na Multiline em tempo real
            if event == 'Executar':
                try:
                    with open('configuracoes\\configTwilio.json', 'r') as file:
                        configTwilio = json.load(file)
                except FileNotFoundError:
                    configTwilio = {}
                
                contagem = 0
                running = True

                def format_time(seconds):
                    hours = seconds // 3600
                    minutes = (seconds % 3600) // 60
                    seconds = seconds % 60
                    return f"{hours:02d}:{minutes:02d}:{seconds:02d}"

                #

                def update_time(window):
                    start_time = time.time()  # Armazena o tempo inicial
                    while running:
                        current_time = time.time() - start_time
                        window["-TIME-"].update(format_time(int(current_time)))
                        window.refresh()  # Atualiza a interface do usuário

                time_thread = threading.Thread(
                    target=update_time, args=(window,))
                time_thread.start()
                # tentativa = False
                if not os.path.exists("credentials.json"):
                    # se o arquivo não existe, pede o nome do arquivo ao usuário e armazena em uma variável global
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nenhum credentials.json encontrado.')
                    window.Refresh()
                    time.sleep(200)
                else:
                    pass

                contagem = 0
                thread_parar = False
                window['Executar'].update(disabled=True)
                window.Refresh()
                try:
                    with open('configuracoes\\config6.json', 'r') as file:
                        config6 = json.load(file)
                except FileNotFoundError:
                    config6 = {}
                vpn_list = ["SurfShark", "Proxy Gratuito", "Minhas Proxies"]
                dialog_layout = [
                    [sg.Combo(vpn_list, default_value=config6.get("metodo", ""), readonly=True,
                              key='-vpnlista-', visible=True)],
                    [sg.InputText(key="-emailvpn-", visible=True,
                                  default_text=config6.get("emailvpn", "Email VPN"))],
                    [sg.InputText(key="-senhavpn-", visible=True,
                                  default_text=config6.get("senhavpn", "Senha VPN"))],
                    [sg.Button('Executar', button_color='#1c2024')]
                ]

                dialog_window = sg.Window(
                    '...', dialog_layout, keep_on_top=False)

                # Loop principal da janela de diálogo
                while True:
                    dialog_event, dialog_values = dialog_window.read(
                        timeout=100)

                    # Finaliza a janela de diálogo se o usuário fechar a janela
                    if dialog_event == sg.WINDOW_CLOSED:
                        raise Exception("Janela fechada")
                    

                    # Avança para a janela principal se o usuário clicar no botão
                    if dialog_event == 'Executar':
                        ip = dialog_values['-vpnlista-']
                        config6 = {
                            "emailvpn": dialog_values['-emailvpn-'],
                            "senhavpn": dialog_values['-senhavpn-'],
                            "metodo": ip
                        }

                        with open('configuracoes\\config6.json', 'w') as file:
                            json.dump(config6, file)
                        vpn_nav = dialog_values['-vpnlista-']
                        break
                dialog_window.close()
                emailvpn = dialog_values['-emailvpn-']
                senhavpn = dialog_values['-senhavpn-']
                print(emailvpn)
                window['output'].print(f'Bot iniciado.')
                window.Refresh()
                try:
                    with open('configuracoes\\configTwilio.json', 'r') as file:
                        configTwilio = json.load(file)
                except FileNotFoundError:
                    configTwilio = {}
                try:
                    with open('configuracoes\\configTwilio.json', 'r') as file:
                        config = json.load(file)
                except FileNotFoundError:
                    config = {}

                minha_thread = threading.Thread(target=creator_TWILIO)
                minha_thread.start()
            if event == 'clear':
                window['output'].update('')
                if not os.path.exists("credentials.json"):
                    # se o arquivo não existe, pede o nome do arquivo ao usuário e armazena em uma variável global
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nenhum credentials.json encontrado.')
                    window.Refresh()
                    time.sleep(200)
                else:
                    pass
                if 'senha' not in config or config['maquina'] == '':
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Configure o bot primeiro.')
                    window.Refresh()
                    time.sleep(200)
            if event == '-config-':
                if user_mysql == 'wn3':
                    estado_user = True
                else:
                    estado_user = True
                try:
                    with open('configuracoes\\configTwilio.json', 'r') as file:
                        configTwilio = json.load(file)
                except FileNotFoundError:
                    configTwilio = {}
                layout_configuracoes = [
                    [sg.Text("SpreadsheetID: "),
                     sg.InputText(key="spreadsheet", default_text=configTwilio.get("spreadsheet", ""))],
                    [sg.Text("Planilha 2NR: "), sg.InputText(
                        key="2nr", default_text=configTwilio.get("2nr", ""))],
                    [sg.Button("Salvar")]
                ]

                # Criar a janela da GUI de configuração
                janela_configuracoes = sg.Window(
                    "Configurações", layout_configuracoes)

                while True:
                    # janela_configuracoes = sg.Window('Configurações', layout_configuracoes)
                    evento, valores = janela_configuracoes.read()

                    if evento == sg.WINDOW_CLOSED:
                        thread_parar = True
                        break

                    if evento == "Salvar":
                        config = {
                            "spreadsheet": valores['spreadsheet'],
                            "2nr": valores['2nr']

                        }
                        with open("configuracoes\\configTwilio.json", "w") as f:
                            json.dump(config, f)

                        # Atualizar os valores padrão dos campos na GUI de configuração
                    janela_configuracoes.close()
    if event == 'DIVISOR':
        inicio.close()
        import PySimpleGUI as sg

        try:
            import pyperclip
        except ModuleNotFoundError:
            import subprocess
            import sys

            subprocess.run(['venv/scripts/activate.bat'], shell=True)
            subprocess.run(['pip', 'install', 'pyperclip'])
            subprocess.run(['deactivate'], shell=True)
            from google.oauth2.credentials import Credentials
            from googleapiclient.discovery import build
            from googleapiclient.errors import HttpError
            import pyperclip

        def dividir_lista(lista, num_partes):
            tam_parte = len(lista) // num_partes
            resto = len(lista) % num_partes
            partes = []
            inicio = 0
            for i in range(num_partes):
                tam = tam_parte + 1 if i < resto else tam_parte
                partes.append(lista[inicio:inicio + tam])
                inicio += tam
            return partes

        sg.theme("DarkGrey14")

        layout = [
            [sg.Text("Insira as contas:")],
            [sg.Multiline(size=(50, 10), key="-CONTA_INPUT-")],
            [sg.Radio('SC', 'RADIO1', key='-sc-'),
             sg.Radio('NextGen', 'RADIO1', key='-next-')],
            [sg.Text("Insira quantas abas:")],
            [sg.Slider(range=(1, 10), orientation="h", size=(
                40, 15), default_value=1, key="-NUM_PARTES-")],
            [sg.Button("Dividir", button_color='#1c2024')],
        ]

        janela = sg.Window("Divisor", layout)

        while True:
            evento, valores = janela.read()
            if evento == sg.WINDOW_CLOSED:
                break
            if evento == "Dividir" and valores['-sc-'] is True:
                lista_contas = valores["-CONTA_INPUT-"].strip().split("\n")
                num_partes = int(valores["-NUM_PARTES-"])
                partes = dividir_lista(lista_contas, num_partes)
                for i in range(num_partes):
                    partes[i] = "\n".join(partes[i]).replace(" ", "\n")
                layout_resultado = []
                for i in range(num_partes):
                    layout_resultado.append([
                        sg.Multiline(
                            size=(50, 5), key=f"-CONTA_OUTPUT{i + 1}-", disabled=True),
                        sg.Button(
                            "Copiar", key=f"-COPY{i + 1}-", button_color='#1c2024')
                    ])
                window_resultado = sg.Window("Resultado", layout_resultado)
                window_resultado.finalize()
                for i in range(num_partes):
                    window_resultado[f"-CONTA_OUTPUT{i + 1}-"].update(
                        value=partes[i])
                while True:
                    evento_resultado, valores_resultado = window_resultado.read()
                    if evento_resultado == sg.WINDOW_CLOSED:
                        break
                    for i in range(num_partes):
                        if evento_resultado == f"-COPY{i + 1}-":
                            pyperclip.copy(partes[i])
                window_resultado.close()
            elif evento == "Dividir" and valores['-next-'] is True:
                lista_contas = valores["-CONTA_INPUT-"].strip().split("\n")
                num_partes = int(valores["-NUM_PARTES-"])
                partes = dividir_lista(lista_contas, num_partes)
                for i in range(num_partes):
                    partes[i] = "\n".join(partes[i])
                layout_resultado = []
                for i in range(num_partes):
                    layout_resultado.append([
                        sg.Multiline(
                            size=(50, 5), key=f"-CONTA_OUTPUT{i + 1}-", disabled=True),
                        sg.Button(
                            "Copiar", key=f"-COPY{i + 1}-", button_color='#1c2024')
                    ])
                window_resultado = sg.Window("Resultado", layout_resultado)
                window_resultado.finalize()
                for i in range(num_partes):
                    window_resultado[f"-CONTA_OUTPUT{i + 1}-"].update(
                        value=partes[i])
                while True:
                    evento_resultado, valores_resultado = window_resultado.read()
                    if evento_resultado == sg.WINDOW_CLOSED:
                        break
                    for i in range(num_partes):
                        if evento_resultado == f"-COPY{i + 1}-":
                            pyperclip.copy(partes[i])
                window_resultado.close()
    if event == 'CRIAR POR CIMA':
        dialog_layout = [
            [sg.Text('Digite a porta:', font=('Open Sans', 10))],
            [sg.Input(key='port', font=('Open Sans', 10))],
            [sg.Button('Avançar', font=('Open Sans', 10),
                       button_color='#1c2024')]
        ]

        dialog_window = sg.Window('Digite a porta do emulador.', dialog_layout)

        # Loop principal da janela de diálogo
        while True:
            dialog_event, dialog_values = dialog_window.read()

            # Finaliza a janela de diálogo se o usuário fechar a janela
            if dialog_event == sg.WINDOW_CLOSED:
                break

            # Avança para a janela principal se o usuário clicar no botão
            if dialog_event == 'Avançar':
                porta = dialog_values['port']
                break

        dialog_window.close()
        port = porta
        layoutporcima = [
            [
                sg.Frame('WNx3 CREATOR', [
                    [sg.Multiline(font=('Open Sans', 10),
                                  key='output', size=(50, 15), disabled=True)]
                ], border_width=5, title_location='n')
            ],
            [
                sg.Button('Executar', button_color='#1c2024'),
                sg.Button('Reiniciar', key='clear',
                          disabled=True, button_color='#1c2024'),
                sg.Button('Configurações', key='-config-',
                          button_color='#1c2024'),
                sg.Image(filename=check_img, pad=((0, 0), 0)
                         ), sg.Text('0', key='total'),
                sg.Image(filename=criada_img, pad=((0, 0), 0)
                         ), sg.Text('0', key='criadas')
            ]
        ]
        window = sg.Window(f'CREATOR WNx3 | Porta: {porta}', layoutporcima)
        inicio.close()
        while True:
            event, values = window.read()

            # Finaliza a janela se o usuário fechar a janela
            if event == sg.WINDOW_CLOSED:
                minha_thread.stop()
                break

            # Executa o código e atualiza a saída na Multiline em tempo real
            if event == 'Executar':
                contagem = 0
                # tentativa = False
                if not os.path.exists("credentials.json"):
                    # se o arquivo não existe, pede o nome do arquivo ao usuário e armazena em uma variável global
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nenhum credentials.json encontrado.')
                    window.Refresh()
                    time.sleep(200)
                else:
                    pass
                try:
                    with open("configuracoes/config2.json", "r") as f:
                        config2 = json.load(f)
                except FileNotFoundError:
                    config2 = {}

                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.')
                window.Refresh()
                minha_thread = threading.Thread(target=criarporcima)
                minha_thread.start()

            if event == '-config-':
                try:
                    with open("configuracoes/config2.json", "r") as f:
                        config2 = json.load(f)
                except FileNotFoundError:
                    config2 = {}
                layout_configuracoes = [
                    [sg.Text("Senha dos perfis: ", font=('Open Sans', 12)),
                     sg.InputText(key="-senha-", default_text=config2.get("senha", ""))],
                    [sg.Text('VPN: ', font=('Open Sans', 12)),
                     sg.Combo(vpn_list, default_value=config2.get("vpn", ""), readonly=True, key='-vpn-')],
                    [sg.HorizontalSeparator()],
                    [sg.Text("Nome da maquina: "),
                     sg.InputText(key="maquina", default_text=config2.get("maquina", ""))],
                    [sg.Text("SpreadsheetID: "),
                     sg.InputText(key="spreadsheet", default_text=config2.get("spreadsheet", ""))],
                    [sg.Text("Planilha com as contas: "),
                     sg.InputText(key="contas_por_cima", default_text=config2.get("contas_por_cima", ""))],
                    [sg.Button("Salvar", button_color='#1c2024')]
                ]

                # Criar a janela da GUI de configuração
                janela_configuracoes = sg.Window(
                    "Configurações", layout_configuracoes)

                while True:
                    # janela_configuracoes = sg.Window('Configurações', layout_configuracoes)
                    evento, valores = janela_configuracoes.read()

                    if evento == sg.WINDOW_CLOSED:
                        break

                    if evento == "Salvar":
                        # Salvar as configurações em um arquivo JSON
                        config2 = {
                            "senha": valores["-senha-"],
                            "vpn": valores["-vpn-"],
                            "maquina": valores['maquina'],
                            "spreadsheet": valores['spreadsheet'],
                            "contas_por_cima": valores['contas_por_cima']
                        }

                        # Salvar a lista de dicionários em um arquivo JSON
                        with open("configuracoes/config2.json", "w") as f:
                            json.dump(config2, f)

                        # Atualizar os valores padrão dos campos na GUI de configuração
                        layout_configuracoes[1][0].update(
                            value=config2.get("senha", ""))
                        layout_configuracoes[2][0].update(
                            value=config2.get("vpn", ""))
                        layout_configuracoes[3][0].update(
                            value=config2.get("maquina", ""))
                        layout_configuracoes[4][0].update(
                            value=config2.get("spreadsheet", ""))
                        layout_configuracoes[5][0].update(
                            value=config2.get("contas_por_cima", ""))

                    janela_configuracoes.close()

    if event == 'MONTADOR':

        layoutporcima = [
            [
                sg.Frame('WNx3 CREATOR', [
                    [sg.Multiline(font=('Open Sans', 10),
                                  key='output', size=(50, 15), disabled=True)]
                ], border_width=5, title_location='n')
            ],
            [
                sg.Button('Executar', button_color='#1c2024'),
                sg.Button('Configurações', key='-config-',
                          button_color='#1c2024'),
                sg.Image(filename=check_img, pad=((0, 0), 0)
                         ), sg.Text('0', key='total'),
                sg.Image(filename=criada_img, pad=((0, 0), 0)
                         ), sg.Text('0', key='criadas')
            ]
        ]
        window = sg.Window(f'CREATOR WNx3 | MONTADOR', layoutporcima)
        inicio.close()
        while True:
            event, values = window.read()

            # Finaliza a janela se o usuário fechar a janela
            if event == sg.WINDOW_CLOSED:
                minha_thread.stop()
                break

            # Executa o código e atualiza a saída na Multiline em tempo real
            if event == 'Executar':
                contagem = 0
                # tentativa = False
                if not os.path.exists("credentials.json"):
                    # se o arquivo não existe, pede o nome do arquivo ao usuário e armazena em uma variável global
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nenhum credentials.json encontrado.')
                    window.Refresh()
                    time.sleep(200)
                else:
                    pass
                try:
                    with open("configuracoes/config2.json", "r") as f:
                        config2 = json.load(f)
                except FileNotFoundError:
                    config2 = {}

                try:
                    with open('configuracoes\\config5.json', 'r') as file:
                        config5 = json.load(file)
                except FileNotFoundError:
                    config5 = {}

                # Define o layout da janela de diálogo
                dialog_layout = [
                    [sg.Text('Tema das fotos:'), sg.Input(
                        key='tema', default_text=config5.get('tema', ''))],
                    [sg.Text("Quantidade de fotos: "),
                     sg.Slider(range=(1, 12), orientation='h', default_value=config5.get("qtdfotos", ""),
                               key='qtdfotos')],
                    [sg.Multiline(size=(30, 10), key='contas',
                                  autoscroll=True)],
                    [sg.Button('Executar')]
                ]
                try:
                    state = config['fixtop']
                    if state:
                        dialog_window = sg.Window(
                            'Configurações do iProxy.', dialog_layout, keep_on_top=True)
                    else:
                        dialog_window = sg.Window(
                            'Configurações do iProxy.', dialog_layout, keep_on_top=False)
                except:
                    dialog_window = sg.Window(
                        'Configurações do iProxy.', dialog_layout, keep_on_top=False)

                # Loop principal da janela de diálogo
                lines = []  # Lista para armazenar as linhas digitadas
                line_index = 0
                while True:
                    dialog_event, dialog_values = dialog_window.read()

                    # Finaliza a janela de diálogo se o usuário fechar a janela
                    if dialog_event == sg.WINDOW_CLOSED:
                        break

                    # Avança para a janela principal se o usuário clicar no botão
                    if dialog_event == 'Executar':
                        lines.extend(
                            dialog_values['contas'].splitlines(keepends=True))
                        tema = dialog_values['tema']
                        qtdfotos = dialog_values['qtdfotos']
                        contas = dialog_values['contas']
                        config4 = {'tema': tema, 'qtdfotos': qtdfotos}

                        # Salva os valores no arquivo JSON
                        config5 = {
                            "tema": dialog_values["tema"],
                            "qtdfotos": dialog_values['qtdfotos']

                        }
                        with open('configuracoes\\config5.json', 'w') as file:
                            json.dump(config5, file)

                        break

                dialog_window.close()

                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando montagem.')
                window.Refresh()
                for username in lines:
                    print(username)
                    time.sleep(5)
                minha_thread = threading.Thread(target=montador)
                minha_thread.start()

            if event == '-config-':
                try:
                    with open("configuracoes/config4.json", "r") as f:
                        config4 = json.load(f)
                except FileNotFoundError:
                    config4 = {}
                layout_configuracoes = [
                    [sg.Text("Tempo entre ações:", font=('Open Sans', 12))],
                    [sg.Text("MIN: "),
                     sg.Slider(range=(0, 50), orientation='h', default_value=config4.get("min", ""), key='min')],
                    [sg.Text("MAX: "),
                     sg.Slider(range=(1, 60), orientation='h', default_value=config4.get("max", ""), key='max')],

                    [sg.HorizontalSeparator()],
                    [sg.Text("Nome da maquina: "),
                     sg.InputText(key="maquina", default_text=config4.get("maquina", ""))],
                    [sg.Text("SpreadsheetID: "),
                     sg.InputText(key="spreadsheet", default_text=config4.get("spreadsheet", ""))],
                    [sg.Text("Planilha com as contas: "),
                     sg.InputText(key="contas_vazias", default_text=config4.get("planilha_contas", ""))],
                    [sg.Text("Planilha onde será salvo: "),
                     sg.InputText(key="contas_montadas", default_text=config4.get("planilha_montadas", ""))],

                    [sg.Button("Salvar", button_color='#1c2024')]
                ]

                windowconfig = sg.Window('Configurações', layout_configuracoes)

                while True:
                    event, values = windowconfig.read()
                    if event == sg.WINDOW_CLOSED:
                        break
                    if event == 'Salvar':
                        config4 = {
                            "min": values.get("min", 0),
                            "max": values.get("max", 1),
                            "maquina": values.get('maquina', ''),
                            "spreadsheet": values.get('spreadsheet', ''),
                            "planilha_contas": values.get('contas_vazias', ''),
                            "planilha_montadas": values.get('contas_montadas', '')
                        }
                        # Exemplo de como acessar os valores selecionados:
                        tempo_entre_acoes_min = values.get("min", 0)
                        tempo_entre_acoes_max = values.get("max", 1)
                        nome_maquina = values.get('maquina', '')
                        spreadsheet_id = values.get('spreadsheet', '')
                        planilha_contas = values.get('contas_vazias', '')
                        planilha_montadas = values.get('contas_montadas', '')

                        print('Tempo entre ações min:', tempo_entre_acoes_min)
                        print('Tempo entre ações max:', tempo_entre_acoes_max)
                        print('Nome da máquina:', nome_maquina)
                        print('SpreadsheetID:', spreadsheet_id)
                        print('Planilha com as contas:', planilha_contas)
                        print('Planilha com as contas montadas:',
                              planilha_montadas)

                        # Salvar as configurações em um arquivo JSON
                        with open("configuracoes/config4.json", "w") as f:
                            json.dump(config4, f)

                        windowconfig.close()

inicio.close()
