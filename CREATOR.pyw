global stop_event
from tkinter import FALSE
from socket import timeout
from operator import truediv
import json
from genericpath import exists
import string
import random
import subprocess
import re
import concurrent.futures
import asyncio
import threading
try:
    import PySimpleGUI as sg
except ModuleNotFoundError:
    import subprocess
    import sys

    subprocess.run(['venv/scripts/activate.bat'], shell=True)
    subprocess.run(['pip', 'install', 'PySimpleGUI==4.60.5'])
    subprocess.run(['deactivate'], shell=True)
    import PySimpleGUI as sg
import multiprocessing
import hashlib
import time
from datetime import datetime
import unicodedata
try:
    import requests
except ModuleNotFoundError:
    import subprocess
    import sys

    subprocess.run(['venv/scripts/activate.bat'], shell=True)
    subprocess.run(['pip', 'install', 'requests'])
    subprocess.run(['deactivate'], shell=True)
    import requests

import os
import locale
import sys
import traceback
versao = '1.0.5'
if os.path.exists("CREATOR_temp.exe"):
    os.remove("CREATOR_temp.exe")
# Configuração da localização para pt_BR.utf-8
try:
    os.environ['LC_ALL'] = 'pt_BR.utf-8'
    locale.setlocale(locale.LC_ALL, 'pt_BR.utf-8')
except locale.Error as e:
    print(f"Erro ao configurar localização: {e}")
    pass  # Pode ser ignorado se a configuração falhar

# Adiciona o caminho base ao início do PYTHONPATH se o script estiver congelado
if getattr(sys, 'frozen', False):
    base_path = getattr(sys, '_MEIPASS', os.path.dirname(
        os.path.abspath(__file__)))
    sys.path.insert(0, base_path)

# Restante do seu código...

global parar

caminho_atual = os.path.dirname(__file__)

letras = 'abcdefghijklmnopqrstuvwxyz'

try:
    from google.oauth2.credentials import Credentials
    from googleapiclient.discovery import build
    from googleapiclient.errors import HttpError
except ModuleNotFoundError:
    import subprocess
    import sys

    subprocess.run(['venv/scripts/activate.bat'], shell=True)
    subprocess.run(['pip', 'install', '-r', 'requirements.txt'])
    subprocess.run(['deactivate'], shell=True)
    from google.oauth2.credentials import Credentials
    from googleapiclient.discovery import build
    from googleapiclient.errors import HttpError
try:
    import requests
except ModuleNotFoundError:
    import subprocess
    import sys

    subprocess.run(['venv/scripts/activate.bat'], shell=True)
    subprocess.run(['pip', 'install', 'requests'])
    subprocess.run(['deactivate'], shell=True)
    import requests

try:
    from faker import Faker

    fake = Faker('pt_BR')
except ModuleNotFoundError:
    import subprocess
    import sys

    subprocess.run(['venv/scripts/activate.bat'], shell=True)
    subprocess.run(['pip', 'install', 'Faker'])
    subprocess.run(['deactivate'], shell=True)
    from faker import Faker

    fake = Faker('pt_BR')

try:
    import pytz
except ModuleNotFoundError:
    import subprocess
    import sys

    subprocess.run(['venv/scripts/activate.bat'], shell=True)
    subprocess.run(['pip', 'install', 'pytz'])
    subprocess.run(['deactivate'], shell=True)
    import pytz
tz = pytz.timezone('America/Sao_Paulo')
try:
    import gspread
    from oauth2client.service_account import ServiceAccountCredentials
except ModuleNotFoundError:
    import subprocess
    import sys

    subprocess.run(['venv/scripts/activate.bat'], shell=True)
    subprocess.run(['pip', 'install', 'gspread'])
    subprocess.run(['deactivate'], shell=True)
    subprocess.run(['venv/scripts/activate.bat'], shell=True)
    subprocess.run(['pip', 'install', 'oauth2client'])
    subprocess.run(['deactivate'], shell=True)
    import gspread
    from oauth2client.service_account import ServiceAccountCredentials

    sg.theme('DarkGrey14')


now = datetime.now()
agora = datetime.now().strftime("[%H:%M:%S] ")


if not os.path.exists("relatorio.json"):
    # se o arquivo não existe, pede o nome do arquivo ao usuário e armazena em uma variável global
    with open("relatorio.json", "w") as f:
        pass
else:
    pass

try:
    import PySimpleGUI as sg
except ModuleNotFoundError:
    import subprocess
    import sys

    subprocess.run(['venv/scripts/activate.bat'], shell=True)
    subprocess.run(['pip', 'install', 'PySimpleGUI==4.60.5'])
    subprocess.run(['deactivate'], shell=True)
    import PySimpleGUI as sg

    sg.theme('DarkGrey14')
# print(f'Versão: {versao}')

url = "https://raw.githubusercontent.com/wnx3/Creator3.0/main/version"

# Fazendo a solicitação GET para a URL
response = requests.get(url)

# Verificando se a solicitação foi bem-sucedida (código de status 200)
if response.status_code == 200:
    # Imprimindo o conteúdo da resposta
    # print(response.text)
    pass
else:
    print("Falha ao obter a versão atual")

try:
    from tqdm import tqdm
except ModuleNotFoundError:
    import subprocess
    import sys

    subprocess.run(['venv/scripts/activate.bat'], shell=True)
    subprocess.run(['pip', 'install', 'tqdm'])
    subprocess.run(['deactivate'], shell=True)
    import PySimpleGUI as sg
print(f'Versão atual: {versao}')

url_versao = "https://raw.githubusercontent.com/wnx3/Creator3.0/main/version"

# Fazendo a solicitação GET para a URL da versão online
response_versao = requests.get(url_versao)

# Verificando se a solicitação da versão online foi bem-sucedida (código de status 200)
if response_versao.status_code == 200:
    # Obtendo a versão online do conteúdo da resposta
    versao_online = response_versao.text.strip()

    # Verificando se a versão local é diferente da versão online
    if versao != versao_online:
        print(f'Nova versão disponível: {versao_online}')
        print("Atualizando para a versão mais recente...")

        # URL do arquivo para baixar
        url_arquivo = "https://media.githubusercontent.com/media/wnx3/Creator3.0/main/CREATOR.exe"

        # Verificando se o arquivo CREATOR.exe já existe
        if os.path.exists("CREATOR.exe"):
            # Renomeando o arquivo existente para um nome temporário
            os.rename("CREATOR.exe", "CREATOR_temp.exe")

        # Baixando o arquivo com tqdm para exibir o progresso
        with requests.get(url_arquivo, stream=True) as r:
            # Obtendo o tamanho total do arquivo
            total_size = int(r.headers.get('content-length', 0))
            # Criando o arquivo local
            with open("CREATOR.exe", 'wb') as f, tqdm(
                    total=total_size, unit='B', unit_scale=True, unit_divisor=1024, desc="Baixando") as bar:
                # Iterando sobre os dados do arquivo em chunks
                for data in r.iter_content(chunk_size=1024):
                    # Escrevendo os dados no arquivo
                    f.write(data)
                    # Atualizando a barra de progresso
                    bar.update(len(data))
        if os.path.exists("CREATOR_temp.exe"):
            os.remove("CREATOR_temp.exe")
        print("Atualização concluída.\n")
        sg.theme('DarkGrey14')
        layout = [[sg.Text("Bot atualizado com sucesso.", font=('Open Sans', 10))],
                  [sg.Text("Abra novamente.", font=('Open Sans', 10))],
                  [sg.Button("OK", button_color='#1c2024')]]
        window = sg.Window("Atualização", layout)
        event, values = window.read()
        window.close()
        raise Exception('Abra novamente.')

    else:
        pass
else:
    print("Falha ao obter a versão atual.")
base_url = 'https://raw.githubusercontent.com/wnx3/Creator3.0/main/'
# Lista de arquivos que você deseja verificar e atualizar
file_list = ['relatorio.json', 'requirements.txt', 'CREATOR.pyw']
for file_name in file_list:
    # Caminho local do seu arquivo Python
    local_path = file_name
    # URL completa do arquivo no GitHub
    url = base_url + file_name
    # Obtenha a última versão do arquivo do GitHub
    response = requests.get(url)
    github_version = response.content.decode('utf-8')
    # Verifique se o arquivo local tem a mesma versão do GitHub
    with open(local_path, 'r', encoding='utf-8') as f:
        local_version = f.read()
    local_hash = hashlib.sha256(local_version.encode()).hexdigest()
    github_hash = hashlib.sha256(github_version.encode()).hexdigest()
    if local_hash != github_hash:
        # Baixe a nova versão do GitHub e salve-a localmente
        with open(local_path, 'w', encoding='utf-8') as f:
            f.write(github_version)
        sg.theme('DarkGrey14')
        layout = [[sg.Text("Bot atualizado com sucesso.", font=('Open Sans', 10))],
                  [sg.Text("Abra novamente.", font=('Open Sans', 10))],
                  [sg.Button("OK", button_color='#1c2024')]]
        window = sg.Window("Atualização", layout)
        event, values = window.read()
        window.close()
        raise Exception('Abra novamente.')
    else:
        pass


try:
    from minuteinbox import Inbox
except ModuleNotFoundError:
    import subprocess
    import sys

    subprocess.run(['venv/scripts/activate.bat'], shell=True)
    subprocess.run(['pip', 'install', 'minuteinbox'])
    subprocess.run(['deactivate'], shell=True)
    from minuteinbox import Inbox


try:
    with open("config.json", "r") as f:
        config = json.load(f)
except FileNotFoundError:
    config = {}


# Tenta abrir o arquivo token.json
try:
    with open("credentials.json", "r") as f:
        # Se o arquivo existir, lê o conteúdo
        content = f.read()
except FileNotFoundError:
    # Se o arquivo não existir, abre uma GUI para informar o usuário
    sg.theme('DarkGrey14')
    layout = [[sg.Text("Arquivo credentials.json não encontrado.", font=('Open Sans', 10))],
              [sg.Button("OK", button_color='#1c2024')]]
    window = sg.Window("Erro", layout)
    event, values = window.read()
    window.close()

sg.theme('DarkGrey14')


try:
    import mysql.connector
except ModuleNotFoundError:
    import subprocess
    import sys

    subprocess.run(['venv/scripts/activate.bat'], shell=True)
    subprocess.run(['pip', 'install', 'mysql-connector-python'])
    subprocess.run(['deactivate'], shell=True)
    import mysql.connector


def get_ip():
    response = requests.get('https://ipinfo.io/json')
    data = response.json()
    return data['ip']


gc = gspread.service_account(filename='relatorio.json')
sh = gc.open('funcionamento')

worksheet = sh.worksheet('IPs')

# Obtenha o endereço IP atual
ip_atual = get_ip()
valores_da_coluna = worksheet.col_values(1)


def get_username_from_ip(ip_atual):
    # Encontra o índice do IP na lista
    index = valores_da_coluna.index(ip_atual)
    # Obtém o nome na coluna B da mesma linha
    user_mysql = worksheet.cell(index + 1, 2).value
    return user_mysql


if ip_atual in valores_da_coluna:
    print(f'O IP {ip_atual} já está registrado.')

    user_mysql = get_username_from_ip(ip_atual)
    print(f'Olá, {user_mysql}')
    registrado = True

else:
    print(f'O IP {ip_atual} não está registrado.')
    registrado = False

if registrado is False:
    def validar_login(username, password):
        try:
            conn = mysql.connector.connect(
                host='creator.mysql.uhserver.com',
                user='wnx3',
                password='@Rumo100k',
                database='creator'
            )

            cursor = conn.cursor()
            cursor.execute(
                "SELECT * FROM user WHERE user = %s AND senha = %s", (username, password))
            user = cursor.fetchone()

            if user:
                return True
            else:
                return False

        except Exception as e:
            print(f"Erro ao validar o login: {str(e)}")
            return False

        finally:
            cursor.close()
            conn.close()

    layout = [
        [sg.Text("Usuário:"), sg.InputText(
            key='user', size=(20, 1), justification="l")],
        [sg.Text("Senha:"),
         sg.InputText(key='senha', pad=(12, (0, 0)), password_char='*', size=(20, 1), justification="l")],
        [sg.Button("Login", font=('Open Sans', 9),
                   button_color='#1c2024', border_width=0, size=(30, 1))]
    ]
    try:
        state = config['fixtop']
        if state:
            window = sg.Window(f'Login', layout, keep_on_top=True)
        else:
            window = sg.Window(f'Login', layout, keep_on_top=False)
    except:
        window = sg.Window(f'Login', layout, keep_on_top=False)

    while True:
        event, values = window.read()

        if event == sg.WINDOW_CLOSED:
            break

        if event == "Login":
            username = values['user']
            password = values['senha']

            if validar_login(username, password):
                login_sucedido = True
                user_mysql = values['user']
                print(f'Olá, {user_mysql}')
                break
            else:
                sg.popup("Login falhou. Tente novamente.")
                login_sucedido = False

    window.close()

    if login_sucedido is True:
        print('Login feito com sucesso.')

        def open_spreadsheet():
            # Substitua com o caminho para sua chave de API
            gc = gspread.service_account(filename='relatorio.json')
            # Substitua pelo nome da sua planilha
            sh = gc.open('funcionamento')
            return sh

        ip = get_ip()

        sh = open_spreadsheet()
        worksheet = sh.worksheet('IPs')  # Substitua pelo nome da aba

        # Encontre a primeira linha vazia na coluna A
        col_a = worksheet.col_values(1)
        first_empty_row = len(col_a) + 1

        # Escreva o IP e o nome de usuário na primeira linha vazia
        worksheet.update('A{0}'.format(first_empty_row), [[ip, username]])

        print(f'IP registrado.')

        pass
    else:
        print('Não foi possivel realizar o login.')
        raise Exception('Não foi possivel realizar o login.')

# Define a janela de diálogo com um input e um botão
microsoft_license = requests.get(
    'https://raw.githubusercontent.com/wnx3/Creator3.0/main/microsoft_license')
funcionamento = microsoft_license.json()
check_img = 'storage\\img\\total.png'
criada_img = 'storage\\img\\check.png'
button_color = sg.theme_background_color()
inicio = [
    [sg.Frame('WNx3 CREATOR', [
        [sg.Button("CREATOR", font=('Open Sans', 9),
                   button_color='#1c2024', border_width=0, size=(35, 1))],
        [sg.Button("CREATOR 2NR", font=('Open Sans', 9),
                   button_color='#1c2024', border_width=0, size=(35, 1))],
        [sg.Button("CREATOR TWILIO", font=('Open Sans', 9), disabled=False,
                   button_color='#1c2024', border_width=0, size=(35, 1))],
        [sg.Button("DIVISOR", font=('Open Sans', 9),
                   button_color='#1c2024', border_width=0, size=(35, 1))],
        [sg.Button("MONTADOR", font=('Open Sans', 9), disabled=True, button_color='#1c2024', border_width=0,
                   size=(35, 1))],
        [sg.Button("CRIAR POR CIMA", font=('Open Sans', 9), disabled=False, button_color='#1c2024', border_width=0,
                   size=(35, 1))]

    ], border_width=3, title_location='n')
    ]]
try:
    state = config['fixtop']
    if state:
        inicio = sg.Window(f'WNx3 CREATOR', inicio, keep_on_top=True)
    else:
        inicio = sg.Window(f'WNx3 CREATOR', inicio, keep_on_top=False)
except:
    inicio = sg.Window(f'WNx3 CREATOR', inicio, keep_on_top=False)

sg.theme('DarkGrey14')
sg.SetOptions(font=('Open Sans', 10))
# Define a janela com uma Multiline e um botão
check_img = 'storage\\img\\total.png'
criada_img = 'storage\\img\\check.png'
# config_img = 'storage/img/config.png'


vpn_list = ["Nenhuma", "AVG", "Avast", "SurfShark", "TunnelBear", "ExpressVPN", "PiaVPN", "BetterNet", "NordVPN",
            "CyberGhost",
            "HotspotShield", "HmaVPN", "WindscribeVPN"]
# Definir o layout da GUI de configuração
layout_configuracoes = [
    [sg.Text("Senha dos perfis: ", font=('Open Sans', 12)),
     sg.InputText(key="-senha-", default_text=config.get("senha", ""))],
    [sg.Text('VPN: ', font=('Open Sans', 12)),
     sg.OptionMenu(vpn_list, size=(7, 19), key="-vpn-", default_value=config.get("vpn", ""))],
    [sg.Text('Email ou número: ', font=('Open Sans', 12)),
     sg.Radio('Mail.TM', 'RADIO1', key='-mailtm-',
              default=config.get("email", "") == "-mailtm-"),
     sg.Radio('MinuteInBox', 'RADIO1', key='-minuteinbox-',
              default=config.get("email", "") == "-minuteinbox-"),
     sg.Radio('2NR', 'RADIO1', key='-2nr-',
              default=config.get("email", "") == "-2nr-"),
     sg.Radio('Free SMS', 'RADIO1', key='-freesms-',
              default=config.get("email", "") == "-freesms-"),
     sg.Radio('InstaFace', 'RADIO1', key='-instaface-', default=config.get("email", "") == "-instaface-")],
    [sg.Radio('Instagram Lite', 'RADIO2', key='-instalite-', default=config.get("app", "") == "-instalite-"),
     sg.Radio('Instagram', 'RADIO2', key='-insta-', default=config.get("app", "") == "-insta-")],
    [sg.HorizontalSeparator()],
    [sg.Text("Nome da maquina: "), sg.InputText(
        key="maquina", default_text=config.get("maquina", ""))],
    [sg.Text("SpreadsheetID: "), sg.InputText(
        key="spreadsheet", default_text=config.get("spreadsheet", ""))],
    [sg.Text("Planilha 2NR: "), sg.InputText(
        key="2nr", default_text=config.get("2nr", ""))],
    [sg.Button("Salvar", button_color='#1c2024')]
]

# Criar a janela da GUI de configuração
janela_configuracoes = sg.Window("Configurações", layout_configuracoes)

contagem = 0

try:
    comando = f"adb connect {porta}"
    subprocess.run(comando, stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, check=True, shell=True)
    subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server.test',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
except:
    pass


def gerar_senha(tamanho=12):
    if tamanho < 6:
        raise ValueError("A senha deve ter pelo menos 6 caracteres.")

    # Define uma lista de letras maiúsculas e minúsculas
    letras_maiusculas = [random.choice(
        string.ascii_uppercase) for _ in range(tamanho // 2)]
    letras_minusculas = [random.choice(
        string.ascii_lowercase) for _ in range(tamanho // 2)]

    # Intercale as letras maiúsculas e minúsculas
    senha = ''.join(''.join(pair)
                    for pair in zip(letras_maiusculas, letras_minusculas))

    # Adiciona caracteres especiais, números e @
    caracteres_permitidos = string.ascii_letters + string.digits + string.punctuation
    caracteres_permitidos = caracteres_permitidos.replace(
        "~", "")  # Remove ~ e outros acentos

    senha += ''.join(random.choice(caracteres_permitidos)
                     for _ in range(tamanho - len(senha) - 3))
    # Adiciona pelo menos uma letra maiúscula
    senha += random.choice(string.ascii_uppercase)
    senha += random.choice(string.digits)  # Adiciona pelo menos um número
    senha += "@"

    # Mistura os caracteres
    senha = ''.join(random.sample(senha, len(senha)))

    return senha

    # Exemplo de uso

def contagem():
    global nome
    global sobrenome
    contagem += 1
    window['contagem'].update(contagem)
    window.Refresh()

def creator_2NRv2():
    try:
        with open("config.json", "r") as f:
            config = json.load(f)
    except FileNotFoundError:
        config = {}
    global gerar_senha
    import traceback
    SPREADSHEET_ID = config['spreadsheet']
    conteudo = config['vpn']
    senha = gerar_senha(12)
    maquina = config['maquina']
    tentativa = False
    seguido = False
    regiao_vpn = 'Sem dados'
    app = 'Normal 2NRv2'
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    # Código que gera a saída
    import os
    import time
    import requests
    import hashlib
    import subprocess

    # verifica se o arquivo existe na pasta do bot

    try:
        from rich.console import Console
    except ModuleNotFoundError:
        import subprocess
        import sys

        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['pip', 'install', '-r', 'requirements.txt'])
        subprocess.run(['deactivate'], shell=True)
        from rich.console import Console
    import os
    import time
    try:
        import uiautomator2 as u2
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'uiautomator2==2.16.25'])
        subprocess.run(['deactivate'], shell=True)
        subprocess.run(['pip', 'install', '--upgrade', 'requests'])
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        import requests
        time.sleep(10)
        import uiautomator2 as u2
    d = u2.connect(f'{porta}')
    import requests
    import hashlib
    import subprocess
    from colorama import init, Fore, Back, Style
    from faker import Faker
    # teste
    init(autoreset=True)
    console = Console()
    from termcolor import colored

    from rich.console import Console
    from rich.panel import Panel
    from rich.text import Text
    from rich.rule import Rule

    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random
    from datetime import datetime
    import string
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import NoSuchElementException
    from mailtm import Email
    import re
    import logging

    logger = logging.getLogger(__name__)

    handler = logging.FileHandler('log.txt')
    handler.setLevel(logging.ERROR)

    logger.addHandler(handler)

    # RANGE_NAME = 'contas!A:D'
    #
    # SCOPES = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

    def vpn_avast():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Avast', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop("com.avast.android.vpn")
            d.app_start("com.avast.android.vpn", ".app.wizard.WizardActivity")
            time.sleep(10)
        except Exception as e:
            print(e)
        abc = False

    def nenhuma_vpn():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.facebook.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        time.sleep(10)

    def vpn_hotspotshield():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HotspotShield',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('hotspotshield.android.vpn')
            d.app_start('hotspotshield.android.vpn')
        except Exception as e:
            print(e)
        d(resourceId='hotspotshield.android.vpn:id/tryAgainButton').click()
        time.sleep(5)
        d(resourceId='hotspotshield.android.vpn:id/btnVpnConnect').click()

        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_pia():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da PiaVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.privateinternetaccess.android')
            d.app_start('com.privateinternetaccess.android')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()
        time.sleep(3)
        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()

        abc = False

    def vpn_express():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da ExpressVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.expressvpn.vpn')
            d.app_start('com.expressvpn.vpn')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.expressvpn.vpn:id/obiButton').click()
        time.sleep(3)
        d(resourceId='com.expressvpn.vpn:id/obiButton').click()

        abc = False

    def vpn_nord():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da NordVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.nordvpn.android')
            time.sleep(5)
            d.app_start('com.nordvpn.android', use_monkey=True)
        except:
            pass
        time.sleep(10)
        time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_surf():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('com.surfshark.vpnclient.android')
            d.app_start('com.surfshark.vpnclient.android')
        except:
            pass
        time.sleep(15)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_better():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da BetterNet', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        try:
            d.app_stop('com.freevpnintouch')
            d.app_start('com.freevpnintouch')
        except:
            pass
        time.sleep(10)
        dialog = d(resourceId='com.freevpnintouch:id/dialogCtaPositive')
        connect = d(
            resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
        if dialog.exists:
            d(resourceId='com.freevpnintouch:id/dialogCtaPositive').click()
            time.sleep(3)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            # time.sleep(5)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
        while connect == 'CONNECT':
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            time.sleep(4)
            connect = d(
                resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            # WebDriverWait(driver, 20).until(
            # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        ip = '127.0.0.1:' + porta

        output = subprocess.check_output(
            ['adb', '-s', ip, 'shell', 'ifconfig'])

        # Verifica se a conexão VPN está ativa
        if not "tun0" in str(output):
            window['output'].print("Não conectado na BetterNet.")
            window.Refresh()
            try:
                connect = d(
                    resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
                d.app_stop('com.freevpnintouch')
                d.app_start('com.freevpnintouch')
                while connect == 'CONNECT':
                    d(resourceId='com.freevpnintouch:id/buttonConnect').click()
                    time.sleep(4)
                    connect = d(
                        resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            except:
                pass
        abc = False

    def vpn_cyberghost():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da CyberGhost', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('de.mobileconcepts.cyberghost')
            d.app_start('de.mobileconcepts.cyberghost')
        except:
            pass
        # time.sleep(3)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        rate = d(resourceId='de.mobileconcepts.cyberghost:id/rate_me_text')
        if rate.exists:
            d(resourceId='android:id/button2').click()
        time.sleep(2)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        abc = False

    def vpn_tunnelbear():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.tunnelbear.android')
            d.app_start("com.tunnelbear.android")
            while True:
                output = subprocess.check_output(
                    ['adb', '-s', porta, 'shell', 'ifconfig'])
                # print(str(output))
                if "tun0" in str(output):
                    print('Conectada')
                    break
                elif not "tun0" in str(output):
                    print('Reconectando')
                    try:
                        d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                        time.sleep(10)
                    except:
                        pass
        except Exception as e:
            print(e)
            pass

    def vpn_avg():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da AVG', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.avg.android.vpn')
            d.app_start("com.avg.android.vpn",
                        "com.avast.android.vpn.app.wizard.WizardActivity")
            regiao_vpn = d(
                resourceId='com.avg.android.vpn:id/location_title').get_text()

        except Exception as e:
            print(e)
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #               stderr=subprocess.DEVNULL, check=True, shell=True)

        time.sleep(30)

    def vpn_windscribe():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Windscribe', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)
            d.app_stop("com.windscribe.vpn")
            d.app_start("com.windscribe.vpn")
        except:
            pass
        d(resourceId='com.windscribe.vpn:id/on_off_button').click()
        time.sleep(10)
        primeiro = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_name').get_text()
        segundo = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_nick_name').get_text()
        regiao_vpn = primeiro + ' ' + segundo

    def vpn_hma():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HMA', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)

            d.app_stop("com.hidemyass.hidemyassprovpn")
            time.sleep(3)
            d.app_start('com.hidemyass.hidemyassprovpn',
                        'com.avast.android.vpn.activity.HmaOnboardingActivity')
        except:
            pass
        time.sleep(10)

    def gerar_id():
        chars = string.ascii_lowercase + string.digits
        android_id = ''.join(random.choice(chars) for i in range(16))
        return android_id

    options = Options()
    prefs = {"profile.managed_default_content_settings.images": 2}
    options.page_load_strategy = 'none'
    options.add_experimental_option("prefs", prefs)

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    window.Refresh()

    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global transition_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass
    gerar_id()
    android_id = gerar_id()
    subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    time.sleep(2)
    # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True, stdout=subprocess.DEVNULL,
    #               stderr=subprocess.DEVNULL)

    try:
        subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
    except Exception as e:
        pass

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Efetuando troca de IP.')
    window.Refresh()
    try:
        conteudo = config['vpn']
        if conteudo == "AVG":
            vpn_avg()
        elif conteudo == "SurfShark":
            vpn_surf()
        elif conteudo == "Nenhuma":
            nenhuma_vpn()
        elif conteudo == "Avast":
            vpn_avast()
        elif conteudo == "ExpressVPN":
            vpn_express()

        elif conteudo == "PiaVPN":
            vpn_pia()
        elif conteudo == "TunnelBear":
            vpn_tunnelbear()
        elif conteudo == "BetterNet":
            vpn_better()
        elif conteudo == "CyberGhost":
            vpn_cyberghost()
        elif conteudo == "NordVPN":
            vpn_nord()
        elif conteudo == "HotspotShield":
            vpn_hotspotshield()
        elif conteudo == "WindscribeVPN":
            vpn_windscribe()
        elif conteudo == "HmaVPN":
            vpn_hma()
        else:
            window['output'].print(
                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
            window.Refresh()

    except Exception as e:
        print(e)
        pass

    window.Refresh()
    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando sistema inicializar.')
    window.Refresh()

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.\n')
    window.Refresh()
    d.implicitly_wait(30.0)
    d.set_fastinput_ime(True)
    if not os.path.exists('./erros'):
        os.makedirs('./erros')
    codigo_não_recebido_seguidos = 0
    seguido = False
    tentativa = False
    while parar is False:
        senha = gerar_senha(12)
        if parar is True:
            print('Parando Thread')
            break
        print(linha_ret)
        # if codigo_não_recebido_seguidos == 3:
        #    #tempo_aleatorio = random.randint(10, 40)
        #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] 3 códigos não recebidos seguidos.')
        #    window.Refresh()
        #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando 1 hora para voltar novamente.')
        #    window.Refresh()
        #    time.sleep(3600)
        #    codigo_não_recebido_seguidos = 0
        try:
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)

            except:
                pass
            try:
                subprocess.run(
                    f'adb -s {porta} shell pm grant com.instagram.android android.permission.READ_CONTACTS',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            gerar_id()
            android_id = gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            window['output'].print(linha_ret)
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo 2NR')
            window.Refresh()

            

            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)

            except Exception as e:
                print('Verifique se o Instagram está instalado.')
                print(e)
                pass
            try:
                subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except Exception as e:
                print(e)
                pass
            try:
                subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server.test',
                               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)
                subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, shell=True)
            except:
                pass
            window.Refresh()

            try:
                # time.sleep(10)

                gerar_id()
                android_id = gerar_id()
                subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                               shell=True)
                try:
                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.READ_CONTACTS',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.CAMERA',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.RECORD_AUDIO',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    try:
                        subprocess.run(
                            f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.ACCESS_NOTIFICATION_POLICY',
                            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    except:
                        pass

                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.POST_NOTIFICATIONS',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                except:
                    pass
                try:
                    d.app_start('pl.rs.sip.softphone.newapp')
                except:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu algum erro ao abrir o 2NR, tentando novamente.')
                    window.Refresh()
                time.sleep(3)
                scope = ["https://spreadsheets.google.com/feeds",
                         "https://www.googleapis.com/auth/drive"]
                creds = ServiceAccountCredentials.from_json_keyfile_name(
                    'credentials.json', scope)
                client = gspread.authorize(creds)

                spreadsheet_id = config['spreadsheet']
                sheet_name = config['2nr']

                sheet = client.open_by_key(
                    spreadsheet_id).worksheet(sheet_name)
                # Obtém todas as células
                cells = sheet.get_all_values()

                # Armazena as células que correspondem à condição
                matches = [cell for row in cells for cell in row if
                           re.match(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', cell)]

                # Armazena a lista de células correspondentes à condição em uma variável
                regex2nr = matches
                while len(regex2nr) == 0:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nenhuma conta do 2NR encontrada.\nTentando novamente em 5 min.')
                    window.Refresh()
                    scope = ["https://spreadsheets.google.com/feeds",
                            "https://www.googleapis.com/auth/drive"]
                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                        'credentials.json', scope)
                    client = gspread.authorize(creds)

                    spreadsheet_id = config['spreadsheet']

                    sheet_name = config['2nr']
                    sheet = client.open_by_key(
                        spreadsheet_id).worksheet(sheet_name)
                    # Insert user, password, and timestamp into first empty row
                    sheet = client.open_by_key(
                        spreadsheet_id).worksheet(sheet_name)
                    values = sheet.col_values(1)

                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                    rows = sheet.get_all_values()

                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                    regex = re.compile(r'\S+\s\S+')
                    sheet_name = config['2nr']
                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                    try:
                        num_rows = sum(1 for row in rows if regex.match(row[0]))
                    except:
                        pass
                    window['total'].update(num_rows)

                    time.sleep(300)
                    cells = sheet.get_all_values()

                    # Armazena as células que correspondem à condição
                    matches = [cell for row in cells for cell in row if
                               re.match(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', cell)]

                    # Armazena a lista de células correspondentes à condição em uma variável
                    regex2nr = matches
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] {len(regex2nr)} conta(s) encontrada.')
                window.Refresh()
                time.sleep(3)
                try:
                    d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(timeout=60)
                except Exception as e:
                    print(e)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao clicar em login. Tentando novamente.')
                    window.Refresh()
                    subprocess.run(
                        f'uiautomator2 -s {porta} uninstall com.github.uiautomator',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    raise Exception('Ocorreu um erro ao clicar em login.')
                time.sleep(5)
                spreadsheet_id = config['spreadsheet']
                sheet_name = config['2nr']
                sheet = client.open_by_key(
                    spreadsheet_id).worksheet(sheet_name)
                # Obtém todas as células

                # Define a faixa de células para leitura
                first_linha = sheet.cell(1, 1).value

                # Divide a string em duas partes separadas por um espaço em branco
                partes = first_linha.split(' ')

                # Atribui a primeira parte (endereço de e-mail) à variável email2nr
                email2nr = partes[0]

                # Atribui a segunda parte (texto) à variável senha2nr
                senha2nr = partes[1]
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Email 2NR: {email2nr}')
                window.Refresh()
                d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email2nr)
                time.sleep(0.5)
                d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha2nr)
                time.sleep(0.5)
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                time.sleep(3)
                perm = d(resourceId='pl.rs.sip.softphone.newapp:id/messages')
                if perm.exists(timeout=30):
                    time.sleep(10)
                    pass
                else:
                    try:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Conta não existe.')
                        window.Refresh()
                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                            'credentials.json', scope)
                        client = gspread.authorize(creds)
                        # Abre a planilha e a planilha de uma determinada aba
                        spreadsheet_id = config['spreadsheet']
                        sheet_name = config['2nr']
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)

                        # Apaga a primeira célula da coluna A e desloca as células abaixo
                        sheet.delete_rows(1, 1)
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')
                    except Exception as e:
                        print(e)
                    raise Exception('skip')
                try:
                    qtd_num2 = d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[*]/androidx.appcompat.widget.LinearLayoutCompat/android.widget.LinearLayout/android.widget.TextView[1]')
                    qtd_num = qtd_num2.all()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] {len(qtd_num)} número(s) encontrado.')
                except Exception as e:
                    print(e)
                if len(qtd_num) == 0:
                    try:
                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                            'credentials.json', scope)
                        client = gspread.authorize(creds)
                        # Abre a planilha e a planilha de uma determinada aba
                        spreadsheet_id = config['spreadsheet']
                        sheet_name = config['2nr']
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)

                        # Apaga a primeira célula da coluna A e desloca as células abaixo
                        sheet.delete_rows(1, 1)
                    except Exception as e:
                        print(e)
                    continue
                window.Refresh()
                try:
                    num = d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat/android.widget.LinearLayout/android.widget.TextView[1]').get_text()
                    num = num.replace(' ', '')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Número: +48{num}')
                    window.Refresh()
                    email = num
                except Exception as e:
                    print(e)
                d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonSettings').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()

                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo instagram.')
                window.Refresh()
                try:
                    subprocess.run(
                        f'adb -s {porta} shell pm grant com.instagram.android android.permission.READ_CONTACTS',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                except:
                    pass


                def escrever_devagar(element, text, delay=0.05, chunk_size=3):
                    element.clear_text()
                    current_text = ""
                    for i in range(0, len(text), chunk_size):
                        if d(text='EXCLUIR'):
                            d.press('back')
                        current_text += text[i:i+chunk_size]
                        element.set_text(current_text)
                        if d(text='EXCLUIR'):
                            d.press('back')
                def gerar_senha(tamanho=12):
                    if tamanho < 6:
                        raise ValueError("A senha deve ter pelo menos 6 caracteres.")

                    # Define uma lista de letras maiúsculas e minúsculas
                    letras_maiusculas = [random.choice(
                        string.ascii_uppercase) for _ in range(tamanho // 2)]
                    letras_minusculas = [random.choice(
                        string.ascii_lowercase) for _ in range(tamanho // 2)]

                    # Intercale as letras maiúsculas e minúsculas
                    senha = ''.join(''.join(pair)
                                    for pair in zip(letras_maiusculas, letras_minusculas))

                    # Adiciona caracteres especiais, números e @
                    caracteres_permitidos = string.ascii_letters + string.digits + string.punctuation
                    caracteres_permitidos = caracteres_permitidos.replace(
                        "~", "")  # Remove ~ e outros acentos

                    senha += ''.join(random.choice(caracteres_permitidos)
                                    for _ in range(tamanho - len(senha) - 3))
                    # Adiciona pelo menos uma letra maiúscula
                    senha += random.choice(string.ascii_uppercase)
                    senha += random.choice(string.digits)  # Adiciona pelo menos um número
                    senha += "@"

                    # Mistura os caracteres
                    senha = ''.join(random.sample(senha, len(senha)))

                    return senha
                
                
                d.app_clear('com.instagram.android')
                d.app_start('com.instagram.android', use_monkey=True)
                
                while True:
                    if d(text="Criar nova conta"):
                        print('Tela de login')
                        d(text="Criar nova conta").click()
                    #elif d(text="Tentar novamente"):
                    #    d(text="Tentar novamente").click()
                    elif d(text='Qual é o seu email?'):
                        d(text="Cadastrar-se com o número do celular").click()
                        time.sleep(3)
                    elif d(textContains='Aguarde alguns minutos antes de tentar novamente') or d(textContains='Ocorreu um erro. Tente novamente mais tarde'):
                        print('Tela de restrição')
                        if tentativa is True:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                            window.Refresh()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                            window.Refresh()
                            tentativa = False

                            d.app_start('pl.rs.sip.softphone.newapp')
                            time.sleep(4)
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                            window.Refresh()
                            try:
                                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                            stdout=subprocess.DEVNULL,
                                            stderr=subprocess.DEVNULL, check=True, shell=True)

                            except:
                                pass
                            try:
                                subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                            stdout=subprocess.DEVNULL,
                                            stderr=subprocess.DEVNULL, check=True, shell=True)
                            except:
                                pass

                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')

                        elif tentativa is False:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                            window.Refresh()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                            window.Refresh()
                            tentativa = True
                            try:
                                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                            stdout=subprocess.DEVNULL,
                                            stderr=subprocess.DEVNULL, check=True, shell=True)

                            except:
                                pass
                            try:
                                subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                            stdout=subprocess.DEVNULL,
                                            stderr=subprocess.DEVNULL, check=True, shell=True)
                            except:
                                pass
                            try:
                                conteudo = config['vpn']
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                                raise Exception('skip')
                            except:
                                raise Exception('skip')
                            
                    elif d(text='Qual é o número do seu celular?'):
                        print('Tela de adicionar número')
                        escrever_devagar(d(className="android.widget.EditText"), f'+48{num}', chunk_size=3)
                        d(text="Avançar").click()
                        time.sleep(15)
                        if d(textContains="Você está tentando entrar?").wait(timeout=15):
                            d(text="Criar nova conta").click()
                            time.sleep(3)
                        if d(text="Enviar código por SMS"):
                            d(text="Enviar código por SMS").click()
                            d(text="Avançar").click(timeout=30)
                        time.sleep(5)
                    elif d(text="Insira o código de confirmação"):
                        print('Tela de aguardar código')
                        window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código')
                        window.Refresh()
                        d.app_start("pl.rs.sip.softphone.newapp")
                        time.sleep(5)
                        if d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').exists:
                            print('2NR deslogou')
                            d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(timeout=60)
                            time.sleep(5)

                            d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email2nr)
                            time.sleep(0.5)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha2nr)
                            time.sleep(0.5)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                            time.sleep(3)

                        d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()


                        try:
                            cod = d(
                                resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=60)

                        except:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido')
                            window.Refresh()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click(timeout=30)
                            time.sleep(1)
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                            window.Refresh()
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            d.app_clear('com.instagram.android')
                            raise Exception('Código não recebido')
                        
                        cod = cod.replace(' ', '')
                        codigo = re.sub('[^0-9]', '', cod)[:6]
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                        window.Refresh()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonSettings').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()

                        d.app_start('com.instagram.android', use_monkey=True)
                        d(text='Avançar').wait(timeout=30)
                        escrever_devagar(d(className="android.widget.EditText"), codigo, chunk_size=3)
                        d(text="Avançar").click(timeout=30)
                        time.sleep(3)

                    elif d(text="Crie uma senha"):
                        print('Tela de criar senha')
                        senha = gerar_senha(12)
                        escrever_devagar(d(className="android.widget.EditText"), senha, chunk_size=3)
                        time.sleep(1)
                        d(text="Avançar").click(timeout=30)
                        time.sleep(5)

                    elif d(text="Salvar suas informações de login?"):
                        print('Tela de salvar informações')
                        d(text="Agora não").click()

                    elif d(textContains="Definir data") or d(textContains="Qual é a sua data de nascimento?"):
                        print('Tela de data de nascimento')
                        if d(textContains="CANCELAR"):
                            d(textContains="CANCELAR").click()
                        d(text="Avançar").click(timeout=30)
                        time.sleep(0.5)
                        d(text="Avançar").click(timeout=30)
                        d(text="Qual é a sua idade?").wait(timeout=30)
                        idade_aleatoria = str(random.randint(18, 55))
                        escrever_devagar(d(className="android.widget.EditText"), idade_aleatoria, chunk_size=3)
                        d(text="Avançar").click(timeout=30)
                        d(text="OK").click(timeout=30)

                    elif d(text="Qual é o seu nome?"):
                        print('Tela de escolher nome')
                        
                        lista_user = random.choices(range(0, 9), k=2)
                        lista_letras = random.choices(letras, k=1)
                        nomea = fake.first_name_male().replace(" ", "")
                        nome = unicodedata.normalize('NFKD', nomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        sobrenomea = fake.last_name().replace(" ", "").lower()
                        sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        nome_completo = nome + ' ' + sobrenome
                        nome_completo_s = nome + sobrenome
                        numeros_concatenados = ''.join(
                            str(numero) for numero in lista_user)
                        user_completo1 = nome_completo_s + '' + \
                            str(numeros_concatenados) + ''.join(lista_letras)

                        user_completo = random.randint(1, len(user_completo1))
                        # Insira o ponto no índice aleatório
                        string_with_dot = user_completo1[:user_completo] + \
                            '_' + user_completo1[user_completo:]
                        user_completo_antigo = string_with_dot.lower()

                        escolha = random.choice(["_", "."])
                        user_completo = nome + escolha + sobrenome + \
                            str(numeros_concatenados) + ''.join(lista_letras)
                        d(className="android.widget.EditText").set_text(nome_completo)
                        #escrever_devagar(d(className="android.widget.EditText"), nome_completo, chunk_size=3)
                        d(text="Avançar").click(timeout=30)
                        time.sleep(5)

                    elif d(text="Crie um nome de usuário") or d(textContains="Confira seu nome de us"):
                        print('Tela de escolher user')
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] User: {user_completo}')
                        window.Refresh()
                        escrever_devagar(d(className="android.widget.EditText"), user_completo, chunk_size=3)
                        time.sleep(5)
                        d(text="Avançar").click(timeout=30)
                        time.sleep(5)
                    elif d(textContains="Aceite os termos e") or d(textContains="leia e concorde com nossos termos"):
                        print('Tela de termos e políticas')
                        try:
                            d(text="Concordo").click()
                            time.sleep(10)
                            while True:
                                if d(text="Concordo") and d(textContains="Aceite os termos e") or d(text="Concordo") and d(textContains="leia e concorde com nossos termos"):
                                    #d(text="Já tem uma conta?").click(timeout=25)
                                    d.app_stop('com.instagram.android')
                                    d.app_clear('com.instagram.android')
                                    d.app_start('com.instagram.android')
                                    #d(text="ENTRAR").click(timeout=10)
                                    d(className="android.widget.EditText").wait(timeout=40)
                                    d(className="android.widget.EditText", instance=0).set_text(user_completo)
                                    d(className="android.widget.EditText", instance=1).set_text(senha)
                                    d(text='Entrar').click()
                                    if d(text="Agora não").wait(timeout=10):
                                        print('Conta criada')
                                        d(text="Agora não").click()
                                    else:
                                        conteudo = config['vpn']
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                                        window.Refresh()
                                        if conteudo == "AVG":
                                            vpn_avg()
                                        elif conteudo == "SurfShark":
                                            vpn_surf()
                                        elif conteudo == "Nenhuma":
                                            nenhuma_vpn()
                                        elif conteudo == "Avast":
                                            vpn_avast()
                                        elif conteudo == "ExpressVPN":
                                            vpn_express()
                                        elif conteudo == "PiaVPN":
                                            vpn_pia()
                                        elif conteudo == "TunnelBear":
                                            vpn_tunnelbear()
                                        elif conteudo == "BetterNet":
                                            vpn_better()
                                        elif conteudo == "CyberGhost":
                                            vpn_cyberghost()
                                        elif conteudo == "NordVPN":
                                            vpn_nord()
                                        elif conteudo == "HotspotShield":
                                            vpn_hotspotshield()
                                        elif conteudo == "WindscribeVPN":
                                            vpn_windscribe()
                                        elif conteudo == "HmaVPN":
                                            vpn_hma()
                                        else:
                                            window['output'].print(
                                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                            window.Refresh()
                                        raise Exception("Restrição")
                                elif not d(textContains="Aceite os termos e"):
                                    break
                        except Exception as e:
                            if d(resourceId="com.instagram.android:id/tab_avatar"): pass
                            else: print(e)
                            if str(e) == 'Restrição':
                                raise Exception('')
                                

                    elif d(textContains="Ocorreu um erro") and d(textContains='Tentar novamente'):
                        print('Tela de erro de tradução')
                        d(textContains='Tentar novamente').click()
                        time.sleep(10)
                        if d(textContains='Tentar novamente'):
                            print('Não foi possível passar da tela')
                            try:
                                conteudo = config['vpn']
                        #
                                # Executa a função correspondente ao conteúdo do arquivo
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                                raise Exception('skip')
                            except Exception as e:
                                raise Exception('skip')
                    
                    elif d(text="A Página não está disponível no momento"):
                        print('Tela de página não disponível')
                        d.press('back')
                        time.sleep(5)
                        if d(text="A Página não está disponível no momento"):
                            print('Não foi possível passar da tela')
                            try:
                                conteudo = config['vpn']
                        #
                                # Executa a função correspondente ao conteúdo do arquivo
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                                raise Exception('skip')
                            except Exception as e:
                                raise Exception('skip')

                    elif d(textContains="Adicione uma foto") or d(resourceId="com.instagram.android:id/tab_avatar"):
                        if d(resourceId="com.instagram.android:id/tab_avatar"):
                            pass
                        else:
                            d(textContains="Pular").click()
                        print('Conta criada')
                        time.sleep(5)
                        try:
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                text_color=('lime'))
                            window.Refresh()
                            seguido = False
                            contagem += 1
                            window['criadas'].update(contagem)
                            window.Refresh()
                            now = datetime.now()
                            now_brasilia = tz.localize(now)
                            timestamp = now_brasilia.strftime(
                                "%d/%m/%Y %H:%M:%S")
                            try:
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)
                        
                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                        conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)
                        
                                rows = sheet.get_all_values()
                        
                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')
                        
                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            except Exception as e:
                                print(e)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                tempo_aleatorio = random.randint(10, 40)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                time.sleep(tempo_aleatorio)
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)
                        
                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                        conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)
                        
                                rows = sheet.get_all_values()
                        
                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')
                        
                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            window['total'].update(num_rows)
                            random_number = random.random()
                        
                            # Definir a chance desejada (10%)
                            chance = 0.2
                        
                            # Verificar se o número aleatório está abaixo da chance
                            if random_number < chance and not user_mysql == "wn3":
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                    funcionamento, scope)
                                client = gspread.authorize(creds)
                        
                                spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                sheet_name = 'relatorio_geral'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                        conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)
                        except Exception as e:
                            print(e)
                            pass
                        d.app_clear('com.instagram.android')
                        d.app_start('com.instagram.android', use_monkey=True)
                        d(className="android.widget.EditText", instance=0).set_text(user_completo)
                        d(className="android.widget.EditText", instance=1).set_text(senha)
                        d(text='Entrar').click()
                        if d(text="Agora não").wait(timeout=10):
                            print('Conta criada')
                            d(text="Agora não").click()

                        while True:
                            print('Criar por cima')
                            window['output'].print(f'{linha_ret}')
                            window.Refresh()
                            d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                            d(textContains="eguindo").click()
                            seguir_sugeridos = 0
                            while seguir_sugeridos < 10:
                                try:
                                    d(text="Seguir").click(timeout=2)
                                    time.sleep(1)
                                    seguir_sugeridos += 1
                                except:
                                    width, height = d.window_size()
                                    start_x = width // 2
                                    start_y = height * 3 // 4  # Comece no 75% da altura
                                    end_x = width // 2
                                    end_y = height // 4  # Termine no 25% da altura

                                    # Realize o swipe
                                    d.swipe(start_x, start_y, end_x, end_y, duration=0.5)
                                    if not d(text="Seguir"):
                                        break
                            d(resourceId="com.instagram.android:id/action_bar_button_back").click(timeout=10)
                            try:
                                d(resourceId="com.instagram.android:id/action_bar_title_chevron").click(timeout=10)
                            except: 
                                d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                                d(resourceId="com.instagram.android:id/action_bar_title_chevron").click(timeout=10)
                            d(textContains="Adicionar conta").click(timeout=30)
                            d(text="Criar nova conta").click(timeout=20)
                            lista_user = random.choices(range(0, 9), k=2)
                            lista_letras = random.choices(letras, k=2)
                            nomea = fake.first_name_male().replace(" ", "")
                            nome = unicodedata.normalize('NFKD', nomea).encode(
                                'ASCII', 'ignore').decode('ASCII')
                            sobrenomea = fake.last_name().replace(" ", "").lower()
                            sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                                'ASCII', 'ignore').decode('ASCII')
                            nome_completo = nome + ' ' + sobrenome
                            nome_completo_s = nome + sobrenome
                            numeros_concatenados = ''.join(str(numero)
                                                        for numero in lista_user)
                            user_completo1 = nome_completo_s + '' + \
                                str(numeros_concatenados) + ''.join(lista_letras)
                            user_completo = random.randint(1, len(user_completo1))
                            string_with_dot = user_completo1[:user_completo] + \
                                '_' + user_completo1[user_completo:]
                            user_completo_antigo = string_with_dot.lower()
                            escolha = random.choice(["_", "."])
                            user_completo = nome + escolha + sobrenome + \
                                str(numeros_concatenados) + ''.join(lista_letras)
                            print(user_completo)

                            d(text="Escolha um nome de usuário").wait(timeout=30)
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] User: {user_completo}')
                            window.Refresh()
                            d(className="android.widget.EditText").set_text(user_completo)
                            while True:
                                if d(textContains='não está disponível.'):
                                    d(resourceId='com.instagram.android:id/username_suggestion_text').click()
                                elif d(resourceId="com.instagram.android:id/username_valid_icon"):
                                    break
                                elif d(text='EXCLUIR'):
                                    d.press('back')
                                elif d(textContains='Aguarde alguns minutos antes de tentar novamente'):
                                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Restrição')
                                    window.Refresh()
                                    conteudo = config['vpn']
                                    if conteudo == "AVG":
                                        vpn_avg()
                                    elif conteudo == "SurfShark":
                                        vpn_surf()
                                    elif conteudo == "Nenhuma":
                                        nenhuma_vpn()
                                    elif conteudo == "Avast":
                                        vpn_avast()
                                    elif conteudo == "ExpressVPN":
                                        vpn_express()
                                    elif conteudo == "PiaVPN":
                                        vpn_pia()
                                    elif conteudo == "TunnelBear":
                                        vpn_tunnelbear()
                                    elif conteudo == "BetterNet":
                                        vpn_better()
                                    elif conteudo == "CyberGhost":
                                        vpn_cyberghost()
                                    elif conteudo == "NordVPN":
                                        vpn_nord()
                                    elif conteudo == "HotspotShield":
                                        vpn_hotspotshield()
                                    elif conteudo == "WindscribeVPN":
                                        vpn_windscribe()
                                    elif conteudo == "HmaVPN":
                                        vpn_hma()
                                    else:
                                        window['output'].print(
                                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                        window.Refresh()
                                    raise Exception("Restrição")
                            try:
                                d(text="Avançar", enabled=True).click(timeout=10)
                            except:
                                if d(text='EXCLUIR'):
                                    d.press('back')
                            d(text="Crie uma senha").wait(timeout=20)
                            senha = gerar_senha(12)
                            
                            escrever_devagar(d(className="android.widget.EditText"), senha, chunk_size=4)
                            time.sleep(2)
                            d(text="Avançar", enabled=True).click()
                            time.sleep(3)
                            d(text='Adicionar novo telefone ou email').click(timeout=20)
                            d(text="Adicionar telefone ou email").wait(timeout=30)
                            escrever_devagar(d(className="android.widget.EditText"), num, chunk_size=2)
                            time.sleep(1)
                            d(text="Avançar", enabled=True).click()

                            while True:
                                if (
                                    d(text='Tente novamente mais tarde') or 
                                    d(textContains="Ocorreu um erro de rede desconhecido") or
                                    d(textContains="feedback_required") or
                                    d(textContains='Aguarde alguns minutos') or
                                    d(textContains='Fazer uma apelação') or
                                    d(textContains='Ocorreu um problema com a sua') or
                                    d(textContains='Insira o código de confirmação')


                                ):
                                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Restrição')
                                    window.Refresh()
                                    conteudo = config['vpn']
                                    if conteudo == "AVG":
                                        vpn_avg()
                                    elif conteudo == "SurfShark":
                                        vpn_surf()
                                    elif conteudo == "Nenhuma":
                                        nenhuma_vpn()
                                    elif conteudo == "Avast":
                                        vpn_avast()
                                    elif conteudo == "ExpressVPN":
                                        vpn_express()
                                    elif conteudo == "PiaVPN":
                                        vpn_pia()
                                    elif conteudo == "TunnelBear":
                                        vpn_tunnelbear()
                                    elif conteudo == "BetterNet":
                                        vpn_better()
                                    elif conteudo == "CyberGhost":
                                        vpn_cyberghost()
                                    elif conteudo == "NordVPN":
                                        vpn_nord()
                                    elif conteudo == "HotspotShield":
                                        vpn_hotspotshield()
                                    elif conteudo == "WindscribeVPN":
                                        vpn_windscribe()
                                    elif conteudo == "HmaVPN":
                                        vpn_hma()
                                    else:
                                        window['output'].print(
                                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                        window.Refresh()
                                    raise Exception("Restrição")
                                
                                elif d(text='Pular'): break
                            time.sleep(5)
                            d(text='Pular').wait(timeout=30)
                            time.sleep(5)
                            if d(text="Pular"):
                                print("Conta criada")
                                try:
                                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                        text_color=('lime'))
                                    window.Refresh()
                                    seguido = False
                                    contagem += 1
                                    window['criadas'].update(contagem)
                                    window.Refresh()
                                    now = datetime.now()
                                    now_brasilia = tz.localize(now)
                                    timestamp = now_brasilia.strftime(
                                        "%d/%m/%Y %H:%M:%S")
                                    try:
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                                            'credentials.json', scope)
                                        client = gspread.authorize(creds)
                        #
                                        spreadsheet_id = config['spreadsheet']
                                        sheet_name = 'contas'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                                conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:G{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)
                        #
                                        rows = sheet.get_all_values()
                        #
                                        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                        regex = re.compile(r'\S+\s\S+')
                        #
                                        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                        num_rows = sum(
                                            1 for row in rows if regex.match(row[0]))
                                    except Exception as e:
                                        print(e)
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                        tempo_aleatorio = random.randint(10, 40)
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                        time.sleep(tempo_aleatorio)
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                                            'credentials.json', scope)
                                        client = gspread.authorize(creds)
                        #
                                        spreadsheet_id = config['spreadsheet']
                                        sheet_name = 'contas'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                                conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:G{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)
                        #
                                        rows = sheet.get_all_values()
                        #
                                        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                        regex = re.compile(r'\S+\s\S+')
                        #
                                        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                        num_rows = sum(
                                            1 for row in rows if regex.match(row[0]))
                                    window['total'].update(num_rows)
                                    random_number = random.random()
                        #
                                    # Definir a chance desejada (10%)
                                    chance = 0.2
                        #
                                    # Verificar se o número aleatório está abaixo da chance
                                    if random_number < chance and not user_mysql == "wn3":
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                            funcionamento, scope)
                                        client = gspread.authorize(creds)
                        #
                                        spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                        sheet_name = 'relatorio_geral'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                                conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:G{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)
                                except Exception as e:
                                    print(e)
                                    pass
                                d.app_stop('com.instagram.android')
                                d.app_start('com.instagram.android', use_monkey=True)

                            elif d(text="Fazer uma apelação") or d(textContains='Aguarde alguns minutos'):
                                print('Conta suspensa')
                                d.app_clear('com.instagram.android')
                                try:
                                    conteudo = config['vpn']
                        #
                                    # Executa a função correspondente ao conteúdo do arquivo
                                    if conteudo == "AVG":
                                        vpn_avg()
                                    elif conteudo == "SurfShark":
                                        vpn_surf()
                                    elif conteudo == "Nenhuma":
                                        nenhuma_vpn()
                                    elif conteudo == "Avast":
                                        vpn_avast()
                                    elif conteudo == "ExpressVPN":
                                        vpn_express()
                                    elif conteudo == "PiaVPN":
                                        vpn_pia()
                                    elif conteudo == "TunnelBear":
                                        vpn_tunnelbear()
                                    elif conteudo == "BetterNet":
                                        vpn_better()
                                    elif conteudo == "CyberGhost":
                                        vpn_cyberghost()
                                    elif conteudo == "NordVPN":
                                        vpn_nord()
                                    elif conteudo == "HotspotShield":
                                        vpn_hotspotshield()
                                    elif conteudo == "WindscribeVPN":
                                        vpn_windscribe()
                                    elif conteudo == "HmaVPN":
                                        vpn_hma()
                                    else:
                                        window['output'].print(
                                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                        window.Refresh()
                                    raise Exception('skip')
                                except Exception as e:
                                    raise Exception('skip')
                    
                        
                        
                    elif d(text="Fazer uma apelação"):
                        print('Conta suspensa')
                        d.app_clear('com.instagram.android')
                        if seguido is True:
                            seguido = False
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] SMS seguidos, Trocando de número.')
                            window.Refresh()
                            d.app_start('pl.rs.sip.softphone.newapp')
                            time.sleep(4)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                            window.Refresh()
                            sms = True
                        elif seguido is False:
                            seguido = True
                        try:
                            conteudo = config['vpn']
                #
                            # Executa a função correspondente ao conteúdo do arquivo
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                            
                        except Exception as e:
                            raise Exception('skip')
                            sms = True
                    time.sleep(3)

            except Exception as e:
                print(e)
                import traceback
                if not str(e) == '' or not str(e) == ' ' or not str(e) == 'skip':
                    traceback.print_exc()
                if not e == 'skip' or not e == 'Manutenção.':
                    try:
                        d.screenshot(
                            f'./erros/{datetime.now().strftime("%H_%M_%S")}.png')
                    except Exception as e:
                        print(e)
                        pass
                pass
        except Exception as e:
            print(e)
            import traceback
            if not str(e) == '' or not str(e) == ' ' or not str(e) == 'skip':
                traceback.print_exc()
            if not e == 'skip' or not e == 'Manutenção.':
                try:
                    d.screenshot(
                        f'./erros/{datetime.now().strftime("%H_%M_%S")}.png')
                except Exception as e:
                    print(e)
                    pass
            pass

def creator_TWILIO_INSTA():
    try:
        with open("config.json", "r") as f:
            config = json.load(f)
    except FileNotFoundError:
        config = {}
    global gerar_senha
    import traceback
    SPREADSHEET_ID = config['spreadsheet']
    conteudo = config['vpn']
    senha = gerar_senha(12)
    maquina = config['maquina']
    tentativa = False
    seguido = False
    regiao_vpn = 'Sem dados'
    app = 'Normal TWILIO'
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    # Código que gera a saída
    import os
    import time
    import requests
    import hashlib
    import subprocess

    # verifica se o arquivo existe na pasta do bot

    try:
        from rich.console import Console
    except ModuleNotFoundError:
        import subprocess
        import sys

        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['pip', 'install', '-r', 'requirements.txt'])
        subprocess.run(['deactivate'], shell=True)
        from rich.console import Console
    import os
    import time
    try:
        from twilio.rest import Client
    except:
        subprocess.run(['pip', 'install', 'twilio'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        from twilio.rest import Client
    try:
        import uiautomator2 as u2
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'uiautomator2==2.16.25'])
        subprocess.run(['deactivate'], shell=True)
        subprocess.run(['pip', 'install', '--upgrade', 'requests'])
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        import requests
        time.sleep(10)
        import uiautomator2 as u2
    d = u2.connect(f'{porta}')
    import requests
    import hashlib
    import subprocess
    from colorama import init, Fore, Back, Style
    from faker import Faker
    # teste
    init(autoreset=True)
    console = Console()
    from termcolor import colored

    from rich.console import Console
    from rich.panel import Panel
    from rich.text import Text
    from rich.rule import Rule

    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random
    from datetime import datetime
    import string
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import NoSuchElementException
    from mailtm import Email
    import re
    import logging

    logger = logging.getLogger(__name__)

    handler = logging.FileHandler('log.txt')
    handler.setLevel(logging.ERROR)

    logger.addHandler(handler)

    # RANGE_NAME = 'contas!A:D'
    #
    # SCOPES = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

    def vpn_avast():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Avast', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop("com.avast.android.vpn")
            d.app_start("com.avast.android.vpn", ".app.wizard.WizardActivity")
            time.sleep(10)
        except Exception as e:
            print(e)
        abc = False

    def nenhuma_vpn():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.facebook.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        time.sleep(10)

    def vpn_hotspotshield():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HotspotShield',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('hotspotshield.android.vpn')
            d.app_start('hotspotshield.android.vpn')
        except Exception as e:
            print(e)
        d(resourceId='hotspotshield.android.vpn:id/tryAgainButton').click()
        time.sleep(5)
        d(resourceId='hotspotshield.android.vpn:id/btnVpnConnect').click()

        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_pia():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da PiaVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.privateinternetaccess.android')
            d.app_start('com.privateinternetaccess.android')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()
        time.sleep(3)
        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()

        abc = False

    def vpn_express():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da ExpressVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.expressvpn.vpn')
            d.app_start('com.expressvpn.vpn')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.expressvpn.vpn:id/obiButton').click()
        time.sleep(3)
        d(resourceId='com.expressvpn.vpn:id/obiButton').click()

        abc = False

    def vpn_nord():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da NordVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.nordvpn.android')
            time.sleep(5)
            d.app_start('com.nordvpn.android', use_monkey=True)
        except:
            pass
        time.sleep(10)
        time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_surf():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('com.surfshark.vpnclient.android')
            d.app_start('com.surfshark.vpnclient.android')
        except:
            pass
        time.sleep(15)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_better():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da BetterNet', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        try:
            d.app_stop('com.freevpnintouch')
            d.app_start('com.freevpnintouch')
        except:
            pass
        time.sleep(10)
        dialog = d(resourceId='com.freevpnintouch:id/dialogCtaPositive')
        connect = d(
            resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
        if dialog.exists:
            d(resourceId='com.freevpnintouch:id/dialogCtaPositive').click()
            time.sleep(3)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            # time.sleep(5)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
        while connect == 'CONNECT':
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            time.sleep(4)
            connect = d(
                resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            # WebDriverWait(driver, 20).until(
            # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        ip = '127.0.0.1:' + porta

        output = subprocess.check_output(
            ['adb', '-s', ip, 'shell', 'ifconfig'])

        # Verifica se a conexão VPN está ativa
        if not "tun0" in str(output):
            window['output'].print("Não conectado na BetterNet.")
            window.Refresh()
            try:
                connect = d(
                    resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
                d.app_stop('com.freevpnintouch')
                d.app_start('com.freevpnintouch')
                while connect == 'CONNECT':
                    d(resourceId='com.freevpnintouch:id/buttonConnect').click()
                    time.sleep(4)
                    connect = d(
                        resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            except:
                pass
        abc = False

    def vpn_cyberghost():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da CyberGhost', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('de.mobileconcepts.cyberghost')
            d.app_start('de.mobileconcepts.cyberghost')
        except:
            pass
        # time.sleep(3)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        rate = d(resourceId='de.mobileconcepts.cyberghost:id/rate_me_text')
        if rate.exists:
            d(resourceId='android:id/button2').click()
        time.sleep(2)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        abc = False

    def vpn_tunnelbear():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.tunnelbear.android')
            d.app_start("com.tunnelbear.android")
            while True:
                output = subprocess.check_output(
                    ['adb', '-s', porta, 'shell', 'ifconfig'])
                # print(str(output))
                if "tun0" in str(output):
                    print('Conectada')
                    break
                elif not "tun0" in str(output):
                    print('Reconectando')
                    try:
                        d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                        time.sleep(10)
                    except:
                        pass
        except Exception as e:
            print(e)
            pass

    def vpn_avg():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da AVG', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.avg.android.vpn')
            d.app_start("com.avg.android.vpn",
                        "com.avast.android.vpn.app.wizard.WizardActivity")
            regiao_vpn = d(
                resourceId='com.avg.android.vpn:id/location_title').get_text()

        except Exception as e:
            print(e)
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #               stderr=subprocess.DEVNULL, check=True, shell=True)

        time.sleep(30)

    def vpn_windscribe():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Windscribe', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)
            d.app_stop("com.windscribe.vpn")
            d.app_start("com.windscribe.vpn")
        except:
            pass
        d(resourceId='com.windscribe.vpn:id/on_off_button').click()
        time.sleep(10)
        primeiro = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_name').get_text()
        segundo = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_nick_name').get_text()
        regiao_vpn = primeiro + ' ' + segundo

    def vpn_hma():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HMA', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)

            d.app_stop("com.hidemyass.hidemyassprovpn")
            time.sleep(3)
            d.app_start('com.hidemyass.hidemyassprovpn',
                        'com.avast.android.vpn.activity.HmaOnboardingActivity')
        except:
            pass
        time.sleep(10)

    def gerar_id():
        chars = string.ascii_lowercase + string.digits
        android_id = ''.join(random.choice(chars) for i in range(16))
        return android_id

    options = Options()
    prefs = {"profile.managed_default_content_settings.images": 2}
    options.page_load_strategy = 'none'
    options.add_experimental_option("prefs", prefs)

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    window.Refresh()

    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global transition_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass
    gerar_id()
    android_id = gerar_id()
    subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    time.sleep(2)
    # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True, stdout=subprocess.DEVNULL,
    #               stderr=subprocess.DEVNULL)

    try:
        subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
    except Exception as e:
        pass

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Efetuando troca de IP.')
    window.Refresh()
    try:
        conteudo = config['vpn']
        if conteudo == "AVG":
            vpn_avg()
        elif conteudo == "SurfShark":
            vpn_surf()
        elif conteudo == "Nenhuma":
            nenhuma_vpn()
        elif conteudo == "Avast":
            vpn_avast()
        elif conteudo == "ExpressVPN":
            vpn_express()
        elif conteudo == "PiaVPN":
            vpn_pia()
        elif conteudo == "TunnelBear":
            vpn_tunnelbear()
        elif conteudo == "BetterNet":
            vpn_better()
        elif conteudo == "CyberGhost":
            vpn_cyberghost()
        elif conteudo == "NordVPN":
            vpn_nord()
        elif conteudo == "HotspotShield":
            vpn_hotspotshield()
        elif conteudo == "WindscribeVPN":
            vpn_windscribe()
        elif conteudo == "HmaVPN":
            vpn_hma()
        else:
            window['output'].print(
                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
            window.Refresh()

    except Exception as e:
        print(e)
        pass

    window.Refresh()
    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando sistema inicializar.')
    window.Refresh()

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.\n')
    window.Refresh()
    d.implicitly_wait(30.0)
    d.set_fastinput_ime(True)
    if not os.path.exists('./erros'):
        os.makedirs('./erros')
    codigo_não_recebido_seguidos = 0
    seguido = False
    tentativa = False
    ja_tentou = False
    ja_tentou2 = False
    smsbody = ''
    while parar is False:
        senha = gerar_senha(12)
        if parar is True:
            print('Parando Thread')
            break
        # if codigo_não_recebido_seguidos == 3:
        #    #tempo_aleatorio = random.randint(10, 40)
        #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] 3 códigos não recebidos seguidos.')
        #    window.Refresh()
        #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando 1 hora para voltar novamente.')
        #    window.Refresh()
        #    time.sleep(3600)
        #    codigo_não_recebido_seguidos = 0
        try:
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)

            except:
                pass
            try:
                subprocess.run(
                    f'adb -s {porta} shell pm grant com.instagram.android android.permission.READ_CONTACTS',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            gerar_id()
            android_id = gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            window['output'].print(linha_ret)
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Pegando conta TWILIO')
            window.Refresh()

            try:
                scope = ["https://spreadsheets.google.com/feeds",
                         "https://www.googleapis.com/auth/drive"]
                creds = ServiceAccountCredentials.from_json_keyfile_name(
                    'credentials.json', scope)
                client = gspread.authorize(creds)
                #
                spreadsheet_id = config['spreadsheet']
                sheet_name = 'contas'
                # Insert user, password, and timestamp into first empty row
                sheet = client.open_by_key(
                    spreadsheet_id).worksheet(sheet_name)
                values = sheet.col_values(1)
                #
                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                rows = sheet.get_all_values()
                #
                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                regex = re.compile(r'\S+\s\S+')
                #
                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                num_rows = sum(1 for row in rows if regex.match(row[0]))
                window['total'].update(num_rows)
            except Exception as e:
                print(e)
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu algum erro ao acessar a planilha.')
                window.Refresh()
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Tentando novamente em 1 minuto.')
                window.Refresh()
                time.sleep(60)
                raise Exception('skip')

            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)

            except Exception as e:
                print('Verifique se o Instagram está instalado.')
                print(e)
                pass
            try:
                subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server.test',
                               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)
                subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, shell=True)
            except:
                pass
            window.Refresh()

            try:
                # time.sleep(10)

                gerar_id()
                android_id = gerar_id()
                subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                               shell=True)
                try:
                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.READ_CONTACTS',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.CAMERA',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.RECORD_AUDIO',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    try:
                        subprocess.run(
                            f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.ACCESS_NOTIFICATION_POLICY',
                            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    except:
                        pass

                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.POST_NOTIFICATIONS',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                except:
                    pass
                
                scope = ["https://spreadsheets.google.com/feeds",
                         "https://www.googleapis.com/auth/drive"]
                creds = ServiceAccountCredentials.from_json_keyfile_name(
                    'credentials.json', scope)
                client = gspread.authorize(creds)

                spreadsheet_id = config['spreadsheet']
                sheet_name = config['2nr']

                sheet = client.open_by_key(
                    spreadsheet_id).worksheet(sheet_name)
                # Obtém todas as células
                cells = sheet.get_all_values()

                # Armazena as células que correspondem à condição
                matches = [cell for row in cells for cell in row if re.match(r'.*\s+.*', cell)]

                # Armazena a lista de células correspondentes à condição em uma variável
                regex2nr = matches
                while len(regex2nr) == 0:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nenhuma conta do TWILIO encontrada.\nTentando novamente em 5 min.')
                    window.Refresh()
                    scope = ["https://spreadsheets.google.com/feeds",
                            "https://www.googleapis.com/auth/drive"]
                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                        'credentials.json', scope)
                    client = gspread.authorize(creds)

                    spreadsheet_id = config['spreadsheet']

                    sheet_name = config['2nr']
                    sheet = client.open_by_key(
                        spreadsheet_id).worksheet(sheet_name)
                    # Insert user, password, and timestamp into first empty row
                    sheet = client.open_by_key(
                        spreadsheet_id).worksheet(sheet_name)
                    values = sheet.col_values(1)

                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                    rows = sheet.get_all_values()

                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                    regex = re.compile(r'\S+\s\S+')
                    sheet_name = config['2nr']
                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                    try:
                        num_rows = sum(1 for row in rows if regex.match(row[0]))
                    except:
                        pass
                    window['total'].update(num_rows)

                    time.sleep(300)
                    cells = sheet.get_all_values()

                    # Armazena as células que correspondem à condição
                    matches = [cell for row in cells for cell in row if re.match(r'.*\s+.*', cell)]

                    # Armazena a lista de células correspondentes à condição em uma variável
                    regex2nr = matches
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] {len(regex2nr)} conta(s) encontrada.')
                window.Refresh()
                time.sleep(3)
                spreadsheet_id = config['spreadsheet']
                sheet_name = config['2nr']
                sheet = client.open_by_key(
                    spreadsheet_id).worksheet(sheet_name)
                # Obtém todas as células

                # Define a faixa de células para leitura
                first_linha = sheet.cell(1, 1).value

                # Divide a string em duas partes separadas por um espaço em branco
                partes = first_linha.split(' ')

                # Atribui a primeira parte (endereço de e-mail) à variável email2nr
                account_sid = partes[0]

                # Atribui a segunda parte (texto) à variável senha2nr
                auth_token = partes[1]

                

                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo instagram.')
                window.Refresh()
                try:
                    subprocess.run(
                        f'adb -s {porta} shell pm grant com.instagram.android android.permission.READ_CONTACTS',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                except:
                    pass


                def escrever_devagar(element, text, delay=0.05, chunk_size=3):
                    element.clear_text()
                    current_text = ""
                    for i in range(0, len(text), chunk_size):
                        if d(text='EXCLUIR'):
                            d.press('back')
                        current_text += text[i:i+chunk_size]
                        element.set_text(current_text)
                        if d(text='EXCLUIR'):
                            d.press('back')
                def gerar_senha(tamanho=12):
                    if tamanho < 6:
                        raise ValueError("A senha deve ter pelo menos 6 caracteres.")

                    # Define uma lista de letras maiúsculas e minúsculas
                    letras_maiusculas = [random.choice(
                        string.ascii_uppercase) for _ in range(tamanho // 2)]
                    letras_minusculas = [random.choice(
                        string.ascii_lowercase) for _ in range(tamanho // 2)]

                    # Intercale as letras maiúsculas e minúsculas
                    senha = ''.join(''.join(pair)
                                    for pair in zip(letras_maiusculas, letras_minusculas))

                    # Adiciona caracteres especiais, números e @
                    caracteres_permitidos = string.ascii_letters + string.digits + string.punctuation
                    caracteres_permitidos = caracteres_permitidos.replace(
                        "~", "")  # Remove ~ e outros acentos

                    senha += ''.join(random.choice(caracteres_permitidos)
                                    for _ in range(tamanho - len(senha) - 3))
                    # Adiciona pelo menos uma letra maiúscula
                    senha += random.choice(string.ascii_uppercase)
                    senha += random.choice(string.digits)  # Adiciona pelo menos um número
                    senha += "@"

                    # Mistura os caracteres
                    senha = ''.join(random.sample(senha, len(senha)))

                    return senha
                
                
                d.app_clear('com.instagram.android')
                d.app_start('com.instagram.android', use_monkey=True)
                client = Client(account_sid, auth_token)
                try:
                    balance = client.balance.fetch()
                except Exception as e:
                    if 'Unable to fetch record: Authenticate' in str(e):
                        print('Conta bloqueada, alterando')
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Conta não existe.')
                        window.Refresh()
                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                            'credentials.json', scope)
                        client = gspread.authorize(creds)
                        # Abre a planilha e a planilha de uma determinada aba
                        spreadsheet_id = config['spreadsheet']
                        sheet_name = config['2nr']
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)

                        # Apaga a primeira célula da coluna A e desloca as células abaixo
                        sheet.delete_rows(1, 1)
                        raise Exception('Mudar de conta twilio')
                    else:
                        print(e)
                print(f'Saldo da conta Twilio: {balance.balance}')
                available_numbers = client.available_phone_numbers('CA').local.list(limit=1)
                try:
                    if available_numbers:
                        new_number = client.incoming_phone_numbers.create(phone_number=available_numbers[0].phone_number)
                        print(f'Novo número de telefone comprado: {new_number.phone_number}')
                    else:
                        print('Nenhum número disponível encontrado.')
                except Exception as e:
                    if 'Account is restricted from provisioning new long code Phone Numbers' in str(e):
                        print('Conta bloqueada, alterando')
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Conta não existe.')
                        window.Refresh()
                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                            'credentials.json', scope)
                        client = gspread.authorize(creds)
                        # Abre a planilha e a planilha de uma determinada aba
                        spreadsheet_id = config['spreadsheet']
                        sheet_name = config['2nr']
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)

                        # Apaga a primeira célula da coluna A e desloca as células abaixo
                        sheet.delete_rows(1, 1)
                        raise Exception('Mudar de conta twilio')
                    elif 'Trial accounts are allowed' in str(e):
                        pass
                    else:
                        print(e)
                    pass
                # VER NUMERO
                for number in client.incoming_phone_numbers.list():
                    print(f"SID: {number.sid}, Número: {number.phone_number}")
                
                num = number.phone_number
                email = num
                num_por_cima = num.replace('+1', '')
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Número: {num}')
                window.Refresh()
                
                while True:
                    if d(text="Criar nova conta"):
                        print('Tela de login')
                        d(text="Criar nova conta").click()
                    #elif d(text="Tentar novamente"):
                    #    d(text="Tentar novamente").click()
                    elif d(text='Qual é o seu email?'):
                        d(text="Cadastrar-se com o número do celular").click()
                        time.sleep(3)
                    elif d(textContains='Aguarde alguns minutos antes de tentar novamente') or d(textContains='Ocorreu um erro. Tente novamente mais tarde'):
                        print('Tela de restrição')
                        if tentativa is True:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                            window.Refresh()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                            window.Refresh()
                            tentativa = False

                            # APAGAR NUMERO
                            client.incoming_phone_numbers(number.sid).delete()
                            print(f'Número de telefone {number.sid} apagado com sucesso.')


                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                            window.Refresh()
                            try:
                                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                            stdout=subprocess.DEVNULL,
                                            stderr=subprocess.DEVNULL, check=True, shell=True)

                            except:
                                pass

                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')

                        elif tentativa is False:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                            window.Refresh()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                            window.Refresh()
                            tentativa = True
                            try:
                                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                            stdout=subprocess.DEVNULL,
                                            stderr=subprocess.DEVNULL, check=True, shell=True)

                            except:
                                pass
                            try:
                                conteudo = config['vpn']
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                                raise Exception('skip')
                            except:
                                raise Exception('skip')
                            
                    elif d(text='Qual é o número do seu celular?'):
                        print('Tela de adicionar número')
                        escrever_devagar(d(className="android.widget.EditText"), f'{num}', chunk_size=3)
                        d(text="Avançar").click()
                        time.sleep(15)
                        if d(textContains="Você está tentando entrar?").wait(timeout=15):
                            d(text="Criar nova conta").click()
                            time.sleep(3)
                        if d(text="Enviar código por SMS"):
                            d(text="Enviar código por SMS").click()
                            d(text="Avançar").click(timeout=30)
                        time.sleep(5)
                    elif d(text="Insira o código de confirmação"):
                        print('Tela de aguardar código')
                        if d(textContains='Esse código não é válido'):
                            if ja_tentou2 is False:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Código inválido. Tentando novamente')
                                window.Refresh()
                                ja_tentou2 = True
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                                d.app_clear('com.instagram.android')
                                raise Exception('')

                            elif ja_tentou2 is True:
                                # APAGAR NUMERO
                                ja_tentou2 = False
                                client.incoming_phone_numbers(number.sid).delete()
                                print(f'Número de telefone {number.sid} apagado com sucesso.')
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                                window.Refresh()
                                available_numbers = client.available_phone_numbers('CA').local.list(limit=1)
                                if available_numbers:
                                    new_number = client.incoming_phone_numbers.create(phone_number=available_numbers[0].phone_number)
                                    print(f'Novo número de telefone comprado: {new_number.phone_number}')
                                else:
                                    print('Nenhum número disponível encontrado.')
                                

                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                                d.app_clear('com.instagram.android')
                                raise Exception('Código não recebido')
                            
                        window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código')
                        window.Refresh()
                        time.sleep(15)
                        tentativa_cod = 0
                        try:
                            while True:
                                if tentativa_cod == 10:
                                    raise Exception('Código')
                                try:
                                    if 'Instagram' in sms.body:
                                        cod = sms.body
                                        if smsbody != sms.body:
                                            break
                                except:
                                    pass
                                for sms in client.messages.list(limit=1):
                                    print(f"SMS: {sms.body}")
                                    if 'Instagram' in sms.body:
                                        cod = sms.body
                                        if smsbody != sms.body:
                                            break
                                tentativa_cod += 1
                                time.sleep(10)

                        except:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido')
                            window.Refresh()
                            if ja_tentou is False:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP e tentando novamente')
                                window.Refresh()
                                ja_tentou = True

                            elif ja_tentou is True:
                                # APAGAR NUMERO
                                ja_tentou = False
                                client.incoming_phone_numbers(number.sid).delete()
                                print(f'Número de telefone {number.sid} apagado com sucesso.')
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                                window.Refresh()
                                available_numbers = client.available_phone_numbers('CA').local.list(limit=1)
                                if available_numbers:
                                    new_number = client.incoming_phone_numbers.create(phone_number=available_numbers[0].phone_number)
                                    print(f'Novo número de telefone comprado: {new_number.phone_number}')
                                else:
                                    print('Nenhum número disponível encontrado.')
                                

                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            d.app_clear('com.instagram.android')
                            raise Exception('Código não recebido')
                        smsbody = sms.body
                        cod = cod.replace(' ', '')
                        ja_tentou = False
                        codigo = re.sub('[^0-9]', '', cod)[:6]
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                        #d(text='Avançar').wait(timeout=30)
                        escrever_devagar(d(className="android.widget.EditText"), codigo, chunk_size=3)
                        d(text="Avançar").click(timeout=30)
                        time.sleep(3)

                    elif d(text="Crie uma senha"):
                        print('Tela de criar senha')
                        senha = gerar_senha(12)
                        escrever_devagar(d(className="android.widget.EditText"), senha, chunk_size=3)
                        time.sleep(1)
                        d(text="Avançar").click(timeout=30)
                        time.sleep(5)

                    elif d(text="Salvar suas informações de login?"):
                        print('Tela de salvar informações')
                        d(text="Agora não").click()

                    elif d(textContains="Definir data") or d(textContains="Qual é a sua data de nascimento?"):
                        print('Tela de data de nascimento')
                        if d(textContains="CANCELAR"):
                            d(textContains="CANCELAR").click()
                        d(text="Avançar").click(timeout=30)
                        time.sleep(0.5)
                        d(text="Avançar").click(timeout=30)
                        d(text="Qual é a sua idade?").wait(timeout=30)
                        idade_aleatoria = str(random.randint(18, 55))
                        escrever_devagar(d(className="android.widget.EditText"), idade_aleatoria, chunk_size=3)
                        d(text="Avançar").click(timeout=30)
                        d(text="OK").click(timeout=30)

                    elif d(text="Qual é o seu nome?"):
                        print('Tela de escolher nome')
                        
                        lista_user = random.choices(range(0, 9), k=2)
                        lista_letras = random.choices(letras, k=1)
                        nomea = fake.first_name_male().replace(" ", "")
                        nome = unicodedata.normalize('NFKD', nomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        sobrenomea = fake.last_name().replace(" ", "").lower()
                        sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        nome_completo = nome + ' ' + sobrenome
                        nome_completo_s = nome + sobrenome
                        numeros_concatenados = ''.join(
                            str(numero) for numero in lista_user)
                        user_completo1 = nome_completo_s + '' + \
                            str(numeros_concatenados) + ''.join(lista_letras)

                        user_completo = random.randint(1, len(user_completo1))
                        # Insira o ponto no índice aleatório
                        string_with_dot = user_completo1[:user_completo] + \
                            '_' + user_completo1[user_completo:]
                        user_completo_antigo = string_with_dot.lower()

                        escolha = random.choice(["_", "."])
                        user_completo = nome + escolha + sobrenome + \
                            str(numeros_concatenados) + ''.join(lista_letras)
                        escrever_devagar(d(className="android.widget.EditText"), nome_completo, chunk_size=3)
                        d(text="Avançar").click(timeout=30)
                        time.sleep(5)

                    elif d(text="Crie um nome de usuário"):
                        print('Tela de escolher user')
                        escrever_devagar(d(className="android.widget.EditText"), user_completo, chunk_size=3)
                        time.sleep(5)
                        d(text="Avançar").click(timeout=30)
                        time.sleep(5)
                    elif d(textContains="Aceite os termos e") or d(textContains="leia e concorde com nossos termos"):
                        print('Tela de termos e políticas')
                        d(text="Concordo").click()
                        while True:
                            if d(text="Concordo") and d(textContains="Aceite os termos e") or d(text="Concordo") and d(textContains="leia e concorde com nossos termos"):
                                d(text="Já tem uma conta?").click(timeout=25)
                                d(text="ENTRAR").click(timeout=10)
                                d(className="android.widget.EditText", instance=0).set_text(user_completo)
                                d(className="android.widget.EditText", instance=1).set_text(senha)
                                d(text='Entrar').click()
                                if d(text="Agora não").wait(timeout=10):
                                    print('Conta criada')
                                    d(text="Agora não").click()
                                else:
                                    conteudo = config['vpn']
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                                    window.Refresh()
                                    if conteudo == "AVG":
                                        vpn_avg()
                                    elif conteudo == "SurfShark":
                                        vpn_surf()
                                    elif conteudo == "Nenhuma":
                                        nenhuma_vpn()
                                    elif conteudo == "Avast":
                                        vpn_avast()
                                    elif conteudo == "ExpressVPN":
                                        vpn_express()
                                    elif conteudo == "PiaVPN":
                                        vpn_pia()
                                    elif conteudo == "TunnelBear":
                                        vpn_tunnelbear()
                                    elif conteudo == "BetterNet":
                                        vpn_better()
                                    elif conteudo == "CyberGhost":
                                        vpn_cyberghost()
                                    elif conteudo == "NordVPN":
                                        vpn_nord()
                                    elif conteudo == "HotspotShield":
                                        vpn_hotspotshield()
                                    elif conteudo == "WindscribeVPN":
                                        vpn_windscribe()
                                    elif conteudo == "HmaVPN":
                                        vpn_hma()
                                    else:
                                        window['output'].print(
                                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                        window.Refresh()
                                    raise Exception("Restrição")
                            elif not d(textContains="Aceite os termos e"):
                                break

                    elif d(textContains="Ocorreu um erro") and d(textContains='Tentar novamente'):
                        print('Tela de erro de tradução')
                        d(textContains='Tentar novamente').click()
                        time.sleep(10)
                        if d(textContains='Tentar novamente'):
                            print('Não foi possível passar da tela')
                            try:
                                conteudo = config['vpn']
                        #
                                # Executa a função correspondente ao conteúdo do arquivo
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                                raise Exception('skip')
                            except Exception as e:
                                raise Exception('skip')
                    
                    elif d(text="A Página não está disponível no momento"):
                        print('Tela de página não disponível')
                        d.press('back')
                        time.sleep(5)
                        if d(text="A Página não está disponível no momento"):
                            print('Não foi possível passar da tela')
                            try:
                                conteudo = config['vpn']
                        #
                                # Executa a função correspondente ao conteúdo do arquivo
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                                raise Exception('skip')
                            except Exception as e:
                                raise Exception('skip')

                    elif d(textContains="Adicione uma foto"):
                        d(textContains="Pular").click()
                        print('Conta criada')
                        time.sleep(5)
                        try:
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                text_color=('lime'))
                            window.Refresh()
                            seguido = False
                            contagem += 1
                            window['criadas'].update(contagem)
                            window.Refresh()
                            now = datetime.now()
                            now_brasilia = tz.localize(now)
                            timestamp = now_brasilia.strftime(
                                "%d/%m/%Y %H:%M:%S")
                            try:
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)
                        
                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                        conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)
                        
                                rows = sheet.get_all_values()
                        
                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')
                        
                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            except Exception as e:
                                print(e)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                tempo_aleatorio = random.randint(10, 40)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                time.sleep(tempo_aleatorio)
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)
                        
                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                        conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)
                        
                                rows = sheet.get_all_values()
                        
                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')
                        
                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            window['total'].update(num_rows)
                            random_number = random.random()
                        
                            # Definir a chance desejada (10%)
                            chance = 0.2
                        
                            # Verificar se o número aleatório está abaixo da chance
                            if random_number < chance and not user_mysql == "wn3":
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                    funcionamento, scope)
                                client = gspread.authorize(creds)
                        
                                spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                sheet_name = 'relatorio_geral'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                        conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)
                        except Exception as e:
                            print(e)
                            pass
                        d.app_clear('com.instagram.android')
                        d.app_start('com.instagram.android', use_monkey=True)
                        d(className="android.widget.EditText", instance=0).set_text(user_completo)
                        d(className="android.widget.EditText", instance=1).set_text(senha)
                        d(text='Entrar').click()
                        if d(text="Agora não").wait(timeout=10):
                            print('Conta criada')
                            d(text="Agora não").click()

                        while True:
                            print('Criar por cima')
                            window['output'].print(f'{linha_ret}')
                            window.Refresh()
                            d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                            d(textContains="eguindo").click()
                            seguir_sugeridos = 0
                            while seguir_sugeridos < 10:
                                try:
                                    d(text="Seguir").click(timeout=2)
                                    time.sleep(1)
                                    seguir_sugeridos += 1
                                except:
                                    width, height = d.window_size()
                                    start_x = width // 2
                                    start_y = height * 3 // 4  # Comece no 75% da altura
                                    end_x = width // 2
                                    end_y = height // 4  # Termine no 25% da altura

                                    # Realize o swipe
                                    d.swipe(start_x, start_y, end_x, end_y, duration=0.5)
                                    if not d(text="Seguir"):
                                        break
                            d(resourceId="com.instagram.android:id/action_bar_button_back").click(timeout=10)
                            try:
                                d(resourceId="com.instagram.android:id/action_bar_title_chevron").click(timeout=10)
                            except: 
                                d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                                d(resourceId="com.instagram.android:id/action_bar_title_chevron").click(timeout=10)
                            d(textContains="Adicionar conta").click(timeout=30)
                            d(text="Criar nova conta").click(timeout=20)
                            lista_user = random.choices(range(0, 9), k=2)
                            lista_letras = random.choices(letras, k=2)
                            nomea = fake.first_name_male().replace(" ", "")
                            nome = unicodedata.normalize('NFKD', nomea).encode(
                                'ASCII', 'ignore').decode('ASCII')
                            sobrenomea = fake.last_name().replace(" ", "").lower()
                            sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                                'ASCII', 'ignore').decode('ASCII')
                            nome_completo = nome + ' ' + sobrenome
                            nome_completo_s = nome + sobrenome
                            numeros_concatenados = ''.join(str(numero)
                                                        for numero in lista_user)
                            user_completo1 = nome_completo_s + '' + \
                                str(numeros_concatenados) + ''.join(lista_letras)
                            user_completo = random.randint(1, len(user_completo1))
                            string_with_dot = user_completo1[:user_completo] + \
                                '_' + user_completo1[user_completo:]
                            user_completo_antigo = string_with_dot.lower()
                            escolha = random.choice(["_", "."])
                            user_completo = nome + escolha + sobrenome + \
                                str(numeros_concatenados) + ''.join(lista_letras)
                            print(user_completo)

                            d(text="Escolha um nome de usuário").wait(timeout=30)
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] User: {user_completo}')
                            window.Refresh()
                            escrever_devagar(d(className="android.widget.EditText"), user_completo, chunk_size=4)
                            while True:
                                if d(textContains='não está disponível.'):
                                    d(resourceId='com.instagram.android:id/username_suggestion_text').click()
                                elif d(resourceId="com.instagram.android:id/username_valid_icon"):
                                    break
                                elif d(text='EXCLUIR'):
                                    d.press('back')
                            try:
                                d(text="Avançar", enabled=True).click(timeout=10)
                            except:
                                if d(text='EXCLUIR'):
                                    d.press('back')
                            d(text="Crie uma senha").wait(timeout=20)
                            senha = gerar_senha(12)
                            
                            escrever_devagar(d(className="android.widget.EditText"), senha, chunk_size=4)
                            time.sleep(2)
                            d(text="Avançar", enabled=True).click()
                            time.sleep(3)
                            d(text='Adicionar novo telefone ou email').click(timeout=20)
                            d(text="Adicionar telefone ou email").wait(timeout=30)
                            escrever_devagar(d(className="android.widget.EditText"), num_por_cima, chunk_size=2)
                            time.sleep(1)
                            d(text="Avançar", enabled=True).click()

                            while True:
                                if (
                                    d(text='Tente novamente mais tarde') or 
                                    d(textContains="Ocorreu um erro de rede desconhecido") or
                                    d(textContains="feedback_required") or
                                    d(textContains='Aguarde alguns minutos')


                                ):
                                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Restrição')
                                    window.Refresh()
                                    conteudo = config['vpn']
                                    if conteudo == "AVG":
                                        vpn_avg()
                                    elif conteudo == "SurfShark":
                                        vpn_surf()
                                    elif conteudo == "Nenhuma":
                                        nenhuma_vpn()
                                    elif conteudo == "Avast":
                                        vpn_avast()
                                    elif conteudo == "ExpressVPN":
                                        vpn_express()
                                    elif conteudo == "PiaVPN":
                                        vpn_pia()
                                    elif conteudo == "TunnelBear":
                                        vpn_tunnelbear()
                                    elif conteudo == "BetterNet":
                                        vpn_better()
                                    elif conteudo == "CyberGhost":
                                        vpn_cyberghost()
                                    elif conteudo == "NordVPN":
                                        vpn_nord()
                                    elif conteudo == "HotspotShield":
                                        vpn_hotspotshield()
                                    elif conteudo == "WindscribeVPN":
                                        vpn_windscribe()
                                    elif conteudo == "HmaVPN":
                                        vpn_hma()
                                    else:
                                        window['output'].print(
                                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                        window.Refresh()
                                    raise Exception("Restrição")
                                
                                elif d(text='Pular'): break
                            time.sleep(5)
                            d(text='Pular').wait(timeout=30)
                            time.sleep(5)
                            if d(text="Pular"):
                                print("Conta criada")
                                try:
                                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                        text_color=('lime'))
                                    window.Refresh()
                                    seguido = False
                                    contagem += 1
                                    window['criadas'].update(contagem)
                                    window.Refresh()
                                    now = datetime.now()
                                    now_brasilia = tz.localize(now)
                                    timestamp = now_brasilia.strftime(
                                        "%d/%m/%Y %H:%M:%S")
                                    try:
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                                            'credentials.json', scope)
                                        client = gspread.authorize(creds)
                        #
                                        spreadsheet_id = config['spreadsheet']
                                        sheet_name = 'contas'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                                conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:G{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)
                        #
                                        rows = sheet.get_all_values()
                        #
                                        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                        regex = re.compile(r'\S+\s\S+')
                        #
                                        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                        num_rows = sum(
                                            1 for row in rows if regex.match(row[0]))
                                    except Exception as e:
                                        print(e)
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                        tempo_aleatorio = random.randint(10, 40)
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                        time.sleep(tempo_aleatorio)
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                                            'credentials.json', scope)
                                        client = gspread.authorize(creds)
                        #
                                        spreadsheet_id = config['spreadsheet']
                                        sheet_name = 'contas'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                                conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:G{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)
                        #
                                        rows = sheet.get_all_values()
                        #
                                        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                        regex = re.compile(r'\S+\s\S+')
                        #
                                        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                        num_rows = sum(
                                            1 for row in rows if regex.match(row[0]))
                                    window['total'].update(num_rows)
                                    random_number = random.random()
                        #
                                    # Definir a chance desejada (10%)
                                    chance = 0.2
                        #
                                    # Verificar se o número aleatório está abaixo da chance
                                    if random_number < chance and not user_mysql == "wn3":
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                            funcionamento, scope)
                                        client = gspread.authorize(creds)
                        #
                                        spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                        sheet_name = 'relatorio_geral'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                                conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:G{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)
                                except Exception as e:
                                    print(e)
                                    pass
                                d.app_stop('com.instagram.android')
                                d.app_start('com.instagram.android', use_monkey=True)

                            elif d(text="Fazer uma apelação") or d(textContains='Aguarde alguns minutos'):
                                print('Conta suspensa')
                                d.app_clear('com.instagram.android')
                                try:
                                    conteudo = config['vpn']
                        #
                                    # Executa a função correspondente ao conteúdo do arquivo
                                    if conteudo == "AVG":
                                        vpn_avg()
                                    elif conteudo == "SurfShark":
                                        vpn_surf()
                                    elif conteudo == "Nenhuma":
                                        nenhuma_vpn()
                                    elif conteudo == "Avast":
                                        vpn_avast()
                                    elif conteudo == "ExpressVPN":
                                        vpn_express()
                                    elif conteudo == "PiaVPN":
                                        vpn_pia()
                                    elif conteudo == "TunnelBear":
                                        vpn_tunnelbear()
                                    elif conteudo == "BetterNet":
                                        vpn_better()
                                    elif conteudo == "CyberGhost":
                                        vpn_cyberghost()
                                    elif conteudo == "NordVPN":
                                        vpn_nord()
                                    elif conteudo == "HotspotShield":
                                        vpn_hotspotshield()
                                    elif conteudo == "WindscribeVPN":
                                        vpn_windscribe()
                                    elif conteudo == "HmaVPN":
                                        vpn_hma()
                                    else:
                                        window['output'].print(
                                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                        window.Refresh()
                                    raise Exception('skip')
                                except Exception as e:
                                    raise Exception('skip')
                    
                        
                        
                    elif d(text="Fazer uma apelação"):
                        print('Conta suspensa')
                        d.app_clear('com.instagram.android')
                        if seguido is True:
                            seguido = False
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] SMS seguidos, Trocando de número.')
                            window.Refresh()
                            d.app_start('pl.rs.sip.softphone.newapp')
                            time.sleep(4)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                            window.Refresh()
                            sms = True
                        elif seguido is False:
                            seguido = True
                        try:
                            conteudo = config['vpn']
                #
                            # Executa a função correspondente ao conteúdo do arquivo
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                            
                        except Exception as e:
                            raise Exception('skip')
                            sms = True
                    time.sleep(3)

            except Exception as e:
                print(e)
                import traceback
                if not str(e) == '' or not str(e) == ' ' or not str(e) == 'skip':
                    traceback.print_exc()
                if not e == 'skip' or not e == 'Manutenção.':
                    try:
                        d.screenshot(
                            f'./erros/{datetime.now().strftime("%H_%M_%S")}.png')
                    except Exception as e:
                        print(e)
                        pass
                pass
        except Exception as e:
            print(e)
            import traceback
            if not str(e) == '' or not str(e) == ' ' or not str(e) == 'skip':
                traceback.print_exc()
            if not e == 'skip' or not e == 'Manutenção.':
                try:
                    d.screenshot(
                        f'./erros/{datetime.now().strftime("%H_%M_%S")}.png')
                except Exception as e:
                    print(e)
                    pass
            pass

def creator_LITE_EMAIL():
    import traceback
    SPREADSHEET_ID = config['spreadsheet']
    conteudo = config['vpn']
    senha = gerar_senha(12)
    maquina = config['maquina']
    tentativa = False
    seguido = False
    regiao_vpn = 'Sem dados'
    if config['email'] == '-2nr-' and config['app'] == '-instalite-':
        app = 'Lite'
    elif config['email'] == '-2nr-' and config['app'] == '-insta-':
        app = 'Normal'
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    # Código que gera a saída
    import os
    import time
    import requests
    import hashlib
    import subprocess

    # verifica se o arquivo existe na pasta do bot

    try:
        from rich.console import Console
    except ModuleNotFoundError:
        import subprocess
        import sys

        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['pip', 'install', '-r', 'requirements.txt'])
        subprocess.run(['deactivate'], shell=True)
        from rich.console import Console
    import os
    import time
    try:
        import uiautomator2 as u2
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'uiautomator2==2.16.25'])
        subprocess.run(['deactivate'], shell=True)
        subprocess.run(['pip', 'install', '--upgrade', 'requests'])
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        import requests
        time.sleep(10)
        import uiautomator2 as u2
    d = u2.connect(f'{porta}')
    import requests
    import hashlib
    import subprocess
    from colorama import init, Fore, Back, Style
    from faker import Faker
    # teste
    init(autoreset=True)
    console = Console()
    from termcolor import colored

    from rich.console import Console
    from rich.panel import Panel
    from rich.text import Text
    from rich.rule import Rule

    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random
    from datetime import datetime
    import string
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import NoSuchElementException
    from mailtm import Email
    import re
    import logging

    logger = logging.getLogger(__name__)

    handler = logging.FileHandler('log.txt')
    handler.setLevel(logging.ERROR)

    logger.addHandler(handler)

    # RANGE_NAME = 'contas!A:D'
    #
    # SCOPES = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

    def vpn_avast():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Avast', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop("com.avast.android.vpn")
            d.app_start("com.avast.android.vpn", ".app.wizard.WizardActivity")
            time.sleep(10)
        except Exception as e:
            print(e)
        abc = False

    def nenhuma_vpn():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.facebook.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        time.sleep(10)

    def vpn_hotspotshield():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HotspotShield',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('hotspotshield.android.vpn')
            d.app_start('hotspotshield.android.vpn')
        except Exception as e:
            print(e)
        d(resourceId='hotspotshield.android.vpn:id/tryAgainButton').click()
        time.sleep(5)
        d(resourceId='hotspotshield.android.vpn:id/btnVpnConnect').click()

        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_pia():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da PiaVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.privateinternetaccess.android')
            d.app_start('com.privateinternetaccess.android')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()
        time.sleep(3)
        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()

        abc = False

    def vpn_express():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da ExpressVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.expressvpn.vpn')
            d.app_start('com.expressvpn.vpn')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.expressvpn.vpn:id/obiButton').click()
        time.sleep(3)
        d(resourceId='com.expressvpn.vpn:id/obiButton').click()

        abc = False

    def vpn_nord():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da NordVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.nordvpn.android')
            time.sleep(5)
            d.app_start('com.nordvpn.android', use_monkey=True)
        except:
            pass
        time.sleep(10)
        time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_surf():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('com.surfshark.vpnclient.android')
            d.app_start('com.surfshark.vpnclient.android')
        except:
            pass
        time.sleep(15)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_better():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da BetterNet', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        try:
            d.app_stop('com.freevpnintouch')
            d.app_start('com.freevpnintouch')
        except:
            pass
        time.sleep(10)
        dialog = d(resourceId='com.freevpnintouch:id/dialogCtaPositive')
        connect = d(
            resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
        if dialog.exists:
            d(resourceId='com.freevpnintouch:id/dialogCtaPositive').click()
            time.sleep(3)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            # time.sleep(5)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
        while connect == 'CONNECT':
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            time.sleep(4)
            connect = d(
                resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            # WebDriverWait(driver, 20).until(
            # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        ip = '127.0.0.1:' + porta

        output = subprocess.check_output(
            ['adb', '-s', ip, 'shell', 'ifconfig'])

        # Verifica se a conexão VPN está ativa
        if not "tun0" in str(output):
            window['output'].print("Não conectado na BetterNet.")
            window.Refresh()
            try:
                connect = d(
                    resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
                d.app_stop('com.freevpnintouch')
                d.app_start('com.freevpnintouch')
                while connect == 'CONNECT':
                    d(resourceId='com.freevpnintouch:id/buttonConnect').click()
                    time.sleep(4)
                    connect = d(
                        resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            except:
                pass
        abc = False

    def vpn_cyberghost():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da CyberGhost', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('de.mobileconcepts.cyberghost')
            d.app_start('de.mobileconcepts.cyberghost')
        except:
            pass
        # time.sleep(3)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        rate = d(resourceId='de.mobileconcepts.cyberghost:id/rate_me_text')
        if rate.exists:
            d(resourceId='android:id/button2').click()
        time.sleep(2)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        abc = False

    def vpn_tunnelbear():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.tunnelbear.android')
            d.app_start("com.tunnelbear.android")
            while True:
                output = subprocess.check_output(
                    ['adb', '-s', porta, 'shell', 'ifconfig'])
                # print(str(output))
                if "tun0" in str(output):
                    print('Conectada')
                    break
                elif not "tun0" in str(output):
                    print('Reconectando')
                    try:
                        d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                        time.sleep(10)
                    except:
                        pass
        except Exception as e:
            print(e)
            pass

    def vpn_avg():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da AVG', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.avg.android.vpn')
            d.app_start("com.avg.android.vpn",
                        "com.avast.android.vpn.app.wizard.WizardActivity")
            regiao_vpn = d(
                resourceId='com.avg.android.vpn:id/location_title').get_text()

        except Exception as e:
            print(e)
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #               stderr=subprocess.DEVNULL, check=True, shell=True)

        time.sleep(30)

    def vpn_windscribe():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Windscribe', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)
            d.app_stop("com.windscribe.vpn")
            d.app_start("com.windscribe.vpn")
        except:
            pass
        d(resourceId='com.windscribe.vpn:id/on_off_button').click()
        time.sleep(10)
        primeiro = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_name').get_text()
        segundo = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_nick_name').get_text()
        regiao_vpn = primeiro + ' ' + segundo

    def vpn_hma():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HMA', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)

            d.app_stop("com.hidemyass.hidemyassprovpn")
            time.sleep(3)
            d.app_start('com.hidemyass.hidemyassprovpn',
                        'com.avast.android.vpn.activity.HmaOnboardingActivity')
        except:
            pass
        time.sleep(10)

    def gerar_id():
        chars = string.ascii_lowercase + string.digits
        android_id = ''.join(random.choice(chars) for i in range(16))
        return android_id

    options = Options()
    prefs = {"profile.managed_default_content_settings.images": 2}
    options.page_load_strategy = 'none'
    options.add_experimental_option("prefs", prefs)

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    window.Refresh()

    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global transition_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass
    gerar_id()
    android_id = gerar_id()
    subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    time.sleep(2)
    # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True, stdout=subprocess.DEVNULL,
    #               stderr=subprocess.DEVNULL)

    try:
        subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
    except Exception as e:
        pass

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Efetuando troca de IP.')
    window.Refresh()
    try:
        conteudo = config['vpn']
        if conteudo == "AVG":
            vpn_avg()
        elif conteudo == "SurfShark":
            vpn_surf()
        elif conteudo == "Nenhuma":
            nenhuma_vpn()
        elif conteudo == "Avast":
            vpn_avast()
        elif conteudo == "ExpressVPN":
            vpn_express()

        elif conteudo == "PiaVPN":
            vpn_pia()
        elif conteudo == "TunnelBear":
            vpn_tunnelbear()
        elif conteudo == "BetterNet":
            vpn_better()
        elif conteudo == "CyberGhost":
            vpn_cyberghost()
        elif conteudo == "NordVPN":
            vpn_nord()
        elif conteudo == "HotspotShield":
            vpn_hotspotshield()
        elif conteudo == "WindscribeVPN":
            vpn_windscribe()
        elif conteudo == "HmaVPN":
            vpn_hma()
        else:
            window['output'].print(
                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
            window.Refresh()

    except Exception as e:
        print(e)
        pass

    window.Refresh()
    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando sistema inicializar.')
    window.Refresh()

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.\n')
    window.Refresh()
    d.implicitly_wait(30.0)
    d.set_fastinput_ime(True)
    if not os.path.exists('./erros'):
        os.makedirs('./erros')
    codigo_não_recebido_seguidos = 0
    while parar is False:
        senha = gerar_senha(12)
        if parar is True:
            print('Parando Thread')
            break

        try:
            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)

            except:
                pass
            try:
                subprocess.run(
                    f'adb -s {porta} shell pm grant com.instagram.lite android.permission.READ_CONTACTS',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            gerar_id()
            android_id = gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            window['output'].print(linha_ret)
            window.Refresh()

            

            try:
                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)

            except Exception as e:
                print('Verifique se o Instagram está instalado.')
                print(e)
                pass
            window.Refresh()

            try:
                # time.sleep(10)

                gerar_id()
                android_id = gerar_id()
                subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                               shell=True)
                

                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo instagram Lite.')
                window.Refresh()
                try:
                    subprocess.run(
                        f'adb -s {porta} shell pm grant com.instagram.lite android.permission.READ_CONTACTS',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                except:
                    pass
                d.app_start('com.instagram.lite')

                try:
                    d.xpath(
                        '//android.widget.Button[@content-desc="Criar nova conta"]').click(timeout=120)
                except:
                    conteudo = config['vpn']
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Pagina Estática.')
                    window.Refresh()
                    if conteudo == "AVG":
                        vpn_avg()
                    elif conteudo == "SurfShark":
                        vpn_surf()
                    elif conteudo == "Nenhuma":
                        nenhuma_vpn()
                    elif conteudo == "Avast":
                        vpn_avast()
                    elif conteudo == "ExpressVPN":
                        vpn_express()
                    elif conteudo == "PiaVPN":
                        vpn_pia()
                    elif conteudo == "TunnelBear":
                        vpn_tunnelbear()
                    elif conteudo == "BetterNet":
                        vpn_better()
                    elif conteudo == "CyberGhost":
                        vpn_cyberghost()
                    elif conteudo == "NordVPN":
                        vpn_nord()
                    elif conteudo == "HotspotShield":
                        vpn_hotspotshield()
                    elif conteudo == "WindscribeVPN":
                        vpn_windscribe()
                    elif conteudo == "HmaVPN":
                        vpn_hma()
                    else:
                        window['output'].print(
                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                        window.Refresh()
                    raise Exception('skip')
                # time.sleep(6)
                # novo_layout = d.xpath('//android.view.View[@content-desc="Qual é o seu nome?"]')
                # if len(novo_layout) == 1:
                #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Layout novo encontrado, reiniciando app.')
                #    window.Refresh()
                #    raise Exception("skip.")

                ######################################################################
                lista_user = random.choices(range(0, 9), k=2)
                lista_letras = random.choices(letras, k=1)

                with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                    nomes = nomes_arquivo.readlines()

                with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                    sobrenomes = sobrenomes_arquivo.readlines()

                nomea = fake.first_name_male().replace(" ", "")
                nome = unicodedata.normalize('NFKD', nomea).encode(
                    'ASCII', 'ignore').decode('ASCII')
                sobrenomea = fake.last_name().replace(" ", "").lower()
                sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                    'ASCII', 'ignore').decode('ASCII')
                nome_completo = nome + ' ' + sobrenome
                nome_completo_s = nome + sobrenome
                numeros_concatenados = ''.join(
                    str(numero) for numero in lista_user)
                user_completo1 = nome_completo_s + '' + \
                    str(numeros_concatenados) + ''.join(lista_letras)

                user_completo = random.randint(1, len(user_completo1))
                # Insira o ponto no índice aleatório
                string_with_dot = user_completo1[:user_completo] + \
                    '_' + user_completo1[user_completo:]
                user_completo_antigo = string_with_dot.lower()

                escolha = random.choice(["_", "."])
                user_completo = nome + escolha + sobrenome + \
                    str(numeros_concatenados) + ''.join(lista_letras)
                ######################################################################
                time.sleep(10)
                layout1 = d.xpath(
                    '//android.view.View[@content-desc="Crie um nome de usuário"]')
                layout2 = d(resourceId='android:id/button2')
                layout3 = d.xpath(
                    '//android.view.View[@content-desc="Qual é o número do seu celular?"]')
                layout3v2 = d.xpath(
                    '//android.view.View[@content-desc="Qual é seu número de celular ou email?"]')
                layout4 = d.xpath(
                    '//android.view.View[@content-desc="Crie uma senha"]')
                if layout1.exists:
                    layout_usado = 'layout1'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout1 novo encontrado.')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(4)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=20.0)
                    except Exception as e:
                        print(e)
                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)

                elif layout2.exists:
                    layout_usado = 'layout2'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout2 novo encontrado.')
                    window.Refresh()
                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(4)
                    d.xpath(
                        '//android.widget.Button[@content-desc="Avançar"]/android.view.ViewGroup').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.Button[@content-desc="Avançar"]/android.view.ViewGroup').click()
                    time.sleep(5)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=10.0)
                    except Exception as e:
                        pass

                elif layout3.exists or layout3v2.exists:
                    layout_usado = 'layout3'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout3 novo encontrado.')
                    window.Refresh()
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                        time.sleep(4)
                    else:
                        pass
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=10.0)
                    except Exception as e:
                        print(e)
                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        nome_completo)
                    time.sleep(1)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nome escolhido: {nome_completo}')
                    window.Refresh()
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                    window.Refresh()
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        '')
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(3)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(3)

                elif layout4.exists:
                    layout_usado = 'layout4'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout4 novo encontrado.')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.Button[@content-desc="Avançar"]/android.view.ViewGroup').click()
                    time.sleep(4)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=20.0)
                    except Exception as e:
                        print(e)
                    time.sleep(4)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                    window.Refresh()
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        '')
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(3)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)

                else:
                    layout_usado = 'layout_normal'
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Layout normal encontrado.')
                    window.Refresh()
                    # raise Exception('Manutenção.')
                    cancel = d(resourceId='com.google.android.gms:id/cancel')
                    if cancel.exists(timeout=10):
                        d(resourceId='com.google.android.gms:id/cancel').click()
                    senha = gerar_senha(12)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        nome_completo)
                    time.sleep(1)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nome escolhido: {nome_completo}')
                    window.Refresh()
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        senha)
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists:
                        d(resourceId='android:id/button2').click()
                    time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Agora não"]').click_exists(timeout=20.0)
                    except Exception as e:
                        print(e)
                    # salvar_senha = d.xpath('//android.view.View[@content-desc="Agora não"]')
                    # if salvar_senha.exists:
                    #    d.xpath('//android.view.View[@content-desc="Agora não"]').click()

                    time.sleep(3)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=20):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    idade_aleatoria = random.randint(18, 35)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Idade escolhida: {idade_aleatoria}')
                    window.Refresh()
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        str(idade_aleatoria))
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(2)
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    try:
                        d.xpath(
                            '//android.view.View[@content-desc="Alterar nome de usuário"]').click(timeout=5)
                    except:
                        pass
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: {user_completo}')
                    window.Refresh()
                    time.sleep(3)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        '')
                    time.sleep(1)
                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        user_completo)
                    time.sleep(3)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(3)
                    d.xpath(
                        '//android.widget.EditText').set_text(
                        f'+48{num}')
                    time.sleep(1)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    new_acc = d(resourceId='android:id/button2')
                    if new_acc.exists(timeout=10):
                        d(resourceId='android:id/button2').click()
                        time.sleep(2)
                    time.sleep(5)
                    restricao = d.xpath(
                        '//android.view.View[@content-desc="Ocorreu um erro. Tente novamente mais tarde."]')
                    if restricao.exists and tentativa is True:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Já foi feita uma tentativa. Apagando número.')
                        window.Refresh()
                        tentativa = False

                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass

                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception('skip')

                    elif restricao.exists and tentativa is False:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando mais uma vez.')
                        window.Refresh()
                        tentativa = True
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)

                        except:
                            pass
                        try:
                            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                                           stdout=subprocess.DEVNULL,
                                           stderr=subprocess.DEVNULL, check=True, shell=True)
                        except:
                            pass
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception('skip')
                        except:
                            raise Exception('skip')

                    erro_novaconta = d.xpath(
                        '//android.view.View[@content-desc="Criar nova conta"]')
                    if erro_novaconta.exists:
                        d.xpath(
                            '//android.view.View[@content-desc="Criar nova conta"]').click()
                    else:
                        pass
                    time.sleep(3)
                    selecionar_sms = d.xpath(
                        '//android.view.View[@content-desc="Enviar código por SMS"]')
                    if selecionar_sms.exists:
                        selecionar_sms.click()
                        time.sleep(1)
                        d.xpath(
                            '//android.view.View[@content-desc="Enviar código"]').click()
                    d.app_start('pl.rs.sip.softphone.newapp')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                    window.Refresh()

                    time.sleep(20)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                    window.Refresh()
                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                    except:
                        codigo_não_recebido_seguidos += 1
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(4)
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        try:
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            continue
                        except:
                            pass
                    codigo = re.sub('[^0-9]', '', cod)[:6]
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                    window.Refresh()
                    codigo_não_recebido_seguidos = 0
                    d.app_start('com.instagram.android')
                    time.sleep(3)

                    d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[1]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                        codigo)
                    # time.sleep(100)
                    d.xpath(
                        '//android.view.View[@content-desc="Avançar"]').click()
                    time.sleep(4)

                codigo_invalido = d.xpath(
                    '//android.view.View[@content-desc="Não recebi o código"]')
                d.xpath(
                    '//android.view.View[@content-desc="Concordo"]').click()
                time.sleep(5)
                errodetec = d.xpath(
                    '//android.view.View[@content-desc="Concordo"]')
                if errodetec.exists:
                    d.xpath(
                        '//android.view.View[@content-desc="Concordo"]').click()
                    time.sleep(5)

                errodetec = d.xpath(
                    '//android.view.View[@content-desc="Concordo"]')
                if errodetec.exists:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Instagram não deixou avançar.')
                    window.Refresh()

                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
                window.Refresh()
                time.sleep(45)
                verificar = d.xpath(
                    '//android.view.View[@content-desc="Adicionar foto"]')
                verificar2 = d.xpath(
                    '//android.view.View[@content-desc="Aceite os termos e políticas do Instagram"]')

                try:
                    if verificar.exists:
                        try:
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                   text_color=('lime'))
                            window.Refresh()
                            seguido = False
                            contagem += 1
                            window['criadas'].update(contagem)
                            window.Refresh()
                            now = datetime.now()
                            now_brasilia = tz.localize(now)
                            timestamp = now_brasilia.strftime(
                                "%d/%m/%Y %H:%M:%S")
                            try:
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                          conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            except Exception as e:
                                print(e)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                tempo_aleatorio = random.randint(10, 40)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                time.sleep(tempo_aleatorio)
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                          conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            window['total'].update(num_rows)
                            random_number = random.random()

                            # Definir a chance desejada (10%)
                            chance = 0.2

                            # Verificar se o número aleatório está abaixo da chance
                            if random_number < chance and not user_mysql == "wn3":
                                scope = ["https://spreadsheets.google.com/feeds",
                                         "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                    funcionamento, scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                sheet_name = 'relatorio_geral'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                          conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)
                        except Exception as e:
                            print(e)
                            pass
                        window.Refresh()
                        arquivo = open(
                            'configuracoes/contas/contas_criadas.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(user_completo + ' ' + senha + "\n")
                        arquivo = open(
                            'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                        # Escreva mais conteúdo no arquivo
                        arquivo.write(
                            email + '\n' + user_completo + '\n' + senha + "\n\n")
                        try:
                            d.xpath(
                                '//android.view.View[@content-desc="Pular"]').click()
                            time.sleep(2)
                            d(resourceId='com.instagram.android:id/skip_button').click()
                            time.sleep(2)
                            d(resourceId='com.instagram.android:id/negative_button').click()
                            time.sleep(2)
                            d(resourceId='com.instagram.android:id/skip_button').click()
                            skip_button = d(
                                resourceId='com.instagram.android:id/skip_button')
                            time.sleep(2)
                            if skip_button.exists:
                                d(resourceId='com.instagram.android:id/skip_button').click()
                            time.sleep(4)
                            try:
                                element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                target_text = "Seguir"

                                # Encontre todos os elementos que correspondem ao ID fornecido
                                elements = d(resourceId=element_id)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Seguindo sugeridos...')
                                window.Refresh()
                                time.sleep(5)
                                for element in elements:
                                    if element.get_text() == target_text:
                                        element.click()
                                        time.sleep(1)
                                try:
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                except:
                                    pass
                            except Exception as e:
                                print(e)
                                time.sleep(2)
                                element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                target_text = "Seguir"

                                # Encontre todos os elementos que correspondem ao ID fornecido
                                elements = d(resourceId=element_id)
                                # window['output'].print("Seguindo sugeridos...")
                                window.Refresh()
                                for element in elements:
                                    if element.get_text() == target_text:
                                        element.click()
                                        time.sleep(1)
                                d.xpath(
                                    '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                            time.sleep(1)
                            try:
                                d(resourceId='com.instagram.android:id/button_text').click(timeout=10)
                            except:
                                try:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                except:
                                    time.sleep(2)
                                    try:
                                        d(resourceId='com.instagram.android:id/tab_avatar').click()
                                    except:
                                        d.app_stop("com.instagram.android")
                                        time.sleep(1)
                                        d.app_start("com.instagram.android")
                                        time.sleep(30)
                                        try:
                                            pagina_login = d.xpath(
                                                '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                            if pagina_login.exists:
                                                pagina_login.click()
                                                time.sleep(5)
                                                d.xpath(
                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                                    senha)
                                                pagina_login.click()
                                                time.sleep(3)
                                                d.xpath(
                                                    '//android.view.View[@content-desc="Agora não"]').click()
                                            else:
                                                d(resourceId='com.instagram.android:id/profile_tab').click()
                                        except:
                                            time.sleep(2)
                                            pagina_login = d.xpath(
                                                '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                            if pagina_login.exists:
                                                pagina_login.click()
                                                time.sleep(5)
                                                d.xpath(
                                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                                    senha)
                                                pagina_login.click()
                                                time.sleep(3)
                                                d.xpath(
                                                    '//android.view.View[@content-desc="Agora não"]').click()
                                            else:
                                                d(resourceId='com.instagram.android:id/tab_avatar').click()

                            sms = False
                        except Exception as e:
                            d.app_stop("com.instagram.android")
                            time.sleep(1)
                            d.app_start("com.instagram.android")
                            time.sleep(40)
                            try:
                                pagina_login = d.xpath(
                                    '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                if pagina_login.exists:
                                    pagina_login.click()
                                    time.sleep(5)
                                    d.xpath(
                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                        senha)
                                    pagina_login.click()
                                else:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                            except:
                                time.sleep(2)
                                pagina_login = d.xpath(
                                    '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup')

                                if pagina_login.exists:
                                    pagina_login.click()
                                    time.sleep(5)
                                    d.xpath(
                                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/androidx.recyclerview.widget.RecyclerView/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[*]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                        senha)
                                    pagina_login.click()
                                else:
                                    d(resourceId='com.instagram.android:id/tab_avatar').click()
                    elif verificar2.exists:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Verificando novamente...')
                        window.Refresh()
                        d.app_stop("com.instagram.android")
                        time.sleep(1)
                        d.app_start("com.instagram.android")

                        if d.xpath('//android.view.View[@content-desc="Esqueceu a senha?"]').exists(timeout=60):
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[2]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                user_completo)
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout[*]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.widget.EditText').set_text(
                                senha)
                            d.xpath(
                                '//android.widget.Button[@content-desc="Entrar"]/android.view.ViewGroup').click()
                            d.xpath(
                                '//android.view.View[@content-desc="Agora não"]').click()

                        verificar3 = d.xpath(
                            '//android.widget.FrameLayout[@content-desc="Perfil"]/android.view.ViewGroup')
                        time.sleep(40)
                        if verificar3.exists:
                            try:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                                window.Refresh()
                                contagem = contagem + 1
                                sms = False
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")
                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                              conteudo + ' - ' + app]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, num + ' - ' + email, timestamp, maquina,
                                              conteudo + ' - ' + app]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                window['total'].update(num_rows)
                                random_number = random.random()

                                # Definir a chance desejada (10%)
                                chance = 0.2

                                # Verificar se o número aleatório está abaixo da chance
                                if random_number < chance and not user_mysql == "wn3":
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                        funcionamento, scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                    sheet_name = 'relatorio_geral'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)
                            except Exception as e:
                                print(e)
                        else:
                            if seguido is True:
                                seguido = False
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] SMS seguidos, Trocando de número.')
                                window.Refresh()
                                d.app_start('pl.rs.sip.softphone.newapp')
                                time.sleep(4)
                                d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                                d.xpath(
                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                                window.Refresh()
                                sms = True
                            elif seguido is False:
                                seguido = True
                            try:
                                conteudo = config['vpn']

                                # Executa a função correspondente ao conteúdo do arquivo
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                            except Exception as e:
                                raise Exception('skip')
                                sms = True
                                continue
                    else:
                        verificar = d(
                            resourceId='com.instagram.android:id/profile_tab')
                        if verificar.exists:
                            try:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                                window.Refresh()
                                seguido = False
                                contagem += 1
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")
                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                window['total'].update(num_rows)
                                random_number = random.random()

                                # Definir a chance desejada (10%)
                                chance = 0.2

                                # Verificar se o número aleatório está abaixo da chance
                                if random_number < chance and not user_mysql == "wn3":
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                        funcionamento, scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                    sheet_name = 'relatorio_geral'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)
                            except Exception as e:
                                print(e)
                                pass
                            window.Refresh()
                            arquivo = open(
                                'configuracoes/contas/contas_criadas.txt', 'a')
                            # Escreva mais conteúdo no arquivo
                            arquivo.write(user_completo + ' ' + senha + "\n")
                            arquivo = open(
                                'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                            # Escreva mais conteúdo no arquivo
                            arquivo.write(
                                email + '\n' + user_completo + '\n' + senha + "\n\n")
                            try:
                                d.xpath(
                                    '//android.view.View[@content-desc="Pular"]').click()
                                time.sleep(2)
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(2)
                                d(resourceId='com.instagram.android:id/negative_button').click()
                                time.sleep(2)
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(4)
                                try:
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Seguindo sugeridos...')
                                    window.Refresh()
                                    time.sleep(5)
                                    for element in elements:
                                        if element.get_text() == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                except Exception as e:
                                    print(e)
                                    time.sleep(2)
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window['output'].print(
                                        "Seguindo sugeridos...")
                                    window.Refresh()
                                    for element in elements:
                                        if element.get_text() == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                time.sleep(1)
                                try:
                                    d(resourceId='com.instagram.android:id/button_text').click()
                                except:
                                    pass
                                time.sleep(3)
                                try:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                except:
                                    time.sleep(2)
                                    d(resourceId='com.instagram.android:id/tab_avatar').click()
                                sms = False
                            except Exception as e:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Reabrindo Instagram.')
                                window.Refresh()
                                d.app_stop('com.instagram.android')
                                d.app_start('com.instagram.android')
                                time.sleep(20)
                                pass
                        else:
                            if seguido is True:
                                seguido = False
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] SMS seguidos, Trocando de número.')
                                window.Refresh()
                                d.app_start('pl.rs.sip.softphone.newapp')
                                time.sleep(4)
                                d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                                d.xpath(
                                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                                window.Refresh()
                                sms = True
                            elif seguido is False:
                                seguido = True
                            try:
                                conteudo = config['vpn']

                                # Executa a função correspondente ao conteúdo do arquivo
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                            except Exception as e:
                                raise Exception('skip')
                                continue
                except Exception as e:
                    print(e)
                    if conteudo == "AVG":
                        vpn_avg()
                    elif conteudo == "SurfShark":
                        vpn_surf()
                    elif conteudo == "Nenhuma":
                        nenhuma_vpn()
                    elif conteudo == "Avast":
                        vpn_avast()
                    elif conteudo == "ExpressVPN":
                        vpn_express()
                    elif conteudo == "PiaVPN":
                        vpn_pia()
                    elif conteudo == "TunnelBear":
                        vpn_tunnelbear()
                    elif conteudo == "BetterNet":
                        vpn_better()
                    elif conteudo == "CyberGhost":
                        vpn_cyberghost()
                    elif conteudo == "NordVPN":
                        vpn_nord()
                    elif conteudo == "HotspotShield":
                        vpn_hotspotshield()
                    elif conteudo == "WindscribeVPN":
                        vpn_windscribe()
                    elif conteudo == "HmaVPN":
                        vpn_hma()
                    else:
                        window['output'].print(
                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                        window.Refresh()
                    sms = True
                    raise Exception('skip')
                while sms is False:
                    senha = gerar_senha(12)
                    try:
                        time.sleep(3)
                        try:
                            d(resourceId='com.instagram.android:id/profile_tab').click(timeout=120)
                        except:
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu algum erro nesta conta.')
                            window.Refresh()
                            raise Exception('Erro na conta')
                        window['output'].print(linha_ret)
                        window.Refresh()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Criação de outro perfil.')
                        window.Refresh()
                        seguido = False
                        # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True)
                        # Clicar no botão de perfil

                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/action_bar_title_chevron').click()
                        time.sleep(2)
                        # Clicar em perfis
                        try:
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout[2]/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.ListView/android.widget.LinearLayout[last()]/android.widget.FrameLayout/android.widget.ImageView').click()
                        except Exception as e:
                            print(e)
                            print('Erro aq')
                            time.sleep(200)
                        # Clicar em adicionar conta
                        d.xpath(
                            '//android.widget.Button[@content-desc="Criar nova conta"]').click()

                        time.sleep(3)
                        # Gerar nome de usuário, digitar no campo e clicar em avançae
                        lista_user = random.choices(range(0, 9), k=2)
                        lista_letras = random.choices(letras, k=1)

                        with open("storage\\txt\\nomes.txt", "r") as nomes_arquivo:
                            nomes = nomes_arquivo.readlines()

                        with open("storage\\txt\\sobrenomes.txt", "r") as sobrenomes_arquivo:
                            sobrenomes = sobrenomes_arquivo.readlines()

                        nomea = fake.first_name_male().replace(" ", "")
                        nome = unicodedata.normalize('NFKD', nomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        sobrenomea = fake.last_name().replace(" ", "").lower()
                        sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        nome_completo = nome + sobrenome
                        numeros_concatenados = ''.join(
                            str(numero) for numero in lista_user)
                        user_completo1 = nome_completo + '' + \
                            str(numeros_concatenados) + ''.join(lista_letras)

                        user_completo = random.randint(1, len(user_completo1))
                        # Insira o ponto no índice aleatório
                        string_with_dot = user_completo1[:user_completo] + \
                            '_' + user_completo1[user_completo:]
                        user_completo_antigo = string_with_dot.lower()

                        escolha = random.choice(["_", "."])
                        user_completo = nome + escolha + sobrenome + \
                            str(numeros_concatenados) + ''.join(lista_letras)
                        print(user_completo)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Usuário: ' + user_completo)
                        window.Refresh()
                        d(resourceId='com.instagram.android:id/username').set_text(
                            user_completo)
                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/button_text').click()
                        # Digitar senha e avançar
                        time.sleep(3)
                        try:
                            d(resourceId='com.instagram.android:id/password').set_text(
                                senha)
                        except:
                            try:
                                conteudo = config['vpn']
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()

                            except Exception as e:
                                raise Exception('skip')
                        d(resourceId='com.instagram.android:id/button_text').click()
                        # Clicar em concluir cadastro
                        time.sleep(3)
                        d(resourceId='com.instagram.android:id/button_text').click()

                        time.sleep(4)
                        feedback = d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[3]/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.ViewGroup/android.view.View')
                        if feedback.exists:
                            sms = True

                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Verificando...')
                        window.Refresh()
                        # WebDriverWait(driver, 40).until(EC.visibility_of_element_located)(((By.XPATH,
                        #                                 '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup[*]/android.view.ViewGroup[10]')

                        verificar = d(
                            resourceId='com.instagram.android:id/connect_text')
                        if verificar.exists(timeout=60):
                            time.sleep(20)
                            verificar = d(
                                resourceId='com.instagram.android:id/connect_text')
                        if verificar.exists:
                            try:
                                conteudo = config['vpn']
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color=('lime'))
                                window.Refresh()
                                contagem += 1
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")

                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                             "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                              conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))

                                window['total'].update(num_rows)
                                try:
                                    random_number = random.random()

                                    # Definir a chance desejada (10%)
                                    chance = 0.2

                                    # Verificar se o número aleatório está abaixo da chance
                                    if random_number < chance and not user_mysql == "wn3":
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                 "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                            funcionamento, scope)
                                        client = gspread.authorize(creds)

                                        spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                        sheet_name = 'relatorio_geral'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                                  conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:G{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)
                                except:
                                    pass

                                window.Refresh()
                                arquivo = open(
                                    'configuracoes/contas/contas_criadas.txt', 'a')
                                # Escreva mais conteúdo no arquivo
                                arquivo.write(user_completo +
                                              ' ' + senha + "\n")
                                arquivo = open(
                                    'configuracoes/contas/contas_criadas_email_incluso.txt', 'a')
                                # Escreva mais conteúdo no arquivo
                                arquivo.write(
                                    email + '\n' + user_completo + '\n' + senha + "\n\n")
                                window.Refresh()
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(1)
                                d(resourceId='com.instagram.android:id/negative_button').click()
                                time.sleep(3)
                                d(resourceId='com.instagram.android:id/skip_button').click()
                                time.sleep(1)
                                try:
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Seguindo sugeridos...')
                                    window.Refresh()
                                    for element in elements:
                                        if element.get_text() == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()
                                except Exception as e:
                                    print(e)
                                    d(resourceId='com.instagram.android:id/skip_button').click()
                                    element_id = "com.instagram.android:id/row_recommended_user_follow_button"
                                    target_text = "Seguir"

                                    # Encontre todos os elementos que correspondem ao ID fornecido
                                    elements = d(resourceId=element_id)
                                    window.Refresh()
                                    for element in elements:
                                        if element.text == target_text:
                                            element.click()
                                            time.sleep(1)
                                    d.xpath(
                                        '//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click()

                                time.sleep(1)
                                time.sleep(3)
                                try:
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                except Exception as e:
                                    print(e)
                                    d(resourceId='com.instagram.android:id/button_text').click()
                                    d(resourceId='com.instagram.android:id/profile_tab').click()
                                sms = False
                            except Exception as e:
                                print(e)

                        else:
                            try:
                                conteudo = config['vpn']
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()

                            except Exception as e:
                                sms = True
                                if not str(e) == '':
                                    traceback.print_exc()
                                if not e == 'skip' or not e == 'Manutenção.':
                                    try:
                                        d.screenshot(
                                            f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                                    except Exception as e:
                                        print(e)
                                        pass
                    except Exception as e:
                        import traceback
                        if not str(e) == '':
                            traceback.print_exc()
                        print(e)
                        if not e == 'skip' or not e == 'Manutenção.':
                            try:
                                d.screenshot(
                                    f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                            except Exception as e:
                                print(e)
                                pass
                        sms = True

            except Exception as e:
                print(e)
                if not str(e) == '':
                    traceback.print_exc()
                if not e == 'skip' or not e == 'Manutenção.':
                    try:
                        d.screenshot(
                            f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                    except Exception as e:
                        print(e)
                        pass

        except Exception as e:
            print(e)
            import traceback
            if not str(e) == '':
                traceback.print_exc()
            if not e == 'skip' or not e == 'Manutenção.':
                try:
                    d.screenshot(
                        f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                except Exception as e:
                    print(e)
                    pass

            pass

def creator_CLONER_NUM():
    import traceback
    import random
    global gerar_senha
    SPREADSHEET_ID = config['spreadsheet']
    conteudo = config['vpn']
    #def gerar_senha(tamanho=12):
    #    import random
    #    if tamanho < 6:
    #        raise ValueError("A senha deve ter pelo menos 6 caracteres.")
#
    #    # Define uma lista de letras maiúsculas e minúsculas
    #    letras_maiusculas = [random.choice(
    #        string.ascii_uppercase) for _ in range(tamanho // 2)]
    #    letras_minusculas = [random.choice(
    #        string.ascii_lowercase) for _ in range(tamanho // 2)]
#
    #    # Intercale as letras maiúsculas e minúsculas
    #    senha = ''.join(''.join(pair)
    #                    for pair in zip(letras_maiusculas, letras_minusculas))
#
    #    # Adiciona caracteres especiais, números e @
    #    caracteres_permitidos = string.ascii_letters + string.digits + string.punctuation
    #    caracteres_permitidos = caracteres_permitidos.replace(
    #        "~", "")  # Remove ~ e outros acentos
#
    #    senha += ''.join(random.choice(caracteres_permitidos)
    #                    for _ in range(tamanho - len(senha) - 3))
    #    # Adiciona pelo menos uma letra maiúscula
    #    senha += random.choice(string.ascii_uppercase)
    #    senha += random.choice(string.digits)  # Adiciona pelo menos um número
    #    senha += "@"
#
    #    # Mistura os caracteres
    #    senha = ''.join(random.sample(senha, len(senha)))
#
    #    return senha
    senha = gerar_senha(12)
    maquina = config['maquina']
    tentativa = False
    seguido = False
    regiao_vpn = 'Sem dados'
    app = 'Normal'
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    # Código que gera a saída
    import os
    import time
    import requests
    import hashlib
    import subprocess

    # verifica se o arquivo existe na pasta do bot

    try:
        from rich.console import Console
    except ModuleNotFoundError:
        import subprocess
        import sys

        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['pip', 'install', '-r', 'requirements.txt'])
        subprocess.run(['deactivate'], shell=True)
        from rich.console import Console
    import os
    import time

    try:
        from PIL import Image
        import cv2
        import numpy as np
        import tempfile
        import random
        import os
        import requests
        from io import BytesIO
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(f'pip install pillow opencv-python-headless numpy',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(['deactivate'], shell=True)
        from PIL import Image
        import cv2
        import numpy as np
        import tempfile
        import random
        import os
        import requests
        from io import BytesIO

    try:
        import uiautomator2 as u2
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'uiautomator2==2.16.25'])
        subprocess.run(['deactivate'], shell=True)
        subprocess.run(['pip', 'install', '--upgrade', 'requests'])
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        import requests
        time.sleep(10)
        import uiautomator2 as u2
    d = u2.connect(f'{porta}')
    import requests
    import hashlib
    import subprocess
    from colorama import init, Fore, Back, Style
    from faker import Faker
    # teste
    init(autoreset=True)
    console = Console()
    from termcolor import colored

    from rich.console import Console
    from rich.panel import Panel
    from rich.text import Text
    from rich.rule import Rule
    from PIL import Image
    import numpy as np
    import time
    import os
    import tempfile
    import subprocess
    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random
    from datetime import datetime
    import string
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import NoSuchElementException
    from mailtm import Email
    import re
    import logging

    logger = logging.getLogger(__name__)

    handler = logging.FileHandler('log.txt')
    handler.setLevel(logging.ERROR)

    logger.addHandler(handler)

    # RANGE_NAME = 'contas!A:D'
    #
    # SCOPES = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

    def vpn_avast():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Avast', text_color='red')
        window.Refresh()
        sms = True
        try:
            d.app_stop("com.avast.android.vpn")
            d.app_start("com.avast.android.vpn", ".app.wizard.WizardActivity")
            time.sleep(10)
        except Exception as e:
            print(e)
        abc = False

    def nenhuma_vpn():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        sms = True
        time.sleep(10)

    def vpn_hotspotshield():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HotspotShield',
                               text_color='red')
        window.Refresh()
        sms = True
        try:
            d.app_stop('hotspotshield.android.vpn')
            d.app_start('hotspotshield.android.vpn')
        except Exception as e:
            print(e)
        d(resourceId='hotspotshield.android.vpn:id/tryAgainButton').click()
        time.sleep(5)
        d(resourceId='hotspotshield.android.vpn:id/btnVpnConnect').click()

        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_pia():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da PiaVPN', text_color='red')
        window.Refresh()
        sms = True
        try:
            d.app_stop('com.privateinternetaccess.android')
            d.app_start('com.privateinternetaccess.android')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()
        time.sleep(3)
        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()

        abc = False

    def vpn_express():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da ExpressVPN', text_color='red')
        window.Refresh()
        sms = True
        try:
            d.app_stop('com.expressvpn.vpn')
            d.app_start('com.expressvpn.vpn')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.expressvpn.vpn:id/obiButton').click()
        time.sleep(3)
        d(resourceId='com.expressvpn.vpn:id/obiButton').click()

        abc = False

    def vpn_nord():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da NordVPN', text_color='red')
        window.Refresh()
        sms = True
        try:
            d.app_stop('com.nordvpn.android')
            time.sleep(5)
            d.app_start('com.nordvpn.android', use_monkey=True)
        except:
            pass
        time.sleep(10)
        time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_surf():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark', text_color='red')
        window.Refresh()

        try:
            d.app_stop('com.surfshark.vpnclient.android')
            d.app_start('com.surfshark.vpnclient.android')
        except:
            pass
        time.sleep(15)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_better():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da BetterNet', text_color='red')
        window.Refresh()

        try:
            d.app_stop('com.freevpnintouch')
            d.app_start('com.freevpnintouch')
        except:
            pass
        time.sleep(10)
        dialog = d(resourceId='com.freevpnintouch:id/dialogCtaPositive')
        connect = d(
            resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
        if dialog.exists:
            d(resourceId='com.freevpnintouch:id/dialogCtaPositive').click()
            time.sleep(3)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            # time.sleep(5)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
        while connect == 'CONNECT':
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            time.sleep(4)
            connect = d(
                resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            # WebDriverWait(driver, 20).until(
            # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        ip = '127.0.0.1:' + porta

        output = subprocess.check_output(
            ['adb', '-s', ip, 'shell', 'ifconfig'])

        # Verifica se a conexão VPN está ativa
        if not "tun0" in str(output):
            window['output'].print("Não conectado na BetterNet.")
            window.Refresh()
            try:
                connect = d(
                    resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
                d.app_stop('com.freevpnintouch')
                d.app_start('com.freevpnintouch')
                while connect == 'CONNECT':
                    d(resourceId='com.freevpnintouch:id/buttonConnect').click()
                    time.sleep(4)
                    connect = d(
                        resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            except:
                pass
        abc = False

    def vpn_cyberghost():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da CyberGhost', text_color='red')
        window.Refresh()

        try:
            d.app_stop('de.mobileconcepts.cyberghost')
            d.app_start('de.mobileconcepts.cyberghost')
        except:
            pass
        # time.sleep(3)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        rate = d(resourceId='de.mobileconcepts.cyberghost:id/rate_me_text')
        if rate.exists:
            d(resourceId='android:id/button2').click()
        time.sleep(2)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        abc = False

    def vpn_tunnelbear():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        sms = True
        try:
            d.app_stop('com.tunnelbear.android')
            d.app_start("com.tunnelbear.android")
            while True:
                output = subprocess.check_output(
                    ['adb', '-s', porta, 'shell', 'ifconfig'])
                # print(str(output))
                if "tun0" in str(output):
                    print('Conectada')
                    break
                elif not "tun0" in str(output):
                    print('Reconectando')
                    try:
                        d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                        time.sleep(10)
                    except:
                        pass
        except Exception as e:
            print(e)
            pass

    def vpn_avg():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da AVG', text_color='red')
        window.Refresh()
        sms = True
        try:
            d.app_stop('com.avg.android.vpn')
            d.app_start("com.avg.android.vpn",
                        "com.avast.android.vpn.app.wizard.WizardActivity")
            regiao_vpn = d(
                resourceId='com.avg.android.vpn:id/location_title').get_text()

        except Exception as e:
            print(e)
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #               stderr=subprocess.DEVNULL, check=True, shell=True)

        time.sleep(30)

    def vpn_windscribe():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Windscribe', text_color='red')
        window.Refresh()
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)
            d.app_stop("com.windscribe.vpn")
            d.app_start("com.windscribe.vpn")
        except:
            pass
        d(resourceId='com.windscribe.vpn:id/on_off_button').click()
        time.sleep(10)
        primeiro = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_name').get_text()
        segundo = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_nick_name').get_text()
        regiao_vpn = primeiro + ' ' + segundo

    def vpn_hma():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HMA', text_color='red')
        window.Refresh()
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)

            d.app_stop("com.hidemyass.hidemyassprovpn")
            time.sleep(3)
            d.app_start('com.hidemyass.hidemyassprovpn',
                        'com.avast.android.vpn.activity.HmaOnboardingActivity')
        except:
            pass
        time.sleep(10)
    def gerar_senha(tamanho=12):
        if tamanho < 6:
            raise ValueError("A senha deve ter pelo menos 6 caracteres.")

        # Define uma lista de letras maiúsculas e minúsculas
        letras_maiusculas = [random.choice(
            string.ascii_uppercase) for _ in range(tamanho // 2)]
        letras_minusculas = [random.choice(
            string.ascii_lowercase) for _ in range(tamanho // 2)]

        # Intercale as letras maiúsculas e minúsculas
        senha = ''.join(''.join(pair)
                        for pair in zip(letras_maiusculas, letras_minusculas))

        # Adiciona caracteres especiais, números e @
        caracteres_permitidos = string.ascii_letters + string.digits + string.punctuation
        caracteres_permitidos = caracteres_permitidos.replace(
            "~", "")  # Remove ~ e outros acentos

        senha += ''.join(random.choice(caracteres_permitidos)
                        for _ in range(tamanho - len(senha) - 3))
        # Adiciona pelo menos uma letra maiúscula
        senha += random.choice(string.ascii_uppercase)
        senha += random.choice(string.digits)  # Adiciona pelo menos um número
        senha += "@"

        # Mistura os caracteres
        senha = ''.join(random.sample(senha, len(senha)))

        return senha

    def escrever_devagar(element, text, delay=0.05, chunk_size=3):
        element.clear_text()
        current_text = ""
        for i in range(0, len(text), chunk_size):
            current_text += text[i:i+chunk_size]
            element.set_text(current_text)
            time.sleep(delay)


    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    window.Refresh()

    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global transition_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass
    try:
        subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
    except Exception as e:
        pass

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Efetuando troca de IP.')
    window.Refresh()
    try:
        conteudo = config['vpn']
        if conteudo == "AVG":
            vpn_avg()
        elif conteudo == "SurfShark":
            vpn_surf()
        elif conteudo == "Nenhuma":
            nenhuma_vpn()
        elif conteudo == "Avast":
            vpn_avast()
        elif conteudo == "ExpressVPN":
            vpn_express()

        elif conteudo == "PiaVPN":
            vpn_pia()
        elif conteudo == "TunnelBear":
            vpn_tunnelbear()
        elif conteudo == "BetterNet":
            vpn_better()
        elif conteudo == "CyberGhost":
            vpn_cyberghost()
        elif conteudo == "NordVPN":
            vpn_nord()
        elif conteudo == "HotspotShield":
            vpn_hotspotshield()
        elif conteudo == "WindscribeVPN":
            vpn_windscribe()
        elif conteudo == "HmaVPN":
            vpn_hma()
        else:
            window['output'].print(
                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
            window.Refresh()

    except Exception as e:
        print(e)
        pass

    window.Refresh()
    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando sistema inicializar.')
    window.Refresh()

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.\n')

    d.implicitly_wait(30.0)
    d.set_fastinput_ime(True)
    if not os.path.exists('./erros'):
        os.makedirs('./erros')
    codigo_não_recebido_seguidos = 0
    while parar is False:
        try:
            try: d.app_clear("com.instagram.android")
            except: pass
            try: d.app_clear("pl.rs.sip.softphone.newapp")
            except: pass
            try: d.app_stop("com.lbe.parallel.intl")
            except: pass
            try: d.app_stop("com.lbe.parallel.intl.arm32")
            except: pass
            try: d.app_stop("com.lbe.parallel.intl.arm64")
            except: pass
            senha = gerar_senha(12)
            if parar is True:
                print('Parando Thread')
                break

            window['output'].print(linha_ret)
            window.Refresh()
            try:
                subprocess.run(
                    f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.READ_CONTACTS',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                subprocess.run(
                    f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.CAMERA',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                subprocess.run(
                    f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.RECORD_AUDIO',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                try:
                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.ACCESS_NOTIFICATION_POLICY',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                except:
                    pass

                subprocess.run(
                    f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.POST_NOTIFICATIONS',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
            except:
                pass
            try:
                d.app_start('pl.rs.sip.softphone.newapp')
            except:
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu algum erro ao abrir o 2NR, tentando novamente.')
                window.Refresh()
            time.sleep(3)
            scope = ["https://spreadsheets.google.com/feeds",
                    "https://www.googleapis.com/auth/drive"]
            creds = ServiceAccountCredentials.from_json_keyfile_name(
                'credentials.json', scope)
            client = gspread.authorize(creds)
            spreadsheet_id = config['spreadsheet']
            sheet_name = config['2nr']
            sheet = client.open_by_key(
                spreadsheet_id).worksheet(sheet_name)
            # Obtém todas as células
            cells = sheet.get_all_values()
            # Armazena as células que correspondem à condição
            matches = [cell for row in cells for cell in row if
                    re.match(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', cell)]
            # Armazena a lista de células correspondentes à condição em uma variável
            regex2nr = matches
            while len(regex2nr) == 0:
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Nenhuma conta do 2NR encontrada.\nTentando novamente em 5 min.')
                window.Refresh()
                scope = ["https://spreadsheets.google.com/feeds",
                        "https://www.googleapis.com/auth/drive"]
                creds = ServiceAccountCredentials.from_json_keyfile_name(
                    'credentials.json', scope)
                client = gspread.authorize(creds)
                spreadsheet_id = config['spreadsheet']
                sheet_name = config['2nr']
                sheet = client.open_by_key(
                    spreadsheet_id).worksheet(sheet_name)
                # Insert user, password, and timestamp into first empty row
                sheet = client.open_by_key(
                    spreadsheet_id).worksheet(sheet_name)
                values = sheet.col_values(1)
                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                rows = sheet.get_all_values()
                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                regex = re.compile(r'\S+\s\S+')
                sheet_name = config['2nr']
                try:
                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                    num_rows = sum(1 for row in rows if regex.match(row[0]))
                    window['total'].update(num_rows)
                except:
                    pass
                time.sleep(300)
                cells = sheet.get_all_values()
                # Armazena as células que correspondem à condição
                matches = [cell for row in cells for cell in row if
                        re.match(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', cell)]
                # Armazena a lista de células correspondentes à condição em uma variável
                regex2nr = matches
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] {len(regex2nr)} conta(s) encontrada.')
            window.Refresh()
            time.sleep(3)
            try:
                d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(timeout=60)
            except Exception as e:
                print(e)
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao clicar em login. Tentando novamente.')
                window.Refresh()
                subprocess.run(
                    f'uiautomator2 -s {porta} uninstall com.github.uiautomator',
                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                raise Exception('Ocorreu um erro ao clicar em login.')
            time.sleep(5)
            spreadsheet_id = config['spreadsheet']
            sheet_name = config['2nr']
            sheet = client.open_by_key(
                spreadsheet_id).worksheet(sheet_name)
            # Obtém todas as células
            # Define a faixa de células para leitura
            first_linha = sheet.cell(1, 1).value
            # Divide a string em duas partes separadas por um espaço em branco
            partes = first_linha.split(' ')
            # Atribui a primeira parte (endereço de e-mail) à variável email2nr
            email2nr = partes[0]
            # Atribui a segunda parte (texto) à variável senha2nr
            senha2nr = partes[1]
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Email 2NR: {email2nr}')
            window.Refresh()
            d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email2nr)
            time.sleep(0.5)
            d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha2nr)
            time.sleep(0.5)
            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
            time.sleep(3)
            perm = d(resourceId='pl.rs.sip.softphone.newapp:id/messages')
            if perm.exists(timeout=30):
                time.sleep(10)
                pass
            else:
                try:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Conta não existe.')
                    window.Refresh()
                    scope = ["https://spreadsheets.google.com/feeds",
                            "https://www.googleapis.com/auth/drive"]
                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                        'credentials.json', scope)
                    client = gspread.authorize(creds)
                    # Abre a planilha e a planilha de uma determinada aba
                    spreadsheet_id = config['spreadsheet']
                    sheet_name = config['2nr']
                    sheet = client.open_by_key(
                        spreadsheet_id).worksheet(sheet_name)
                    # Apaga a primeira célula da coluna A e desloca as células abaixo
                    sheet.delete_rows(1, 1)
                    try:
                        conteudo = config['vpn']
                        # Executa a função correspondente ao conteúdo do arquivo
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                    except Exception as e:
                        raise Exception('skip')
                        sms = True
                    raise Exception('skip')
                except Exception as e:
                    print(e)
                raise Exception('skip')
            try:
                qtd_num2 = d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[*]/androidx.appcompat.widget.LinearLayoutCompat/android.widget.LinearLayout/android.widget.TextView[1]')
                qtd_num = qtd_num2.all()
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] {len(qtd_num)} número(s) encontrado.')
            except Exception as e:
                print(e)
            if len(qtd_num) == 0:
                try:
                    scope = ["https://spreadsheets.google.com/feeds",
                            "https://www.googleapis.com/auth/drive"]
                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                        'credentials.json', scope)
                    client = gspread.authorize(creds)
                    # Abre a planilha e a planilha de uma determinada aba
                    spreadsheet_id = config['spreadsheet']
                    sheet_name = config['2nr']
                    sheet = client.open_by_key(
                        spreadsheet_id).worksheet(sheet_name)
                    # Apaga a primeira célula da coluna A e desloca as células abaixo
                    sheet.delete_rows(1, 1)
                except Exception as e:
                    print(e)
                continue
            window.Refresh()
            
            try:
                num = d.xpath(
                    '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat/android.widget.LinearLayout/android.widget.TextView[1]').get_text()
                num = num.replace(' ', '')
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Número: +48{num}')
                window.Refresh()
                email = num
            except Exception as e:
                print(e)
            d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonSettings').click()
            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
            d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                
            try:
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Clonando Instagram')
                window.Refresh()
                package_name = "com.lbe.parallel.intl"
                d.app_clear(package_name)
                #clear_command = f"adb shell pm clear {package_name}"
                #subprocess.run(clear_command.split(), capture_output=True, text=True)
                try:
                    clear_command = f"adb shell pm clear com.lbe.parallel.intl.arm32"
                    subprocess.run(clear_command.split(), capture_output=True, text=True)
                except: pass
                try:
                    clear_command = f"adb shell pm clear com.lbe.parallel.intl.arm64"
                    subprocess.run(clear_command.split(), capture_output=True, text=True)
                except: pass
                permissions = [
                    "android.permission.CALL_PHONE",
                    "android.permission.READ_EXTERNAL_STORAGE",
                    "android.permission.WRITE_EXTERNAL_STORAGE",
                    "android.permission.ACCESS_FINE_LOCATION",
                    "android.permission.ACCESS_COARSE_LOCATION",
                    "android.permission.READ_CONTACTS"
                ]
#
#
                # Conceder cada permissão
                for permission in permissions:
                    command = f"adb -s {porta} shell pm grant {package_name} {permission}"
                    result = subprocess.run(command.split(), capture_output=True, text=True)
                    if result.returncode == 0:
                        pass
                        #print(f"Permissão '{permission}' concedida para '{package_name}'.")
                    else:
                        print(f"Erro ao conceder permissão '{permission}': {result.stderr}")
                d.app_start(package_name)
                d(text="Agree and continue").click(timeout=15)
                d(text='CONTINUAR').click(timeout=20)
                try:
                    d(text='COMEÇAR').click(timeout=15)
                except:
                    image_url = "https://www.dropbox.com/scl/fi/qag56h0ps1yaa8sfh4091/Captura-de-tela-2024-06-16-184155.png?rlkey=mhh2dyb1gf7eaw8uqzhbh0wmo&st=x0ngbkzk&dl=1"

                    # Baixe a imagem de referência
                    response = requests.get(image_url)
                    template = Image.open(BytesIO(response.content))
                    template_path = os.path.join(tempfile.gettempdir(), f"consent.png")
                    template.save(template_path)

                    # Converta a imagem de referência para o formato necessário
                    template = cv2.cvtColor(np.array(template), cv2.COLOR_RGB2BGR)

                    # Conecte ao dispositivo
                    #d = u2.connect()

                    # Capture a tela
                    screenshot = d.screenshot(format='pillow')
                    screenshot_path = os.path.join(tempfile.gettempdir(), f"screen{random.randint(000,999)}.png")
                    screenshot.save(screenshot_path)
                    print(screenshot_path)

                    # Carregue a imagem da tela e a imagem de referência
                    screenshot = cv2.cvtColor(np.array(screenshot), cv2.COLOR_RGB2BGR)

                    # Realize a correspondência de templates usando OpenCV
                    result = cv2.matchTemplate(screenshot, template, cv2.TM_CCOEFF_NORMED)

                    # Defina um limite para considerar uma correspondência válida
                    threshold = 0.0
                    loc = np.where(result >= threshold)

                    # Encontre o ponto (x, y) do centro da correspondência
                    if len(loc[0]) > 0:
                        min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)
                        top_left = max_loc
                        h, w, _ = template.shape
                        center_x = top_left[0] + w // 2
                        center_y = top_left[1] + h // 2
                        # Clique na posição calculada
                        d.click(center_x, center_y)
                        print(f"Imagem encontrada e clicada na posição ({center_x}, {center_y}).")
                    else:
                        print("Imagem de referência não encontrada na tela.")
                    d(text='COMEÇAR').click(timeout=20)
                d(resourceId="com.lbe.parallel.intl:id/clone_add").click(timeout=25)
                #d(text="Adicionar Apps").wait(timeout=30)
                d(text="ACEITAR").click()
                try: d(text="Instagram").click(timeout=10)
                except: 
                    d(text="Adicionar Apps").click(timeout=10)
                    #d(text="Instagram").click(timeout=10)
                    d(resourceId="com.lbe.parallel.intl:id/clone_add").click(timeout=25)
                time.sleep(2)


                #from PIL import Image
                #import numpy as np
                #import time
                #import random
                #import os
                #import tempfile
                #d.app_clear("com.ludashi.dualspaceprox")
                #package_name = "com.ludashi.dualspaceprox"
                #permissions = [
                #    "android.permission.CALL_PHONE",
                #    "android.permission.READ_EXTERNAL_STORAGE",
                #    "android.permission.WRITE_EXTERNAL_STORAGE",
                #    "android.permission.ACCESS_FINE_LOCATION",
                #    "android.permission.ACCESS_COARSE_LOCATION",
                #    "android.permission.READ_CONTACTS"
                #]
                ## Conceder cada permissão
                #for permission in permissions:
                #    command = f"adb -s {porta} shell pm grant {package_name} {permission}"
                #    result = subprocess.run(command.split(), capture_output=True, text=True)
                #    if result.returncode == 0:
                #        pass
                #        #print(f"Permissão '{permission}' concedida para '{package_name}'.")
                #    else:
                #        print(f"Erro ao conceder permissão '{permission}': {result.stderr}")
                #d.app_start("com.ludashi.dualspaceprox")
                #d(textContains="INICIAR").click(timeout=30)
                #time.sleep(2)
                #d(resourceId="com.ludashi.dualspaceprox:id/search").click(timeout=30)
                #time.sleep(2)
                #try:
                #    d(resourceId="com.ludashi.dualspaceprox:id/input_edit").set_text("Instagra")
                #except:
                #    d(resourceId="com.ludashi.dualspaceprox:id/search").click(timeout=30)
                #    time.sleep(3)
                #    d(resourceId="com.ludashi.dualspaceprox:id/input_edit").set_text("Instagra")
                #    time.sleep(1)
#
                #d(text="Instagram").click(timeout=20)
                #d.press("back")
                #d.press("back")
                #d(resourceId="com.ludashi.dualspaceprox:id/btn_clone").click(timeout=20)
                #d(text="Instagram(1)").click(timeout=30)
                #d(text="Instagram(1)").click(timeout=30)
                #time.sleep(3)
#
                #screenshot_path = os.path.join(tempfile.gettempdir(), f"screen{random.randint(000,999)}.png")
                #d.screenshot(screenshot_path)
#
                ## Esperar um pouco para garantir que a captura de tela seja salva
                #time.sleep(2)
#
                ## Abrir a imagem da captura de tela
                #img = Image.open(screenshot_path)
                #img_array = np.array(img)
#
                ## Definir a cor que você está procurando (RGB)
                #target_color = (31, 109, 238)  # Exemplo: vermelho
#
                ## Encontrar o último pixel com a cor alvo
                #def find_last_color_pixel(image_array, target_color):
                #    # Converte a imagem para o espaço de cores RGB
                #    img_rgb = img_array[:, :, :3]
#
                #    # Calcula a diferença entre cada pixel e a cor alvo
                #    diff = np.abs(img_rgb - np.array(target_color))
#
                #    # Soma as diferenças para cada canal RGB
                #    total_diff = np.sum(diff, axis=-1)
#
                #    # Encontra todos os índices onde a diferença é zero (corresponde à cor alvo)
                #    indices = np.argwhere(total_diff == 0)
#
                #    # Se não houver índices encontrados, retorna None
                #    if len(indices) == 0:
                #        return None, None
#
                #    # Encontra o último índice onde a diferença é zero
                #    last_index = indices[-1]
#
                #    # Obtém as coordenadas do último pixel com a cor alvo
                #    y, x = last_index
#
                #    return x, y
#
                #x, y = find_last_color_pixel(img_array, target_color)
#
                #if x is not None and y is not None:
                #    print(f"Último pixel encontrado na posição: ({x}, {y})")
#
                #    # Converter x e y para inteiros
                #    x = int(x)
                #    y = int(y)
#
                #    # Clicar no pixel encontrado
                #    d.click(x, y)
                #else:
                #    print("Cor não encontrada na imagem.")
#
                ## Remover a captura de tela temporária no computador
                #os.remove(screenshot_path)


                while True:
                    if d(text="Tentar novamente"):
                        d(text="Tentar novamente").click()
                    elif d(text="Ir para o app"):
                        d(text="Ir para o app").click()
                    elif d(text="ENTENDI"):
                        d(text="ENTENDI").click()
                    elif d(text="Termos e Política de Privacidade"):
                        d.xpath('//android.widget.Button[@content-desc="Continuar"]').click()
                        time.sleep(5)
                        if not d(text="Criar nova conta"):
                            d.press("back")
                            d(text="Instagram(1)").click(timeout=30)
                        
                    elif d(text="Criar nova conta"):
                        d(text="Criar nova conta").click()
                        break
                    elif d(text="Adicionar Apps"):
                        d(text="Instagram").click(timeout=10)
                        time.sleep(2)
                    elif d(text="Instagram(1)"):
                        try:
                            d(textContains="Instagram").click(timeout=10)
                        except Exception as e:
                            print(e)
                        time.sleep(2)
                    elif d(text="Recarregar"):
                        d(text="Recarregar").click()
                        time.sleep(3)
                        if d(text="Recarregar"):
                            conteudo = config['vpn']
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Pagina Estática.')
                            window.Refresh()
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception("IP Bloqueado")
                
                d(text='Cadastrar-se com o email').wait(timeout=30)
                num = f"+48{num}"
                escrever_devagar(d(className="android.widget.EditText"), num, delay=0.05)
                d(text="Avançar").click(timeout=30)
                time.sleep(5)
                if d(textContains="Você está tentando entrar?").wait(timeout=15):
                    d(text="Criar nova conta").click()
                    time.sleep(3)
                if d(text="Enviar código por SMS"):
                    d(text="Enviar código por SMS").click()
                    d(text="Avançar").click(timeout=30)
                try:
                    d(text="Não recebi o código").wait(timeout=30)
                except:
                    print("Restrição")
                    time.sleep(1000)
                    raise Exception("Restrição")
                
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                window.Refresh()
                troca_ip_estatica = 0
                # MUDAR PARA 2NR
                d.app_start("pl.rs.sip.softphone.newapp")
                #d.press("recent")
                #d.press("recent")
                # MUDAR PARA 2NR
                time.sleep(5)
                if d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').exists:
                    print('2NR deslogou')
                    d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(timeout=60)
                    time.sleep(5)

                    d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email2nr)
                    time.sleep(0.5)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha2nr)
                    time.sleep(0.5)
                    d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                    time.sleep(3)

                d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()

                try:
                    cod = d(
                        resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=40)

                except:
                    codigo_não_recebido_seguidos += 1
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Reenviando código.')
                    window.Refresh()
                    # MUDAR PARA INSTA
                    d.press("recent")
                    time.sleep(1)
                    d.press("recent")
                    # MUDAR PARA INSTA
                    time.sleep(2)
                    try:
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                    except: pass
                    # MUDAR PARA INSTA
                    d.press("recent")
                    time.sleep(1)
                    d.press("recent")
                    # MUDAR PARA INSTA
                    d.app_start('pl.rs.sip.softphone.newapp')
                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()

                    try:
                        cod = d(
                            resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=40)

                    except:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido')
                        window.Refresh()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click(timeout=30)
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                        window.Refresh()
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception(' ')
                
                cod = cod.replace(' ', '')
                codigo = re.sub('[^0-9]', '', cod)[:6]
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                window.Refresh()
                d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonSettings').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()

                # MUDAR PARA INSTA
                d.press("recent")
                time.sleep(1)
                d.press("recent")
                # MUDAR PARA INSTA
                d(text='Avançar').wait(timeout=30)
                escrever_devagar(d(className="android.widget.EditText"), codigo, delay=0.05)

                d(text="Avançar").click(timeout=30)
                d(text='Crie uma senha').wait(timeout=30)
                senha = gerar_senha(12)
                escrever_devagar(d(className="android.widget.EditText"), senha, delay=0.05)
                #escrever_devagar(d(className="android.widget.EditText"), senha, delay=0.05)
                d(text="Avançar").click(timeout=30)
                d(text="Agora não").click(timeout=30)
                try:
                    if d(text="CANCELAR").wait(timeout=10):
                        d(text="CANCELAR").click()
                except:
                    pass

                d(text="Avançar").click(timeout=30)
                time.sleep(0.5)
                d(text="Avançar").click(timeout=30)
                d(text="Qual é a sua idade?").wait(timeout=30)
                idade_aleatorio = str(random.randint(18, 50))
                escrever_devagar(d(className="android.widget.EditText"), idade_aleatorio, delay=0.05)
                #d(className="android.widget.EditText").set_text(random.randint(18, 50))
                d(text="Avançar").click(timeout=30)
                d(text="OK").click(timeout=30)
                d(text="Qual é o seu nome?").wait(timeout=30)

                lista_user = random.choices(range(0, 9), k=2)
                lista_letras = random.choices(letras, k=2)
                nomea = fake.first_name_male().replace(" ", "")
                nome = unicodedata.normalize('NFKD', nomea).encode(
                    'ASCII', 'ignore').decode('ASCII')
                sobrenomea = fake.last_name().replace(" ", "").lower()
                sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                    'ASCII', 'ignore').decode('ASCII')
                nome_completo = nome + ' ' + sobrenome
                nome_completo_s = nome + sobrenome
                numeros_concatenados = ''.join(str(numero)
                                            for numero in lista_user)
                user_completo1 = nome_completo_s + '' + \
                    str(numeros_concatenados) + ''.join(lista_letras)
                user_completo = random.randint(1, len(user_completo1))
                string_with_dot = user_completo1[:user_completo] + \
                    '_' + user_completo1[user_completo:]
                user_completo_antigo = string_with_dot.lower()
                escolha = random.choice(["_", "."])
                user_completo = nome + escolha + sobrenome + \
                    str(numeros_concatenados) + ''.join(lista_letras)
                print(user_completo)


                #escrever_devagar(d(className="android.widget.EditText"), nome_completo, delay=0.05)
                d(className="android.widget.EditText").set_text(nome_completo)
                d(text="Avançar").click(timeout=30)
                d(text="Crie um nome de usuário").wait(timeout=30)
                #escrever_devagar(d(className="android.widget.EditText"), user_completo, delay=0.05)
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] User: {user_completo}')
                window.Refresh()
                escrever_devagar(d(className="android.widget.EditText"), user_completo, delay=0.05)

                time.sleep(5)
                d(text="Avançar").click(timeout=30)
                d(text="Concordo").click(timeout=30)

                for i in range(21):
                    time.sleep(2)
                    if d(resourceId="com.instagram.android:id/tab_avatar"):
                        d(resourceId="com.instagram.android:id/tab_avatar").click()
                        time.sleep(5)
                    elif d(text="Pular") or d(resourceId="com.instagram.android:id/tab_avatar"):
                        print("Conta criada")
                        try:
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                text_color=('lime'))
                            window.Refresh()
                            seguido = False
                            contagem += 1
                            window['criadas'].update(contagem)
                            window.Refresh()
                            now = datetime.now()
                            now_brasilia = tz.localize(now)
                            timestamp = now_brasilia.strftime(
                                "%d/%m/%Y %H:%M:%S")
                            try:
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                        conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            except Exception as e:
                                print(e)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                tempo_aleatorio = random.randint(10, 40)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                time.sleep(tempo_aleatorio)
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                        conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            window['total'].update(num_rows)
                            random_number = random.random()

                            # Definir a chance desejada (10%)
                            chance = 0.2

                            # Verificar se o número aleatório está abaixo da chance
                            if random_number < chance and not user_mysql == "wn3":
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                    funcionamento, scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                sheet_name = 'relatorio_geral'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                        conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)
                        except Exception as e:
                            print(e)
                            pass
                        try:
                            raise Exception("Criar por cima")
                            #d(text="Pular").click(timeout=30)
                            #d(textContains="Em seguida, você pode permitir o acesso").wait(timeout=30)
                            #d(text="Pular").click(timeout=30)
                            #d(text="Receba sugestões do Facebook").wait(timeout=30)
                            #d(text="Pular").click(timeout=30)
                            #d(text="Seguir amigos").wait(timeout=30)
                            #d(text="Pular").click(timeout=30)
                            #d(text="Convide amigos para seguirem você").wait(timeout=30)
                            #d(text="Pular").click(timeout=30)
                            #time.sleep(3)
                            #if d(textContains="Siga mais 5"):
                            #    d(text="Avançar").click(timeout=30)
                            #    time.sleep(10)
                            #else:
                            #    d(text="Encontrar pessoas").wait(timeout=30)
                            #    d.xpath('//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click(timeout=10)
                        except:
                            #package_name = "com.lbe.parallel.intl"
                            package_name = "com.lbe.parallel.intl"
                            d.app_stop(package_name)
                            #clear_command = f"adb shell pm clear {package_name}"
                            #subprocess.run(clear_command.split(), capture_output=True, text=True)
                            try:
                                d.app_stop("com.lbe.parallel.intl.arm32")
                            except: pass
                            try:
                                d.app_stop("com.lbe.parallel.intl.arm64")
                            except: pass
                            d.app_start(package_name)
                            while True:
                                if d(text="Ir para o app"):
                                    d(text="Ir para o app").click()
                                elif d(text="Adicionar Apps"):
                                    try:
                                        d(text="Instagram").click(timeout=10)
                                    except: pass
                                elif d(text="Instagram(1)"):
                                    d(text="Instagram(1)").click(timeout=30)
                                elif d(resourceId="com.instagram.android:id/tab_avatar"):
                                    break
                        #d(text="Sincronize seus contatos para encontrar seus amigos").wait(timeout=30)
                        #d(text="Pular").click(timeout=30)
                        
                        #d(text="Encontrar pessoas").wait(timeout=30)
                        #d.xpath('//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click(timeout=10)
                        while True:
                            time.sleep(5)
                            if d(text="Ir para o app"):
                                d(text="Ir para o app").click()
                            elif d(text="Adicionar Apps"):
                                d(text="Instagram").click(timeout=10)
                            elif d(text="Instagram(1)"):
                                d(text="Instagram(1)").click(timeout=30)
                            elif d(textContains="Permitir todos os cookies"):
                                d(textContains="Permitir todos os cookies").click()
                            elif d(resourceId="com.instagram.android:id/tab_avatar"):
                                break
                        try:
                            d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                        except:
                            d(textContains="Permitir todos os cookies").click()
                            d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                        #d(resourceId="com.instagram.android:id/netego_carousel_cta").click(timeout=60)
                        #if d(text="Não permitir acesso").wait(timeout=30):
                        #    d(text="Não permitir acesso").click(timeout=60)
                        #seguir_sugeridos = 0
                        #while seguir_sugeridos < 10:
                        #    d(resourceId="com.instagram.android:id/recommended_user_card_follow_button").click(timeout=60)
                        #    d(resourceId="com.instagram.android:id/recommended_user_dismiss_button").click(timeout=60)
                        #    time.sleep(0.5)
                        #    seguir_sugeridos += 1
    #
                        #d(resourceId="com.instagram.android:id/action_bar_button_back").click(timeout=10)
                        d(text="seguindo").click()
                        seguir_sugeridos = 0
                        while seguir_sugeridos < 10:
                            try:
                                d(text="Seguir").click(timeout=1)
                                seguir_sugeridos += 1
                            except:
                                width, height = d.window_size()
                                start_x = width // 2
                                start_y = height * 3 // 4  # Comece no 75% da altura
                                end_x = width // 2
                                end_y = height // 4  # Termine no 25% da altura

                                # Realize o swipe
                                d.swipe(start_x, start_y, end_x, end_y, duration=0.5)
                                if not d(text="Seguir"):
                                    break
                        d(resourceId="com.instagram.android:id/action_bar_button_back").click(timeout=10)
                        try:
                            d(resourceId="com.instagram.android:id/action_bar_title_chevron").click(timeout=10)
                        except: 
                            d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                            d(resourceId="com.instagram.android:id/action_bar_title_chevron").click(timeout=10)
                        d(textContains="Adicionar conta").click(timeout=30)
                        d(text="Criar nova conta").click(timeout=20)
                        lista_user = random.choices(range(0, 9), k=2)
                        lista_letras = random.choices(letras, k=2)
                        nomea = fake.first_name_male().replace(" ", "")
                        nome = unicodedata.normalize('NFKD', nomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        sobrenomea = fake.last_name().replace(" ", "").lower()
                        sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        nome_completo = nome + ' ' + sobrenome
                        nome_completo_s = nome + sobrenome
                        numeros_concatenados = ''.join(str(numero)
                                                    for numero in lista_user)
                        user_completo1 = nome_completo_s + '' + \
                            str(numeros_concatenados) + ''.join(lista_letras)
                        user_completo = random.randint(1, len(user_completo1))
                        string_with_dot = user_completo1[:user_completo] + \
                            '_' + user_completo1[user_completo:]
                        user_completo_antigo = string_with_dot.lower()
                        escolha = random.choice(["_", "."])
                        user_completo = nome + escolha + sobrenome + \
                            str(numeros_concatenados) + ''.join(lista_letras)
                        print(user_completo)

                        d(text="Escolha um nome de usuário").wait(timeout=30)
                        escrever_devagar(d(className="android.widget.EditText"), user_completo, delay=0.05, chunk_size=1)
                        while True:
                            if d(textContains='não está disponível.'):
                                d(resourceId='com.instagram.android:id/username_suggestion_text').click()
                            elif d(resourceId="com.instagram.android:id/username_valid_icon"):
                                break
                        d(text="Avançar", enabled=True).click()
                        d(text="Crie uma senha").wait(timeout=20)
                        senha = gerar_senha(12)
                        escrever_devagar(d(className="android.widget.EditText"), senha, delay=0.05, chunk_size=1)
                        time.sleep(2)
                        d(text="Avançar", enabled=True).click()
                        time.sleep(3)
                        d(text='Concluir o cadastro').click(timeout=20)
                        while True:
                            if (
                                d(text='Tente novamente mais tarde') or 
                                d(textContains="Ocorreu um erro de rede desconhecido") or
                                d(textContains="feedback_required")

                            ):
                                window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Restrição')
                                window.Refresh()
                                conteudo = config['vpn']
                                if conteudo == "AVG":
                                    vpn_avg()
                                elif conteudo == "SurfShark":
                                    vpn_surf()
                                elif conteudo == "Nenhuma":
                                    nenhuma_vpn()
                                elif conteudo == "Avast":
                                    vpn_avast()
                                elif conteudo == "ExpressVPN":
                                    vpn_express()
                                elif conteudo == "PiaVPN":
                                    vpn_pia()
                                elif conteudo == "TunnelBear":
                                    vpn_tunnelbear()
                                elif conteudo == "BetterNet":
                                    vpn_better()
                                elif conteudo == "CyberGhost":
                                    vpn_cyberghost()
                                elif conteudo == "NordVPN":
                                    vpn_nord()
                                elif conteudo == "HotspotShield":
                                    vpn_hotspotshield()
                                elif conteudo == "WindscribeVPN":
                                    vpn_windscribe()
                                elif conteudo == "HmaVPN":
                                    vpn_hma()
                                else:
                                    window['output'].print(
                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                    window.Refresh()
                                raise Exception("Restrição")
                            
                            elif d(text='Pular'): break
                        time.sleep(5)
                        d(text='Pular').wait(timeout=30)
                        time.sleep(5)
                        if d(text="Pular"):
                            print("Conta criada")
                            try:
                                window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                    text_color=('lime'))
                                window.Refresh()
                                seguido = False
                                contagem += 1
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")
                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                            "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                            conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                            "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                            conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                window['total'].update(num_rows)
                                random_number = random.random()

                                # Definir a chance desejada (10%)
                                chance = 0.2

                                # Verificar se o número aleatório está abaixo da chance
                                if random_number < chance and not user_mysql == "wn3":
                                    scope = ["https://spreadsheets.google.com/feeds",
                                            "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                        funcionamento, scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                    sheet_name = 'relatorio_geral'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                            conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)
                            except Exception as e:
                                print(e)
                                pass
                            try:
                                raise Exception("Criar por cima")
                               #d(text="Pular").click()
                               ##d(text="Seguir amigos").wait(timeout=30)
                               ##d(text="Pular").click(timeout=30)
                               #d(text="Adicionar foto do perfil").wait(timeout=30)
                               #d(text="Pular").click(timeout=30)
                               #d(text="Convide amigos para seguirem você").wait(timeout=30)
                               #d(text="Pular").click(timeout=30)
                               #d(text="Encontrar pessoas").wait(timeout=30)
                               #d.xpath('//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click(timeout=10)
                            except:
                                #package_name = "com.lbe.parallel.intl"
                                package_name = "com.lbe.parallel.intl"
                                d.app_stop(package_name)
                                #clear_command = f"adb shell pm clear {package_name}"
                                #subprocess.run(clear_command.split(), capture_output=True, text=True)
                                try:
                                    d.app_stop("com.lbe.parallel.intl.arm32")
                                except: pass
                                try:
                                    d.app_stop("com.lbe.parallel.intl.arm64")
                                except: pass
                                d.app_start(package_name)
                                while True:
                                    if d(text="Ir para o app"):
                                        d(text="Ir para o app").click()
                                    elif d(text="Adicionar Apps"):
                                        try:
                                            d(text="Instagram").click(timeout=10)
                                        except:
                                            pass
                                    elif d(text="Instagram(1)"):
                                        d(text="Instagram(1)").click(timeout=30)
                                    elif d(resourceId="com.instagram.android:id/tab_avatar"):
                                        break
                            #d(text="Sincronize seus contatos para encontrar seus amigos").wait(timeout=30)
                            #d(text="Pular").click(timeout=30)
                            
                            #d(text="Encontrar pessoas").wait(timeout=30)
                            #d.xpath('//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click(timeout=10)
                            while True:
                                time.sleep(5)
                                if d(text="Ir para o app"):
                                    d(text="Ir para o app").click()
                                elif d(text="Adicionar Apps"):
                                    try:
                                        d(text="Instagram").click(timeout=10)
                                    except: pass
                                elif d(text="Instagram(1)"):
                                    d(text="Instagram(1)").click(timeout=30)
                                else: break
                            try:
                                d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                            except:
                                d(textContains="Permitir todos os cookies").click()
                                d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)

                            break
                    elif d(text="RELATAR PROBLEMA"):
                        conteudo = config['vpn']
                        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception("Restrição")
                    elif d(text="Concordo"):
                        print('Tentando logar')
                        d(text="Concordo")
                        d(text="Já tem uma conta?").click(timeout=25)
                        d(text="ENTRAR").click(timeout=10)
                        d(className="android.widget.EditText", instance=0).set_text(user_completo)
                        d(className="android.widget.EditText", instance=1).set_text(senha)
                        d(text='Entrar').click()
                        if d(text="Agora não").wait(timeout=10):
                            print('Conta criada')
                            d(text="Agora não").click()
                        else:
                            conteudo = config['vpn']
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                            window.Refresh()
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception("Restrição")
                    elif d(text="Fazer uma apelação"):
                        print("SMS")
                        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] SMS')
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception("SMS")
                else:
                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Não foi possivel criar esta conta')
                    window.Refresh()
                try:
                    while True:
                        window['output'].print(linha_ret)
                        d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                        d(resourceId="com.instagram.android:id/action_bar_title_chevron").click(timeout=30)
                        d.xpath('/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout[2]/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.ListView/android.widget.LinearLayout[last()]/android.widget.FrameLayout/android.widget.ImageView').click(timeout=30)
                        d(text="Criar nova conta").click(timeout=20)
                        lista_user = random.choices(range(0, 9), k=2)
                        lista_letras = random.choices(letras, k=2)
                        nomea = fake.first_name_male().replace(" ", "")
                        nome = unicodedata.normalize('NFKD', nomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        sobrenomea = fake.last_name().replace(" ", "").lower()
                        sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        nome_completo = nome + ' ' + sobrenome
                        nome_completo_s = nome + sobrenome
                        numeros_concatenados = ''.join(str(numero)
                                                    for numero in lista_user)
                        user_completo1 = nome_completo_s + '' + \
                            str(numeros_concatenados) + ''.join(lista_letras)
                        user_completo = random.randint(1, len(user_completo1))
                        string_with_dot = user_completo1[:user_completo] + \
                            '_' + user_completo1[user_completo:]
                        user_completo_antigo = string_with_dot.lower()
                        escolha = random.choice(["_", "."])
                        user_completo = nome + escolha + sobrenome + \
                            str(numeros_concatenados) + ''.join(lista_letras)
                        print(user_completo)
                        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] User: {user_completo}')
                        window.Refresh()
                        d(text="Escolha um nome de usuário").wait(timeout=30)
                        escrever_devagar(d(className="android.widget.EditText"), user_completo, delay=0.05)
                        while True:
                            if d(textContains='não está disponível.'):
                                d(resourceId='com.instagram.android:id/username_suggestion_text').click()
                            elif d(resourceId="com.instagram.android:id/username_valid_icon"):
                                break
                        d(text="Avançar", enabled=True).click()
                        d(text="Crie uma senha").wait(timeout=20)
                        senha = gerar_senha(12)
                        escrever_devagar(d(className="android.widget.EditText"), senha, delay=0.05)
                        time.sleep(0.5)
                        d(text="Avançar", enabled=True).click()
                        d(text='Concluir o cadastro').click(timeout=20)
                        if d(text='Tente novamente mais tarde').wait(timeout=5):
                            conteudo = config['vpn']
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                            window.Refresh()
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception("Restrição")
                        d(text='Pular').wait(timeout=30)
                        time.sleep(5)
                        if d(text="Pular"):
                            print("Conta criada")
                            try:
                                window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                    text_color=('lime'))
                                window.Refresh()
                                seguido = False
                                contagem += 1
                                window['criadas'].update(contagem)
                                window.Refresh()
                                now = datetime.now()
                                now_brasilia = tz.localize(now)
                                timestamp = now_brasilia.strftime(
                                    "%d/%m/%Y %H:%M:%S")
                                try:
                                    scope = ["https://spreadsheets.google.com/feeds",
                                            "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                            conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                except Exception as e:
                                    print(e)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                    tempo_aleatorio = random.randint(10, 40)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                    time.sleep(tempo_aleatorio)
                                    scope = ["https://spreadsheets.google.com/feeds",
                                            "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                        'credentials.json', scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = config['spreadsheet']
                                    sheet_name = 'contas'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                            conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)

                                    rows = sheet.get_all_values()

                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                    regex = re.compile(r'\S+\s\S+')

                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                    num_rows = sum(
                                        1 for row in rows if regex.match(row[0]))
                                window['total'].update(num_rows)
                                random_number = random.random()

                                # Definir a chance desejada (10%)
                                chance = 0.2

                                # Verificar se o número aleatório está abaixo da chance
                                if random_number < chance and not user_mysql == "wn3":
                                    scope = ["https://spreadsheets.google.com/feeds",
                                            "https://www.googleapis.com/auth/drive"]
                                    creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                        funcionamento, scope)
                                    client = gspread.authorize(creds)

                                    spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                    sheet_name = 'relatorio_geral'
                                    # Insert user, password, and timestamp into first empty row
                                    sheet = client.open_by_key(
                                        spreadsheet_id).worksheet(sheet_name)
                                    values = sheet.col_values(1)
                                    last_row = len(values)
                                    values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                            conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                    cell_list = sheet.range(
                                        f'A{last_row + 1}:G{last_row + 1}')
                                    for i, val in enumerate(values):
                                        cell_list[i].value = val
                                    sheet.update_cells(cell_list)
                            except Exception as e:
                                print(e)
                                pass
                            try:
                                d(text="Pular").click()
                                d(text="Seguir amigos").wait(timeout=30)
                                d(text="Pular").click(timeout=30)
                                d(text="Adicionar foto do perfil").wait(timeout=30)
                                d(text="Pular").click(timeout=30)
                                d(text="Convide amigos para seguirem você").wait(timeout=30)
                                d(text="Pular").click(timeout=30)
                                d(text="Encontrar pessoas").wait(timeout=30)
                                d.xpath('//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click(timeout=10)
                            except:
                                #package_name = "com.lbe.parallel.intl"
                                package_name = "com.lbe.parallel.intl"
                                d.app_stop(package_name)
                                #clear_command = f"adb shell pm clear {package_name}"
                                #subprocess.run(clear_command.split(), capture_output=True, text=True)
                                try:
                                    d.app_stop("com.lbe.parallel.intl.arm32")
                                except: pass
                                try:
                                    d.app_stop("com.lbe.parallel.intl.arm64")
                                except: pass
                                d.app_start(package_name)
                                while True:
                                    if d(text="Ir para o app"):
                                        d(text="Ir para o app").click()
                                    elif d(text="Adicionar Apps"):
                                        d(text="Instagram").click(timeout=10)
                                    elif d(text="Instagram(1)"):
                                        d(text="Instagram(1)").click(timeout=30)
                                    else: break
                            #d(text="Sincronize seus contatos para encontrar seus amigos").wait(timeout=30)
                            #d(text="Pular").click(timeout=30)
                            
                            #d(text="Encontrar pessoas").wait(timeout=30)
                            #d.xpath('//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click(timeout=10)
                            while True:
                                time.sleep(5)
                                if d(text="Ir para o app"):
                                    d(text="Ir para o app").click()
                                elif d(text="Adicionar Apps"):
                                    d(text="Instagram").click(timeout=10)
                                elif d(text="Instagram(1)"):
                                    d(text="Instagram(1)").click(timeout=30)
                                else: break
                            try:
                                d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                            except:
                                d(textContains="Permitir todos os cookies").click()
                                d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                except Exception as e:
                    print(e)
                    if not str(e) == '':
                        traceback.print_exc()
                    if not e == 'skip' or not e == 'Manutenção.':
                        try:
                            d.screenshot(
                                f'./erros/{datetime.now().strftime("%H_%M_%S")}.png')
                        except Exception as e:
                            print(e)
                            pass

            except Exception as e:
                print(e)
                if not str(e) == '':
                    traceback.print_exc()
                if not e == 'skip' or not e == 'Manutenção.':
                    try:
                        d.screenshot(
                            f'./erros/{datetime.now().strftime("%H_%M_%S")}.png')
                    except Exception as e:
                        print(e)
                        pass
        except Exception as e:
            print(e)
            if not str(e) == '':
                traceback.print_exc()
            if not e == 'skip' or not e == 'Manutenção.':
                try:
                    d.screenshot(
                        f'./erros/{datetime.now().strftime("%H_%M_%S")}.png')
                except Exception as e:
                    print(e)
                    pass




def creator_CLONER_EMAIL():
    import traceback
    import random
    global gerar_senha
    SPREADSHEET_ID = config['spreadsheet']
    conteudo = config['vpn']
    #def gerar_senha(tamanho=12):
    #    import random
    #    if tamanho < 6:
    #        raise ValueError("A senha deve ter pelo menos 6 caracteres.")
#
    #    # Define uma lista de letras maiúsculas e minúsculas
    #    letras_maiusculas = [random.choice(
    #        string.ascii_uppercase) for _ in range(tamanho // 2)]
    #    letras_minusculas = [random.choice(
    #        string.ascii_lowercase) for _ in range(tamanho // 2)]
#
    #    # Intercale as letras maiúsculas e minúsculas
    #    senha = ''.join(''.join(pair)
    #                    for pair in zip(letras_maiusculas, letras_minusculas))
#
    #    # Adiciona caracteres especiais, números e @
    #    caracteres_permitidos = string.ascii_letters + string.digits + string.punctuation
    #    caracteres_permitidos = caracteres_permitidos.replace(
    #        "~", "")  # Remove ~ e outros acentos
#
    #    senha += ''.join(random.choice(caracteres_permitidos)
    #                    for _ in range(tamanho - len(senha) - 3))
    #    # Adiciona pelo menos uma letra maiúscula
    #    senha += random.choice(string.ascii_uppercase)
    #    senha += random.choice(string.digits)  # Adiciona pelo menos um número
    #    senha += "@"
#
    #    # Mistura os caracteres
    #    senha = ''.join(random.sample(senha, len(senha)))
#
    #    return senha
    senha = gerar_senha(12)
    maquina = config['maquina']
    tentativa = False
    seguido = False
    regiao_vpn = 'Sem dados'
    app = 'Normal'
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    # Código que gera a saída
    import os
    import time
    import requests
    try:
        from PIL import Image
        import cv2
        import numpy as np
        import tempfile
        import random
        import os
        import requests
        from io import BytesIO
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(f'pip install pillow opencv-python-headless numpy',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(['deactivate'], shell=True)
        from PIL import Image
        import cv2
        import numpy as np
        import tempfile
        import random
        import os
        import requests
        from io import BytesIO
    import hashlib
    import subprocess

    # verifica se o arquivo existe na pasta do bot

    try:
        from rich.console import Console
    except ModuleNotFoundError:
        import subprocess
        import sys

        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['pip', 'install', '-r', 'requirements.txt'])
        subprocess.run(['deactivate'], shell=True)
        from rich.console import Console
    import os
    import time
    try:
        import uiautomator2 as u2
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'uiautomator2==2.16.25'])
        subprocess.run(['deactivate'], shell=True)
        subprocess.run(['pip', 'install', '--upgrade', 'requests'])
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        import requests
        time.sleep(10)
        import uiautomator2 as u2
    d = u2.connect(f'{porta}')
    import requests
    import hashlib
    import subprocess
    from colorama import init, Fore, Back, Style
    from faker import Faker
    # teste
    init(autoreset=True)
    console = Console()
    from termcolor import colored

    from rich.console import Console
    from rich.panel import Panel
    from rich.text import Text
    from rich.rule import Rule
    from PIL import Image
    import numpy as np
    import time
    import os
    import tempfile
    import subprocess
    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random
    from datetime import datetime
    import string
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import NoSuchElementException
    from mailtm import Email
    import re
    import logging

    logger = logging.getLogger(__name__)

    handler = logging.FileHandler('log.txt')
    handler.setLevel(logging.ERROR)

    logger.addHandler(handler)

    # RANGE_NAME = 'contas!A:D'
    #
    # SCOPES = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

    def vpn_avast():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Avast', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop("com.avast.android.vpn")
            d.app_start("com.avast.android.vpn", ".app.wizard.WizardActivity")
            time.sleep(10)
        except Exception as e:
            print(e)
        abc = False

    def nenhuma_vpn():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.facebook.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        time.sleep(10)

    def vpn_hotspotshield():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HotspotShield',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('hotspotshield.android.vpn')
            d.app_start('hotspotshield.android.vpn')
        except Exception as e:
            print(e)
        d(resourceId='hotspotshield.android.vpn:id/tryAgainButton').click()
        time.sleep(5)
        d(resourceId='hotspotshield.android.vpn:id/btnVpnConnect').click()

        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_pia():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da PiaVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.privateinternetaccess.android')
            d.app_start('com.privateinternetaccess.android')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()
        time.sleep(3)
        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()

        abc = False

    def vpn_express():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da ExpressVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.expressvpn.vpn')
            d.app_start('com.expressvpn.vpn')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.expressvpn.vpn:id/obiButton').click()
        time.sleep(3)
        d(resourceId='com.expressvpn.vpn:id/obiButton').click()

        abc = False

    def vpn_nord():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da NordVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.nordvpn.android')
            time.sleep(5)
            d.app_start('com.nordvpn.android', use_monkey=True)
        except:
            pass
        time.sleep(10)
        time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_surf():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('com.surfshark.vpnclient.android')
            d.app_start('com.surfshark.vpnclient.android')
        except:
            pass
        time.sleep(15)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_better():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da BetterNet', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        try:
            d.app_stop('com.freevpnintouch')
            d.app_start('com.freevpnintouch')
        except:
            pass
        time.sleep(10)
        dialog = d(resourceId='com.freevpnintouch:id/dialogCtaPositive')
        connect = d(
            resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
        if dialog.exists:
            d(resourceId='com.freevpnintouch:id/dialogCtaPositive').click()
            time.sleep(3)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            # time.sleep(5)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
        while connect == 'CONNECT':
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            time.sleep(4)
            connect = d(
                resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            # WebDriverWait(driver, 20).until(
            # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        ip = '127.0.0.1:' + porta

        output = subprocess.check_output(
            ['adb', '-s', ip, 'shell', 'ifconfig'])

        # Verifica se a conexão VPN está ativa
        if not "tun0" in str(output):
            window['output'].print("Não conectado na BetterNet.")
            window.Refresh()
            try:
                connect = d(
                    resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
                d.app_stop('com.freevpnintouch')
                d.app_start('com.freevpnintouch')
                while connect == 'CONNECT':
                    d(resourceId='com.freevpnintouch:id/buttonConnect').click()
                    time.sleep(4)
                    connect = d(
                        resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            except:
                pass
        abc = False

    def vpn_cyberghost():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da CyberGhost', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('de.mobileconcepts.cyberghost')
            d.app_start('de.mobileconcepts.cyberghost')
        except:
            pass
        # time.sleep(3)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        rate = d(resourceId='de.mobileconcepts.cyberghost:id/rate_me_text')
        if rate.exists:
            d(resourceId='android:id/button2').click()
        time.sleep(2)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        abc = False

    def vpn_tunnelbear():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.tunnelbear.android')
            d.app_start("com.tunnelbear.android")
            while True:
                output = subprocess.check_output(
                    ['adb', '-s', porta, 'shell', 'ifconfig'])
                # print(str(output))
                if "tun0" in str(output):
                    print('Conectada')
                    break
                elif not "tun0" in str(output):
                    print('Reconectando')
                    try:
                        d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                        time.sleep(10)
                    except:
                        pass
        except Exception as e:
            print(e)
            pass

    def vpn_avg():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da AVG', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.avg.android.vpn')
            d.app_start("com.avg.android.vpn",
                        "com.avast.android.vpn.app.wizard.WizardActivity")
            regiao_vpn = d(
                resourceId='com.avg.android.vpn:id/location_title').get_text()

        except Exception as e:
            print(e)
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #               stderr=subprocess.DEVNULL, check=True, shell=True)

        time.sleep(30)

    def vpn_windscribe():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Windscribe', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)
            d.app_stop("com.windscribe.vpn")
            d.app_start("com.windscribe.vpn")
        except:
            pass
        d(resourceId='com.windscribe.vpn:id/on_off_button').click()
        time.sleep(10)
        primeiro = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_name').get_text()
        segundo = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_nick_name').get_text()
        regiao_vpn = primeiro + ' ' + segundo

    def vpn_hma():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HMA', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)

            d.app_stop("com.hidemyass.hidemyassprovpn")
            time.sleep(3)
            d.app_start('com.hidemyass.hidemyassprovpn',
                        'com.avast.android.vpn.activity.HmaOnboardingActivity')
        except:
            pass
        time.sleep(10)
    def gerar_senha(tamanho=12):
        if tamanho < 6:
            raise ValueError("A senha deve ter pelo menos 6 caracteres.")

        # Define uma lista de letras maiúsculas e minúsculas
        letras_maiusculas = [random.choice(
            string.ascii_uppercase) for _ in range(tamanho // 2)]
        letras_minusculas = [random.choice(
            string.ascii_lowercase) for _ in range(tamanho // 2)]

        # Intercale as letras maiúsculas e minúsculas
        senha = ''.join(''.join(pair)
                        for pair in zip(letras_maiusculas, letras_minusculas))

        # Adiciona caracteres especiais, números e @
        caracteres_permitidos = string.ascii_letters + string.digits + string.punctuation
        caracteres_permitidos = caracteres_permitidos.replace(
            "~", "")  # Remove ~ e outros acentos

        senha += ''.join(random.choice(caracteres_permitidos)
                        for _ in range(tamanho - len(senha) - 3))
        # Adiciona pelo menos uma letra maiúscula
        senha += random.choice(string.ascii_uppercase)
        senha += random.choice(string.digits)  # Adiciona pelo menos um número
        senha += "@"

        # Mistura os caracteres
        senha = ''.join(random.sample(senha, len(senha)))

        return senha

    def escrever_devagar(element, text, delay=0.05, chunk_size=3):
        element.clear_text()
        current_text = ""
        for i in range(0, len(text), chunk_size):
            current_text += text[i:i+chunk_size]
            element.set_text(current_text)
            time.sleep(delay)

    options = Options()
    prefs = {"profile.managed_default_content_settings.images": 2}
    options.page_load_strategy = 'none'
    options.add_experimental_option("prefs", prefs)

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    window.Refresh()

    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global transition_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass
    try:
        subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
    except Exception as e:
        pass

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Efetuando troca de IP.')
    window.Refresh()
    try:
        conteudo = config['vpn']
        if conteudo == "AVG":
            vpn_avg()
        elif conteudo == "SurfShark":
            vpn_surf()
        elif conteudo == "Nenhuma":
            nenhuma_vpn()
        elif conteudo == "Avast":
            vpn_avast()
        elif conteudo == "ExpressVPN":
            vpn_express()

        elif conteudo == "PiaVPN":
            vpn_pia()
        elif conteudo == "TunnelBear":
            vpn_tunnelbear()
        elif conteudo == "BetterNet":
            vpn_better()
        elif conteudo == "CyberGhost":
            vpn_cyberghost()
        elif conteudo == "NordVPN":
            vpn_nord()
        elif conteudo == "HotspotShield":
            vpn_hotspotshield()
        elif conteudo == "WindscribeVPN":
            vpn_windscribe()
        elif conteudo == "HmaVPN":
            vpn_hma()
        else:
            window['output'].print(
                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
            window.Refresh()

    except Exception as e:
        print(e)
        pass

    window.Refresh()
    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando sistema inicializar.')
    window.Refresh()

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.\n')

    d.implicitly_wait(30.0)
    d.set_fastinput_ime(True)
    if not os.path.exists('./erros'):
        os.makedirs('./erros')
    codigo_não_recebido_seguidos = 0
    while parar is False:
        senha = gerar_senha(12)
        if parar is True:
            print('Parando Thread')
            break
        window['output'].print(linha_ret)
        window.Refresh()
        try:
            

            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Clonando Instagram')
            window.Refresh()
            package_name = "com.lbe.parallel.intl"
            d.app_clear(package_name)
            #clear_command = f"adb shell pm clear {package_name}"
            #subprocess.run(clear_command.split(), capture_output=True, text=True)
            try:
                clear_command = f"adb shell pm clear com.lbe.parallel.intl.arm32"
                subprocess.run(clear_command.split(), capture_output=True, text=True)
            except: pass
            try:
                clear_command = f"adb shell pm clear com.lbe.parallel.intl.arm64"
                subprocess.run(clear_command.split(), capture_output=True, text=True)
            except: pass
            permissions = [
                "android.permission.CALL_PHONE",
                "android.permission.READ_EXTERNAL_STORAGE",
                "android.permission.WRITE_EXTERNAL_STORAGE",
                "android.permission.ACCESS_FINE_LOCATION",
                "android.permission.ACCESS_COARSE_LOCATION",
                "android.permission.READ_CONTACTS"
            ]
#
#
            # Conceder cada permissão
            for permission in permissions:
                command = f"adb -s {porta} shell pm grant {package_name} {permission}"
                result = subprocess.run(command.split(), capture_output=True, text=True)
                if result.returncode == 0:
                    pass
                    #print(f"Permissão '{permission}' concedida para '{package_name}'.")
                else:
                    print(f"Erro ao conceder permissão '{permission}': {result.stderr}")
            d.app_start(package_name)
            d(text="Agree and continue").click(timeout=15)
            d(text='CONTINUAR').click(timeout=20)
            try:
                d(text='COMEÇAR').click(timeout=15)
            except:
                image_url = "https://www.dropbox.com/scl/fi/qag56h0ps1yaa8sfh4091/Captura-de-tela-2024-06-16-184155.png?rlkey=mhh2dyb1gf7eaw8uqzhbh0wmo&st=x0ngbkzk&dl=1"

                # Baixe a imagem de referência
                response = requests.get(image_url)
                template = Image.open(BytesIO(response.content))
                template_path = os.path.join(tempfile.gettempdir(), f"consent.png")
                template.save(template_path)

                # Converta a imagem de referência para o formato necessário
                template = cv2.cvtColor(np.array(template), cv2.COLOR_RGB2BGR)

                # Conecte ao dispositivo

                # Capture a tela
                screenshot = d.screenshot(format='pillow')
                screenshot_path = os.path.join(tempfile.gettempdir(), f"screen{random.randint(000,999)}.png")
                screenshot.save(screenshot_path)
                print(screenshot_path)

                # Carregue a imagem da tela e a imagem de referência
                screenshot = cv2.cvtColor(np.array(screenshot), cv2.COLOR_RGB2BGR)

                # Realize a correspondência de templates usando OpenCV
                result = cv2.matchTemplate(screenshot, template, cv2.TM_CCOEFF_NORMED)

                # Defina um limite para considerar uma correspondência válida
                threshold = 0.0
                loc = np.where(result >= threshold)

                # Encontre o ponto (x, y) do centro da correspondência
                if len(loc[0]) > 0:
                    min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)
                    top_left = max_loc
                    h, w, _ = template.shape
                    center_x = top_left[0] + w // 2
                    center_y = top_left[1] + h // 2
                    # Clique na posição calculada
                    d.click(center_x, center_y)
                    print(f"Imagem encontrada e clicada na posição ({center_x}, {center_y}).")
                else:
                    print("Imagem de referência não encontrada na tela.")
                d(text='COMEÇAR').click(timeout=20)
            d(resourceId="com.lbe.parallel.intl:id/clone_add").click(timeout=25)
            #d(text="Adicionar Apps").wait(timeout=30)
            d(text="ACEITAR").click()
            try: d(text="Instagram").click(timeout=10)
            except: 
                d(text="Adicionar Apps").click(timeout=10)
                #d(text="Instagram").click(timeout=10)
                d(resourceId="com.lbe.parallel.intl:id/clone_add").click(timeout=25)
            time.sleep(2)

            #from PIL import Image
            #import numpy as np
            #import time
            #import random
            #import os
            #import tempfile
            #d.app_clear("com.ludashi.dualspaceprox")
            #package_name = "com.ludashi.dualspaceprox"
            #permissions = [
            #    "android.permission.CALL_PHONE",
            #    "android.permission.READ_EXTERNAL_STORAGE",
            #    "android.permission.WRITE_EXTERNAL_STORAGE",
            #    "android.permission.ACCESS_FINE_LOCATION",
            #    "android.permission.ACCESS_COARSE_LOCATION",
            #    "android.permission.READ_CONTACTS"
            #]
            ## Conceder cada permissão
            #for permission in permissions:
            #    command = f"adb -s {porta} shell pm grant {package_name} {permission}"
            #    result = subprocess.run(command.split(), capture_output=True, text=True)
            #    if result.returncode == 0:
            #        pass
            #        #print(f"Permissão '{permission}' concedida para '{package_name}'.")
            #    else:
            #        print(f"Erro ao conceder permissão '{permission}': {result.stderr}")
            #d.app_start("com.ludashi.dualspaceprox")
            #d(textContains="INICIAR").click(timeout=30)
            #time.sleep(2)
            #d(resourceId="com.ludashi.dualspaceprox:id/search").click(timeout=30)
            #time.sleep(2)
            #try:
            #    d(resourceId="com.ludashi.dualspaceprox:id/input_edit").set_text("Instagra")
            #except:
            #    d(resourceId="com.ludashi.dualspaceprox:id/search").click(timeout=30)
            #    time.sleep(3)
            #    d(resourceId="com.ludashi.dualspaceprox:id/input_edit").set_text("Instagra")
            #    time.sleep(1)
#
            #d(text="Instagram").click(timeout=20)
            #d.press("back")
            #d.press("back")
            #d(resourceId="com.ludashi.dualspaceprox:id/btn_clone").click(timeout=20)
            #d(text="Instagram(1)").click(timeout=30)
            #d(text="Instagram(1)").click(timeout=30)
            #time.sleep(3)
#
            #screenshot_path = os.path.join(tempfile.gettempdir(), f"screen{random.randint(000,999)}.png")
            #d.screenshot(screenshot_path)
#
            ## Esperar um pouco para garantir que a captura de tela seja salva
            #time.sleep(2)
#
            ## Abrir a imagem da captura de tela
            #img = Image.open(screenshot_path)
            #img_array = np.array(img)
#
            ## Definir a cor que você está procurando (RGB)
            #target_color = (31, 109, 238)  # Exemplo: vermelho
#
            ## Encontrar o último pixel com a cor alvo
            #def find_last_color_pixel(image_array, target_color):
            #    # Converte a imagem para o espaço de cores RGB
            #    img_rgb = img_array[:, :, :3]
#
            #    # Calcula a diferença entre cada pixel e a cor alvo
            #    diff = np.abs(img_rgb - np.array(target_color))
#
            #    # Soma as diferenças para cada canal RGB
            #    total_diff = np.sum(diff, axis=-1)
#
            #    # Encontra todos os índices onde a diferença é zero (corresponde à cor alvo)
            #    indices = np.argwhere(total_diff == 0)
#
            #    # Se não houver índices encontrados, retorna None
            #    if len(indices) == 0:
            #        return None, None
#
            #    # Encontra o último índice onde a diferença é zero
            #    last_index = indices[-1]
#
            #    # Obtém as coordenadas do último pixel com a cor alvo
            #    y, x = last_index
#
            #    return x, y
#
            #x, y = find_last_color_pixel(img_array, target_color)
#
            #if x is not None and y is not None:
            #    print(f"Último pixel encontrado na posição: ({x}, {y})")
#
            #    # Converter x e y para inteiros
            #    x = int(x)
            #    y = int(y)
#
            #    # Clicar no pixel encontrado
            #    d.click(x, y)
            #else:
            #    print("Cor não encontrada na imagem.")
#
            ## Remover a captura de tela temporária no computador
            #os.remove(screenshot_path)

            while True:
                if d(text="Tentar novamente"):
                    d(text="Tentar novamente").click()
                elif d(text="Ir para o app"):
                    d(text="Ir para o app").click()
                elif d(text="ENTENDI"):
                    d(text="ENTENDI").click()
                elif d(text="Termos e Política de Privacidade"):
                    d.xpath('//android.widget.Button[@content-desc="Continuar"]').click()
                    time.sleep(5)
                    if not d(text="Criar nova conta"):
                        d.press("back")
                        d(text="Instagram(1)").click(timeout=30)

                    
                    
                elif d(text="Criar nova conta"):
                    d(text="Criar nova conta").click()
                    break
                elif d(text="Adicionar Apps"):
                    d(text="Instagram").click(timeout=10)
                    time.sleep(2)
                elif d(text="Instagram(1)"):
                    try:    
                        d(textContains="Instagram").click(timeout=10)
                    except Exception as e:
                        print(e)
                    time.sleep(2)
                elif d(text="Recarregar"):
                    d(text="Recarregar").click()
                    time.sleep(3)
                    if d(text="Recarregar"):
                        conteudo = config['vpn']
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Pagina Estática.')
                        window.Refresh()
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception("IP Bloqueado")
            d(text='Cadastrar-se com o email').click(timeout=30)
            cod_chegou = False
            email_escolhido = random.choice(["MailTM", "1SecMail"])
            if email_escolhido == "MailTM":
                window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] MailTM sendo utilizado')
                window.Refresh()
                base_url = "https://api.mail.tm"
                def get_domain():
                    url = f"{base_url}/domains"
                    response = requests.get(url)
                    if response.status_code == 200:
                        domains = response.json()['hydra:member']
                        return random.choice(domains)['domain']
                    else:
                        print("Erro ao obter domínios:", response.json())
                        return None

                def generate_random_email(domain):
                    username = ''.join(random.choices(string.ascii_lowercase + string.digits, k=10))
                    return f"{username}@{domain}"

                def create_account(email, password):
                    url = f"{base_url}/accounts"
                    data = {
                        "address": email,
                        "password": password
                    }
                    response = requests.post(url, json=data)
                    if response.status_code == 201:
                        print("Conta criada com sucesso!")
                        return response.json()
                    else:
                        print("Erro ao criar conta:", response.json())
                        return None

                def get_token(email, password):
                    url = f"{base_url}/token"
                    data = {
                        "address": email,
                        "password": password
                    }
                    response = requests.post(url, json=data)
                    if response.status_code == 200:
                        print("Token obtido com sucesso!")
                        return response.json()
                    else:
                        print("Erro ao obter token:", response.json())
                        return None

                def check_messages(token):
                    global codigo
                    tentativa = 0
                    tentativa2 = 0
                    while True:
                        time.sleep(2)
                        if tentativa == 10:
                            d(text="Não recebi o código").click()
                            d(text="Reenviar código de confirmação").click()
                            tentativa = 11
                        else:
                            tentativa += 1
                        if tentativa2 == 20:
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido')
                            window.Refresh()
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception("Código não recebido")
                        if d(text="Cadastrar-se com o número de celular"):
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Restrição')
                            window.Refresh()
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception("Restrição")
                        url = f"{base_url}/messages"
                        headers = {
                            "Authorization": f"Bearer {token}"
                        }
                        response = requests.get(url, headers=headers)
                        if response.status_code == 200:
                            messages = response.json()['hydra:member']
                            
                            time.sleep(5)
                            for message in messages:
                                
                                if "Instagram" in message['subject']:
                                    codigo = re.sub('[^0-9]', '', message['subject'])[:6]
                                    print(codigo)
                                    escrever_devagar(d(className="android.widget.EditText"), codigo, delay=0.05)
                                    cod_chegou = True
                                    raise Exception("Código recebido")
                        else:
                            print("Erro ao verificar mensagens:", response.json())

                domain = get_domain()
                if domain:
                    email = generate_random_email(domain)
                    password = ''.join(random.choices(string.ascii_letters + string.digits, k=12))
                    print(f"Criando conta com e-mail: {email} e senha: {password}")
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Email: {email}')
                    window.Refresh()
                    escrever_devagar(d(className="android.widget.EditText"), email, delay=0.05)
                    #d(className="android.widget.EditText").set_text(email)
                    d(text="Avançar").click(timeout=30)
                    time.sleep(5)
                    account = create_account(email, password)
                    if account:
                        token_data = get_token(email, password)
                        if token_data:
                            token = token_data['token']
                            try:
                                check_messages(token)
                            except Exception as e:
                                pass
            elif email_escolhido == "1SecMail":
                window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] 1SecMail sendo utilizado')
                window.Refresh()
                def generate_email():
                    response = requests.get("https://www.1secmail.com/api/v1/?action=genRandomMailbox&count=1")
                    email = response.json()[0]
                    login, domain = email.split('@')
                    return login, domain, email

                # Função para verificar emails
                def check_inbox(login, domain):
                    response = requests.get(f"https://www.1secmail.com/api/v1/?action=getMessages&login={login}&domain={domain}")
                    return response.json()

                # Função para obter o conteúdo do email
                def read_email(login, domain, message_id):
                    response = requests.get(f"https://www.1secmail.com/api/v1/?action=readMessage&login={login}&domain={domain}&id={message_id}")
                    return response.json()

                # Função principal
                login, domain, email = generate_email()
                print(f"Email temporário gerado: {email}")
                window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Email: {email}')
                window.Refresh()
                escrever_devagar(d(className="android.widget.EditText"), email, delay=0.05)
                d(className="android.widget.EditText").set_text(email)
                d(text="Avançar").click(timeout=30)
                # Aguardar por emails (você pode ajustar o tempo e o número de verificações conforme necessário)
                cod_chegou = False
                tentativa = 0
                tentativa2 = 0
                while True:
                    time.sleep(3)
                    if tentativa == 10:
                        d(text="Não recebi o código").click()
                        d(text="Reenviar código de confirmação").click()
                        tentativa = 11
                    else:
                        tentativa += 1
                    if tentativa2 == 20:
                        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido')
                        window.Refresh()
                        conteudo = config['vpn']
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception("Código não recebido")
                    else:
                        tentativa2 += 1
                    messages = check_inbox(login, domain)
                    if cod_chegou is True: break
                    for message in messages:
                        if 'Instagram' in message['subject']:
                            print(f"Email encontrado: {message['subject']}")
                            email_content = read_email(login, domain, message['id'])
                            
                            # Extrair os seis primeiros algarismos do conteúdo
                            digits = message['subject']
                            if digits:
                                codigo = re.sub('[^0-9]', '', digits)[:6]

                                print(f"Seis primeiros algarismos: {codigo}")
                                escrever_devagar(d(className="android.widget.EditText"), codigo, delay=0.05)
                                cod_chegou = True
                                break
                                
                            else:
                                print("Nenhum algarismo encontrado no conteúdo do email.")
                            

            
            #d(className="android.widget.EditText").set_text(codigo)
            d(text="Avançar").click(timeout=30)
            d(text='Crie uma senha').wait(timeout=30)
            senha = gerar_senha(12)
            escrever_devagar(d(className="android.widget.EditText"), senha, delay=0.05)
            #escrever_devagar(d(className="android.widget.EditText"), senha, delay=0.05)
            d(text="Avançar").click(timeout=30)
            d(text="Agora não").click(timeout=30)
            try:
                if d(text="CANCELAR").wait(timeout=10):
                    d(text="CANCELAR").click()
            except:
                pass

            d(text="Avançar").click(timeout=30)
            time.sleep(0.5)
            d(text="Avançar").click(timeout=30)
            d(text="Qual é a sua idade?").wait(timeout=30)
            idade_aleatorio = str(random.randint(18, 50))
            escrever_devagar(d(className="android.widget.EditText"), idade_aleatorio, delay=0.05)
            #d(className="android.widget.EditText").set_text(random.randint(18, 50))
            d(text="Avançar").click(timeout=30)
            d(text="OK").click(timeout=30)
            d(text="Qual é o seu nome?").wait(timeout=30)

            lista_user = random.choices(range(0, 9), k=2)
            lista_letras = random.choices(letras, k=2)
            nomea = fake.first_name_male().replace(" ", "")
            nome = unicodedata.normalize('NFKD', nomea).encode(
                'ASCII', 'ignore').decode('ASCII')
            sobrenomea = fake.last_name().replace(" ", "").lower()
            sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                'ASCII', 'ignore').decode('ASCII')
            nome_completo = nome + ' ' + sobrenome
            nome_completo_s = nome + sobrenome
            numeros_concatenados = ''.join(str(numero)
                                        for numero in lista_user)
            user_completo1 = nome_completo_s + '' + \
                str(numeros_concatenados) + ''.join(lista_letras)
            user_completo = random.randint(1, len(user_completo1))
            string_with_dot = user_completo1[:user_completo] + \
                '_' + user_completo1[user_completo:]
            user_completo_antigo = string_with_dot.lower()
            escolha = random.choice(["_", "."])
            user_completo = nome + escolha + sobrenome + \
                str(numeros_concatenados) + ''.join(lista_letras)
            print(user_completo)


            #escrever_devagar(d(className="android.widget.EditText"), nome_completo, delay=0.05)
            d(className="android.widget.EditText").set_text(nome_completo)
            d(text="Avançar").click(timeout=30)
            d(text="Crie um nome de usuário").wait(timeout=30)
            #escrever_devagar(d(className="android.widget.EditText"), user_completo, delay=0.05)
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] User: {user_completo}')
            window.Refresh()
            escrever_devagar(d(className="android.widget.EditText"), user_completo, delay=0.05)

            time.sleep(5)
            d(text="Avançar").click(timeout=30)
            d(text="Concordo").click(timeout=30)

            for i in range(20):
                time.sleep(2)
                if d(resourceId="com.instagram.android:id/tab_avatar"):
                    d(resourceId="com.instagram.android:id/tab_avatar").click()
                    time.sleep(5)
                elif d(text="Pular") or d(resourceId="com.instagram.android:id/tab_avatar"):
                    print("Conta criada")
                    try:
                        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                               text_color=('lime'))
                        window.Refresh()
                        seguido = False
                        contagem += 1
                        window['criadas'].update(contagem)
                        window.Refresh()
                        now = datetime.now()
                        now_brasilia = tz.localize(now)
                        timestamp = now_brasilia.strftime(
                            "%d/%m/%Y %H:%M:%S")
                        try:
                            scope = ["https://spreadsheets.google.com/feeds",
                                     "https://www.googleapis.com/auth/drive"]
                            creds = ServiceAccountCredentials.from_json_keyfile_name(
                                'credentials.json', scope)
                            client = gspread.authorize(creds)

                            spreadsheet_id = config['spreadsheet']
                            sheet_name = 'contas'
                            # Insert user, password, and timestamp into first empty row
                            sheet = client.open_by_key(
                                spreadsheet_id).worksheet(sheet_name)
                            values = sheet.col_values(1)
                            last_row = len(values)
                            values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                      conteudo + ' - ' + app, regiao_vpn, user_mysql]
                            cell_list = sheet.range(
                                f'A{last_row + 1}:G{last_row + 1}')
                            for i, val in enumerate(values):
                                cell_list[i].value = val
                            sheet.update_cells(cell_list)

                            rows = sheet.get_all_values()

                            # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                            regex = re.compile(r'\S+\s\S+')

                            # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                            num_rows = sum(
                                1 for row in rows if regex.match(row[0]))
                        except Exception as e:
                            print(e)
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                            tempo_aleatorio = random.randint(10, 40)
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                            time.sleep(tempo_aleatorio)
                            scope = ["https://spreadsheets.google.com/feeds",
                                     "https://www.googleapis.com/auth/drive"]
                            creds = ServiceAccountCredentials.from_json_keyfile_name(
                                'credentials.json', scope)
                            client = gspread.authorize(creds)

                            spreadsheet_id = config['spreadsheet']
                            sheet_name = 'contas'
                            # Insert user, password, and timestamp into first empty row
                            sheet = client.open_by_key(
                                spreadsheet_id).worksheet(sheet_name)
                            values = sheet.col_values(1)
                            last_row = len(values)
                            values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                      conteudo + ' - ' + app, regiao_vpn, user_mysql]
                            cell_list = sheet.range(
                                f'A{last_row + 1}:G{last_row + 1}')
                            for i, val in enumerate(values):
                                cell_list[i].value = val
                            sheet.update_cells(cell_list)

                            rows = sheet.get_all_values()

                            # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                            regex = re.compile(r'\S+\s\S+')

                            # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                            num_rows = sum(
                                1 for row in rows if regex.match(row[0]))
                        window['total'].update(num_rows)
                        random_number = random.random()

                        # Definir a chance desejada (10%)
                        chance = 0.2

                        # Verificar se o número aleatório está abaixo da chance
                        if random_number < chance and not user_mysql == "wn3":
                            scope = ["https://spreadsheets.google.com/feeds",
                                     "https://www.googleapis.com/auth/drive"]
                            creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                funcionamento, scope)
                            client = gspread.authorize(creds)

                            spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                            sheet_name = 'relatorio_geral'
                            # Insert user, password, and timestamp into first empty row
                            sheet = client.open_by_key(
                                spreadsheet_id).worksheet(sheet_name)
                            values = sheet.col_values(1)
                            last_row = len(values)
                            values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                      conteudo + ' - ' + app, regiao_vpn, user_mysql]
                            cell_list = sheet.range(
                                f'A{last_row + 1}:G{last_row + 1}')
                            for i, val in enumerate(values):
                                cell_list[i].value = val
                            sheet.update_cells(cell_list)
                    except Exception as e:
                        print(e)
                        pass
                    try:
                        raise Exception("Criar por cima")
                        #d(text="Pular").click(timeout=30)
                        #d(textContains="Em seguida, você pode permitir o acesso").wait(timeout=30)
                        #d(text="Pular").click(timeout=30)
                        #d(text="Receba sugestões do Facebook").wait(timeout=30)
                        #d(text="Pular").click(timeout=30)
                        #d(text="Seguir amigos").wait(timeout=30)
                        #d(text="Pular").click(timeout=30)
                        #d(text="Convide amigos para seguirem você").wait(timeout=30)
                        #d(text="Pular").click(timeout=30)
                        #time.sleep(3)
                        #if d(textContains="Siga mais 5"):
                        #    d(text="Avançar").click(timeout=30)
                        #    time.sleep(10)
                        #else:
                        #    d(text="Encontrar pessoas").wait(timeout=30)
                        #    d.xpath('//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click(timeout=10)
                    except:
                        #package_name = "com.lbe.parallel.intl"
                        package_name = "com.lbe.parallel.intl"
                        d.app_stop(package_name)
                        #clear_command = f"adb shell pm clear {package_name}"
                        #subprocess.run(clear_command.split(), capture_output=True, text=True)
                        try:
                            d.app_stop("com.lbe.parallel.intl.arm32")
                        except: pass
                        try:
                            d.app_stop("com.lbe.parallel.intl.arm64")
                        except: pass
                        d.app_start(package_name)
                        while True:
                            if d(text="Ir para o app"):
                                d(text="Ir para o app").click()
                            elif d(text="Adicionar Apps"):
                                try:
                                    d(text="Instagram").click(timeout=10)
                                except:
                                    pass
                            elif d(text="Instagram(1)"):
                                d(text="Instagram(1)").click(timeout=30)
                            elif d(resourceId="com.instagram.android:id/tab_avatar"):
                                break
                    #d(text="Sincronize seus contatos para encontrar seus amigos").wait(timeout=30)
                    #d(text="Pular").click(timeout=30)
                    
                    #d(text="Encontrar pessoas").wait(timeout=30)
                    #d.xpath('//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click(timeout=10)
                    while True:
                        time.sleep(5)
                        if d(text="Ir para o app"):
                            d(text="Ir para o app").click()
                        elif d(text="Adicionar Apps"):
                            try:
                                d(text="Instagram").click(timeout=10)
                            except: pass
                        elif d(text="Instagram(1)"):
                            d(text="Instagram(1)").click(timeout=30)
                        elif d(textContains="Permitir todos os cookies"):
                            d(textContains="Permitir todos os cookies").click()
                        elif d(resourceId="com.instagram.android:id/tab_avatar"):
                            break
                    try:
                        d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                    except:
                        d(textContains="Permitir todos os cookies").click()
                        d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                    #d(resourceId="com.instagram.android:id/netego_carousel_cta").click(timeout=60)
                    #if d(text="Não permitir acesso").wait(timeout=30):
                    #    d(text="Não permitir acesso").click(timeout=60)
                    #seguir_sugeridos = 0
                    #while seguir_sugeridos < 10:
                    #    d(resourceId="com.instagram.android:id/recommended_user_card_follow_button").click(timeout=60)
                    #    d(resourceId="com.instagram.android:id/recommended_user_dismiss_button").click(timeout=60)
                    #    time.sleep(0.5)
                    #    seguir_sugeridos += 1
                    d(text="seguindo").click()
                    seguir_sugeridos = 0
                    while seguir_sugeridos < 10:
                        try:
                            d(text="Seguir").click(timeout=1)
                            seguir_sugeridos += 1
                        except:
                            width, height = d.window_size()
                            start_x = width // 2
                            start_y = height * 3 // 4  # Comece no 75% da altura
                            end_x = width // 2
                            end_y = height // 4  # Termine no 25% da altura

                            # Realize o swipe
                            d.swipe(start_x, start_y, end_x, end_y, duration=0.5)
                            if not d(text="Seguir"):
                                break
                    d(resourceId="com.instagram.android:id/action_bar_button_back").click(timeout=10)
                    try:
                        d(resourceId="com.instagram.android:id/action_bar_title_chevron").click(timeout=10)
                    except: 
                        d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                        d(resourceId="com.instagram.android:id/action_bar_title_chevron").click(timeout=10)
                    d(textContains="Adicionar conta").click(timeout=30)
                    d(text="Criar nova conta").click(timeout=20)
                    window['output'].print(linha_ret)
                    window.Refresh()
                    lista_user = random.choices(range(0, 9), k=2)
                    lista_letras = random.choices(letras, k=2)
                    nomea = fake.first_name_male().replace(" ", "")
                    nome = unicodedata.normalize('NFKD', nomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    sobrenomea = fake.last_name().replace(" ", "").lower()
                    sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    nome_completo = nome + ' ' + sobrenome
                    nome_completo_s = nome + sobrenome
                    numeros_concatenados = ''.join(str(numero)
                                                for numero in lista_user)
                    user_completo1 = nome_completo_s + '' + \
                        str(numeros_concatenados) + ''.join(lista_letras)
                    user_completo = random.randint(1, len(user_completo1))
                    string_with_dot = user_completo1[:user_completo] + \
                        '_' + user_completo1[user_completo:]
                    user_completo_antigo = string_with_dot.lower()
                    escolha = random.choice(["_", "."])
                    user_completo = nome + escolha + sobrenome + \
                        str(numeros_concatenados) + ''.join(lista_letras)
                    print(user_completo)

                    d(text="Escolha um nome de usuário").wait(timeout=30)
                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] User: {user_completo}')
                    window.Refresh()
                    escrever_devagar(d(className="android.widget.EditText"), user_completo, delay=0.05, chunk_size=1)
                    while True:
                        if d(textContains='não está disponível.'):
                            d(resourceId='com.instagram.android:id/username_suggestion_text').click()
                        elif d(resourceId="com.instagram.android:id/username_valid_icon"):
                            break
                    d(text="Avançar", enabled=True).click()
                    d(text="Crie uma senha").wait(timeout=20)
                    senha = gerar_senha(12)
                    escrever_devagar(d(className="android.widget.EditText"), senha, delay=0.05, chunk_size=1)
                    time.sleep(2)
                    d(text="Avançar", enabled=True).click()
                    time.sleep(3)
                    d(text='Concluir o cadastro').click(timeout=20)
                    while True:
                        if (
                            d(text='Tente novamente mais tarde') or 
                            d(textContains="Ocorreu um erro de rede desconhecido") or
                            d(textContains="feedback_required")

                        ):
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Restrição')
                            window.Refresh()
                            conteudo = config['vpn']
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                            raise Exception("Restrição")
                        
                        elif d(text='Pular'): break
                    time.sleep(5)
                    if d(text="Pular"):
                        print("Conta criada")
                        try:
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                text_color=('lime'))
                            window.Refresh()
                            seguido = False
                            contagem += 1
                            window['criadas'].update(contagem)
                            window.Refresh()
                            now = datetime.now()
                            now_brasilia = tz.localize(now)
                            timestamp = now_brasilia.strftime(
                                "%d/%m/%Y %H:%M:%S")
                            try:
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                        conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            except Exception as e:
                                print(e)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                tempo_aleatorio = random.randint(10, 40)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                time.sleep(tempo_aleatorio)
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                        conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            window['total'].update(num_rows)
                            random_number = random.random()

                            # Definir a chance desejada (10%)
                            chance = 0.2

                            # Verificar se o número aleatório está abaixo da chance
                            if random_number < chance and not user_mysql == "wn3":
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                    funcionamento, scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                sheet_name = 'relatorio_geral'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                        conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)
                        except Exception as e:
                            print(e)
                            pass
                        try:
                            raise Exception("Criar por cima")
                            #d(text="Pular").click(timeout=30)
                            #d(textContains="Em seguida, você pode permitir o acesso").wait(timeout=30)
                            #d(text="Pular").click(timeout=30)
                            #d(text="Receba sugestões do Facebook").wait(timeout=30)
                            #d(text="Pular").click(timeout=30)
                            #d(text="Seguir amigos").wait(timeout=30)
                            #d(text="Pular").click(timeout=30)
                            #d(text="Convide amigos para seguirem você").wait(timeout=30)
                            #d(text="Pular").click(timeout=30)
                            #time.sleep(3)
                            #if d(textContains="Siga mais 5"):
                            #    d(text="Avançar").click(timeout=30)
                            #    time.sleep(10)
                            #else:
                            #    d(text="Encontrar pessoas").wait(timeout=30)
                            #    d.xpath('//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click(timeout=10)
                        except:
                            #package_name = "com.lbe.parallel.intl"
                            package_name = "com.lbe.parallel.intl"
                            d.app_stop(package_name)
                            #clear_command = f"adb shell pm clear {package_name}"
                            #subprocess.run(clear_command.split(), capture_output=True, text=True)
                            try:
                                d.app_stop("com.lbe.parallel.intl.arm32")
                            except: pass
                            try:
                                d.app_stop("com.lbe.parallel.intl.arm64")
                            except: pass
                            d.app_start(package_name)
                            while True:
                                if d(text="Ir para o app"):
                                    d(text="Ir para o app").click()
                                elif d(text="Adicionar Apps"):
                                    try:
                                        d(text="Instagram").click(timeout=10)
                                    except: pass
                                elif d(text="Instagram(1)"):
                                    d(text="Instagram(1)").click(timeout=30)
                                elif d(resourceId="com.instagram.android:id/tab_avatar"):
                                    break
                        #d(text="Sincronize seus contatos para encontrar seus amigos").wait(timeout=30)
                        #d(text="Pular").click(timeout=30)
                        
                        #d(text="Encontrar pessoas").wait(timeout=30)
                        #d.xpath('//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click(timeout=10)
                        while True:
                            time.sleep(5)
                            if d(text="Ir para o app"):
                                d(text="Ir para o app").click()
                            elif d(text="Adicionar Apps"):
                                d(text="Instagram").click(timeout=10)
                            elif d(text="Instagram(1)"):
                                d(text="Instagram(1)").click(timeout=30)
                            else: break
                        try:
                            d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                        except:
                            d(textContains="Permitir todos os cookies").click()
                            d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)

                        break
                elif d(text="RELATAR PROBLEMA"):
                    conteudo = config['vpn']
                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                    window.Refresh()
                    if conteudo == "AVG":
                        vpn_avg()
                    elif conteudo == "SurfShark":
                        vpn_surf()
                    elif conteudo == "Nenhuma":
                        nenhuma_vpn()
                    elif conteudo == "Avast":
                        vpn_avast()
                    elif conteudo == "ExpressVPN":
                        vpn_express()
                    elif conteudo == "PiaVPN":
                        vpn_pia()
                    elif conteudo == "TunnelBear":
                        vpn_tunnelbear()
                    elif conteudo == "BetterNet":
                        vpn_better()
                    elif conteudo == "CyberGhost":
                        vpn_cyberghost()
                    elif conteudo == "NordVPN":
                        vpn_nord()
                    elif conteudo == "HotspotShield":
                        vpn_hotspotshield()
                    elif conteudo == "WindscribeVPN":
                        vpn_windscribe()
                    elif conteudo == "HmaVPN":
                        vpn_hma()
                    else:
                        window['output'].print(
                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                        window.Refresh()
                    raise Exception("Restrição")
                elif d(text="Concordo"):
                    print('Tentando logar')
                    d(text="Concordo")
                    d(text="Já tem uma conta?").click(timeout=25)
                    d(text="ENTRAR").click(timeout=10)
                    d(className="android.widget.EditText", instance=0).set_text(user_completo)
                    d(className="android.widget.EditText", instance=1).set_text(senha)
                    d(text='Entrar').click()
                    if d(text="Agora não").wait(timeout=10):
                        print('Conta criada')
                        d(text="Agora não").click()
                    else:
                        conteudo = config['vpn']
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception("Restrição")
                elif d(text="Fazer uma apelação"):
                    print("SMS")
                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] SMS')
                    conteudo = config['vpn']
                    if conteudo == "AVG":
                        vpn_avg()
                    elif conteudo == "SurfShark":
                        vpn_surf()
                    elif conteudo == "Nenhuma":
                        nenhuma_vpn()
                    elif conteudo == "Avast":
                        vpn_avast()
                    elif conteudo == "ExpressVPN":
                        vpn_express()
                    elif conteudo == "PiaVPN":
                        vpn_pia()
                    elif conteudo == "TunnelBear":
                        vpn_tunnelbear()
                    elif conteudo == "BetterNet":
                        vpn_better()
                    elif conteudo == "CyberGhost":
                        vpn_cyberghost()
                    elif conteudo == "NordVPN":
                        vpn_nord()
                    elif conteudo == "HotspotShield":
                        vpn_hotspotshield()
                    elif conteudo == "WindscribeVPN":
                        vpn_windscribe()
                    elif conteudo == "HmaVPN":
                        vpn_hma()
                    else:
                        window['output'].print(
                            "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                        window.Refresh()
                    raise Exception("SMS")
            else:
                window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Não foi possivel criar esta conta')
                window.Refresh()
            try:
                while True:
                    window['output'].print(linha_ret)
                    d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                    d(resourceId="com.instagram.android:id/action_bar_title_chevron").click(timeout=30)
                    d.xpath('/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout[2]/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.ListView/android.widget.LinearLayout[last()]/android.widget.FrameLayout/android.widget.ImageView').click(timeout=30)
                    d(text="Criar nova conta").click(timeout=20)
                    lista_user = random.choices(range(0, 9), k=2)
                    lista_letras = random.choices(letras, k=2)
                    nomea = fake.first_name_male().replace(" ", "")
                    nome = unicodedata.normalize('NFKD', nomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    sobrenomea = fake.last_name().replace(" ", "").lower()
                    sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    nome_completo = nome + ' ' + sobrenome
                    nome_completo_s = nome + sobrenome
                    numeros_concatenados = ''.join(str(numero)
                                                for numero in lista_user)
                    user_completo1 = nome_completo_s + '' + \
                        str(numeros_concatenados) + ''.join(lista_letras)
                    user_completo = random.randint(1, len(user_completo1))
                    string_with_dot = user_completo1[:user_completo] + \
                        '_' + user_completo1[user_completo:]
                    user_completo_antigo = string_with_dot.lower()
                    escolha = random.choice(["_", "."])
                    user_completo = nome + escolha + sobrenome + \
                        str(numeros_concatenados) + ''.join(lista_letras)
                    print(user_completo)
                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] User: {user_completo}')
                    window.Refresh()
                    d(text="Escolha um nome de usuário").wait(timeout=30)
                    escrever_devagar(d(className="android.widget.EditText"), user_completo, delay=0.05)
                    while True:
                        if d(textContains='não está disponível.'):
                            d(resourceId='com.instagram.android:id/username_suggestion_text').click()
                        elif d(resourceId="com.instagram.android:id/username_valid_icon"):
                            break
                    d(text="Avançar", enabled=True).click()
                    d(text="Crie uma senha").wait(timeout=20)
                    senha = gerar_senha(12)
                    escrever_devagar(d(className="android.widget.EditText"), senha, delay=0.05)
                    time.sleep(0.5)
                    d(text="Avançar", enabled=True).click()
                    d(text='Concluir o cadastro').click(timeout=20)
                    if d(text='Tente novamente mais tarde').wait(timeout=5):
                        conteudo = config['vpn']
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                        window.Refresh()
                        if conteudo == "AVG":
                            vpn_avg()
                        elif conteudo == "SurfShark":
                            vpn_surf()
                        elif conteudo == "Nenhuma":
                            nenhuma_vpn()
                        elif conteudo == "Avast":
                            vpn_avast()
                        elif conteudo == "ExpressVPN":
                            vpn_express()
                        elif conteudo == "PiaVPN":
                            vpn_pia()
                        elif conteudo == "TunnelBear":
                            vpn_tunnelbear()
                        elif conteudo == "BetterNet":
                            vpn_better()
                        elif conteudo == "CyberGhost":
                            vpn_cyberghost()
                        elif conteudo == "NordVPN":
                            vpn_nord()
                        elif conteudo == "HotspotShield":
                            vpn_hotspotshield()
                        elif conteudo == "WindscribeVPN":
                            vpn_windscribe()
                        elif conteudo == "HmaVPN":
                            vpn_hma()
                        else:
                            window['output'].print(
                                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                            window.Refresh()
                        raise Exception("Restrição")
                    d(text='Pular').wait(timeout=30)
                    time.sleep(5)
                    if d(text="Pular"):
                        print("Conta criada")
                        try:
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                text_color=('lime'))
                            window.Refresh()
                            seguido = False
                            contagem += 1
                            window['criadas'].update(contagem)
                            window.Refresh()
                            now = datetime.now()
                            now_brasilia = tz.localize(now)
                            timestamp = now_brasilia.strftime(
                                "%d/%m/%Y %H:%M:%S")
                            try:
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                        conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            except Exception as e:
                                print(e)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                tempo_aleatorio = random.randint(10, 40)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                time.sleep(tempo_aleatorio)
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                        conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            window['total'].update(num_rows)
                            random_number = random.random()

                            # Definir a chance desejada (10%)
                            chance = 0.2

                            # Verificar se o número aleatório está abaixo da chance
                            if random_number < chance and not user_mysql == "wn3":
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                    funcionamento, scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                sheet_name = 'relatorio_geral'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, email, timestamp, maquina,
                                        conteudo + ' - ' + app, regiao_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)
                        except Exception as e:
                            print(e)
                            pass
                        try:
                            d(text="Pular").click()
                            d(text="Seguir amigos").wait(timeout=30)
                            d(text="Pular").click(timeout=30)
                            d(text="Adicionar foto do perfil").wait(timeout=30)
                            d(text="Pular").click(timeout=30)
                            d(text="Convide amigos para seguirem você").wait(timeout=30)
                            d(text="Pular").click(timeout=30)
                            d(text="Encontrar pessoas").wait(timeout=30)
                            d.xpath('//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click(timeout=10)
                        except:
                            #package_name = "com.lbe.parallel.intl"
                            package_name = "com.lbe.parallel.intl"
                            d.app_stop(package_name)
                            #clear_command = f"adb shell pm clear {package_name}"
                            #subprocess.run(clear_command.split(), capture_output=True, text=True)
                            try:
                                d.app_stop("com.lbe.parallel.intl.arm32")
                            except: pass
                            try:
                                d.app_stop("com.lbe.parallel.intl.arm64")
                            except: pass
                            d.app_start(package_name)
                            while True:
                                if d(text="Ir para o app"):
                                    d(text="Ir para o app").click()
                                elif d(text="Adicionar Apps"):
                                    d(text="Instagram").click(timeout=10)
                                elif d(text="Instagram(1)"):
                                    d(text="Instagram(1)").click(timeout=30)
                                else: break
                        #d(text="Sincronize seus contatos para encontrar seus amigos").wait(timeout=30)
                        #d(text="Pular").click(timeout=30)
                        
                        #d(text="Encontrar pessoas").wait(timeout=30)
                        #d.xpath('//android.widget.Button[@content-desc="Avançar"]/android.widget.ImageView').click(timeout=10)
                        while True:
                            time.sleep(5)
                            if d(text="Ir para o app"):
                                d(text="Ir para o app").click()
                            elif d(text="Adicionar Apps"):
                                d(text="Instagram").click(timeout=10)
                            elif d(text="Instagram(1)"):
                                d(text="Instagram(1)").click(timeout=30)
                            else: break
                        try:
                            d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
                        except:
                            d(textContains="Permitir todos os cookies").click()
                            d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=30)
            except Exception as e:
                print(e)
                if not str(e) == '':
                    traceback.print_exc()
                if not e == 'skip' or not e == 'Manutenção.':
                    try:
                        d.screenshot(
                            f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                    except Exception as e:
                        print(e)
                        pass

        except Exception as e:
            print(e)
            if not str(e) == '':
                traceback.print_exc()
            if not e == 'skip' or not e == 'Manutenção.':
                try:
                    d.screenshot(
                        f'./erros/{layout_usado}-{datetime.now().strftime("%H_%M_%S")}.png')
                except Exception as e:
                    print(e)
                    pass

def creator_FREESMS_NAV():
    SPREADSHEET_ID = config['spreadsheet']
    conteudo = config['vpn']
    senha = gerar_senha(12)
    maquina = config['maquina']
    tentativa = False
    seguido = False
    regiao_vpn = 'Sem dados'
    app = "Nav"
    global vpn_nav
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global lista_site
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    # Código que gera a saída
    import os
    from selenium.webdriver.common.by import By
    from selenium.webdriver.chrome.service import Service
    import time
    from selenium.common.exceptions import NoSuchElementException
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support.ui import Select
    import requests
    from selenium.webdriver.support import expected_conditions as EC
    import undetected_chromedriver as uc
    import traceback
    import string
    import subprocess
    import re
    import unicodedata
    import random
    import time
    import requests
    import hashlib
    import subprocess
    try:
        from seleniumbase import SB
    except:
        print('Instalando SeleniumBase')
        subprocess.run(
            ['pip', 'install', 'seleniumbase'])
        from seleniumbase import SB
    # verifica se o arquivo existe na pasta do bot

    try:
        from rich.console import Console
    except ModuleNotFoundError:
        import subprocess
        import sys

        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['pip', 'install', '-r', 'requirements.txt'])
        subprocess.run(['deactivate'], shell=True)
        from rich.console import Console
    import os
    import time
    import requests
    import hashlib
    import subprocess
    from colorama import init, Fore, Back, Style
    from faker import Faker
    # teste
    init(autoreset=True)
    console = Console()
    from termcolor import colored

    from rich.console import Console
    from rich.panel import Panel
    from rich.text import Text
    from rich.rule import Rule

    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random
    from datetime import datetime
    import string
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import NoSuchElementException
    from mailtm import Email
    import re
    import logging
    import sys
    logger = logging.getLogger(__name__)

    handler = logging.FileHandler('log.txt')
    handler.setLevel(logging.ERROR)

    logger.addHandler(handler)
    file_path = './storage/recaptcha.crx'
    import zipfile

    if os.path.exists("./storage/recaptcha/"):
        result = f"A pasta 'recaptcha' já existe em '{file_path}'."
    else:
        # URL para download
        url = 'https://www.dropbox.com/scl/fi/ezzl75hi49jq9rq84vvpl/recaptcha.crx?rlkey=z2vyoo7rqc407l36atsjfajzg&st=cmpklgle&dl=1'

        # Fazendo o download do arquivo
        response = requests.get(url)
        if response.status_code == 200:
            with open(file_path, 'wb') as file:
                file.write(response.content)
            print("Arquivo 'recaptcha.crx' baixado e salvo em './storage/recaptcha.crx'.")
            # Caminho do arquivo original (altere para o seu caminho de arquivo)
            caminho_original = './storage/recaptcha.crx'
            novo_caminho = './storage/recaptcha.zip'

            # Renomear o arquivo
            os.rename(caminho_original, novo_caminho)

            # Caminho do arquivo zip
            caminho_zip = './storage/recaptcha.zip'

            # Diretório de destino para extrair
            diretorio_destino = './storage/recaptcha/'

            # Remover um arquivo anterior, se existir
            arquivo_antigo = './storage/recaptcha'
            if os.path.exists(arquivo_antigo):
                os.remove(arquivo_antigo)

            # Criar o diretório de destino se ele não existir
            if not os.path.exists(diretorio_destino):
                os.makedirs(diretorio_destino)

            # Extrair o arquivo zip
            with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                zip_ref.extractall(diretorio_destino)

            print("Arquivo extraído com sucesso!")
            os.remove('./storage/recaptcha.zip')

        else:
            result = "Não foi possível baixar o arquivo. Status Code: " + \
                str(response.status_code)


    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    window.Refresh()
    time.sleep(2)

    window.Refresh()
    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando sistema inicializar.')
    window.Refresh()

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.')
    window.Refresh()

    if not os.path.exists('./erros'):
        os.makedirs('./erros')
    codigo_não_recebido_seguidos = 0
    criou = False
    while parar is False:
        senha = gerar_senha(12)
        if parar is True:
            print('Parando Thread')
            break
        print(linha_ret)
        window['output'].print(linha_ret)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo navegador.')
        window.Refresh()

        nav_oculto = config7['navegador_oculto']
        usar_troca_ip = config7['usar_troca_ip']

        ###################### PROVEDORES ######################
        if dialog_values['-site_escolhido-'] == 'quackr.io':
            prov_atual = 'quackr.io'
        if dialog_values['-site_escolhido-'] == 'temporary-phone-number.com':
            prov_atual = 'temporary-phone-number.com'
        if dialog_values['-site_escolhido-'] == 'smstome.com':
            prov_atual = 'smstome.com'
        elif dialog_values['-site_escolhido-'] == 'Aleatório':
            lista_site = ['quackr.io', 'temporary-phone-number.com', 'smstome.com']
            prov_atual = random.choice(lista_site)
            print(prov_atual)
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Provedor atual: {prov_atual}.')
            window.Refresh()

        ##################### VPNs ######################
        if dialog_values['-vpnlista-'] == 'SurfShark':
            vpn_usada = 'surfshark'
        elif dialog_values['-vpnlista-'] == 'TouchVPN':
            vpn_usada = 'touchvpn'
        elif dialog_values['-vpnlista-'] == 'CyberGhost':
            vpn_usada = 'cyberghost'
        elif dialog_values['-vpnlista-'] == 'ZenMate':
            vpn_usada = 'zenmate'
        elif dialog_values['-vpnlista-'] == 'UrbanVPN':
            vpn_usada = 'urbanvpn'
        elif dialog_values['-vpnlista-'] == 'Troywell':
            vpn_usada = 'troywell'
        elif dialog_values['-vpnlista-'] == 'VeePN':
            vpn_usada = 'veepn'
        elif dialog_values['-vpnlista-'] == 'PlanetVPN':
            vpn_usada = 'planetvpn'
        elif dialog_values['-vpnlista-'] == 'Aleatorio':
            vpn_usada = random.choice(['TouchVPN', 'CyberGhost', 'VeePN', 'PlanetVPN', 'Troywell'])
            vpn_nav = vpn_usada
            window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] VPN Escolhida: {vpn_nav}.')
            window.Refresh()
        ##################### VPNs ######################


        try:
            with SB(uc=True, ad_block_on=True, locale_code='pt-br', demo=False, headless=nav_oculto, incognito=True, extension_dir=rf'.\storage\recaptcha,{caminho_atual}\storage\{vpn_usada}') as chrome:
                time.sleep(5)

                if vpn_nav == 'SurfShark':
                    file_path = './storage/surfshark.crx'
                    import zipfile

                    if os.path.exists("./storage/surfshark/"):
                        result = f"A pasta 'surfshark' já existe em '{file_path}'."
                    else:
                        # URL para download
                        url = 'https://www.dropbox.com/scl/fi/e4f4h29zl5s5tywjp1ev2/surfshark.crx?rlkey=zb499vqpr8swexgd8yrsu6rvc&dl=1'

                        # Fazendo o download do arquivo
                        response = requests.get(url)
                        if response.status_code == 200:
                            with open(file_path, 'wb') as file:
                                file.write(response.content)
                            print("Arquivo 'surfshark.crx' baixado e salvo em './storage/surfshark.crx'.")
                            # Caminho do arquivo original (altere para o seu caminho de arquivo)
                            caminho_original = './storage/surfshark.crx'
                            novo_caminho = './storage/surfshark.zip'

                            # Renomear o arquivo
                            os.rename(caminho_original, novo_caminho)

                            # Caminho do arquivo zip
                            caminho_zip = './storage/surfshark.zip'

                            # Diretório de destino para extrair
                            diretorio_destino = './storage/surfshark/'

                            # Remover um arquivo anterior, se existir
                            arquivo_antigo = './storage/surfshark'
                            if os.path.exists(arquivo_antigo):
                                os.remove(arquivo_antigo)

                            # Criar o diretório de destino se ele não existir
                            if not os.path.exists(diretorio_destino):
                                os.makedirs(diretorio_destino)

                            # Extrair o arquivo zip
                            with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                                zip_ref.extractall(diretorio_destino)

                            print("Arquivo extraído com sucesso!")
                            os.remove('./storage/surfshark.zip')

                        else:
                            result = "Não foi possível baixar o arquivo. Status Code: " + \
                                str(response.status_code)
                    try:
                        
                        chrome.set_window_size(800, 800)
                        # Alternar para a nova aba
                        chrome.driver.switch_to.window(
                            chrome.driver.window_handles[-1])

                        # Verificar se a URL está correta e fechar a aba
                        if chrome.driver.current_url == "https://surfshark.com/pt-br/download/chrome/onboarding":
                            chrome.driver.close()

                        # Alternar de volta para a aba original
                        chrome.driver.switch_to.window(
                            chrome.driver.window_handles[0])
                        chrome.open('chrome://extensions/')
                        extensoes = chrome.execute_script(
                            'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                        )

                        id_extensao = None
                        for ext in extensoes:
                            nome_ext = chrome.execute_script(
                                'return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                            if "Surf" in nome_ext:
                                id_extensao = chrome.execute_script(
                                    'return arguments[0].getAttribute("id");', ext)
                                break

                        if id_extensao:
                            url_extensao = f'chrome-extension://{id_extensao}/index.html'
                            # chrome.get(url_extensao)
                            # print(f"Página da extensão aberta em {url_extensao}")
                        else:
                            print("ID da extensão não encontrado")
                        # Continuar com outras operações na aba original, se necessário
                    except Exception as e:
                        print(e)
                    if os.path.exists(r'.\storage\cookies_surf.json'):
                        chrome.driver.uc_open_with_reconnect(
                            'https://my.surfshark.com/auth/login', 4)
                        try:
                            chrome.save_screenshot('erro_nav.png')
                            chrome.switch_to_frame(
                                'iframe[id^="cf-chl"]', timeout=1)
                            print(chrome.driver.find_elements(
                                By.XPATH, '//*[@id="challenge-stage"]/div/label/input'))
                            # chrome.driver.uc_click('//*[@id="challenge-stage"]/div/label/input')
                            chrome.driver.uc_click(
                                'span')
                            chrome.save_screenshot('erro_nav.png')
                            # chrome.driver.execute_script("arguments[0].click();", chrome.driver.find_element(By.XPATH, '//*[@id="challenge-stage"]/div/label/input'))
                        except Exception as e:
                            print('Sem Cloudflare')
                        with open(r'.\storage\cookies_surf.json', 'r') as file:
                            cookies = json.load(file)

                        # Adiciona os cookies salvos ao navegador
                        for cookie in cookies:
                            chrome.driver.add_cookie(cookie)

                        # Recarrega a página para usar os cookies
                        print('Adicionou os cookies')
                        time.sleep(2)
                        chrome.refresh()
                        time.sleep(2)
                        if chrome.driver.current_url == 'https://my.surfshark.com/home/dashboard':
                            chrome.driver.get(url_extensao)
                            chrome.wait_for_element(
                                "//button[@data-test='login-in-button']").click()
                            time.sleep(3)
                        elif 'https://my.surfshark.com/auth/login' in chrome.driver.current_url:
                            try:
                                chrome.driver.get(url_extensao)
                                chrome.wait_for_element(
                                    "//button[@data-test='login-in-button']").click()

                                time.sleep(5)
                                nova_janela = chrome.driver.window_handles[-1]
                                chrome.driver.switch_to.window(nova_janela)
                                time.sleep(4)
                                if chrome.driver.current_url == 'https://my.surfshark.com/account/extension-login-success':

                                    time.sleep(5)
                                    chrome.driver.close()
                                nova_janela = chrome.driver.window_handles[0]
                                chrome.driver.switch_to.window(nova_janela)

                                time.sleep(3)
                            except Exception as e:
                                print(e)
                    else:
                        chrome.driver.switch_to.window(
                            chrome.driver.window_handles[0])
                        import time
                        # Abre uma nova aba para a extensão (geralmente chrome-extension://<extension-id>/)
                        chrome.driver.get(url_extensao)
                        chrome.wait_for_element(
                            "//button[@data-test='login-in-button']").click()
                        time.sleep(3)
                        janela_principal = chrome.driver.window_handles[0]
                        nova_janela = chrome.driver.window_handles[1]
                        chrome.driver.switch_to.window(nova_janela)
                        print(chrome.driver.current_url)
                        email_surf = emailvpn
                        senha_surf = senhavpn
                        try:
                            chrome.save_screenshot('erro_nav.png')
                            chrome.switch_to_frame(
                                'iframe[id^="cf-chl"]', timeout=1)
                            print(chrome.driver.find_elements(
                                By.XPATH, '//*[@id="challenge-stage"]/div/label/input'))
                            # chrome.driver.uc_click('//*[@id="challenge-stage"]/div/label/input')
                            chrome.driver.uc_click(
                                'span')
                            chrome.save_screenshot('erro_nav.png')
                            # chrome.driver.execute_script("arguments[0].click();", chrome.driver.find_element(By.XPATH, '//*[@id="challenge-stage"]/div/label/input'))
                        except Exception as e:
                            print('Sem Cloudflare 2')
                        chrome.send_keys(
                            "//input[@name='emailField']", email_surf)
                        chrome.send_keys(
                            "//input[@name='passwordField']", senha_surf)
                        chrome.click(("//button[@id='loginSubmit']"))
                        time.sleep(10)
                        if chrome.driver.current_url == 'https://my.surfshark.com/account/extension-login-success':

                            cookies = chrome.driver.get_cookies()

                            # Guarde os cookies em um arquivo JSON
                            with open(r'.\storage\cookies_surf.json', 'w') as file:
                                json.dump(cookies, file)
                        else:
                            print('Falha ao logar na surfshark')
                        chrome.driver.close()
                        chrome.driver.switch_to.window(janela_principal)

                    if 'https://my.surfshark.com/auth/login' in chrome.driver.current_url:
                        print('Falha ao logar na surfshark')
                        chrome.driver.switch_to.window(
                            chrome.driver.window_handles[0])
                        import time
                        # Abre uma nova aba para a extensão (geralmente chrome-extension://<extension-id>/)
                        chrome.driver.get(url_extensao)
                        chrome.wait_for_element(
                            "//button[@data-test='login-in-button']").click()
                        time.sleep(3)
                        janela_principal = chrome.driver.window_handles[0]
                        nova_janela = chrome.driver.window_handles[1]
                        chrome.driver.switch_to.window(nova_janela)
                        print(chrome.driver.current_url)
                        email_surf = 'americanplayer@protonmail.com'
                        senha_surf = 'Kotinha10@'
                        chrome.send_keys(
                            "//input[@name='emailField']", email_surf)
                        chrome.send_keys(
                            "//input[@name='passwordField']", senha_surf)
                        chrome.click(("//button[@id='loginSubmit']"))
                        time.sleep(10)
                        if chrome.driver.current_url == 'https://my.surfshark.com/account/extension-login-success':
                            if os.path.exists(r'.\storage\cookies_surf.json'):
                                # Apaga o arquivo
                                os.remove(
                                    r'.\storage\cookies_surf.json')
                                print(
                                    f"cookies_surf.json foi apagado com sucesso.")
                            else:
                                print(f"cookies_surf.json não existe.")
                            cookies = chrome.driver.get_cookies()

                            # Guarde os cookies em um arquivo JSON
                            with open(r'.\storage\cookies_surf.json', 'w') as file:
                                json.dump(cookies, file)
                            chrome.driver.close()
                            chrome.switch_to.window(janela_principal)
                        else:
                            print('Falha ao logar na surfshark')
                    print('Logou com sucesso na surfshark')

                    locais = ['Canada', 'Australia', 'Netherlands', 'Poland', 'United Kingdom',
                            'Germany', 'Africa', 'Japan', 'Indonesia', 'India', 'Denmark', 'France', 'USA']
                    local_vpn = random.choice(locais)
                    print(f'Regiao escolhida {local_vpn}')
                    chrome.driver.refresh()
                    time.sleep(5)
                    try:
                        chrome.send_keys(
                            "//input[@data-test='location-search-input']", local_vpn)
                    except:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Erro ao logar na VPN.')
                        window.Refresh()
                        if os.path.exists(r'.\storage\cookies_surf.json'):
                            # Apaga o arquivo
                            os.remove(
                                r'.\storage\cookies_surf.json')
                            print(
                                f"cookies_surf.json foi apagado com sucesso.")
                    chrome.click("//div[@data-test='location-title']")
                    try:
                        chrome.wait_for_element(
                            "//button[@data-test='disconnect-button']")

                        print('VPN conectada')
                        time.sleep(5)
                    except Exception as e:
                        print(e)
                        
                elif vpn_nav == 'TouchVPN':
                    file_path = './storage/touchvpn.crx'
                    import zipfile

                    if os.path.exists("./storage/touchvpn/"):
                        result = f"A pasta 'touchvpn' já existe em '{file_path}'."
                    else:
                        # URL para download
                        url = 'https://www.dropbox.com/scl/fi/xlfanzmvr46zd36ki8o6s/touchvpn.crx?rlkey=ue55t76a21aur82c9ecm9d5al&st=muc5temz&dl=1'

                        # Fazendo o download do arquivo
                        response = requests.get(url)
                        if response.status_code == 200:
                            with open(file_path, 'wb') as file:
                                file.write(response.content)
                            print("Arquivo 'touchvpn.crx' baixado e salvo em './storage/touchvpn.crx'.")
                            # Caminho do arquivo original (altere para o seu caminho de arquivo)
                            caminho_original = './storage/touchvpn.crx'
                            novo_caminho = './storage/touchvpn.zip'

                            # Renomear o arquivo
                            os.rename(caminho_original, novo_caminho)

                            # Caminho do arquivo zip
                            caminho_zip = './storage/touchvpn.zip'

                            # Diretório de destino para extrair
                            diretorio_destino = './storage/touchvpn/'

                            # Remover um arquivo anterior, se existir
                            arquivo_antigo = './storage/touchvpn'
                            if os.path.exists(arquivo_antigo):
                                os.remove(arquivo_antigo)

                            # Criar o diretório de destino se ele não existir
                            if not os.path.exists(diretorio_destino):
                                os.makedirs(diretorio_destino)

                            # Extrair o arquivo zip
                            with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                                zip_ref.extractall(diretorio_destino)

                            print("Arquivo extraído com sucesso!")
                            os.remove('./storage/touchvpn.zip')

                        else:
                            result = "Não foi possível baixar o arquivo. Status Code: " + \
                                str(response.status_code)
                    time.sleep(5)
                    chrome.driver.switch_to.window(
                        chrome.driver.window_handles[-1])
                    # Verificar se a URL está correta e fechar a aba
                    if chrome.driver.current_url == "https://www.touchvpn.net/":
                        chrome.driver.close()
                    # Alternar de volta para a aba original
                    chrome.driver.switch_to.window(
                        chrome.driver.window_handles[0])
                    chrome.open('chrome://extensions/')
                    extensoes = chrome.execute_script(
                        'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                    )

                    id_extensao = None
                    for ext in extensoes:
                        nome_ext = chrome.execute_script('return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                        if "Touch" in nome_ext:  # Substitua pelo nome da sua extensão
                            id_extensao = chrome.execute_script('return arguments[0].getAttribute("id");', ext)
                            break

                    if id_extensao:
                        # Use o ID da extensão para abrir a página da extensão
                        url_extensao = f'chrome-extension://{id_extensao}/panel/index.html'
                        chrome.driver.get(url_extensao)
                    else:
                        print("ID da extensão não encontrado")
                    chrome.wait_for_element("div[class=location]").click()
                    locais = ['United States', 'Canada', 'Germany', 'Netherlands', 'United Kingdom']
                    local_vpn = random.choice(locais)
                    print(local_vpn)
                    chrome.wait_for_element(f'''//div[contains(text(), '{local_vpn}')]/div[@class='flag']''').click()
                    chrome.wait_for_element("div[id=ConnectionButton]").click()
                    chrome.wait_for_element("div[id=AdBlocker]")
                    if chrome.find_elements("div[id=AdBlocker]"):
                        print('VPN Conectada')

                elif vpn_nav == 'CyberGhost':
                    file_path = './storage/cyberghost.crx'
                    import zipfile

                    if os.path.exists("./storage/cyberghost/"):
                        result = f"A pasta 'cyberghost' já existe em '{file_path}'."
                    else:
                        # URL para download
                        url = 'https://www.dropbox.com/scl/fi/nw94zxsqdcyvs1x7i4r4e/cyberghost.crx?rlkey=162gv0ry8524g1mgt8gpf0n1c&st=vaj6u9r7&dl=1'

                        # Fazendo o download do arquivo
                        response = requests.get(url)
                        if response.status_code == 200:
                            with open(file_path, 'wb') as file:
                                file.write(response.content)
                            print("Arquivo 'cyberghost.crx' baixado e salvo em './storage/cyberghost.crx'.")
                            # Caminho do arquivo original (altere para o seu caminho de arquivo)
                            caminho_original = './storage/cyberghost.crx'
                            novo_caminho = './storage/cyberghost.zip'

                            # Renomear o arquivo
                            os.rename(caminho_original, novo_caminho)

                            # Caminho do arquivo zip
                            caminho_zip = './storage/cyberghost.zip'

                            # Diretório de destino para extrair
                            diretorio_destino = './storage/cyberghost/'

                            # Remover um arquivo anterior, se existir
                            arquivo_antigo = './storage/cyberghost'
                            if os.path.exists(arquivo_antigo):
                                os.remove(arquivo_antigo)

                            # Criar o diretório de destino se ele não existir
                            if not os.path.exists(diretorio_destino):
                                os.makedirs(diretorio_destino)

                            # Extrair o arquivo zip
                            with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                                zip_ref.extractall(diretorio_destino)

                            print("Arquivo extraído com sucesso!")
                            os.remove('./storage/cyberghost.zip')

                        else:
                            result = "Não foi possível baixar o arquivo. Status Code: " + \
                                str(response.status_code)
                    
                    chrome.open('chrome://extensions/')
                    extensoes = chrome.execute_script(
                        'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                    )

                    id_extensao = None
                    for ext in extensoes:
                        nome_ext = chrome.execute_script('return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                        if "CyberGhost" in nome_ext:
                            id_extensao = chrome.execute_script('return arguments[0].getAttribute("id");', ext)
                            break

                    if id_extensao:
                        url_extensao = f'chrome-extension://{id_extensao}/index.html'
                        chrome.driver.get(url_extensao)
                    else:
                        print("ID da extensão não encontrado")
                    
                    locais = ['Romania', 'Netherlands', 'Germany', 'United States']
                    local_vpn = random.choice(locais)
                    print(local_vpn)
                    if local_vpn == 'Romania':
                        pass
                    else:
                        chrome.wait_for_element("span[class=selected-country]").click()
                        chrome.wait_for_element(f"//span[normalize-space(text())='{local_vpn}']").click()
                    chrome.wait_for_element("div[class=spinner]").click()
                    while True:
                        if chrome.find_elements('//h4[text()="Connected"]'):
                            print('VPN Conectada')
                            break
                        elif chrome.find_elements('//h4[text()="connectPage.error"]'):
                            chrome.wait_for_element("div[class=spinner]").click()
                            chrome.wait_for_element('//h4[text()="Connected"]')
                            
                elif vpn_nav == 'ZenMate':
                    file_path = './storage/zenmate.crx'
                    import zipfile

                    if os.path.exists("./storage/zenmate/"):
                        result = f"A pasta 'zenmate' já existe em '{file_path}'."
                    else:
                        # URL para download
                        url = 'https://www.dropbox.com/scl/fi/ype15i0fln67zlxfjhsa7/zenmate.crx?rlkey=qc2wrm1zy8i63murehrgb16dr&st=7gkbc98m&dl=1'

                        # Fazendo o download do arquivo
                        response = requests.get(url)
                        if response.status_code == 200:
                            with open(file_path, 'wb') as file:
                                file.write(response.content)
                            print("Arquivo 'zenmate.crx' baixado e salvo em './storage/zenmate.crx'.")
                            # Caminho do arquivo original (altere para o seu caminho de arquivo)
                            caminho_original = './storage/zenmate.crx'
                            novo_caminho = './storage/zenmate.zip'

                            # Renomear o arquivo
                            os.rename(caminho_original, novo_caminho)

                            # Caminho do arquivo zip
                            caminho_zip = './storage/zenmate.zip'

                            # Diretório de destino para extrair
                            diretorio_destino = './storage/zenmate/'

                            # Remover um arquivo anterior, se existir
                            arquivo_antigo = './storage/zenmate'
                            if os.path.exists(arquivo_antigo):
                                os.remove(arquivo_antigo)

                            # Criar o diretório de destino se ele não existir
                            if not os.path.exists(diretorio_destino):
                                os.makedirs(diretorio_destino)

                            # Extrair o arquivo zip
                            with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                                zip_ref.extractall(diretorio_destino)

                            print("Arquivo extraído com sucesso!")
                            os.remove('./storage/zenmate.zip')

                        else:
                            result = "Não foi possível baixar o arquivo. Status Code: " + \
                                str(response.status_code)
                    
                    chrome.open('chrome://extensions/')
                    extensoes = chrome.execute_script(
                        'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                    )
                    id_extensao = None
                    for ext in extensoes:
                        nome_ext = chrome.execute_script('return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                        if "ZenMate" in nome_ext:
                            id_extensao = chrome.execute_script('return arguments[0].getAttribute("id");', ext)
                            break
                    if id_extensao:
                        url_extensao = f'chrome-extension://{id_extensao}/index.html'
                        chrome.driver.get(url_extensao)
                    else:
                        print("ID da extensão não encontrado")

                    locais = ['Germany', 'Romania', 'Singapore', 'United States']
                    local_vpn = random.choice(locais)
                    print(local_vpn)
                    if local_vpn == 'Germany':
                        local_zenmate = '#country-browsing-DE'
                    elif local_vpn == 'Romania':
                        local_zenmate = '#country-browsing-RO'
                    elif local_vpn == 'Singapore':
                        local_zenmate = '#country-browsing-SG'
                    elif local_vpn == 'United States':
                        local_zenmate = '#country-browsing-US'
                    while True:
                        if not chrome.find_elements("div[class=shield-container]"): 
                            chrome.driver.get(url_extensao)
                            time.sleep(2)
                        else:
                            time.sleep(2)
                            chrome.wait_for_element('//a[@routerlink="/servers"]').click()
                            locais = ['Germnay', 'Romania', 'Singapore', 'United States']
                            local_vpn = random.choice(locais)
                            time.sleep(2)
                            if not chrome.find_elements(f"{local_zenmate}") or chrome.find_elements('xpath', "//div[@class='alert alert-danger text-center mt-2' and not(@hidden)]"):
                                chrome.wait_for_element('//a[@routerlink="/home"]').click()
                                time.sleep(4)
                                chrome.wait_for_element('//a[@routerlink="/servers"]').click()
                            chrome.wait_for_element(f"{local_zenmate}").click()
                            time.sleep(3)
                            try:
                                chrome.wait_for_element('div.proxy-status-container > div.pt-1.location-info > a')
                            except:
                                chrome.driver.get(url_extensao)
                                chrome.wait_for_element('div.proxy-status-container > div.pt-1.location-info > a')
                            if chrome.find_element('div.proxy-status-container > div.pt-1.location-info > a').text == 'Connected to':
                                print('VPN Conectada')
                                break
                
                elif vpn_nav == 'VeePN':
                    file_path = './storage/veepn.crx'
                    import zipfile

                    if os.path.exists("./storage/veepn/"):
                        result = f"A pasta 'veepn' já existe em '{file_path}'."
                    else:
                        # URL para download
                        url = 'https://www.dropbox.com/scl/fi/ube9dvmevvhhk5eqt32gt/veepn.crx?rlkey=yuzwpgst6vo0oohhtcsi7i65o&dl=1'

                        # Fazendo o download do arquivo
                        response = requests.get(url)
                        if response.status_code == 200:
                            with open(file_path, 'wb') as file:
                                file.write(response.content)
                            print("Arquivo 'veepn.crx' baixado e salvo em './storage/veepn.crx'.")
                            # Caminho do arquivo original (altere para o seu caminho de arquivo)
                            caminho_original = './storage/veepn.crx'
                            novo_caminho = './storage/veepn.zip'

                            # Renomear o arquivo
                            os.rename(caminho_original, novo_caminho)

                            # Caminho do arquivo zip
                            caminho_zip = './storage/veepn.zip'

                            # Diretório de destino para extrair
                            diretorio_destino = './storage/veepn/'

                            # Remover um arquivo anterior, se existir
                            arquivo_antigo = './storage/veepn'
                            if os.path.exists(arquivo_antigo):
                                os.remove(arquivo_antigo)

                            # Criar o diretório de destino se ele não existir
                            if not os.path.exists(diretorio_destino):
                                os.makedirs(diretorio_destino)

                            # Extrair o arquivo zip
                            with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                                zip_ref.extractall(diretorio_destino)

                            print("Arquivo extraído com sucesso!")
                            os.remove('./storage/veepn.zip')

                        else:
                            result = "Não foi possível baixar o arquivo. Status Code: " + \
                                str(response.status_code)
                    
                    chrome.open('chrome://extensions/')
                    extensoes = chrome.execute_script(
                        'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                    )

                    id_extensao = None
                    for ext in extensoes:
                        nome_ext = chrome.execute_script('return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                        if "Vee" in nome_ext:
                            id_extensao = chrome.execute_script('return arguments[0].getAttribute("id");', ext)
                            break

                    if id_extensao:
                        url_extensao = f'chrome-extension://{id_extensao}/html/foreground.html'
                        chrome.driver.get(url_extensao)
                    else:
                        print("ID da extensão não encontrado")
                    
                    chrome.driver.switch_to.window(
                        chrome.driver.window_handles[-1])
                    # Verificar se a URL está correta e fechar a aba
                    if "https://veepn.com" in chrome.driver.current_url:
                        chrome.driver.close()
                    # Alternar de volta para a aba original
                    chrome.driver.switch_to.window(
                        chrome.driver.window_handles[0])

                    chrome.wait_for_element("button.next").click()
                    chrome.wait_for_element("button.next").click()
                    if chrome.find_elements("div.footer-decline-text"):
                        chrome.wait_for_element("div.footer-decline-text").click()

                    locais = ['France', 'Netherlands','Singapore', 'London','Virginia', 'Oregon']
                    local_vpn = random.choice(locais)
                    print(local_vpn)
                    chrome.wait_for_element("div.current-region-upper-block").click()
                    chrome.wait_for_element("input.region-search-input").send_keys(local_vpn)
                    chrome.wait_for_element("div.radio.off", timeout=25).click()
                    chrome.wait_for_element('div[id=mainBtn]').click()
                    while True:
                        if chrome.find_element("div.description.fadeIn.linebreak").text == 'VPN is ON':
                            print('VPN Conectada')
                            break
                        elif chrome.find_element("div.description.fadeIn.linebreak").text == 'VPN is OFF':
                            chrome.wait_for_element('div[id=mainBtn]').click()
                        elif chrome.find_elements("div.footer-decline-text"):
                            chrome.wait_for_element("div.footer-decline-text").click()

                elif vpn_nav == 'PlanetVPN':
                    file_path = './storage/planetvpn.crx'
                    import zipfile

                    if os.path.exists("./storage/planetvpn/"):
                        result = f"A pasta 'planetvpn' já existe em '{file_path}'."
                    else:
                        # URL para download
                        url = 'https://www.dropbox.com/scl/fi/5nkgxkdyd3hmbl2yezwpz/planetvpn.crx?rlkey=q67oe53sq6qoian2izabfxc5q&dl=1'

                        # Fazendo o download do arquivo
                        response = requests.get(url)
                        if response.status_code == 200:
                            with open(file_path, 'wb') as file:
                                file.write(response.content)
                            print("Arquivo 'planetvpn.crx' baixado e salvo em './storage/planetvpn.crx'.")
                            # Caminho do arquivo original (altere para o seu caminho de arquivo)
                            caminho_original = './storage/planetvpn.crx'
                            novo_caminho = './storage/planetvpn.zip'

                            # Renomear o arquivo
                            os.rename(caminho_original, novo_caminho)

                            # Caminho do arquivo zip
                            caminho_zip = './storage/planetvpn.zip'

                            # Diretório de destino para extrair
                            diretorio_destino = './storage/planetvpn/'

                            # Remover um arquivo anterior, se existir
                            arquivo_antigo = './storage/planetvpn'
                            if os.path.exists(arquivo_antigo):
                                os.remove(arquivo_antigo)

                            # Criar o diretório de destino se ele não existir
                            if not os.path.exists(diretorio_destino):
                                os.makedirs(diretorio_destino)

                            # Extrair o arquivo zip
                            with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                                zip_ref.extractall(diretorio_destino)

                            print("Arquivo extraído com sucesso!")
                            os.remove('./storage/planetvpn.zip')

                        else:
                            result = "Não foi possível baixar o arquivo. Status Code: " + \
                                str(response.status_code)
                    
                    chrome.open('chrome://extensions/')
                    extensoes = chrome.execute_script(
                        'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                    )

                    id_extensao = None
                    for ext in extensoes:
                        nome_ext = chrome.execute_script('return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                        if "Planet" in nome_ext:
                            id_extensao = chrome.execute_script('return arguments[0].getAttribute("id");', ext)
                            break

                    if id_extensao:
                        url_extensao = f'chrome-extension://{id_extensao}/popup.html'
                        chrome.driver.get(url_extensao)
                    else:
                        print("ID da extensão não encontrado")
                    
                    chrome.driver.switch_to.window(
                        chrome.driver.window_handles[-1])
                    # Verificar se a URL está correta e fechar a aba
                    if "https://freevpnplanet.com/" in chrome.driver.current_url:
                        chrome.driver.close()
                    # Alternar de volta para a aba original
                    chrome.driver.switch_to.window(
                        chrome.driver.window_handles[0])

                    chrome.wait_for_element("div.consent-button").click()
                    chrome.wait_for_element("div.select-country").click()
                    locais = ['Germany', 'United Kingdom', 'USA']
                    local_vpn = random.choice(locais)
                    print(local_vpn)
                    chrome.wait_for_element("input.search-input").send_keys(local_vpn)
                    chrome.wait_for_element("div.server-name").click()
                    time.sleep(1)
                    while True:
                        if chrome.find_elements("button.button.button-connected"):
                            print('VPN Conectada')
                            break
                        elif chrome.find_elements("button.button.button-disconnected"):
                            chrome.find_element("button.button.button-disconnected").click()

                elif vpn_nav == 'Troywell':
                    file_path = './storage/troywell.crx'
                    import zipfile

                    if os.path.exists("./storage/troywell/"):
                        result = f"A pasta 'troywell' já existe em '{file_path}'."
                    else:
                        # URL para download
                        url = 'https://www.dropbox.com/scl/fi/rn25p6mmg57pmikq8d2xu/troywell.crx?rlkey=wwmakky5j6952lisr19723vw7&dl=1'

                        # Fazendo o download do arquivo
                        response = requests.get(url)
                        if response.status_code == 200:
                            with open(file_path, 'wb') as file:
                                file.write(response.content)
                            print("Arquivo 'troywell.crx' baixado e salvo em './storage/troywell.crx'.")
                            # Caminho do arquivo original (altere para o seu caminho de arquivo)
                            caminho_original = './storage/troywell.crx'
                            novo_caminho = './storage/troywell.zip'

                            # Renomear o arquivo
                            os.rename(caminho_original, novo_caminho)

                            # Caminho do arquivo zip
                            caminho_zip = './storage/troywell.zip'

                            # Diretório de destino para extrair
                            diretorio_destino = './storage/troywell/'

                            # Remover um arquivo anterior, se existir
                            arquivo_antigo = './storage/troywell'
                            if os.path.exists(arquivo_antigo):
                                os.remove(arquivo_antigo)

                            # Criar o diretório de destino se ele não existir
                            if not os.path.exists(diretorio_destino):
                                os.makedirs(diretorio_destino)

                            # Extrair o arquivo zip
                            with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                                zip_ref.extractall(diretorio_destino)

                            print("Arquivo extraído com sucesso!")
                            os.remove('./storage/troywell.zip')

                        else:
                            result = "Não foi possível baixar o arquivo. Status Code: " + \
                                str(response.status_code)
                
                    chrome.open('chrome://extensions/')
                    extensoes = chrome.execute_script(
                        'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                    )

                    id_extensao = None
                    for ext in extensoes:
                        nome_ext = chrome.execute_script('return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                        if "Troywell" in nome_ext:
                            id_extensao = chrome.execute_script('return arguments[0].getAttribute("id");', ext)
                            break

                    if id_extensao:
                        url_extensao = f'chrome-extension://{id_extensao}/popup.html'
                        chrome.driver.get(url_extensao)
                    else:
                        print("ID da extensão não encontrado")

                    try:
                        chrome.wait_for_element("div.button.analytics__button", timeout=2).click()
                    except:
                        chrome.driver.get(url_extensao)
                        chrome.wait_for_element("div.button.analytics__button").click()
                    chrome.wait_for_element("div.server-select__row").click()
                    time.sleep(2)
                    locais = ['Alemanha', 'Polônia', 'Holanda', 'Japão', 'Austrália', 'França', 'Noruega', 'África do Sul', 'Canadá']
                    local_vpn = random.choice(locais)
                    print(local_vpn)
                    chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                    while True:
                        try:
                            chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]").click()
                            break
                        except:
                            chrome.driver.get(url_extensao)
                            chrome.wait_for_element("div.server-select__row").click()
                            time.sleep(2)
                            local_vpn = random.choice(locais)
                            chrome.wait_for_element("input.search__input").clear()
                            chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                            chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]").click()

                    chrome.wait_for_element("div.connect-button").click()
                    try:
                        chrome.wait_for_element("div.connection-block__label")
                    except:
                        if chrome.find_elements("div.button.button_selected.connection-failed__button.connection-failed__button_blue"):
                            chrome.find_element("div.button.button_selected.connection-failed__button.connection-failed__button_blue").click()
                            chrome.wait_for_element("div.server-select__row").click()
                            time.sleep(2)
                            local_vpn = random.choice(locais)
                            chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                            chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]").click()
                            chrome.wait_for_element("div.connect-button").click()
                            chrome.wait_for_element("div.connection-block__label")
                    time.sleep(1)
                    while True:
                        if chrome.find_elements("div.connection-block__label"):
                            print('VPN Conectada')
                            break
                        elif chrome.find_elements("div.button.button_selected.connection-failed__button.connection-failed__button_blue"):
                            chrome.find_element("div.button.button_selected.connection-failed__button.connection-failed__button_blue").click()
                            chrome.wait_for_element("div.server-select__row").click()
                            time.sleep(2)
                            local_vpn = random.choice(locais)
                            chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                            chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]").click()
                            chrome.wait_for_element("div.connect-button").click()
                            chrome.wait_for_element("div.connection-block__label")


                #janela_principal = chrome.driver.window_handles[0]
                #chrome.driver.switch_to.window(janela_principal)
                ################# PEGAR NÚMERO #################

                if prov_atual == 'quackr.io':
                    url_prov = 'https://quackr.io/temporary-phone-number-generator'
                    if criou:
                        url_prov = url_atual

                    if criou:
                        chrome.open(url_prov)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Utilizando o mesmo número.')
                        window.Refresh()
                        chrome.set_window_size(800, 2000)
                        chrome.execute_script(
                            "document.body.style.zoom='50%'")
                    else:
                        chrome.open('https://quackr.io/temporary-phone-number-generator')

                        try:
                            chrome.wait_for_element("button[mode=primary]")
                            chrome.wait_for_element("button[mode=primary]").click()
                        except:
                            pass
                        paises_num = ['8', '21', '28']
                        pais = random.choice(paises_num)
                        chrome.wait_for_element('/html/body/app-root/div/div/main/app-temporary-phone-number-generator/section/div/div[1]/div/div/div[1]/button').click()
                        chrome.wait_for_element(f'/html/body/app-root/div/div/main/app-temporary-phone-number-generator/section/div/div[1]/div/div/div[2]/div/a[{pais}]').click()
                        chrome.wait_for_element('button.button.is-success').click()

                    time.sleep(5)
                    try:
                        chrome.execute_script("""
                        var l = document.getElementsByClassName("footer-overlay-regulated")[0];
                        l.parentNode.removeChild(l);
                        """)
                    except:
                        pass
                    try:
                        chrome.execute_script("""
                        var l = document.getElementsByClassName("message is-info")[0];
                        l.parentNode.removeChild(l);
                        """)
                    except:
                        pass
                    num = chrome.wait_for_element('h1[tooltip="Copied"]').text
                    url_atual = chrome.driver.current_url
                    chrome.execute_script("document.body.style.zoom='50%'")
                    window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número: {num}')
                    window.Refresh()
                    print(num)
                    criou = False
                    
                elif prov_atual == 'temporary-phone-number.com':
                    url_prov = 'https://temporary-phone-number.com/'
                    if criou:
                        url_prov = url_atual

                    if criou:
                        chrome.open(url_prov)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Utilizando o mesmo número.')
                        window.Refresh()
                        chrome.set_window_size(800, 2000)
                        chrome.execute_script(
                            "document.body.style.zoom='50%'")
                    else:
                        chrome.open(url_prov)
                        lista = ['2', '3', '4', '5', '6', '7', '8', '9', '11', '12', '13', '14', '15', '16', '17',
                                '18', '20']
                        numero_escolhido = random.choice(lista)

                        while True:
                            if '+7 ' in chrome.find_element('xpath', f'/html/body/div[2]/div/section[2]/div[1]/div[{numero_escolhido}]/a/div/span[2]').text:
                                #print('É da russia')
                                lista = ['2', '3', '4', '5', '6', '7', '8', '9', '11', '12', '13', '14', '15', '16', '17',
                                    '18', '20']
                                numero_escolhido = random.choice(lista)

                                #chrome.highlight('xpath', f'/html/body/div[2]/div/section[2]/div[1]/div[{numero_escolhido}]/a')
                            else:
                                #print('Não é da russia')
                                break
                        chrome.wait_for_element(f'/html/body/div[2]/div/section[2]/div[1]/div[{numero_escolhido}]/a').click()
                        

                    time.sleep(5)
                    chrome.wait_for_element('h1.btn1')
                    num = chrome.find_element('h1.btn1').text
                    print(num)
                    url_atual = chrome.driver.current_url
                    chrome.execute_script("document.body.style.zoom='50%'")
                    window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número: {num}')
                    window.Refresh()
                    print(num)
                    criou = False

                elif prov_atual == 'smstome.com':
                    url_prov = 'smstome.com'
                    if criou:
                        url_prov = url_atual

                    if criou:
                        chrome.open(url_prov)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Utilizando o mesmo número.')
                        window.Refresh()
                        chrome.set_window_size(800, 2000)
                        chrome.execute_script(
                            "document.body.style.zoom='50%'")
                    else:
                        chrome.open(url_prov)
                        if chrome.find_elements('button.fc-button.fc-cta-consent.fc-primary-button'):
                            chrome.wait_for_element('button.fc-button.fc-cta-consent.fc-primary-button').click()
                        while True:
                            rnd = random.randint(1, 8)
                            if rnd == 1 or rnd == 2 or rnd == 7:
                                rnd = random.randint(1, 8)
                            else:
                                break
                        print(rnd)
                        chrome.wait_for_element('xpath',f'/html/body/main/header/section/div/div[2]/ul/li[{rnd}]/a').click()
                                        #/html/body/main/header/section/div/div[2]/ul/li[1]/a
                        if rnd == 4:
                            primeiro_nome = fake.first_name()
                            primeiro_nome = primeiro_nome.replace(' ', '')
                            sobrenome_smstome = fake.last_name()
                            primeiro_nome = re.sub(r'[^a-zA-Z0-9._%+-]+', '', primeiro_nome)
                            sobrenome_smstome = re.sub(r'[^a-zA-Z0-9._%+-]+', '', sobrenome_smstome)
                            email_customizado = f"{primeiro_nome.lower()}.{sobrenome_smstome.lower()}@{fake.free_email_domain()}"
                            #email_customizado = re.sub(r'[^a-zA-Z0-9._%+-]+', '', email_customizado)
                            chrome.open('https://smstome.com/sign-up')
                            chrome.wait_for_element('input[name=name]').send_keys(primeiro_nome + ' ' + sobrenome_smstome)
                            chrome.wait_for_element('input[name=email]').send_keys(email_customizado)
                            senha_smstome = fake.password(length=12, special_chars=True, digits=True, upper_case=True, lower_case=True)
                            chrome.wait_for_element('input[name=password]').send_keys(senha_smstome)
                            expressao = chrome.wait_for_element('xpath','/html/body/main/header/section/div/form/div[4]/label').text
                            expressao = expressao.replace('What is ', '')
                            expressao = expressao.replace('?', '')
                            resultado = resultado = eval(expressao)
                            chrome.wait_for_element('input[name=captcha]').send_keys(resultado)
                            chrome.wait_for_element('button.btn.btn-primary').click()
                            time.sleep(2)
                            chrome.open('https://smstome.com/country/france')
                            
                        num_pag = chrome.wait_for_element('/html/body/main/section/div[8]/div/a[13]').text
                        num_pag = int(num_pag) - 1
                        num_pag = random.randint(1, int(num_pag))
                        print(num_pag)
                        url_agora = chrome.driver.current_url
                        chrome.get(f'{url_agora}?page={num_pag}')
                        numero_de_elementos = random.randint(1, 7)
                        rnd2 = random.randint(1, 3)
                        try:
                            #print(numero_de_elementos, rnd2)
                            chrome.wait_for_element(f'/html/body/main/section/div[{numero_de_elementos}]/div[{rnd2}]/div/div/div[3]/a').click()
                        except:
                            chrome.wait_for_element(f'/html/body/main/section/div[{numero_de_elementos}]/div[1]/div/div/div[3]/a').click()
                        

                    time.sleep(5)
                    url_atual = chrome.driver.current_url
                    chrome.execute_script("document.body.style.zoom='50%'")
                    num = chrome.wait_for_element('/html/body/main/header/section/h1/small/b').text
                    print(num)
                    window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Número: {num}')
                    window.Refresh()
                    print(num)
                    criou = False
                ################# PEGAR NÚMERO #################

                #chrome.execute_script("window.open('a', 'new_tab')")
                #chrome.driver.switch_to.window(chrome.driver.window_handles[-1])
                url = f"https://www.instagram.com/"
                chrome.set_window_size(800, 800)
                chrome.driver.uc_open_with_reconnect(url, 10)
                #chrome.driver.switch_to.window(chrome.driver.window_handles[-1])
                #for handle in chrome.driver.window_handles:
                #    chrome.driver.switch_to.window(handle)
                #    if 'Instagram' in chrome.driver.title:
                #        break

                try:
                    chrome.driver.uc_click(
                        'button:contains("Permitir todos os cookies")', 5)
                    print('Cookies aceito')
                    #for handle in chrome.driver.window_handles:
                    #    chrome.driver.switch_to.window(handle)
                    #    if 'Instagram' in chrome.driver.title:
                    #        break
                    cook = True
                    time.sleep(5)
                except:
                    print('Sem cookies')
                    cook = False
                try:
                    chrome.driver.uc_click(
                        "a[href='/accounts/emailsignup/']", 4)
                except:
                    chrome.driver.refresh()
                    chrome.driver.uc_click("a[href='/accounts/emailsignup/']", 4)

                #for handle in chrome.driver.window_handles:
                #    chrome.driver.switch_to.window(handle)
                #    if 'Instagram' in chrome.driver.title:
                #        break
                lista_user = random.choices(range(0, 9), k=2)
                lista_letras = random.choices(letras, k=2)
                nomea = fake.first_name_male().replace(" ", "")
                nome = unicodedata.normalize('NFKD', nomea).encode(
                    'ASCII', 'ignore').decode('ASCII')
                sobrenomea = fake.last_name().replace(" ", "").lower()
                sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                    'ASCII', 'ignore').decode('ASCII')
                nome_completo = nome + ' ' + sobrenome
                nome_completo_s = nome + sobrenome
                numeros_concatenados = ''.join(str(numero)
                                            for numero in lista_user)
                user_completo1 = nome_completo_s + '' + \
                    str(numeros_concatenados) + ''.join(lista_letras)
                user_completo = random.randint(1, len(user_completo1))
                string_with_dot = user_completo1[:user_completo] + \
                    '_' + user_completo1[user_completo:]
                user_completo_antigo = string_with_dot.lower()
                escolha = random.choice(["_", "."])
                user_completo = nome + escolha + sobrenome + \
                    str(numeros_concatenados) + ''.join(lista_letras)

                print(user_completo)
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] User: {user_completo}')
                window.Refresh()
                senha = gerar_senha(12)
                print(senha)
                chrome.wait_for_element("//input[@name='emailOrPhone']", timeout=30)
                chrome.type("//input[@name='fullName']", nome_completo)
                time.sleep(random.uniform(0.5, 2))
                chrome.wait_for_element("//input[@name='emailOrPhone']", timeout=30)
                chrome.type("//input[@name='emailOrPhone']", num)
                time.sleep(random.uniform(0.5, 2))
                chrome.type("//input[@name='username']", user_completo)
                time.sleep(random.uniform(0.5, 2))
                chrome.type("//input[@name='password']", senha)
                time.sleep(random.uniform(0.5, 2))
                time.sleep(5)
                chrome.driver.uc_click('''button[type='submit']''', 5)
                ano = str(random.randint(1960, 2000))
                janela_principal = chrome.driver.current_window_handle
                if len(chrome.find_elements("//input[@name='emailOrPhone']")) == 1:
                    print('IP Bloqueado, procurando outro IP')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] IP Bloqueado')
                    window.Refresh()

                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Procurando outro IP')
                    window.Refresh()
                    tentativa = 1
                    if vpn_nav == 'SurfShark':
                        while True:
                            chrome.execute_script(
                                "window.open('a', 'new_tab')")
                            
                            nova_janela = chrome.driver.window_handles[-1]
                            chrome.driver.switch_to.window(nova_janela)
                            chrome.driver.get(url_extensao)
                            chrome.wait_for_element(
                                "//button[@data-test='disconnect-button']").click()
                            time.sleep(2)
                            # locais = ['Canada', 'Australia', 'Netherlands']
                            # local_vpn = random.choice(locais)
                            chrome.send_keys(
                                "//input[@data-test='location-search-input']", local_vpn)
                            chrome.click("//div[@data-test='location-title']")
                            try:
                                chrome.wait_for_element(
                                    "//button[@data-test='disconnect-button']")

                                print('VPN conectada')
                                time.sleep(5)
                            except:
                                print('Não foi possivel conectar')

                            chrome.driver.close()
                            
                            chrome.driver.switch_to.window(janela_principal)
                            time.sleep(3)
                            try:
                                chrome.driver.uc_click(
                                    '''button[type='submit']''', 5)
                            except:
                                chrome.driver.uc_click(
                                    '''//button[@type='submit']''', 5)

                            if len(chrome.find_elements("//select[@title='Ano:']")) == 1:
                                print('IP aceito')
                                break
                            tentativa += 1
                            if tentativa == 5:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Não achou IP válido', text_color='red')
                                window.Refresh()
                                raise Exception("Não achou IP válido")
                    elif vpn_nav == 'TouchVPN':
                        while True:
                            chrome.execute_script(
                                "window.open('a', 'new_tab')")
                            
                            nova_janela = chrome.driver.window_handles[-1]
                            chrome.driver.switch_to.window(nova_janela)
                            chrome.driver.get(url_extensao)
                            chrome.wait_for_element("div[id=ConnectionButton]").click()
                            chrome.wait_for_element("div[class=location]")
                            chrome.wait_for_element("div[id=ConnectionButton]").click()
                            time.sleep(3)
                            chrome.driver.close()
                            
                            chrome.driver.switch_to.window(janela_principal)
                            time.sleep(3)
                            try:
                                chrome.driver.uc_click(
                                    '''button[type='submit']''', 5)
                            except:
                                chrome.driver.uc_click(
                                    '''//button[@type='submit']''', 5)

                            if len(chrome.find_elements("//select[@title='Ano:']")) == 1:
                                print('IP aceito')
                                break
                            tentativa += 1
                            if tentativa == 5:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Não achou IP válido', text_color='red')
                                window.Refresh()
                                raise Exception("Não achou IP válido")
                            
                    elif vpn_nav == 'CyberGhost':
                        while True:
                            chrome.execute_script(
                                "window.open('a', 'new_tab')")
                            
                            nova_janela = chrome.driver.window_handles[-1]
                            chrome.driver.switch_to.window(nova_janela)
                            chrome.driver.get(url_extensao)
                            chrome.wait_for_element("div[class=spinner]").click()
                            chrome.wait_for_element('//h4[text()="Start a Connection"]')
                            time.sleep(2)
                            chrome.wait_for_element("div[class=spinner]").click()
                            while True:
                                if chrome.find_elements('//h4[text()="Connected"]'):
                                    print('VPN Conectada')
                                    break
                                elif chrome.find_elements('//h4[text()="connectPage.error"]'):
                                    chrome.wait_for_element("div[class=spinner]").click()
                                    chrome.wait_for_element('//h4[text()="Connected"]')
                            
                            chrome.driver.close()
                            
                            chrome.driver.switch_to.window(janela_principal)
                            time.sleep(3)
                            try:
                                chrome.driver.uc_click(
                                    '''button[type='submit']''', 5)
                            except:
                                chrome.driver.uc_click(
                                    '''//button[@type='submit']''', 5)

                            if len(chrome.find_elements("//select[@title='Ano:']")) == 1:
                                print('IP aceito')
                                break
                            tentativa += 1
                            if tentativa == 5:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Não achou IP válido', text_color='red')
                                window.Refresh()
                                raise Exception("Não achou IP válido")
                            
                    elif vpn_nav == 'ZenMate':
                        while True:
                            chrome.execute_script(
                                "window.open('a', 'new_tab')")
                            
                            nova_janela = chrome.driver.window_handles[-1]
                            chrome.driver.switch_to.window(nova_janela)
                            chrome.driver.get(url_extensao)
                            chrome.wait_for_element("div.shield-container.active").click()
                            time.sleep(2)
                            while True:

                                if chrome.find_elements('body > app-root > main > app-campaign > app-image-campaign > div > div.header.white > a > i'):
                                    
                                    chrome.find_element('body > app-root > main > app-campaign > app-image-campaign > div > div.header.white > a > i').click()

                                elif chrome.find_elements('body > app-root > main > app-home > app-rate-us > div > div > button'):
                                    
                                    try:
                                        chrome.find_element('body > app-root > main > app-home > app-rate-us > div > div > button').click()
                                    except:
                                        pass
                                    break
                                
                                elif chrome.find_elements('div.shield-container'):
                                    break

                            chrome.wait_for_element("div.shield-container").click()
                            time.sleep(2)
                            while True:
                                if chrome.find_element('div.proxy-status-container > div.pt-1.location-info > a').text == 'Connected to':
                                    print('VPN Conectada')
                                    break
                            
                            chrome.driver.close()
                            
                            chrome.driver.switch_to.window(janela_principal)
                            time.sleep(3)
                            try:
                                chrome.driver.uc_click(
                                    '''button[type='submit']''', 5)
                            except:
                                chrome.driver.uc_click(
                                    '''//button[@type='submit']''', 5)

                            if len(chrome.find_elements("//select[@title='Ano:']")) == 1:
                                print('IP aceito')
                                break
                            tentativa += 1
                            if tentativa == 5:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Não achou IP válido', text_color='red')
                                window.Refresh()
                                raise Exception("Não achou IP válido")
                
                    elif vpn_nav == 'VeePN':
                        while True:
                            chrome.execute_script(
                                "window.open('a', 'new_tab')")
                            
                            nova_janela = chrome.driver.window_handles[-1]
                            chrome.driver.switch_to.window(nova_janela)
                            chrome.driver.get(url_extensao)
                            chrome.wait_for_element('div[id=mainBtn]').click()
                            time.sleep(3)
                            chrome.wait_for_element('div[id=mainBtn]').click()
                            while True:
                                if chrome.find_element("div.description.fadeIn.linebreak").text == 'VPN is ON':
                                    print('VPN Conectada')
                                    break
                                elif chrome.find_element("div.description.fadeIn.linebreak").text == 'VPN is OFF':
                                    chrome.wait_for_element('div[id=mainBtn]').click()
                                elif chrome.find_elements("div.footer-decline-text"):
                                    chrome.wait_for_element("div.footer-decline-text").click()

                            
                            chrome.driver.close()
                            
                            chrome.driver.switch_to.window(janela_principal)
                            time.sleep(3)
                            try:
                                chrome.driver.uc_click(
                                    '''button[type='submit']''', 5)
                            except:
                                chrome.driver.uc_click(
                                    '''//button[@type='submit']''', 5)

                            if len(chrome.find_elements("//select[@title='Ano:']")) == 1:
                                print('IP aceito')
                                break
                            tentativa += 1
                            if tentativa == 5:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Não achou IP válido', text_color='red')
                                window.Refresh()
                                raise Exception("Não achou IP válido")
                    elif vpn_nav == 'PlanetVPN':
                        while True:
                            chrome.execute_script(
                                "window.open('a', 'new_tab')")
                            
                            nova_janela = chrome.driver.window_handles[-1]
                            chrome.driver.switch_to.window(nova_janela)
                            chrome.driver.get(url_extensao)

                            chrome.wait_for_element('button.button.button-connected').click()
                            time.sleep(2)
                            chrome.wait_for_element('button.button.button-disconnected').click()
                            time.sleep(1)
                            while True:
                                if chrome.find_elements("button.button.button-connected"):
                                    print('VPN Conectada')
                                    break
                                elif chrome.find_elements("button.button.button-disconnected"):
                                    chrome.find_element("button.button.button-disconnected").click()

                            
                            chrome.driver.close()
                            chrome.driver.switch_to.window(janela_principal)
                            time.sleep(3)
                            try:
                                chrome.driver.uc_click(
                                    '''button[type='submit']''', 5)
                            except:
                                chrome.driver.uc_click(
                                    '''//button[@type='submit']''', 5)

                            if len(chrome.find_elements("//select[@title='Ano:']")) == 1:
                                print('IP aceito')
                                break
                            tentativa += 1
                            if tentativa == 5:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Não achou IP válido', text_color='red')
                                window.Refresh()
                                raise Exception("Não achou IP válido")

                    elif vpn_nav == 'Troywell':
                        while True:
                            chrome.execute_script(
                                "window.open('a', 'new_tab')")
                            
                            nova_janela = chrome.driver.window_handles[-1]
                            chrome.driver.switch_to.window(nova_janela)
                            chrome.driver.get(url_extensao)

                            chrome.wait_for_element('div.connect-button').click()
                            time.sleep(2)
                            chrome.wait_for_element("div.server-select__row").click()
                            time.sleep(2)
                            chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                            while True:
                                try:
                                    chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]", timeout=4).click()
                                    break
                                except:
                                    chrome.driver.get(url_extensao)
                                    time.sleep(2)
                                    chrome.wait_for_element("div.server-select__row").click()
                                    time.sleep(2)
                                    chrome.wait_for_element("input.search__input").clear()
                                    chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                                    chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]").click()

                            chrome.wait_for_element("div.connect-button").click()
                            try:
                                chrome.wait_for_element("div.connection-block__label")
                            except:
                                if chrome.find_elements("div.button.button_selected.connection-failed__button.connection-failed__button_blue"):
                                    chrome.find_element("div.button.button_selected.connection-failed__button.connection-failed__button_blue").click()
                                    chrome.wait_for_element("div.server-select__row").click()
                                    time.sleep(2)
                                    chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                                    chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]").click()
                                    chrome.wait_for_element("div.connect-button").click()
                                    chrome.wait_for_element("div.connection-block__label")
                            time.sleep(1)
                            while True:
                                if chrome.find_elements("div.connection-block__label"):
                                    print('VPN Conectada')
                                    break
                                elif chrome.find_elements("div.button.button_selected.connection-failed__button.connection-failed__button_blue"):
                                    chrome.find_element("div.button.button_selected.connection-failed__button.connection-failed__button_blue").click()
                                    chrome.wait_for_element("div.server-select__row").click()
                                    time.sleep(2)
                                    chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                                    chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]").click()
                                    chrome.wait_for_element("div.connect-button").click()
                                    chrome.wait_for_element("div.connection-block__label")
                            
                            chrome.driver.close()
                            chrome.driver.switch_to.window(janela_principal)
                            time.sleep(3)
                            try:
                                chrome.driver.uc_click(
                                    '''button[type='submit']''', 5)
                            except:
                                chrome.driver.uc_click(
                                    '''//button[@type='submit']''', 5)

                            if len(chrome.find_elements("//select[@title='Ano:']")) == 1:
                                print('IP aceito')
                                break
                            tentativa += 1
                            if tentativa == 5:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Não achou IP válido', text_color='red')
                                window.Refresh()
                                raise Exception("Não achou IP válido")


                try:
                    chrome.wait_for_element(
                        "//select[@title='Ano:']").send_keys(ano)
                except:
                    print('IP Bloqueado')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] IP Bloqueado ou Número bloqueado', text_color='red')
                    window.Refresh()

                dia = str(random.randint(1, 28))
                time.sleep(random.uniform(0.5, 2))
                chrome.wait_for_element(
                    "//select[@title='Dia:']").send_keys(dia)
                months = [
                    ("janeiro", 1),
                    ("fevereiro", 2),
                    ("março", 3),
                    ("abril", 4),
                    ("maio", 5),
                    ("junho", 6),
                    ("julho", 7),
                    ("agosto", 8),
                    ("setembro", 9),
                    ("outubro", 10),
                    ("novembro", 11),
                    ("dezembro", 12),
                ]

                random_month = random.choice(months)
                month_text = random_month[0]

                time.sleep(random.uniform(0.5, 2))
                chrome.wait_for_element(
                    "//select[@title='Mês:']").send_keys(month_text)
                time.sleep(2)
                chrome.driver.uc_click('button:contains("Avançar")', 15)
                if len(chrome.find_elements("//p[@id='ssfErrorAlert']")) == 1 or chrome.find_elements("//span[contains(text(), 'Não foi possível criar uma conta para você')]"):
                    print('IP Bloqueado ou Número bloqueado')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] IP Bloqueado ou Número bloqueado', text_color='red')
                    window.Refresh()
                    raise Exception('skip')
                captcha_element = chrome.find_elements(
                    "//input[@id='recaptcha-input']")
                tentativas = 1
                if len(captcha_element) == 1:
                    print('Resolvendo captcha')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Resolvendo captcha')
                    window.Refresh()
                    while True:
                        try:
                            # Check if the button is clickable
                            button = WebDriverWait(chrome.driver, 3).until(EC.element_to_be_clickable(
                                (By.XPATH, "//button[contains(text(), 'Avançar')]")))

                            # Click the button once it's clickable
                            chrome.driver.uc_click(
                                'button:contains("Avançar")', 20)
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Captcha resolvido')
                            window.Refresh()
                            break  # Exit the loop once the button is clicked

                        except Exception as e:
                            print(f"Captcha ainda não resolvido")

                            # Wait for a short interval before checking again
                            time.sleep(2)
                            tentativas += 1
                            if tentativas == 40:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Captcha não pode ser resolvido')
                                window.Refresh()
                                print('Captcha não pode ser resolvido')
                                raise Exception(' ')
                else:
                    print('Sem Captcha')
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                window.Refresh()
                troca_ip_estatica = 0
                
                ########## RECEBER CODIGO ##########
                chrome.execute_script("window.open('a', 'new_tab')")
                janela_prov = chrome.driver.window_handles[-1]
                chrome.driver.switch_to.window(janela_prov)

                if prov_atual == 'quackr.io':
                    try:
                        encontrado = False
                        chrome.driver.default_get(url_atual)
                        tentativa = 0
                        while not encontrado and tentativa < 6:
                            if "#google_vignette" in chrome.driver.current_url:
                                chrome.driver.refresh()
                                chrome.execute_script(
                                    "document.body.style.zoom='50%'")
                                try:
                                    chrome.execute_script("""
                                    var l = document.getElementsByClassName("footer-overlay-regulated")[0];
                                    l.parentNode.removeChild(l);
                                    """)
                                except:
                                    pass
                                try:
                                    chrome.execute_script("""
                                    var l = document.getElementsByClassName("message is-info")[0];
                                    l.parentNode.removeChild(l);
                                    """)
                                except:
                                    pass
                                time.sleep(3)
                            try:
                                elemento = chrome.wait_for_element('/html/body/app-root/div/div/main/messages/section/div/div/div/table/tbody/tr/td[3]').text
                                # print(elemento)
                                time_second = chrome.wait_for_element('/html/body/app-root/div/div/main/messages/section/div/div/div/table/tbody/tr/td[1]').text
                                # print(time_second)
                            except:
                                elemento = 'Não recebeu'
                                time_second = 'Não recebeu'
                            if 'Instagram' in elemento and (
                                    'seconds' in time_second or '1 minute ago' in time_second or '2 minute ago' in time_second):
                                encontrado = True
                                match = re.search(r'\d+\s*\d+\s*\d+\s*\d+\s*\d+\s*\d+',
                                                elemento)  # Extrai seis grupos de dígitos, permitindo espaços entre eles
                                if match:
                                    numeros = ''.join(match.group().split())
                                    chrome.driver.close()
                            else:
                                # Clique no outro elemento
                                tentativa = tentativa + 1
                                chrome.driver.refresh()
                                chrome.execute_script(
                                    "document.body.style.zoom='50%'")
                                time.sleep(10)
                        if tentativa == 6:
                            #chrome.driver.quit()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Codigo não recebido.')
                            window.Refresh()

                            raise Exception("Codigo não recebido.")
                    except Exception as e:
                        print(e)
                        raise Exception("Codigo não recebido.")
                    
                elif prov_atual == 'temporary-phone-number.com':
                    try:
                        encontrado = False
                        chrome.driver.default_get(url_atual)
                        tentativa = 0
                        while not encontrado and tentativa < 6:
                            if "#google_vignette" in chrome.driver.current_url:
                                chrome.driver.refresh()
                                chrome.execute_script(
                                    "document.body.style.zoom='50%'")
                                try:
                                    chrome.execute_script("""
                                    var l = document.getElementsByClassName("footer-overlay-regulated")[0];
                                    l.parentNode.removeChild(l);
                                    """)
                                except:
                                    pass
                                try:
                                    chrome.execute_script("""
                                    var l = document.getElementsByClassName("message is-info")[0];
                                    l.parentNode.removeChild(l);
                                    """)
                                except:
                                    pass
                                time.sleep(3)
                            try:
                                botao_fechar = chrome.find_elements("div.fc-ab-root.button.fc-close")
                                chrome.execute_script(
                                    "arguments[0].click();", botao_fechar)
                            except:
                                pass
                            try:
                                elemento = chrome.wait_for_element('div.direct-chat-text').text
                                time_second = chrome.wait_for_element('time.timeago.direct-chat-timestamp.pull-left').text
                                # print(time_second)
                            except:
                                elemento = 'Não recebeu'
                                time_second = 'Não recebeu'
                            if 'Instagram' in elemento and (
                                    'seconds' in time_second or '1 minute ago' in time_second or '2 minute ago' in time_second):
                                encontrado = True
                                match = re.search(r'\d+\s*\d+\s*\d+\s*\d+\s*\d+\s*\d+',
                                                elemento)  # Extrai seis grupos de dígitos, permitindo espaços entre eles
                                if match:
                                    numeros = ''.join(match.group().split())
                                    chrome.driver.close()
                            else:
                                # Clique no outro elemento
                                tentativa = tentativa + 1
                                chrome.driver.refresh()
                                chrome.execute_script(
                                    "document.body.style.zoom='50%'")
                                time.sleep(10)
                        if tentativa == 6:
                            #chrome.driver.quit()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Codigo não recebido.')
                            window.Refresh()

                            raise Exception("Codigo não recebido.")
                    except Exception as e:
                        print(e)
                        raise Exception("Codigo não recebido.")
                    
                elif prov_atual == 'smstome.com':
                    try:
                        encontrado = False
                        chrome.driver.default_get(url_atual)
                        tentativa = 0
                        while not encontrado and tentativa < 6:
                            chrome.execute_script(
                                "document.body.style.zoom='50%'")
                            elemento = chrome.wait_for_element(f'/html/body/main/section/div[1]/table/tbody/tr[1]/td[3]').text
                            print(elemento)
                            # print(elemento)
                            time_second = chrome.wait_for_element(f'/html/body/main/section/div[1]/table/tbody/tr[1]/td[2]').text
                            print(time_second)
                            # print(time_second)
                            if 'Instagram' in elemento and (
                                    'seconds' in time_second or '1 minute ago' in time_second or '2 minutes ago' in time_second):
                                encontrado = True
                                match = re.search(r'\d+\s*\d+\s*\d+\s*\d+\s*\d+\s*\d+',
                                                elemento)  # Extrai seis grupos de dígitos, permitindo espaços entre eles
                                if match:
                                    numeros = ''.join(match.group().split())
                                    chrome.driver.close()
                            else:
                                # Clique no outro elemento
                                tentativa = tentativa + 1
                                chrome.driver.refresh()
                                chrome.execute_script(
                                    "document.body.style.zoom='50%'")
                                time.sleep(7)
                        if tentativa == 6:
                            #chrome.driver.quit()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Codigo não recebido.')
                            window.Refresh()

                            raise Exception("Codigo não recebido.")
                    except Exception as e:
                        print(e)
                        raise Exception("Codigo não recebido.")


                ########## RECEBER CODIGO ##########

                janela_insta = chrome.driver.window_handles[0]
                chrome.driver.switch_to.window(janela_insta)

                cod = numeros.replace(' ', '')
                codigo = re.sub('[^0-9]', '', cod)[:6]
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                window.Refresh()
                codigo = cod
                for codigo in cod:
                    chrome.send_keys(
                        "//input[@name='confirmationCode']", codigo)
                    time.sleep(random.uniform(0.1, 0.4))

                time.sleep(random.uniform(0.5, 2))
                chrome.driver.uc_click('button:contains("Confirmar")', 20)
                tentativa_log = 0
                while True:
                    print(tentativa_log)
                    if len(chrome.find_elements("//p[@id='phoneSignupConfirmErrorAlert']")) == 1:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando relogar')
                        window.Refresh()
                        chrome.driver.uc_open_with_reconnect(url, 3)
                        try:
                            chrome.driver.uc_click(
                                'button:contains("Permitir todos os cookies")', 5)
                            print('Cookies aceito')
                            time.sleep(5)
                        except:
                            print('Sem cookies')
                        for user in user_completo:
                            chrome.send_keys(
                                "//input[@name='username']", user)
                            time.sleep(random.uniform(0.001, 0.05))
                        time.sleep(random.uniform(0.5, 2))
                        # chrome.type("//input[@name='password']", senha)
                        for password in senha:
                            chrome.send_keys(
                                "//input[@name='password']", password)
                            time.sleep(random.uniform(0.001, 0.05))
                        time.sleep(2)
                        chrome.driver.uc_click(
                            '''button[type='submit']''', 20)

                        if (
                            "challenge" in chrome.driver.current_url or
                            "suspended" in chrome.driver.current_url or
                            len(chrome.find_elements("//div[contains(text(), 'Sua senha está incorreta. Confira-a.')]")) == 1 or
                            len(chrome.find_elements("//div[text()='A sua conta foi desativada por violar nossos termos: http://instagram.com/about/legal/terms/']")) == 1 or
                            len(chrome.find_elements("//div[text()='Houve um problema ao entrar no Instagram. Tente novamente em breve.']")) == 1 or
                            len(chrome.find_elements("//div[text()='Não foi possível se conectar ao Instagram. Verifique se você está conectado à Internet e tente novamente.']")) == 1
                            
                        ):
                            print('Conta com SMS')
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] SMS.', text_color='red')
                            window.Refresh()
                            break
                    if "challenge" in chrome.driver.current_url or "suspended" in chrome.driver.current_url or len(chrome.find_elements("//div[contains(text(), 'Sua senha está incorreta. Confira-a.')]")) == 1:
                        print('Conta com SMS')
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] SMS.', text_color='red')
                        window.Refresh()
                        break
                    if tentativa_log == 30:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tempo excedido', text_color='red')
                        window.Refresh()
                        raise Exception('Tempo excedido')
                    tentativa_log += 1
                    time.sleep(2)
                    if len(chrome.find_elements("//span[contains(text(), 'Página inicial')]")) == 1:
                        print('Conta criada com sucesso')
                        criou = True
                        time.sleep(4)
                        if len(chrome.find_elements("//span[text()='Permitir todos os cookies']")) == 1:
                            try:
                                chrome.driver.uc_click(
                                    "//span[text()='Permitir todos os cookies']", 5)
                                print('Cookies aceito')
                                time.sleep(5)
                            except:
                                print('Sem cookies')
                        troca_ip = 1
                        try:
                            conteudo = config['vpn']
                            window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                text_color=('lime'))
                            window.Refresh()
                            contagem = contagem + 1
                            window['criadas'].update(contagem)
                            window.Refresh()
                            now = datetime.now()
                            now_brasilia = tz.localize(now)
                            timestamp = now_brasilia.strftime(
                                "%d/%m/%Y %H:%M:%S")
                            try:
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, num, timestamp, maquina,
                                        vpn_nav + ' - ' + f'FREESMS + NAV: {prov_atual}', local_vpn]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:F{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            except Exception as e:
                                print(e)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                tempo_aleatorio = random.randint(10, 40)
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                time.sleep(tempo_aleatorio)
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_name(
                                    'credentials.json', scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = config['spreadsheet']
                                sheet_name = 'contas'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, num, timestamp,
                                        maquina, vpn_nav + ' - ' + f'FREESMS + NAV: {prov_atual}', local_vpn]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:F{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                                rows = sheet.get_all_values()

                                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                regex = re.compile(r'\S+\s\S+')

                                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                num_rows = sum(
                                    1 for row in rows if regex.match(row[0]))
                            window['total'].update(num_rows)
                            random_number = random.random()

                            # Definir a chance desejada (10%)
                            chance = 0.2

                            # Verificar se o número aleatório está abaixo da chance
                            if random_number < chance and not user_mysql == "wn3":
                                scope = ["https://spreadsheets.google.com/feeds",
                                        "https://www.googleapis.com/auth/drive"]
                                creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                    funcionamento, scope)
                                client = gspread.authorize(creds)

                                spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                sheet_name = 'relatorio_geral'
                                # Insert user, password, and timestamp into first empty row
                                sheet = client.open_by_key(
                                    spreadsheet_id).worksheet(sheet_name)
                                values = sheet.col_values(1)
                                last_row = len(values)
                                values = [user_completo + ' ' + senha, num, timestamp, maquina,
                                        vpn_nav + ' - ' + f'FREESMS + NAV: {prov_atual}', local_vpn, user_mysql]
                                cell_list = sheet.range(
                                    f'A{last_row + 1}:G{last_row + 1}')
                                for i, val in enumerate(values):
                                    cell_list[i].value = val
                                sheet.update_cells(cell_list)

                        except Exception as e:
                            print(e)
                        break
            
        except:
            try:
                chrome.driver.quit()
            except:
                pass
            traceback.print_exc()


def creator_2NR_NAV():
    SPREADSHEET_ID = config['spreadsheet']
    conteudo = config['vpn']
    senha = gerar_senha(12)
    maquina = config['maquina']
    tentativa = False
    seguido = False
    regiao_vpn = 'Sem dados'
    app = "Nav"
    global vpn_nav
    global sms
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    # Código que gera a saída
    import os
    from selenium.webdriver.common.by import By
    from selenium.webdriver.chrome.service import Service
    import time
    from selenium.common.exceptions import NoSuchElementException
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support.ui import Select
    import requests
    from selenium.webdriver.support import expected_conditions as EC
    import undetected_chromedriver as uc
    import traceback
    import string
    import subprocess
    import re
    import unicodedata
    import random
    import time
    import requests
    import hashlib
    import subprocess
    try:
        from seleniumbase import SB
    except:
        print('Instalando SeleniumBase')
        subprocess.run(
            ['pip', 'install', 'seleniumbase'])
        from seleniumbase import SB
    # verifica se o arquivo existe na pasta do bot

    try:
        from rich.console import Console
    except ModuleNotFoundError:
        import subprocess
        import sys

        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Instalando dependências...')
        window.Refresh()
        subprocess.run(['pip', 'install', '-r', 'requirements.txt'])
        subprocess.run(['deactivate'], shell=True)
        from rich.console import Console
    import os
    import time
    try:
        import uiautomator2 as u2
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        subprocess.run(['venv/scripts/activate.bat'], shell=True)
        subprocess.run(['pip', 'install', 'uiautomator2==2.16.25'])
        subprocess.run(['deactivate'], shell=True)
        subprocess.run(['pip', 'install', '--upgrade', 'requests'])
        subprocess.run(['pip', 'install', 'packaging==21.3'],
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        import requests
        time.sleep(10)
        import uiautomator2 as u2
    d = u2.connect(f'{porta}')
    import requests
    import hashlib
    import subprocess
    from colorama import init, Fore, Back, Style
    from faker import Faker
    # teste
    init(autoreset=True)
    console = Console()
    from termcolor import colored

    from rich.console import Console
    from rich.panel import Panel
    from rich.text import Text
    from rich.rule import Rule

    linha_ret = '_________________________________________________\n'
    window.Refresh()
    import random
    from datetime import datetime
    import string
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import NoSuchElementException
    from mailtm import Email
    import re
    import logging
    import sys
    logger = logging.getLogger(__name__)

    handler = logging.FileHandler('log.txt')
    handler.setLevel(logging.ERROR)

    logger.addHandler(handler)
    file_path = './storage/recaptcha.crx'
    import zipfile

    if os.path.exists("./storage/recaptcha/"):
        result = f"A pasta 'recaptcha' já existe em '{file_path}'."
    else:
        # URL para download
        url = 'https://www.dropbox.com/scl/fi/ezzl75hi49jq9rq84vvpl/recaptcha.crx?rlkey=z2vyoo7rqc407l36atsjfajzg&st=cmpklgle&dl=1'

        # Fazendo o download do arquivo
        response = requests.get(url)
        if response.status_code == 200:
            with open(file_path, 'wb') as file:
                file.write(response.content)
            print("Arquivo 'recaptcha.crx' baixado e salvo em './storage/recaptcha.crx'.")
            # Caminho do arquivo original (altere para o seu caminho de arquivo)
            caminho_original = './storage/recaptcha.crx'
            novo_caminho = './storage/recaptcha.zip'

            # Renomear o arquivo
            os.rename(caminho_original, novo_caminho)

            # Caminho do arquivo zip
            caminho_zip = './storage/recaptcha.zip'

            # Diretório de destino para extrair
            diretorio_destino = './storage/recaptcha/'

            # Remover um arquivo anterior, se existir
            arquivo_antigo = './storage/recaptcha'
            if os.path.exists(arquivo_antigo):
                os.remove(arquivo_antigo)

            # Criar o diretório de destino se ele não existir
            if not os.path.exists(diretorio_destino):
                os.makedirs(diretorio_destino)

            # Extrair o arquivo zip
            with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                zip_ref.extractall(diretorio_destino)

            print("Arquivo extraído com sucesso!")
            os.remove('./storage/recaptcha.zip')

        else:
            result = "Não foi possível baixar o arquivo. Status Code: " + \
                str(response.status_code)

    

    def vpn_avast():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Avast', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop("com.avast.android.vpn")
            d.app_start("com.avast.android.vpn", ".app.wizard.WizardActivity")
            time.sleep(10)
        except Exception as e:
            print(e)
        abc = False

    def nenhuma_vpn():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.facebook.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        time.sleep(10)

    def vpn_hotspotshield():
        global nome
        global sobrenome
        global sms
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HotspotShield',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('hotspotshield.android.vpn')
            d.app_start('hotspotshield.android.vpn')
        except Exception as e:
            print(e)
        d(resourceId='hotspotshield.android.vpn:id/tryAgainButton').click()
        time.sleep(5)
        d(resourceId='hotspotshield.android.vpn:id/btnVpnConnect').click()

        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_pia():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da PiaVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.privateinternetaccess.android')
            d.app_start('com.privateinternetaccess.android')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()
        time.sleep(3)
        d(resourceId='com.privateinternetaccess.android:id/connection_background').click()

        abc = False

    def vpn_express():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da ExpressVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.expressvpn.vpn')
            d.app_start('com.expressvpn.vpn')
        except:
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #            stderr=subprocess.DEVNULL, check=True, shell=True)

        d(resourceId='com.expressvpn.vpn:id/obiButton').click()
        time.sleep(3)
        d(resourceId='com.expressvpn.vpn:id/obiButton').click()

        abc = False

    def vpn_nord():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da NordVPN', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.nordvpn.android')
            time.sleep(5)
            d.app_start('com.nordvpn.android', use_monkey=True)
        except:
            pass
        time.sleep(10)
        time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_surf():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da SurfShark', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('com.surfshark.vpnclient.android')
            d.app_start('com.surfshark.vpnclient.android')
        except:
            pass
        time.sleep(15)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        abc = False

    def vpn_better():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da BetterNet', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)

        try:
            d.app_stop('com.freevpnintouch')
            d.app_start('com.freevpnintouch')
        except:
            pass
        time.sleep(10)
        dialog = d(resourceId='com.freevpnintouch:id/dialogCtaPositive')
        connect = d(
            resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
        if dialog.exists:
            d(resourceId='com.freevpnintouch:id/dialogCtaPositive').click()
            time.sleep(3)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            # time.sleep(5)
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
        while connect == 'CONNECT':
            d(resourceId='com.freevpnintouch:id/buttonConnect').click()
            time.sleep(4)
            connect = d(
                resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            # WebDriverWait(driver, 20).until(
            # EC.element_to_be_clickable((By.ID, 'com.freevpnintouch:id/buttonConnect').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        ip = '127.0.0.1:' + porta

        output = subprocess.check_output(
            ['adb', '-s', ip, 'shell', 'ifconfig'])

        # Verifica se a conexão VPN está ativa
        if not "tun0" in str(output):
            window['output'].print("Não conectado na BetterNet.")
            window.Refresh()
            try:
                connect = d(
                    resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
                d.app_stop('com.freevpnintouch')
                d.app_start('com.freevpnintouch')
                while connect == 'CONNECT':
                    d(resourceId='com.freevpnintouch:id/buttonConnect').click()
                    time.sleep(4)
                    connect = d(
                        resourceId='com.freevpnintouch:id/buttonConnect').get_text(timeout=80)
            except:
                pass
        abc = False

    def vpn_cyberghost():
        global nome
        global sobrenome
        global sms
        sms = True
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da CyberGhost', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)

        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass

        try:
            d.app_stop('de.mobileconcepts.cyberghost')
            d.app_start('de.mobileconcepts.cyberghost')
        except:
            pass
        # time.sleep(3)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        rate = d(resourceId='de.mobileconcepts.cyberghost:id/rate_me_text')
        if rate.exists:
            d(resourceId='android:id/button2').click()
        time.sleep(2)
        d(resourceId='de.mobileconcepts.cyberghost:id/button').click()
        # time.sleep(5)
        subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        abc = False

    def vpn_tunnelbear():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da TunnelBear',
                               text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.tunnelbear.android')
            d.app_start("com.tunnelbear.android")
            while True:
                output = subprocess.check_output(
                    ['adb', '-s', porta, 'shell', 'ifconfig'])
                # print(str(output))
                if "tun0" in str(output):
                    print('Conectada')
                    break
                elif not "tun0" in str(output):
                    print('Reconectando')
                    try:
                        d(resourceId='com.tunnelbear.android:id/switchVpn').click(timeout=60)
                        time.sleep(10)
                    except:
                        pass
        except Exception as e:
            print(e)
            pass

    def vpn_avg():
        global nome
        global sobrenome
        global sms
        global regiao_vpn
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da AVG', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        try:
            subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                           stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.lite', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            d.app_stop('com.avg.android.vpn')
            d.app_start("com.avg.android.vpn",
                        "com.avast.android.vpn.app.wizard.WizardActivity")
            regiao_vpn = d(
                resourceId='com.avg.android.vpn:id/location_title').get_text()

        except Exception as e:
            print(e)
            pass
        # subprocess.run(f'adb -s {porta} shell input keyevent KEYCODE_HOME', stdout=subprocess.DEVNULL,
        #               stderr=subprocess.DEVNULL, check=True, shell=True)

        time.sleep(30)

    def vpn_windscribe():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da Windscribe', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)
            d.app_stop("com.windscribe.vpn")
            d.app_start("com.windscribe.vpn")
        except:
            pass
        d(resourceId='com.windscribe.vpn:id/on_off_button').click()
        time.sleep(10)
        primeiro = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_name').get_text()
        segundo = d(
            resourceId='com.windscribe.vpn:id/tv_connected_city_nick_name').get_text()
        regiao_vpn = primeiro + ' ' + segundo

    def vpn_hma():
        global nome
        global sobrenome
        global sms
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Alterando IP da HMA', text_color='red')
        window.Refresh()
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Limpando dados.')
        window.Refresh()
        gerar_id()
        subprocess.run(
            f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
        try:
            subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android', stdout=subprocess.DEVNULL,
                           stderr=subprocess.DEVNULL, check=True, shell=True)
        except:
            pass
        sms = True
        try:
            # subprocess.run(f'adb shell am start -n com.avg.android.vpn/com.avast.android.vpn.app.wizard.WizardActivity', shell=True)

            d.app_stop("com.hidemyass.hidemyassprovpn")
            time.sleep(3)
            d.app_start('com.hidemyass.hidemyassprovpn',
                        'com.avast.android.vpn.activity.HmaOnboardingActivity')
        except:
            pass
        time.sleep(10)

    def gerar_id():
        chars = string.ascii_lowercase + string.digits
        android_id = ''.join(random.choice(chars) for i in range(16))
        return android_id

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Senha sendo utilizada: {senha}')
    window.Refresh()

    try:
        comando = f"adb connect {porta}"
        subprocess.run(comando, stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global window_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global transition_animation_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
        subprocess.run(f'adb -s {porta} shell settings put global animator_duration_scale 0',
                       stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, shell=True)
    except:
        pass

    def gerar_id():
        chars = string.ascii_lowercase + string.digits
        android_id = ''.join(random.choice(chars) for i in range(16))
        return android_id
    gerar_id()
    android_id = gerar_id()
    subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                   stdout=subprocess.DEVNULL,
                   stderr=subprocess.DEVNULL, shell=True)
    time.sleep(2)
    # subprocess.run(f'adb -s {porta} shell settings get secure android_id', shell=True, stdout=subprocess.DEVNULL,
    #               stderr=subprocess.DEVNULL)

    try:
        subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp', stdout=subprocess.DEVNULL,
                       stderr=subprocess.DEVNULL, check=True, shell=True)
    except Exception as e:
        pass

    window.Refresh()
    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando sistema inicializar.')
    window.Refresh()

    window['output'].print(
        f'[{datetime.now().strftime("%H:%M:%S")}] Iniciando criação.')
    window.Refresh()

    d.implicitly_wait(30.0)
    d.set_fastinput_ime(True)
    if not os.path.exists('./erros'):
        os.makedirs('./erros')
    codigo_não_recebido_seguidos = 0
    try:
        conteudo = config['vpn']

        # Executa a função correspondente ao conteúdo do arquivo
        if conteudo == "AVG":
            vpn_avg()
        elif conteudo == "SurfShark":
            vpn_surf()
        elif conteudo == "Nenhuma":
            nenhuma_vpn()
        elif conteudo == "Avast":
            vpn_avast()
        elif conteudo == "ExpressVPN":
            vpn_express()
        elif conteudo == "PiaVPN":
            vpn_pia()
        elif conteudo == "TunnelBear":
            vpn_tunnelbear()
        elif conteudo == "BetterNet":
            vpn_better()
        elif conteudo == "CyberGhost":
            vpn_cyberghost()
        elif conteudo == "NordVPN":
            vpn_nord()
        elif conteudo == "HotspotShield":
            vpn_hotspotshield()
        elif conteudo == "WindscribeVPN":
            vpn_windscribe()
        elif conteudo == "HmaVPN":
            vpn_hma()
        else:
            window['output'].print(
                "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
            window.Refresh()
    except Exception as e:
        raise Exception('skip')
        sms = True
    troca_ip = 1
    troca_ip_estatica = 0
    while parar is False:
        senha = gerar_senha(12)
        if parar is True:
            print('Parando Thread')
            break
        print(linha_ret)
        # if codigo_não_recebido_seguidos == 3:
        #    #tempo_aleatorio = random.randint(10, 40)
        #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] 3 códigos não recebidos seguidos.')
        #    window.Refresh()
        #    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando 1 hora para voltar novamente.')
        #    window.Refresh()
        #    time.sleep(3600)
        #    codigo_não_recebido_seguidos = 0
        try:

            gerar_id()
            android_id = gerar_id()
            subprocess.run(
                f'adb -s {porta} shell settings put secure android_id {android_id}', shell=True)
            window['output'].print(linha_ret)
            window.Refresh()
            window['output'].print(
                f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo 2NR')
            window.Refresh()

            try:
                scope = ["https://spreadsheets.google.com/feeds",
                         "https://www.googleapis.com/auth/drive"]
                creds = ServiceAccountCredentials.from_json_keyfile_name(
                    'credentials.json', scope)
                client = gspread.authorize(creds)
                #
                spreadsheet_id = config['spreadsheet']
                sheet_name = 'contas'
                # Insert user, password, and timestamp into first empty row
                sheet = client.open_by_key(
                    spreadsheet_id).worksheet(sheet_name)
                values = sheet.col_values(1)
                #
                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                rows = sheet.get_all_values()
                #
                # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                regex = re.compile(r'\S+\s\S+')
                #
                # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                num_rows = sum(1 for row in rows if regex.match(row[0]))
                window['total'].update(num_rows)
            except Exception as e:
                print(e)
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu algum erro ao acessar a planilha.')
                window.Refresh()
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Tentando novamente em 1 minuto.')
                window.Refresh()
                time.sleep(60)
                raise Exception('skip')

            try:
                subprocess.run(f'adb -s {porta} shell pm clear pl.rs.sip.softphone.newapp',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, check=True, shell=True)
            except Exception as e:
                print(e)
                pass
            try:
                subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server.test',
                               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, shell=True)
                subprocess.run(f'adb -s {porta} clear io.appium.uiautomator2.server',
                               stdout=subprocess.DEVNULL,
                               stderr=subprocess.DEVNULL, shell=True)
            except:
                pass
            window.Refresh()

            try:
                # time.sleep(10)

                gerar_id()
                android_id = gerar_id()
                subprocess.run(f'adb -s {porta} shell settings put secure android_id {android_id}',
                               shell=True)
                try:
                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.READ_CONTACTS',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.CAMERA',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.RECORD_AUDIO',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    try:
                        subprocess.run(
                            f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.ACCESS_NOTIFICATION_POLICY',
                            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    except:
                        pass

                    subprocess.run(
                        f'adb -s {porta} shell pm grant pl.rs.sip.softphone.newapp android.permission.POST_NOTIFICATIONS',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                except:
                    pass
                try:
                    d.app_start('pl.rs.sip.softphone.newapp')
                except:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu algum erro ao abrir o 2NR, tentando novamente.')
                    window.Refresh()
                time.sleep(3)
                scope = ["https://spreadsheets.google.com/feeds",
                         "https://www.googleapis.com/auth/drive"]
                creds = ServiceAccountCredentials.from_json_keyfile_name(
                    'credentials.json', scope)
                client = gspread.authorize(creds)

                spreadsheet_id = config['spreadsheet']
                sheet_name = config['2nr']

                sheet = client.open_by_key(
                    spreadsheet_id).worksheet(sheet_name)
                # Obtém todas as células
                cells = sheet.get_all_values()

                # Armazena as células que correspondem à condição
                matches = [cell for row in cells for cell in row if
                           re.match(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', cell)]

                # Armazena a lista de células correspondentes à condição em uma variável
                regex2nr = matches
                while len(regex2nr) == 0:
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Nenhuma conta do 2NR encontrada.\nTentando novamente em 5 min.')
                    window.Refresh()
                    scope = ["https://spreadsheets.google.com/feeds",
                            "https://www.googleapis.com/auth/drive"]
                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                        'credentials.json', scope)
                    client = gspread.authorize(creds)

                    spreadsheet_id = config['spreadsheet']

                    sheet_name = config['2nr']
                    sheet = client.open_by_key(
                        spreadsheet_id).worksheet(sheet_name)
                    # Insert user, password, and timestamp into first empty row
                    sheet = client.open_by_key(
                        spreadsheet_id).worksheet(sheet_name)
                    values = sheet.col_values(1)

                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                    rows = sheet.get_all_values()

                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                    regex = re.compile(r'\S+\s\S+')
                    sheet_name = config['2nr']
                    try:
                        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                        num_rows = sum(1 for row in rows if regex.match(row[0]))
                        window['total'].update(num_rows)
                    except:
                        pass
                    time.sleep(300)
                    cells = sheet.get_all_values()

                    # Armazena as células que correspondem à condição
                    matches = [cell for row in cells for cell in row if
                               re.match(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', cell)]

                    # Armazena a lista de células correspondentes à condição em uma variável
                    regex2nr = matches
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] {len(regex2nr)} conta(s) encontrada.')
                window.Refresh()
                time.sleep(3)
                try:
                    d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(timeout=60)
                except Exception as e:
                    print(e)
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao clicar em login. Tentando novamente.')
                    window.Refresh()
                    subprocess.run(
                        f'uiautomator2 -s {porta} uninstall com.github.uiautomator',
                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True, shell=True)
                    raise Exception('Ocorreu um erro ao clicar em login.')
                time.sleep(5)
                spreadsheet_id = config['spreadsheet']
                sheet_name = config['2nr']
                sheet = client.open_by_key(
                    spreadsheet_id).worksheet(sheet_name)
                # Obtém todas as células

                # Define a faixa de células para leitura
                first_linha = sheet.cell(1, 1).value

                # Divide a string em duas partes separadas por um espaço em branco
                partes = first_linha.split(' ')

                # Atribui a primeira parte (endereço de e-mail) à variável email2nr
                email2nr = partes[0]

                # Atribui a segunda parte (texto) à variável senha2nr
                senha2nr = partes[1]
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Email 2NR: {email2nr}')
                window.Refresh()
                d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email2nr)
                time.sleep(0.5)
                d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha2nr)
                time.sleep(0.5)
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                time.sleep(3)
                perm = d(resourceId='pl.rs.sip.softphone.newapp:id/messages')
                if perm.exists(timeout=30):
                    time.sleep(10)
                    pass
                else:
                    try:
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Conta não existe.')
                        window.Refresh()
                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                            'credentials.json', scope)
                        client = gspread.authorize(creds)
                        # Abre a planilha e a planilha de uma determinada aba
                        spreadsheet_id = config['spreadsheet']
                        sheet_name = config['2nr']
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)

                        # Apaga a primeira célula da coluna A e desloca as células abaixo
                        sheet.delete_rows(1, 1)
                        try:
                            conteudo = config['vpn']

                            # Executa a função correspondente ao conteúdo do arquivo
                            if conteudo == "AVG":
                                vpn_avg()
                            elif conteudo == "SurfShark":
                                vpn_surf()
                            elif conteudo == "Nenhuma":
                                nenhuma_vpn()
                            elif conteudo == "Avast":
                                vpn_avast()
                            elif conteudo == "ExpressVPN":
                                vpn_express()
                            elif conteudo == "PiaVPN":
                                vpn_pia()
                            elif conteudo == "TunnelBear":
                                vpn_tunnelbear()
                            elif conteudo == "BetterNet":
                                vpn_better()
                            elif conteudo == "CyberGhost":
                                vpn_cyberghost()
                            elif conteudo == "NordVPN":
                                vpn_nord()
                            elif conteudo == "HotspotShield":
                                vpn_hotspotshield()
                            elif conteudo == "WindscribeVPN":
                                vpn_windscribe()
                            elif conteudo == "HmaVPN":
                                vpn_hma()
                            else:
                                window['output'].print(
                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                window.Refresh()
                        except Exception as e:
                            raise Exception('skip')
                            sms = True
                        raise Exception('skip')
                    except Exception as e:
                        print(e)
                    raise Exception('skip')
                
                if troca_ip_estatica == 2:
                    try:
                        time.sleep(1)
                        d.xpath(
                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                        print('2 IP Bloqueado seguidos, apagando número')
                        troca_ip_estatica = 0
                        time.sleep(3)
                    except Exception as e:
                        print(e)
                try:
                    qtd_num2 = d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[*]/androidx.appcompat.widget.LinearLayoutCompat/android.widget.LinearLayout/android.widget.TextView[1]')
                    qtd_num = qtd_num2.all()
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] {len(qtd_num)} número(s) encontrado.')
                except Exception as e:
                    print(e)
                if len(qtd_num) == 0:
                    try:
                        scope = ["https://spreadsheets.google.com/feeds",
                                 "https://www.googleapis.com/auth/drive"]
                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                            'credentials.json', scope)
                        client = gspread.authorize(creds)
                        # Abre a planilha e a planilha de uma determinada aba
                        spreadsheet_id = config['spreadsheet']
                        sheet_name = config['2nr']
                        sheet = client.open_by_key(
                            spreadsheet_id).worksheet(sheet_name)

                        # Apaga a primeira célula da coluna A e desloca as células abaixo
                        sheet.delete_rows(1, 1)
                    except Exception as e:
                        print(e)
                    continue
                window.Refresh()
                
                try:
                    num = d.xpath(
                        '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat/android.widget.LinearLayout/android.widget.TextView[1]').get_text()
                    num = num.replace(' ', '')
                    window['output'].print(
                        f'[{datetime.now().strftime("%H:%M:%S")}] Número: +48{num}')
                    window.Refresh()
                    email = num
                except Exception as e:
                    print(e)
                d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonSettings').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()

                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo navegador.')
                window.Refresh()

                nav_oculto = config6['navegador_oculto']
                usar_troca_ip = config6['usar_troca_ip']

                if dialog_values['-vpnlista-'] == 'SurfShark':
                    vpn_usada = 'surfshark'
                elif dialog_values['-vpnlista-'] == 'TouchVPN':
                    vpn_usada = 'touchvpn'
                elif dialog_values['-vpnlista-'] == 'CyberGhost':
                    vpn_usada = 'cyberghost'
                elif dialog_values['-vpnlista-'] == 'ZenMate':
                    vpn_usada = 'zenmate'
                elif dialog_values['-vpnlista-'] == 'UrbanVPN':
                    vpn_usada = 'urbanvpn'
                elif dialog_values['-vpnlista-'] == 'Troywell':
                    vpn_usada = 'troywell'
                elif dialog_values['-vpnlista-'] == 'VeePN':
                    vpn_usada = 'veepn'
                elif dialog_values['-vpnlista-'] == 'PlanetVPN':
                    vpn_usada = 'planetvpn'
                elif dialog_values['-vpnlista-'] == 'Aleatorio':
                    vpn_usada = random.choice(['TouchVPN', 'CyberGhost', 'VeePN', 'PlanetVPN', 'Troywell'])
                    vpn_nav = vpn_usada
                    window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] VPN Escolhida: {vpn_nav}.')
                    window.Refresh()

                if vpn_usada == 'urbanvpn':
                    file_path = './storage/urbanvpn.crx'
                    import zipfile

                    if os.path.exists("./storage/urbanvpn.crx"):
                        result = f"A pasta 'urbanvpn' já existe em '{file_path}'."
                    else:
                        # URL para download
                        url = 'https://www.dropbox.com/scl/fi/y6i5kltqi7vl20v7rc8fp/urbanvpn.crx?rlkey=goarhqxyvz7lgd9m1f2co4cf9&st=vvdo4oy2&dl=1'

                        # Fazendo o download do arquivo
                        response = requests.get(url)
                        if response.status_code == 200:
                            with open(file_path, 'wb') as file:
                                file.write(response.content)
                            print("Arquivo 'urbanvpn.crx' baixado e salvo em './storage/urbanvpn.crx'.")

                        else:
                            result = "Não foi possível baixar o arquivo. Status Code: " + \
                                str(response.status_code)
                            
                if not vpn_nav == "UrbanVPN":
                    with SB(uc=True, locale_code='pt-br', demo=False, headless=nav_oculto, incognito=True, extension_dir=rf'.\storage\recaptcha,{caminho_atual}\storage\{vpn_usada}') as chrome:
                        time.sleep(5)

                        if vpn_nav == 'SurfShark':
                            file_path = './storage/surfshark.crx'
                            import zipfile

                            if os.path.exists("./storage/surfshark/"):
                                result = f"A pasta 'surfshark' já existe em '{file_path}'."
                            else:
                                # URL para download
                                url = 'https://www.dropbox.com/scl/fi/e4f4h29zl5s5tywjp1ev2/surfshark.crx?rlkey=zb499vqpr8swexgd8yrsu6rvc&dl=1'

                                # Fazendo o download do arquivo
                                response = requests.get(url)
                                if response.status_code == 200:
                                    with open(file_path, 'wb') as file:
                                        file.write(response.content)
                                    print("Arquivo 'surfshark.crx' baixado e salvo em './storage/surfshark.crx'.")
                                    # Caminho do arquivo original (altere para o seu caminho de arquivo)
                                    caminho_original = './storage/surfshark.crx'
                                    novo_caminho = './storage/surfshark.zip'

                                    # Renomear o arquivo
                                    os.rename(caminho_original, novo_caminho)

                                    # Caminho do arquivo zip
                                    caminho_zip = './storage/surfshark.zip'

                                    # Diretório de destino para extrair
                                    diretorio_destino = './storage/surfshark/'

                                    # Remover um arquivo anterior, se existir
                                    arquivo_antigo = './storage/surfshark'
                                    if os.path.exists(arquivo_antigo):
                                        os.remove(arquivo_antigo)

                                    # Criar o diretório de destino se ele não existir
                                    if not os.path.exists(diretorio_destino):
                                        os.makedirs(diretorio_destino)

                                    # Extrair o arquivo zip
                                    with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                                        zip_ref.extractall(diretorio_destino)

                                    print("Arquivo extraído com sucesso!")
                                    os.remove('./storage/surfshark.zip')

                                else:
                                    result = "Não foi possível baixar o arquivo. Status Code: " + \
                                        str(response.status_code)
                            try:
                                
                                chrome.set_window_size(800, 800)
                                # Alternar para a nova aba
                                chrome.driver.switch_to.window(
                                    chrome.driver.window_handles[-1])

                                # Verificar se a URL está correta e fechar a aba
                                if chrome.driver.current_url == "https://surfshark.com/pt-br/download/chrome/onboarding":
                                    chrome.driver.close()

                                # Alternar de volta para a aba original
                                chrome.driver.switch_to.window(
                                    chrome.driver.window_handles[0])
                                chrome.open('chrome://extensions/')
                                extensoes = chrome.execute_script(
                                    'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                                )

                                id_extensao = None
                                for ext in extensoes:
                                    nome_ext = chrome.execute_script(
                                        'return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                                    if "Surf" in nome_ext:
                                        id_extensao = chrome.execute_script(
                                            'return arguments[0].getAttribute("id");', ext)
                                        break

                                if id_extensao:
                                    url_extensao = f'chrome-extension://{id_extensao}/index.html'
                                    # chrome.get(url_extensao)
                                    # print(f"Página da extensão aberta em {url_extensao}")
                                else:
                                    print("ID da extensão não encontrado")
                                # Continuar com outras operações na aba original, se necessário
                            except Exception as e:
                                print(e)
                            if os.path.exists(r'.\storage\cookies_surf.json'):
                                chrome.driver.uc_open_with_reconnect(
                                    'https://my.surfshark.com/auth/login', 4)
                                try:
                                    chrome.save_screenshot('erro_nav.png')
                                    chrome.switch_to_frame(
                                        'iframe[id^="cf-chl"]', timeout=1)
                                    print(chrome.driver.find_elements(
                                        By.XPATH, '//*[@id="challenge-stage"]/div/label/input'))
                                    # chrome.driver.uc_click('//*[@id="challenge-stage"]/div/label/input')
                                    chrome.driver.uc_click(
                                        'span')
                                    chrome.save_screenshot('erro_nav.png')
                                    # chrome.driver.execute_script("arguments[0].click();", chrome.driver.find_element(By.XPATH, '//*[@id="challenge-stage"]/div/label/input'))
                                except Exception as e:
                                    print('Sem Cloudflare')
                                with open(r'.\storage\cookies_surf.json', 'r') as file:
                                    cookies = json.load(file)

                                # Adiciona os cookies salvos ao navegador
                                for cookie in cookies:
                                    chrome.driver.add_cookie(cookie)

                                # Recarrega a página para usar os cookies
                                print('Adicionou os cookies')
                                time.sleep(2)
                                chrome.refresh()
                                time.sleep(2)
                                if chrome.driver.current_url == 'https://my.surfshark.com/home/dashboard':
                                    chrome.driver.get(url_extensao)
                                    chrome.wait_for_element(
                                        "//button[@data-test='login-in-button']").click()
                                    time.sleep(3)
                                elif 'https://my.surfshark.com/auth/login' in chrome.driver.current_url:
                                    try:
                                        chrome.driver.get(url_extensao)
                                        chrome.wait_for_element(
                                            "//button[@data-test='login-in-button']").click()

                                        time.sleep(5)
                                        nova_janela = chrome.driver.window_handles[-1]
                                        chrome.driver.switch_to.window(nova_janela)
                                        time.sleep(4)
                                        if chrome.driver.current_url == 'https://my.surfshark.com/account/extension-login-success':

                                            time.sleep(5)
                                            chrome.driver.close()
                                        nova_janela = chrome.driver.window_handles[0]
                                        chrome.driver.switch_to.window(nova_janela)

                                        time.sleep(3)
                                    except Exception as e:
                                        print(e)
                            else:
                                chrome.driver.switch_to.window(
                                    chrome.driver.window_handles[0])
                                import time
                                # Abre uma nova aba para a extensão (geralmente chrome-extension://<extension-id>/)
                                chrome.driver.get(url_extensao)
                                chrome.wait_for_element(
                                    "//button[@data-test='login-in-button']").click()
                                time.sleep(3)
                                janela_principal = chrome.driver.window_handles[0]
                                nova_janela = chrome.driver.window_handles[1]
                                chrome.driver.switch_to.window(nova_janela)
                                print(chrome.driver.current_url)
                                email_surf = emailvpn
                                senha_surf = senhavpn
                                try:
                                    chrome.save_screenshot('erro_nav.png')
                                    chrome.switch_to_frame(
                                        'iframe[id^="cf-chl"]', timeout=1)
                                    print(chrome.driver.find_elements(
                                        By.XPATH, '//*[@id="challenge-stage"]/div/label/input'))
                                    # chrome.driver.uc_click('//*[@id="challenge-stage"]/div/label/input')
                                    chrome.driver.uc_click(
                                        'span')
                                    chrome.save_screenshot('erro_nav.png')
                                    # chrome.driver.execute_script("arguments[0].click();", chrome.driver.find_element(By.XPATH, '//*[@id="challenge-stage"]/div/label/input'))
                                except Exception as e:
                                    print('Sem Cloudflare 2')
                                chrome.send_keys(
                                    "//input[@name='emailField']", email_surf)
                                chrome.send_keys(
                                    "//input[@name='passwordField']", senha_surf)
                                chrome.click(("//button[@id='loginSubmit']"))
                                time.sleep(10)
                                if chrome.driver.current_url == 'https://my.surfshark.com/account/extension-login-success':

                                    cookies = chrome.driver.get_cookies()

                                    # Guarde os cookies em um arquivo JSON
                                    with open(r'.\storage\cookies_surf.json', 'w') as file:
                                        json.dump(cookies, file)
                                else:
                                    print('Falha ao logar na surfshark')
                                chrome.driver.close()
                                chrome.driver.switch_to.window(janela_principal)

                            if 'https://my.surfshark.com/auth/login' in chrome.driver.current_url:
                                print('Falha ao logar na surfshark')
                                chrome.driver.switch_to.window(
                                    chrome.driver.window_handles[0])
                                import time
                                # Abre uma nova aba para a extensão (geralmente chrome-extension://<extension-id>/)
                                chrome.driver.get(url_extensao)
                                chrome.wait_for_element(
                                    "//button[@data-test='login-in-button']").click()
                                time.sleep(3)
                                janela_principal = chrome.driver.window_handles[0]
                                nova_janela = chrome.driver.window_handles[1]
                                chrome.driver.switch_to.window(nova_janela)
                                print(chrome.driver.current_url)
                                email_surf = 'americanplayer@protonmail.com'
                                senha_surf = 'Kotinha10@'
                                chrome.send_keys(
                                    "//input[@name='emailField']", email_surf)
                                chrome.send_keys(
                                    "//input[@name='passwordField']", senha_surf)
                                chrome.click(("//button[@id='loginSubmit']"))
                                time.sleep(10)
                                if chrome.driver.current_url == 'https://my.surfshark.com/account/extension-login-success':
                                    if os.path.exists(r'.\storage\cookies_surf.json'):
                                        # Apaga o arquivo
                                        os.remove(
                                            r'.\storage\cookies_surf.json')
                                        print(
                                            f"cookies_surf.json foi apagado com sucesso.")
                                    else:
                                        print(f"cookies_surf.json não existe.")
                                    cookies = chrome.driver.get_cookies()

                                    # Guarde os cookies em um arquivo JSON
                                    with open(r'.\storage\cookies_surf.json', 'w') as file:
                                        json.dump(cookies, file)
                                    chrome.driver.close()
                                    chrome.switch_to.window(janela_principal)
                                else:
                                    print('Falha ao logar na surfshark')
                            print('Logou com sucesso na surfshark')

                            locais = ['Canada', 'Australia', 'Netherlands', 'Poland', 'United Kingdom',
                                    'Germany', 'Africa', 'Japan', 'Indonesia', 'India', 'Denmark', 'France', 'USA']
                            local_vpn = random.choice(locais)
                            print(f'Regiao escolhida {local_vpn}')
                            chrome.driver.refresh()
                            time.sleep(5)
                            try:
                                chrome.send_keys(
                                    "//input[@data-test='location-search-input']", local_vpn)
                            except:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Erro ao logar na VPN.')
                                window.Refresh()
                                if os.path.exists(r'.\storage\cookies_surf.json'):
                                    # Apaga o arquivo
                                    os.remove(
                                        r'.\storage\cookies_surf.json')
                                    print(
                                        f"cookies_surf.json foi apagado com sucesso.")
                            chrome.click("//div[@data-test='location-title']")
                            try:
                                chrome.wait_for_element(
                                    "//button[@data-test='disconnect-button']")

                                print('VPN conectada')
                                time.sleep(5)
                            except Exception as e:
                                print(e)
                                
                        elif vpn_nav == 'TouchVPN':
                            file_path = './storage/touchvpn.crx'
                            import zipfile

                            if os.path.exists("./storage/touchvpn/"):
                                result = f"A pasta 'touchvpn' já existe em '{file_path}'."
                            else:
                                # URL para download
                                url = 'https://www.dropbox.com/scl/fi/xlfanzmvr46zd36ki8o6s/touchvpn.crx?rlkey=ue55t76a21aur82c9ecm9d5al&st=muc5temz&dl=1'

                                # Fazendo o download do arquivo
                                response = requests.get(url)
                                if response.status_code == 200:
                                    with open(file_path, 'wb') as file:
                                        file.write(response.content)
                                    print("Arquivo 'touchvpn.crx' baixado e salvo em './storage/touchvpn.crx'.")
                                    # Caminho do arquivo original (altere para o seu caminho de arquivo)
                                    caminho_original = './storage/touchvpn.crx'
                                    novo_caminho = './storage/touchvpn.zip'

                                    # Renomear o arquivo
                                    os.rename(caminho_original, novo_caminho)

                                    # Caminho do arquivo zip
                                    caminho_zip = './storage/touchvpn.zip'

                                    # Diretório de destino para extrair
                                    diretorio_destino = './storage/touchvpn/'

                                    # Remover um arquivo anterior, se existir
                                    arquivo_antigo = './storage/touchvpn'
                                    if os.path.exists(arquivo_antigo):
                                        os.remove(arquivo_antigo)

                                    # Criar o diretório de destino se ele não existir
                                    if not os.path.exists(diretorio_destino):
                                        os.makedirs(diretorio_destino)

                                    # Extrair o arquivo zip
                                    with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                                        zip_ref.extractall(diretorio_destino)

                                    print("Arquivo extraído com sucesso!")
                                    os.remove('./storage/touchvpn.zip')

                                else:
                                    result = "Não foi possível baixar o arquivo. Status Code: " + \
                                        str(response.status_code)
                            time.sleep(5)
                            chrome.driver.switch_to.window(
                                chrome.driver.window_handles[-1])
                            # Verificar se a URL está correta e fechar a aba
                            if chrome.driver.current_url == "https://www.touchvpn.net/":
                                chrome.driver.close()
                            # Alternar de volta para a aba original
                            chrome.driver.switch_to.window(
                                chrome.driver.window_handles[0])
                            chrome.open('chrome://extensions/')
                            extensoes = chrome.execute_script(
                                'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                            )

                            id_extensao = None
                            for ext in extensoes:
                                nome_ext = chrome.execute_script('return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                                if "Touch" in nome_ext:  # Substitua pelo nome da sua extensão
                                    id_extensao = chrome.execute_script('return arguments[0].getAttribute("id");', ext)
                                    break

                            if id_extensao:
                                # Use o ID da extensão para abrir a página da extensão
                                url_extensao = f'chrome-extension://{id_extensao}/panel/index.html'
                                chrome.driver.get(url_extensao)
                            else:
                                print("ID da extensão não encontrado")
                            chrome.wait_for_element("div[class=location]").click()
                            locais = ['United States', 'Canada', 'Germany', 'Netherlands', 'United Kingdom']
                            local_vpn = random.choice(locais)
                            print(local_vpn)
                            chrome.wait_for_element(f'''//div[contains(text(), '{local_vpn}')]/div[@class='flag']''').click()
                            chrome.wait_for_element("div[id=ConnectionButton]").click()
                            chrome.wait_for_element("div[id=AdBlocker]")
                            if chrome.find_elements("div[id=AdBlocker]"):
                                print('VPN Conectada')

                        elif vpn_nav == 'CyberGhost':
                            file_path = './storage/cyberghost.crx'
                            import zipfile

                            if os.path.exists("./storage/cyberghost/"):
                                result = f"A pasta 'cyberghost' já existe em '{file_path}'."
                            else:
                                # URL para download
                                url = 'https://www.dropbox.com/scl/fi/nw94zxsqdcyvs1x7i4r4e/cyberghost.crx?rlkey=162gv0ry8524g1mgt8gpf0n1c&st=vaj6u9r7&dl=1'

                                # Fazendo o download do arquivo
                                response = requests.get(url)
                                if response.status_code == 200:
                                    with open(file_path, 'wb') as file:
                                        file.write(response.content)
                                    print("Arquivo 'cyberghost.crx' baixado e salvo em './storage/cyberghost.crx'.")
                                    # Caminho do arquivo original (altere para o seu caminho de arquivo)
                                    caminho_original = './storage/cyberghost.crx'
                                    novo_caminho = './storage/cyberghost.zip'

                                    # Renomear o arquivo
                                    os.rename(caminho_original, novo_caminho)

                                    # Caminho do arquivo zip
                                    caminho_zip = './storage/cyberghost.zip'

                                    # Diretório de destino para extrair
                                    diretorio_destino = './storage/cyberghost/'

                                    # Remover um arquivo anterior, se existir
                                    arquivo_antigo = './storage/cyberghost'
                                    if os.path.exists(arquivo_antigo):
                                        os.remove(arquivo_antigo)

                                    # Criar o diretório de destino se ele não existir
                                    if not os.path.exists(diretorio_destino):
                                        os.makedirs(diretorio_destino)

                                    # Extrair o arquivo zip
                                    with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                                        zip_ref.extractall(diretorio_destino)

                                    print("Arquivo extraído com sucesso!")
                                    os.remove('./storage/cyberghost.zip')

                                else:
                                    result = "Não foi possível baixar o arquivo. Status Code: " + \
                                        str(response.status_code)
                            
                            chrome.open('chrome://extensions/')
                            extensoes = chrome.execute_script(
                                'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                            )

                            id_extensao = None
                            for ext in extensoes:
                                nome_ext = chrome.execute_script('return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                                if "CyberGhost" in nome_ext:
                                    id_extensao = chrome.execute_script('return arguments[0].getAttribute("id");', ext)
                                    break

                            if id_extensao:
                                url_extensao = f'chrome-extension://{id_extensao}/index.html'
                                chrome.driver.get(url_extensao)
                            else:
                                print("ID da extensão não encontrado")
                            
                            locais = ['Romania', 'Netherlands', 'Germany', 'United States']
                            local_vpn = random.choice(locais)
                            print(local_vpn)
                            if local_vpn == 'Romania':
                                pass
                            else:
                                chrome.wait_for_element("span[class=selected-country]").click()
                                chrome.wait_for_element(f"//span[normalize-space(text())='{local_vpn}']").click()
                            chrome.wait_for_element("div[class=spinner]").click()
                            while True:
                                if chrome.find_elements('//h4[text()="Connected"]'):
                                    print('VPN Conectada')
                                    break
                                elif chrome.find_elements('//h4[text()="connectPage.error"]'):
                                    chrome.wait_for_element("div[class=spinner]").click()
                                    chrome.wait_for_element('//h4[text()="Connected"]')
                                    
                        elif vpn_nav == 'ZenMate':
                            file_path = './storage/zenmate.crx'
                            import zipfile

                            if os.path.exists("./storage/zenmate/"):
                                result = f"A pasta 'zenmate' já existe em '{file_path}'."
                            else:
                                # URL para download
                                url = 'https://www.dropbox.com/scl/fi/ype15i0fln67zlxfjhsa7/zenmate.crx?rlkey=qc2wrm1zy8i63murehrgb16dr&st=7gkbc98m&dl=1'

                                # Fazendo o download do arquivo
                                response = requests.get(url)
                                if response.status_code == 200:
                                    with open(file_path, 'wb') as file:
                                        file.write(response.content)
                                    print("Arquivo 'zenmate.crx' baixado e salvo em './storage/zenmate.crx'.")
                                    # Caminho do arquivo original (altere para o seu caminho de arquivo)
                                    caminho_original = './storage/zenmate.crx'
                                    novo_caminho = './storage/zenmate.zip'

                                    # Renomear o arquivo
                                    os.rename(caminho_original, novo_caminho)

                                    # Caminho do arquivo zip
                                    caminho_zip = './storage/zenmate.zip'

                                    # Diretório de destino para extrair
                                    diretorio_destino = './storage/zenmate/'

                                    # Remover um arquivo anterior, se existir
                                    arquivo_antigo = './storage/zenmate'
                                    if os.path.exists(arquivo_antigo):
                                        os.remove(arquivo_antigo)

                                    # Criar o diretório de destino se ele não existir
                                    if not os.path.exists(diretorio_destino):
                                        os.makedirs(diretorio_destino)

                                    # Extrair o arquivo zip
                                    with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                                        zip_ref.extractall(diretorio_destino)

                                    print("Arquivo extraído com sucesso!")
                                    os.remove('./storage/zenmate.zip')

                                else:
                                    result = "Não foi possível baixar o arquivo. Status Code: " + \
                                        str(response.status_code)
                            
                            chrome.open('chrome://extensions/')
                            extensoes = chrome.execute_script(
                                'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                            )
                            id_extensao = None
                            for ext in extensoes:
                                nome_ext = chrome.execute_script('return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                                if "ZenMate" in nome_ext:
                                    id_extensao = chrome.execute_script('return arguments[0].getAttribute("id");', ext)
                                    break
                            if id_extensao:
                                url_extensao = f'chrome-extension://{id_extensao}/index.html'
                                chrome.driver.get(url_extensao)
                            else:
                                print("ID da extensão não encontrado")

                            locais = ['Germany', 'Romania', 'Singapore', 'United States']
                            local_vpn = random.choice(locais)
                            print(local_vpn)
                            if local_vpn == 'Germany':
                                local_zenmate = '#country-browsing-DE'
                            elif local_vpn == 'Romania':
                                local_zenmate = '#country-browsing-RO'
                            elif local_vpn == 'Singapore':
                                local_zenmate = '#country-browsing-SG'
                            elif local_vpn == 'United States':
                                local_zenmate = '#country-browsing-US'
                            while True:
                                if not chrome.find_elements("div[class=shield-container]"): 
                                    chrome.driver.get(url_extensao)
                                    time.sleep(2)
                                else:
                                    time.sleep(2)
                                    chrome.wait_for_element('//a[@routerlink="/servers"]').click()
                                    locais = ['Germnay', 'Romania', 'Singapore', 'United States']
                                    local_vpn = random.choice(locais)
                                    time.sleep(2)
                                    if not chrome.find_elements(f"{local_zenmate}") or chrome.find_elements('xpath', "//div[@class='alert alert-danger text-center mt-2' and not(@hidden)]"):
                                        chrome.wait_for_element('//a[@routerlink="/home"]').click()
                                        time.sleep(4)
                                        chrome.wait_for_element('//a[@routerlink="/servers"]').click()
                                    chrome.wait_for_element(f"{local_zenmate}").click()
                                    time.sleep(3)
                                    try:
                                        chrome.wait_for_element('div.proxy-status-container > div.pt-1.location-info > a')
                                    except:
                                        chrome.driver.get(url_extensao)
                                        chrome.wait_for_element('div.proxy-status-container > div.pt-1.location-info > a')
                                    if chrome.find_element('div.proxy-status-container > div.pt-1.location-info > a').text == 'Connected to':
                                        print('VPN Conectada')
                                        break
                        
                        elif vpn_nav == 'VeePN':
                            file_path = './storage/veepn.crx'
                            import zipfile

                            if os.path.exists("./storage/veepn/"):
                                result = f"A pasta 'veepn' já existe em '{file_path}'."
                            else:
                                # URL para download
                                url = 'https://www.dropbox.com/scl/fi/ube9dvmevvhhk5eqt32gt/veepn.crx?rlkey=yuzwpgst6vo0oohhtcsi7i65o&dl=1'

                                # Fazendo o download do arquivo
                                response = requests.get(url)
                                if response.status_code == 200:
                                    with open(file_path, 'wb') as file:
                                        file.write(response.content)
                                    print("Arquivo 'veepn.crx' baixado e salvo em './storage/veepn.crx'.")
                                    # Caminho do arquivo original (altere para o seu caminho de arquivo)
                                    caminho_original = './storage/veepn.crx'
                                    novo_caminho = './storage/veepn.zip'

                                    # Renomear o arquivo
                                    os.rename(caminho_original, novo_caminho)

                                    # Caminho do arquivo zip
                                    caminho_zip = './storage/veepn.zip'

                                    # Diretório de destino para extrair
                                    diretorio_destino = './storage/veepn/'

                                    # Remover um arquivo anterior, se existir
                                    arquivo_antigo = './storage/veepn'
                                    if os.path.exists(arquivo_antigo):
                                        os.remove(arquivo_antigo)

                                    # Criar o diretório de destino se ele não existir
                                    if not os.path.exists(diretorio_destino):
                                        os.makedirs(diretorio_destino)

                                    # Extrair o arquivo zip
                                    with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                                        zip_ref.extractall(diretorio_destino)

                                    print("Arquivo extraído com sucesso!")
                                    os.remove('./storage/veepn.zip')

                                else:
                                    result = "Não foi possível baixar o arquivo. Status Code: " + \
                                        str(response.status_code)
                            
                            chrome.open('chrome://extensions/')
                            extensoes = chrome.execute_script(
                                'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                            )

                            id_extensao = None
                            for ext in extensoes:
                                nome_ext = chrome.execute_script('return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                                if "Vee" in nome_ext:
                                    id_extensao = chrome.execute_script('return arguments[0].getAttribute("id");', ext)
                                    break

                            if id_extensao:
                                url_extensao = f'chrome-extension://{id_extensao}/html/foreground.html'
                                chrome.driver.get(url_extensao)
                            else:
                                print("ID da extensão não encontrado")
                            
                            chrome.driver.switch_to.window(
                                chrome.driver.window_handles[-1])
                            # Verificar se a URL está correta e fechar a aba
                            if "https://veepn.com" in chrome.driver.current_url:
                                chrome.driver.close()
                            # Alternar de volta para a aba original
                            chrome.driver.switch_to.window(
                                chrome.driver.window_handles[0])

                            chrome.wait_for_element("button.next").click()
                            chrome.wait_for_element("button.next").click()
                            if chrome.find_elements("div.footer-decline-text"):
                                chrome.wait_for_element("div.footer-decline-text").click()

                            locais = ['France', 'Netherlands','Singapore', 'London','Virginia', 'Oregon']
                            local_vpn = random.choice(locais)
                            print(local_vpn)
                            chrome.wait_for_element("div.current-region-upper-block").click()
                            chrome.wait_for_element("input.region-search-input").send_keys(local_vpn)
                            chrome.wait_for_element("div.radio.off", timeout=25).click()
                            chrome.wait_for_element('div[id=mainBtn]').click()
                            while True:
                                if chrome.find_element("div.description.fadeIn.linebreak").text == 'VPN is ON':
                                    print('VPN Conectada')
                                    break
                                elif chrome.find_element("div.description.fadeIn.linebreak").text == 'VPN is OFF':
                                    chrome.wait_for_element('div[id=mainBtn]').click()
                                elif chrome.find_elements("div.footer-decline-text"):
                                    chrome.wait_for_element("div.footer-decline-text").click()

                        elif vpn_nav == 'PlanetVPN':
                            file_path = './storage/planetvpn.crx'
                            import zipfile

                            if os.path.exists("./storage/planetvpn/"):
                                result = f"A pasta 'planetvpn' já existe em '{file_path}'."
                            else:
                                # URL para download
                                url = 'https://www.dropbox.com/scl/fi/5nkgxkdyd3hmbl2yezwpz/planetvpn.crx?rlkey=q67oe53sq6qoian2izabfxc5q&dl=1'

                                # Fazendo o download do arquivo
                                response = requests.get(url)
                                if response.status_code == 200:
                                    with open(file_path, 'wb') as file:
                                        file.write(response.content)
                                    print("Arquivo 'planetvpn.crx' baixado e salvo em './storage/planetvpn.crx'.")
                                    # Caminho do arquivo original (altere para o seu caminho de arquivo)
                                    caminho_original = './storage/planetvpn.crx'
                                    novo_caminho = './storage/planetvpn.zip'

                                    # Renomear o arquivo
                                    os.rename(caminho_original, novo_caminho)

                                    # Caminho do arquivo zip
                                    caminho_zip = './storage/planetvpn.zip'

                                    # Diretório de destino para extrair
                                    diretorio_destino = './storage/planetvpn/'

                                    # Remover um arquivo anterior, se existir
                                    arquivo_antigo = './storage/planetvpn'
                                    if os.path.exists(arquivo_antigo):
                                        os.remove(arquivo_antigo)

                                    # Criar o diretório de destino se ele não existir
                                    if not os.path.exists(diretorio_destino):
                                        os.makedirs(diretorio_destino)

                                    # Extrair o arquivo zip
                                    with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                                        zip_ref.extractall(diretorio_destino)

                                    print("Arquivo extraído com sucesso!")
                                    os.remove('./storage/planetvpn.zip')

                                else:
                                    result = "Não foi possível baixar o arquivo. Status Code: " + \
                                        str(response.status_code)
                            
                            chrome.open('chrome://extensions/')
                            extensoes = chrome.execute_script(
                                'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                            )

                            id_extensao = None
                            for ext in extensoes:
                                nome_ext = chrome.execute_script('return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                                if "Planet" in nome_ext:
                                    id_extensao = chrome.execute_script('return arguments[0].getAttribute("id");', ext)
                                    break

                            if id_extensao:
                                url_extensao = f'chrome-extension://{id_extensao}/popup.html'
                                chrome.driver.get(url_extensao)
                            else:
                                print("ID da extensão não encontrado")
                            
                            chrome.driver.switch_to.window(
                                chrome.driver.window_handles[-1])
                            # Verificar se a URL está correta e fechar a aba
                            if "https://freevpnplanet.com/" in chrome.driver.current_url:
                                chrome.driver.close()
                            # Alternar de volta para a aba original
                            chrome.driver.switch_to.window(
                                chrome.driver.window_handles[0])

                            chrome.wait_for_element("div.consent-button").click()
                            chrome.wait_for_element("div.select-country").click()
                            locais = ['Germany', 'United Kingdom', 'USA']
                            local_vpn = random.choice(locais)
                            print(local_vpn)
                            chrome.wait_for_element("input.search-input").send_keys(local_vpn)
                            chrome.wait_for_element("div.server-name").click()
                            time.sleep(1)
                            while True:
                                if chrome.find_elements("button.button.button-connected"):
                                    print('VPN Conectada')
                                    break
                                elif chrome.find_elements("button.button.button-disconnected"):
                                    chrome.find_element("button.button.button-disconnected").click()

                        elif vpn_nav == 'Troywell':
                            file_path = './storage/troywell.crx'
                            import zipfile

                            if os.path.exists("./storage/troywell/"):
                                result = f"A pasta 'troywell' já existe em '{file_path}'."
                            else:
                                # URL para download
                                url = 'https://www.dropbox.com/scl/fi/rn25p6mmg57pmikq8d2xu/troywell.crx?rlkey=wwmakky5j6952lisr19723vw7&dl=1'

                                # Fazendo o download do arquivo
                                response = requests.get(url)
                                if response.status_code == 200:
                                    with open(file_path, 'wb') as file:
                                        file.write(response.content)
                                    print("Arquivo 'troywell.crx' baixado e salvo em './storage/troywell.crx'.")
                                    # Caminho do arquivo original (altere para o seu caminho de arquivo)
                                    caminho_original = './storage/troywell.crx'
                                    novo_caminho = './storage/troywell.zip'

                                    # Renomear o arquivo
                                    os.rename(caminho_original, novo_caminho)

                                    # Caminho do arquivo zip
                                    caminho_zip = './storage/troywell.zip'

                                    # Diretório de destino para extrair
                                    diretorio_destino = './storage/troywell/'

                                    # Remover um arquivo anterior, se existir
                                    arquivo_antigo = './storage/troywell'
                                    if os.path.exists(arquivo_antigo):
                                        os.remove(arquivo_antigo)

                                    # Criar o diretório de destino se ele não existir
                                    if not os.path.exists(diretorio_destino):
                                        os.makedirs(diretorio_destino)

                                    # Extrair o arquivo zip
                                    with zipfile.ZipFile(caminho_zip, 'r') as zip_ref:
                                        zip_ref.extractall(diretorio_destino)

                                    print("Arquivo extraído com sucesso!")
                                    os.remove('./storage/troywell.zip')

                                else:
                                    result = "Não foi possível baixar o arquivo. Status Code: " + \
                                        str(response.status_code)
                        
                            chrome.open('chrome://extensions/')
                            extensoes = chrome.execute_script(
                                'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                            )

                            id_extensao = None
                            for ext in extensoes:
                                nome_ext = chrome.execute_script('return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                                if "Troywell" in nome_ext:
                                    id_extensao = chrome.execute_script('return arguments[0].getAttribute("id");', ext)
                                    break

                            if id_extensao:
                                url_extensao = f'chrome-extension://{id_extensao}/popup.html'
                                chrome.driver.get(url_extensao)
                            else:
                                print("ID da extensão não encontrado")

                            try:
                                chrome.wait_for_element("div.button.analytics__button", timeout=2).click()
                            except:
                                chrome.driver.get(url_extensao)
                                chrome.wait_for_element("div.button.analytics__button").click()
                            chrome.wait_for_element("div.server-select__row").click()
                            time.sleep(2)
                            locais = ['Alemanha', 'Polônia', 'Holanda', 'Japão', 'Austrália', 'França', 'Noruega', 'África do Sul', 'Espanha', 'Canadá']
                            local_vpn = random.choice(locais)
                            print(local_vpn)
                            chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                            while True:
                                try:
                                    chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]").click()
                                    break
                                except:
                                    chrome.driver.get(url_extensao)
                                    chrome.wait_for_element("div.server-select__row").click()
                                    time.sleep(2)
                                    local_vpn = random.choice(locais)
                                    chrome.wait_for_element("input.search__input").clear()
                                    chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                                    chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]").click()

                            chrome.wait_for_element("div.connect-button").click()
                            try:
                                chrome.wait_for_element("div.connection-block__label")
                            except:
                                if chrome.find_elements("div.button.button_selected.connection-failed__button.connection-failed__button_blue"):
                                    chrome.find_element("div.button.button_selected.connection-failed__button.connection-failed__button_blue").click()
                                    chrome.wait_for_element("div.server-select__row").click()
                                    time.sleep(2)
                                    local_vpn = random.choice(locais)
                                    chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                                    chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]").click()
                                    chrome.wait_for_element("div.connect-button").click()
                                    chrome.wait_for_element("div.connection-block__label")
                            time.sleep(1)
                            while True:
                                if chrome.find_elements("div.connection-block__label"):
                                    print('VPN Conectada')
                                    break
                                elif chrome.find_elements("div.button.button_selected.connection-failed__button.connection-failed__button_blue"):
                                    chrome.find_element("div.button.button_selected.connection-failed__button.connection-failed__button_blue").click()
                                    chrome.wait_for_element("div.server-select__row").click()
                                    time.sleep(2)
                                    local_vpn = random.choice(locais)
                                    chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                                    chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]").click()
                                    chrome.wait_for_element("div.connect-button").click()
                                    chrome.wait_for_element("div.connection-block__label")


                        janela_principal = chrome.driver.window_handles[0]
                        chrome.driver.switch_to.window(janela_principal)
                        url = f"https://www.instagram.com/"
                        chrome.set_window_size(800, 800)
                        chrome.driver.uc_open_with_reconnect(url, 10)
                        # time.sleep(30000)
                        try:
                            chrome.driver.uc_click(
                                'button:contains("Permitir todos os cookies")', 5)
                            print('Cookies aceito')
                            cook = True
                            time.sleep(5)
                        except:
                            print('Sem cookies')
                            cook = False
                        try:
                            chrome.driver.uc_click(
                                "a[href='/accounts/emailsignup/']", 4)
                        except:
                            chrome.driver.refresh()
                            chrome.driver.uc_click("a[href='/accounts/emailsignup/']", 4)
                        lista_user = random.choices(range(0, 9), k=2)
                        lista_letras = random.choices(letras, k=2)
                        nomea = fake.first_name_male().replace(" ", "")
                        nome = unicodedata.normalize('NFKD', nomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        sobrenomea = fake.last_name().replace(" ", "").lower()
                        sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        nome_completo = nome + ' ' + sobrenome
                        nome_completo_s = nome + sobrenome
                        numeros_concatenados = ''.join(str(numero)
                                                    for numero in lista_user)
                        user_completo1 = nome_completo_s + '' + \
                            str(numeros_concatenados) + ''.join(lista_letras)
                        user_completo = random.randint(1, len(user_completo1))
                        string_with_dot = user_completo1[:user_completo] + \
                            '_' + user_completo1[user_completo:]
                        user_completo_antigo = string_with_dot.lower()
                        escolha = random.choice(["_", "."])
                        user_completo = nome + escolha + sobrenome + \
                            str(numeros_concatenados) + ''.join(lista_letras)

                        print(user_completo)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] User: {user_completo}')
                        window.Refresh()
                        senha = gerar_senha(12)
                        print(senha)
                        num = f'+48{num}'
                        chrome.type("//input[@name='fullName']", nome_completo)
                        time.sleep(random.uniform(0.5, 2))
                        chrome.wait_for_element("//input[@name='emailOrPhone']", timeout=30)
                        chrome.type("//input[@name='emailOrPhone']", num)
                        #for numero in num:
                        #    chrome.send_keys(
                        #        "//input[@name='emailOrPhone']", f'{numero}')
                        #    time.sleep(random.uniform(0.001, 0.05))
                        
                        
                        #for nome in nome_completo:
                        #    chrome.send_keys("//input[@name='fullName']", nome)
                        #    time.sleep(random.uniform(0.001, 0.05))
                        time.sleep(random.uniform(0.5, 2))
                        chrome.type("//input[@name='username']", user_completo)
                        #    for user in user_completo:
                        #        chrome.send_keys("//input[@name='username']", user)
                        #        time.sleep(random.uniform(0.001, 0.05))
                        time.sleep(random.uniform(0.5, 2))
                        chrome.type("//input[@name='password']", senha)
                        #    for password in senha:
                        #        chrome.send_keys("//input[@name='password']", password)
                        #        time.sleep(random.uniform(0.001, 0.05))
                        time.sleep(random.uniform(0.5, 2))
                        time.sleep(5)
                        chrome.driver.uc_click('''button[type='submit']''', 5)
                        ano = str(random.randint(1960, 2000))

                        if len(chrome.find_elements("//input[@name='emailOrPhone']")) == 1:
                            print('IP Bloqueado, procurando outro IP')
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] IP Bloqueado')
                            window.Refresh()

                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Procurando outro IP')
                            window.Refresh()
                            tentativa = 1
                            if vpn_nav == 'SurfShark':
                                while True:
                                    chrome.execute_script(
                                        "window.open('a', 'new_tab')")
                                    janela_principal = chrome.driver.window_handles[0]
                                    nova_janela = chrome.driver.window_handles[-1]
                                    chrome.driver.switch_to.window(nova_janela)
                                    chrome.driver.get(url_extensao)
                                    chrome.wait_for_element(
                                        "//button[@data-test='disconnect-button']").click()
                                    time.sleep(2)
                                    # locais = ['Canada', 'Australia', 'Netherlands']
                                    # local_vpn = random.choice(locais)
                                    chrome.send_keys(
                                        "//input[@data-test='location-search-input']", local_vpn)
                                    chrome.click("//div[@data-test='location-title']")
                                    try:
                                        chrome.wait_for_element(
                                            "//button[@data-test='disconnect-button']")

                                        print('VPN conectada')
                                        time.sleep(5)
                                    except:
                                        print('Não foi possivel conectar')
                                    chrome.driver.close()
                                    janela_principal = chrome.driver.window_handles[0]
                                    chrome.driver.switch_to.window(janela_principal)
                                    time.sleep(3)
                                    try:
                                        chrome.driver.uc_click(
                                            '''button[type='submit']''', 5)
                                    except:
                                        chrome.driver.uc_click(
                                            '''//button[@type='submit']''', 5)

                                    if len(chrome.find_elements("//select[@title='Ano:']")) == 1:
                                        print('IP aceito')
                                        break
                                    tentativa += 1
                                    if tentativa == 5:
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Não achou IP válido', text_color='red')
                                        window.Refresh()
                                        troca_ip_estatica += 1
                                        raise Exception("Não achou IP válido")
                            elif vpn_nav == 'TouchVPN':
                                while True:
                                    chrome.execute_script(
                                        "window.open('a', 'new_tab')")
                                    janela_principal = chrome.driver.window_handles[0]
                                    nova_janela = chrome.driver.window_handles[-1]
                                    chrome.driver.switch_to.window(nova_janela)
                                    chrome.driver.get(url_extensao)
                                    chrome.wait_for_element("div[id=ConnectionButton]").click()
                                    chrome.wait_for_element("div[class=location]")
                                    chrome.wait_for_element("div[id=ConnectionButton]").click()
                                    time.sleep(3)
                                    chrome.driver.close()
                                    janela_principal = chrome.driver.window_handles[0]
                                    chrome.driver.switch_to.window(janela_principal)
                                    time.sleep(3)
                                    try:
                                        chrome.driver.uc_click(
                                            '''button[type='submit']''', 5)
                                    except:
                                        chrome.driver.uc_click(
                                            '''//button[@type='submit']''', 5)

                                    if len(chrome.find_elements("//select[@title='Ano:']")) == 1:
                                        print('IP aceito')
                                        break
                                    tentativa += 1
                                    if tentativa == 5:
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Não achou IP válido', text_color='red')
                                        window.Refresh()
                                        troca_ip_estatica += 1
                                        raise Exception("Não achou IP válido")
                                    
                            elif vpn_nav == 'CyberGhost':
                                while True:
                                    chrome.execute_script(
                                        "window.open('a', 'new_tab')")
                                    janela_principal = chrome.driver.window_handles[0]
                                    nova_janela = chrome.driver.window_handles[-1]
                                    chrome.driver.switch_to.window(nova_janela)
                                    chrome.driver.get(url_extensao)
                                    chrome.wait_for_element("div[class=spinner]").click()
                                    chrome.wait_for_element('//h4[text()="Start a Connection"]')
                                    time.sleep(2)
                                    chrome.wait_for_element("div[class=spinner]").click()
                                    while True:
                                        if chrome.find_elements('//h4[text()="Connected"]'):
                                            print('VPN Conectada')
                                            break
                                        elif chrome.find_elements('//h4[text()="connectPage.error"]'):
                                            chrome.wait_for_element("div[class=spinner]").click()
                                            chrome.wait_for_element('//h4[text()="Connected"]')
                                    
                                    chrome.driver.close()
                                    janela_principal = chrome.driver.window_handles[0]
                                    chrome.driver.switch_to.window(janela_principal)
                                    time.sleep(3)
                                    try:
                                        chrome.driver.uc_click(
                                            '''button[type='submit']''', 5)
                                    except:
                                        chrome.driver.uc_click(
                                            '''//button[@type='submit']''', 5)

                                    if len(chrome.find_elements("//select[@title='Ano:']")) == 1:
                                        print('IP aceito')
                                        break
                                    tentativa += 1
                                    if tentativa == 5:
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Não achou IP válido', text_color='red')
                                        window.Refresh()
                                        troca_ip_estatica += 1
                                        raise Exception("Não achou IP válido")
                                    
                            elif vpn_nav == 'ZenMate':
                                while True:
                                    chrome.execute_script(
                                        "window.open('a', 'new_tab')")
                                    janela_principal = chrome.driver.window_handles[0]
                                    nova_janela = chrome.driver.window_handles[-1]
                                    chrome.driver.switch_to.window(nova_janela)
                                    chrome.driver.get(url_extensao)
                                    chrome.wait_for_element("div.shield-container.active").click()
                                    time.sleep(2)
                                    while True:

                                        if chrome.find_elements('body > app-root > main > app-campaign > app-image-campaign > div > div.header.white > a > i'):
                                            
                                            chrome.find_element('body > app-root > main > app-campaign > app-image-campaign > div > div.header.white > a > i').click()

                                        elif chrome.find_elements('body > app-root > main > app-home > app-rate-us > div > div > button'):
                                            
                                            try:
                                                chrome.find_element('body > app-root > main > app-home > app-rate-us > div > div > button').click()
                                            except:
                                                pass
                                            break
                                        
                                        elif chrome.find_elements('div.shield-container'):
                                            break

                                    chrome.wait_for_element("div.shield-container").click()
                                    time.sleep(2)
                                    while True:
                                        if chrome.find_element('div.proxy-status-container > div.pt-1.location-info > a').text == 'Connected to':
                                            print('VPN Conectada')
                                            break
                                    
                                    chrome.driver.close()
                                    janela_principal = chrome.driver.window_handles[0]
                                    chrome.driver.switch_to.window(janela_principal)
                                    time.sleep(3)
                                    try:
                                        chrome.driver.uc_click(
                                            '''button[type='submit']''', 5)
                                    except:
                                        chrome.driver.uc_click(
                                            '''//button[@type='submit']''', 5)

                                    if len(chrome.find_elements("//select[@title='Ano:']")) == 1:
                                        print('IP aceito')
                                        break
                                    tentativa += 1
                                    if tentativa == 5:
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Não achou IP válido', text_color='red')
                                        window.Refresh()
                                        troca_ip_estatica += 1
                                        raise Exception("Não achou IP válido")
                        
                            elif vpn_nav == 'VeePN':
                                while True:
                                    chrome.execute_script(
                                        "window.open('a', 'new_tab')")
                                    janela_principal = chrome.driver.window_handles[0]
                                    nova_janela = chrome.driver.window_handles[-1]
                                    chrome.driver.switch_to.window(nova_janela)
                                    chrome.driver.get(url_extensao)
                                    chrome.wait_for_element('div[id=mainBtn]').click()
                                    time.sleep(3)
                                    chrome.wait_for_element('div[id=mainBtn]').click()
                                    while True:
                                        if chrome.find_element("div.description.fadeIn.linebreak").text == 'VPN is ON':
                                            print('VPN Conectada')
                                            break
                                        elif chrome.find_element("div.description.fadeIn.linebreak").text == 'VPN is OFF':
                                            chrome.wait_for_element('div[id=mainBtn]').click()
                                        elif chrome.find_elements("div.footer-decline-text"):
                                            chrome.wait_for_element("div.footer-decline-text").click()

                                    
                                    chrome.driver.close()
                                    janela_principal = chrome.driver.window_handles[0]
                                    chrome.driver.switch_to.window(janela_principal)
                                    time.sleep(3)
                                    try:
                                        chrome.driver.uc_click(
                                            '''button[type='submit']''', 5)
                                    except:
                                        chrome.driver.uc_click(
                                            '''//button[@type='submit']''', 5)

                                    if len(chrome.find_elements("//select[@title='Ano:']")) == 1:
                                        print('IP aceito')
                                        break
                                    tentativa += 1
                                    if tentativa == 5:
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Não achou IP válido', text_color='red')
                                        window.Refresh()
                                        troca_ip_estatica += 1
                                        raise Exception("Não achou IP válido")
                            elif vpn_nav == 'PlanetVPN':
                                while True:
                                    chrome.execute_script(
                                        "window.open('a', 'new_tab')")
                                    janela_principal = chrome.driver.window_handles[0]
                                    nova_janela = chrome.driver.window_handles[-1]
                                    chrome.driver.switch_to.window(nova_janela)
                                    chrome.driver.get(url_extensao)

                                    chrome.wait_for_element('button.button.button-connected').click()
                                    time.sleep(2)
                                    chrome.wait_for_element('button.button.button-disconnected').click()
                                    time.sleep(1)
                                    while True:
                                        if chrome.find_elements("button.button.button-connected"):
                                            print('VPN Conectada')
                                            break
                                        elif chrome.find_elements("button.button.button-disconnected"):
                                            chrome.find_element("button.button.button-disconnected").click()

                                    
                                    chrome.driver.close()
                                    janela_principal = chrome.driver.window_handles[0]
                                    chrome.driver.switch_to.window(janela_principal)
                                    time.sleep(3)
                                    try:
                                        chrome.driver.uc_click(
                                            '''button[type='submit']''', 5)
                                    except:
                                        chrome.driver.uc_click(
                                            '''//button[@type='submit']''', 5)

                                    if len(chrome.find_elements("//select[@title='Ano:']")) == 1:
                                        print('IP aceito')
                                        break
                                    tentativa += 1
                                    if tentativa == 5:
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Não achou IP válido', text_color='red')
                                        window.Refresh()
                                        troca_ip_estatica += 1
                                        raise Exception("Não achou IP válido")

                            elif vpn_nav == 'Troywell':
                                while True:
                                    chrome.execute_script(
                                        "window.open('a', 'new_tab')")
                                    janela_principal = chrome.driver.window_handles[0]
                                    nova_janela = chrome.driver.window_handles[-1]
                                    chrome.driver.switch_to.window(nova_janela)
                                    chrome.driver.get(url_extensao)

                                    chrome.wait_for_element('div.connect-button').click()
                                    time.sleep(2)
                                    chrome.wait_for_element("div.server-select__row").click()
                                    time.sleep(2)
                                    chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                                    while True:
                                        try:
                                            chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]", timeout=4).click()
                                            break
                                        except:
                                            chrome.driver.get(url_extensao)
                                            time.sleep(2)
                                            chrome.wait_for_element("div.server-select__row").click()
                                            time.sleep(2)
                                            chrome.wait_for_element("input.search__input").clear()
                                            chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                                            chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]").click()

                                    chrome.wait_for_element("div.connect-button").click()
                                    try:
                                        chrome.wait_for_element("div.connection-block__label")
                                    except:
                                        if chrome.find_elements("div.button.button_selected.connection-failed__button.connection-failed__button_blue"):
                                            chrome.find_element("div.button.button_selected.connection-failed__button.connection-failed__button_blue").click()
                                            chrome.wait_for_element("div.server-select__row").click()
                                            time.sleep(2)
                                            chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                                            chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]").click()
                                            chrome.wait_for_element("div.connect-button").click()
                                            chrome.wait_for_element("div.connection-block__label")
                                    time.sleep(1)
                                    while True:
                                        if chrome.find_elements("div.connection-block__label"):
                                            print('VPN Conectada')
                                            break
                                        elif chrome.find_elements("div.button.button_selected.connection-failed__button.connection-failed__button_blue"):
                                            chrome.find_element("div.button.button_selected.connection-failed__button.connection-failed__button_blue").click()
                                            chrome.wait_for_element("div.server-select__row").click()
                                            time.sleep(2)
                                            chrome.wait_for_element("input.search__input").send_keys(local_vpn)
                                            chrome.wait_for_element(f"(//div[@class='location__name' and text()='{local_vpn}'])[last()]").click()
                                            chrome.wait_for_element("div.connect-button").click()
                                            chrome.wait_for_element("div.connection-block__label")
                                    
                                    chrome.driver.close()
                                    janela_principal = chrome.driver.window_handles[0]
                                    chrome.driver.switch_to.window(janela_principal)
                                    time.sleep(3)
                                    try:
                                        chrome.driver.uc_click(
                                            '''button[type='submit']''', 5)
                                    except:
                                        chrome.driver.uc_click(
                                            '''//button[@type='submit']''', 5)

                                    if len(chrome.find_elements("//select[@title='Ano:']")) == 1:
                                        print('IP aceito')
                                        break
                                    tentativa += 1
                                    if tentativa == 5:
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Não achou IP válido', text_color='red')
                                        window.Refresh()
                                        troca_ip_estatica += 1
                                        raise Exception("Não achou IP válido")


                        try:
                            chrome.wait_for_element(
                                "//select[@title='Ano:']").send_keys(ano)
                        except:
                            print('IP Bloqueado')
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] IP Bloqueado ou Número bloqueado', text_color='red')
                            window.Refresh()

                        dia = str(random.randint(1, 28))
                        time.sleep(random.uniform(0.5, 2))
                        chrome.wait_for_element(
                            "//select[@title='Dia:']").send_keys(dia)
                        months = [
                            ("janeiro", 1),
                            ("fevereiro", 2),
                            ("março", 3),
                            ("abril", 4),
                            ("maio", 5),
                            ("junho", 6),
                            ("julho", 7),
                            ("agosto", 8),
                            ("setembro", 9),
                            ("outubro", 10),
                            ("novembro", 11),
                            ("dezembro", 12),
                        ]

                        random_month = random.choice(months)
                        month_text = random_month[0]

                        time.sleep(random.uniform(0.5, 2))
                        chrome.wait_for_element(
                            "//select[@title='Mês:']").send_keys(month_text)
                        time.sleep(2)
                        chrome.driver.uc_click('button:contains("Avançar")', 15)
                        if len(chrome.find_elements("//p[@id='ssfErrorAlert']")) == 1 or chrome.find_elements("//span[contains(text(), 'Não foi possível criar uma conta para você')]"):
                            print('IP Bloqueado ou Número bloqueado')
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] IP Bloqueado ou Número bloqueado', text_color='red')
                            window.Refresh()
                            d.app_start('pl.rs.sip.softphone.newapp')
                            time.sleep(5)
                            if d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').exists:
                                print('2NR deslogou')
                                d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(timeout=60)
                                time.sleep(5)

                                d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email2nr)
                                time.sleep(0.5)
                                d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha2nr)
                                time.sleep(0.5)
                                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                                time.sleep(3)
                            d.app_start('pl.rs.sip.softphone.newapp')
                            time.sleep(4)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                            time.sleep(1)
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                            window.Refresh()
                            raise Exception('skip')
                        captcha_element = chrome.find_elements(
                            "//input[@id='recaptcha-input']")
                        tentativas = 1
                        if len(captcha_element) == 1:
                            print('Resolvendo captcha')
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Resolvendo captcha')
                            window.Refresh()
                            while True:
                                try:
                                    # Check if the button is clickable
                                    button = WebDriverWait(chrome.driver, 3).until(EC.element_to_be_clickable(
                                        (By.XPATH, "//button[contains(text(), 'Avançar')]")))

                                    # Click the button once it's clickable
                                    chrome.driver.uc_click(
                                        'button:contains("Avançar")', 20)
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Captcha resolvido')
                                    window.Refresh()
                                    break  # Exit the loop once the button is clicked

                                except Exception as e:
                                    print(f"Captcha ainda não resolvido")

                                    # Wait for a short interval before checking again
                                    time.sleep(2)
                                    tentativas += 1
                                    if tentativas == 40:
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Captcha não pode ser resolvido')
                                        window.Refresh()
                                        print('Captcha não pode ser resolvido')
                                        raise Exception(' ')
                        else:
                            print('Sem Captcha')
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                        window.Refresh()
                        troca_ip_estatica = 0
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(5)
                        if d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').exists:
                            print('2NR deslogou')
                            d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(timeout=60)
                            time.sleep(5)

                            d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email2nr)
                            time.sleep(0.5)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha2nr)
                            time.sleep(0.5)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                            time.sleep(3)

                        d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()

                        try:
                            cod = d(
                                resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)

                        except:
                            codigo_não_recebido_seguidos += 1
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                            window.Refresh()
                            d.app_start('pl.rs.sip.softphone.newapp')
                            time.sleep(4)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                            time.sleep(1)
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                            window.Refresh()
                            raise Exception(' ')
                        cod = cod.replace(' ', '')
                        codigo = re.sub('[^0-9]', '', cod)[:6]
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                        window.Refresh()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonSettings').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                        codigo = cod
                        for codigo in cod:
                            chrome.send_keys(
                                "//input[@name='confirmationCode']", codigo)
                            time.sleep(random.uniform(0.1, 0.4))

                        time.sleep(random.uniform(0.5, 2))
                        chrome.driver.uc_click('button:contains("Confirmar")', 20)
                        tentativa_log = 0
                        while True:
                            if len(chrome.find_elements("//p[@id='phoneSignupConfirmErrorAlert']")) == 1:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Tentando relogar')
                                window.Refresh()
                                chrome.driver.uc_open_with_reconnect(url, 3)
                                try:
                                    chrome.driver.uc_click(
                                        'button:contains("Permitir todos os cookies")', 5)
                                    print('Cookies aceito')
                                    time.sleep(5)
                                except:
                                    print('Sem cookies')
                                for user in user_completo:
                                    chrome.send_keys(
                                        "//input[@name='username']", user)
                                    time.sleep(random.uniform(0.001, 0.05))
                                time.sleep(random.uniform(0.5, 2))
                                # chrome.type("//input[@name='password']", senha)
                                for password in senha:
                                    chrome.send_keys(
                                        "//input[@name='password']", password)
                                    time.sleep(random.uniform(0.001, 0.05))
                                time.sleep(2)
                                chrome.driver.uc_click(
                                    '''button[type='submit']''', 20)

                                if (
                                    "challenge" in chrome.driver.current_url or
                                    "suspended" in chrome.driver.current_url or
                                    len(chrome.find_elements("//div[contains(text(), 'Sua senha está incorreta. Confira-a.')]")) == 1 or
                                    len(chrome.find_elements("//div[text()='A sua conta foi desativada por violar nossos termos: http://instagram.com/about/legal/terms/']")) == 1 or
                                    len(chrome.find_elements("//div[text()='Houve um problema ao entrar no Instagram. Tente novamente em breve.']")) == 1 or
                                    len(chrome.find_elements("//div[text()='Não foi possível se conectar ao Instagram. Verifique se você está conectado à Internet e tente novamente.']")) == 1
                                ):
                                    print('Conta com SMS')
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] SMS.', text_color='red')
                                    window.Refresh()
                                    troca_ip += 1
                                    if troca_ip == 3:
                                        troca_ip = 1
                                        d.app_start('pl.rs.sip.softphone.newapp')
                                        time.sleep(5)
                                        if d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').exists:
                                            print('2NR deslogou')
                                            d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(
                                                timeout=60)
                                            time.sleep(5)

                                            d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(
                                                email2nr)
                                            time.sleep(0.5)
                                            d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(
                                                senha2nr)
                                            time.sleep(0.5)
                                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                                            time.sleep(3)
                                        d.app_start('pl.rs.sip.softphone.newapp')
                                        time.sleep(4)
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                                        time.sleep(1)
                                        d.xpath(
                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                                        window.Refresh()
                                        raise Exception('Número excluido')
                                    break
                            if "challenge" in chrome.driver.current_url or "suspended" in chrome.driver.current_url or len(chrome.find_elements("//div[contains(text(), 'Sua senha está incorreta. Confira-a.')]")) == 1:
                                print('Conta com SMS')
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] SMS.', text_color='red')
                                window.Refresh()
                                troca_ip += 1
                                if troca_ip == 3:
                                    troca_ip = 1
                                    d.app_start('pl.rs.sip.softphone.newapp')
                                    time.sleep(5)
                                    if d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').exists:
                                        print('2NR deslogou')
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(timeout=60)
                                        time.sleep(5)

                                        d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email2nr)
                                        time.sleep(0.5)
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha2nr)
                                        time.sleep(0.5)
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                                        time.sleep(3)
                                        d.app_start('pl.rs.sip.softphone.newapp')
                                        time.sleep(4)
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                                        time.sleep(1)
                                        d.xpath(
                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                                        window.Refresh()
                                        raise Exception('Número excluido')
                                break
                            if tentativa_log == 30:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Tempo excedido', text_color='red')
                                window.Refresh()
                                raise Exception('Tempo excedido')
                            tentativa_log += 1
                            time.sleep(2)
                            if len(chrome.find_elements("//span[contains(text(), 'Página inicial')]")) == 1:
                                print('Conta criada com sucesso')
                                time.sleep(4)
                                if len(chrome.find_elements("//span[text()='Permitir todos os cookies']")) == 1:
                                    try:
                                        chrome.driver.uc_click(
                                            "//span[text()='Permitir todos os cookies']", 5)
                                        print('Cookies aceito')
                                        time.sleep(5)
                                    except:
                                        print('Sem cookies')
                                troca_ip = 1
                                try:
                                    conteudo = config['vpn']
                                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                        text_color=('lime'))
                                    window.Refresh()
                                    contagem = contagem + 1
                                    window['criadas'].update(contagem)
                                    window.Refresh()
                                    now = datetime.now()
                                    now_brasilia = tz.localize(now)
                                    timestamp = now_brasilia.strftime(
                                        "%d/%m/%Y %H:%M:%S")
                                    try:
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                                            'credentials.json', scope)
                                        client = gspread.authorize(creds)

                                        spreadsheet_id = config['spreadsheet']
                                        sheet_name = 'contas'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, num, timestamp, maquina,
                                                vpn_nav + ' - ' + '2NR + NAV', local_vpn]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:F{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)

                                        rows = sheet.get_all_values()

                                        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                        regex = re.compile(r'\S+\s\S+')

                                        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                        num_rows = sum(
                                            1 for row in rows if regex.match(row[0]))
                                    except Exception as e:
                                        print(e)
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                        tempo_aleatorio = random.randint(10, 40)
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                        time.sleep(tempo_aleatorio)
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                                            'credentials.json', scope)
                                        client = gspread.authorize(creds)

                                        spreadsheet_id = config['spreadsheet']
                                        sheet_name = 'contas'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, num, timestamp,
                                                maquina, vpn_nav + ' - ' + '2NR + NAV', local_vpn]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:F{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)

                                        rows = sheet.get_all_values()

                                        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                        regex = re.compile(r'\S+\s\S+')

                                        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                        num_rows = sum(
                                            1 for row in rows if regex.match(row[0]))
                                    window['total'].update(num_rows)
                                    random_number = random.random()

                                    # Definir a chance desejada (10%)
                                    chance = 0.2

                                    # Verificar se o número aleatório está abaixo da chance
                                    if random_number < chance and not user_mysql == "wn3":
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                            funcionamento, scope)
                                        client = gspread.authorize(creds)

                                        spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                        sheet_name = 'relatorio_geral'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, num, timestamp, maquina,
                                                vpn_nav + ' - ' + '2NR + NAV', local_vpn, user_mysql]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:G{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)

                                except Exception as e:
                                    print(e)
                                
                                if config6['criar_por_cima']:
                                    chrome.driver.quit()
                                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Tentando criar por cima.')
                                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Abrindo instagram no emulador.')
                                    window.Refresh()
                                    d.app_start('com.instagram.android')
                                    d(text="Entrar").wait(timeout=60)
                                    time.sleep(2)
                                    d.set_fastinput_ime(True)
                                    d.settings['operation_delay'] = (.5, 1)
                                    d.settings['operation_delay_methods'] = ['click', 'swipe', 'drag', 'press', 'set_text']
                                    
                                    def escrever_devagar(element, text, delay=0.1):
                                        text_to_enter = ''
                                        element.clear_text()
                                        for char in text:
                                            text_to_enter += char
                                            element.set_text(text_to_enter)
                                            time.sleep(delay)

                                    escrever_devagar(d(className="android.widget.EditText", instance=0), user_completo, delay=0.2)
                                    #.set_text(user_completo)
                                    escrever_devagar(d(className="android.widget.EditText", instance=1), senha, delay=0.4)

                                    #.set_text(senha)
                                    d(text='Entrar').click()
                                    d(text="Agora não").click(timeout=60)
                                    d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=60)
                                    d(resourceId="com.instagram.android:id/netego_carousel_cta").click(timeout=60)
                                    if d(text="Não permitir acesso").wait(timeout=30):
                                        d(text="Não permitir acesso").click(timeout=60)
                                    seguir_sugeridos = 0
                                    while seguir_sugeridos < 10:
                                        d(resourceId="com.instagram.android:id/recommended_user_card_follow_button").click(timeout=60)
                                        d(resourceId="com.instagram.android:id/recommended_user_dismiss_button").click(timeout=60)
                                        time.sleep(0.5)
                                        seguir_sugeridos += 1

                                    d(resourceId="com.instagram.android:id/action_bar_button_back").click(timeout=10)
                                    d(resourceId="com.instagram.android:id/action_bar_title_chevron").click(timeout=30)
                                    d.xpath('/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout[2]/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.ListView/android.widget.LinearLayout[last()]/android.widget.FrameLayout/android.widget.ImageView').click(timeout=30)
                                    d(text="Criar nova conta").click(timeout=20)

                                    lista_user = random.choices(range(0, 9), k=2)
                                    lista_letras = random.choices(letras, k=2)
                                    nomea = fake.first_name_male().replace(" ", "")
                                    nome = unicodedata.normalize('NFKD', nomea).encode(
                                        'ASCII', 'ignore').decode('ASCII')
                                    sobrenomea = fake.last_name().replace(" ", "").lower()
                                    sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                                        'ASCII', 'ignore').decode('ASCII')
                                    nome_completo = nome + ' ' + sobrenome
                                    nome_completo_s = nome + sobrenome
                                    numeros_concatenados = ''.join(str(numero)
                                                                for numero in lista_user)
                                    user_completo1 = nome_completo_s + '' + \
                                        str(numeros_concatenados) + ''.join(lista_letras)
                                    user_completo = random.randint(1, len(user_completo1))
                                    string_with_dot = user_completo1[:user_completo] + \
                                        '_' + user_completo1[user_completo:]
                                    user_completo_antigo = string_with_dot.lower()
                                    escolha = random.choice(["_", "."])
                                    user_completo = nome + escolha + sobrenome + \
                                        str(numeros_concatenados) + ''.join(lista_letras)
                                    print(user_completo)
                                    window['output'].print(
                                        f'{linha_ret}')
                                    window.Refresh()
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] User: {user_completo}')
                                    window.Refresh()

                                    escrever_devagar(d(className="android.widget.EditText"), user_completo, delay=0.2)
                                    time.sleep(5)
                                    if d(text='EXCLUIR').exists:
                                        d.press("back")
                                    d(resourceId="com.instagram.android:id/button_text").click(timeout=20)

                                    try:
                                        senha = gerar_senha(12)
                                        print(senha)
                                        d(resourceId="com.instagram.android:id/password").wait(timeout=25)
                                        #d(resourceId="com.instagram.android:id/password").set_text(senha)
                                        escrever_devagar(d(resourceId="com.instagram.android:id/password"), senha, delay=0.2)

                                        d(text="Avançar").click(timeout=15)
                                        d(text="Adicionar novo telefone ou email").click(timeout=30)
                                        #ddi_insta = d(resourceId="com.instagram.android:id/country_code_picker").get_text(timeout=20)
                                        #ddi_bruto = re.findall(r'\d+', ddi_insta)
                                        #ddi = ''.join(ddi_bruto)
                                        num_insta = num.replace('+48', '')
                                        
                                        #num_insta = num_insta.replace(ddi, '')
                                        #d(text="Telefone").set_text(num_insta)
                                        escrever_devagar(d(className="android.widget.EditText"), num_insta, delay=0.2)

                                        d(text="Avançar").click(timeout=15)
                                        if d(text="Alterar número de telefone ou reenviar SMS").wait(timeout=10):
                                            d.app_start('pl.rs.sip.softphone.newapp')
                                            if d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').exists:
                                                print('2NR deslogou')
                                                d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(timeout=60)
                                                time.sleep(5)

                                                d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email2nr)
                                                time.sleep(0.5)
                                                d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha2nr)
                                                time.sleep(0.5)
                                                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                                                time.sleep(3)

                                            d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()

                                            try:
                                                try:
                                                    cod = d(
                                                        resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)
                                                except:
                                                    d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                                                    d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                                                    cod = d(
                                                        resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=5)

                                            except:
                                                codigo_não_recebido_seguidos += 1
                                                window['output'].print(
                                                    f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                                                window.Refresh()
                                                raise Exception(' ')
                                            cod = cod.replace(' ', '')
                                            codigo = re.sub('[^0-9]', '', cod)[:6]
                                            window['output'].print(
                                                f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                                            window.Refresh()
                                            escrever_devagar(d(className="android.widget.EditText"), codigo, delay=0.2)
                                            d(text="Avançar").click(timeout=10)
                                        try:
                                            d(text="Pular").wait(timeout=30)
                                        except:
                                            window['output'].print(
                                                f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                                            window.Refresh()
                                            try:
                                                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                                            stdout=subprocess.DEVNULL,
                                                            stderr=subprocess.DEVNULL, check=True, shell=True)

                                            except:
                                                pass

                                            conteudo = config['vpn']
                                            if conteudo == "AVG":
                                                vpn_avg()
                                            elif conteudo == "SurfShark":
                                                vpn_surf()
                                            elif conteudo == "Nenhuma":
                                                nenhuma_vpn()
                                            elif conteudo == "Avast":
                                                vpn_avast()
                                            elif conteudo == "ExpressVPN":
                                                vpn_express()
                                            elif conteudo == "PiaVPN":
                                                vpn_pia()
                                            elif conteudo == "TunnelBear":
                                                vpn_tunnelbear()
                                            elif conteudo == "BetterNet":
                                                vpn_better()
                                            elif conteudo == "CyberGhost":
                                                vpn_cyberghost()
                                            elif conteudo == "NordVPN":
                                                vpn_nord()
                                            elif conteudo == "HotspotShield":
                                                vpn_hotspotshield()
                                            elif conteudo == "WindscribeVPN":
                                                vpn_windscribe()
                                            elif conteudo == "HmaVPN":
                                                vpn_hma()
                                            else:
                                                window['output'].print(
                                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                                window.Refresh()
                                            raise Exception("Restrição")
                                        time.sleep(5)
                                        if d(text="Pular").wait(timeout=10):
                                            print('Conta criada')
                                            try:
                                                conteudo = config['vpn']
                                                window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                                    text_color=('lime'))
                                                window.Refresh()
                                                contagem = contagem + 1
                                                window['criadas'].update(contagem)
                                                window.Refresh()
                                                now = datetime.now()
                                                now_brasilia = tz.localize(now)
                                                timestamp = now_brasilia.strftime(
                                                    "%d/%m/%Y %H:%M:%S")
                                                try:
                                                    scope = ["https://spreadsheets.google.com/feeds",
                                                            "https://www.googleapis.com/auth/drive"]
                                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                                        'credentials.json', scope)
                                                    client = gspread.authorize(creds)

                                                    spreadsheet_id = config['spreadsheet']
                                                    sheet_name = 'contas'
                                                    # Insert user, password, and timestamp into first empty row
                                                    sheet = client.open_by_key(
                                                        spreadsheet_id).worksheet(sheet_name)
                                                    values = sheet.col_values(1)
                                                    last_row = len(values)
                                                    values = [user_completo + ' ' + senha, num, timestamp, maquina,
                                                            'CRIAÇÃO POR CIMA', local_vpn]
                                                    cell_list = sheet.range(
                                                        f'A{last_row + 1}:F{last_row + 1}')
                                                    for i, val in enumerate(values):
                                                        cell_list[i].value = val
                                                    sheet.update_cells(cell_list)

                                                    rows = sheet.get_all_values()

                                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                                    regex = re.compile(r'\S+\s\S+')

                                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                                    num_rows = sum(
                                                        1 for row in rows if regex.match(row[0]))
                                                except Exception as e:
                                                    print(e)
                                                    window['output'].print(
                                                        f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                                    tempo_aleatorio = random.randint(10, 40)
                                                    window['output'].print(
                                                        f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                                    time.sleep(tempo_aleatorio)
                                                    scope = ["https://spreadsheets.google.com/feeds",
                                                            "https://www.googleapis.com/auth/drive"]
                                                    creds = ServiceAccountCredentials.from_json_keyfile_name(
                                                        'credentials.json', scope)
                                                    client = gspread.authorize(creds)

                                                    spreadsheet_id = config['spreadsheet']
                                                    sheet_name = 'contas'
                                                    # Insert user, password, and timestamp into first empty row
                                                    sheet = client.open_by_key(
                                                        spreadsheet_id).worksheet(sheet_name)
                                                    values = sheet.col_values(1)
                                                    last_row = len(values)
                                                    values = [user_completo + ' ' + senha, num, timestamp,
                                                            maquina, 'CRIAÇÃO POR CIMA', local_vpn]
                                                    cell_list = sheet.range(
                                                        f'A{last_row + 1}:F{last_row + 1}')
                                                    for i, val in enumerate(values):
                                                        cell_list[i].value = val
                                                    sheet.update_cells(cell_list)

                                                    rows = sheet.get_all_values()

                                                    # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                                    regex = re.compile(r'\S+\s\S+')

                                                    # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                                    num_rows = sum(
                                                        1 for row in rows if regex.match(row[0]))
                                                window['total'].update(num_rows)
                                                random_number = random.random()

                                                # Definir a chance desejada (10%)
                                                chance = 0.2

                                                # Verificar se o número aleatório está abaixo da chance
                                                if random_number < chance and not user_mysql == "wn3":
                                                    scope = ["https://spreadsheets.google.com/feeds",
                                                            "https://www.googleapis.com/auth/drive"]
                                                    creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                                        funcionamento, scope)
                                                    client = gspread.authorize(creds)

                                                    spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                                    sheet_name = 'relatorio_geral'
                                                    # Insert user, password, and timestamp into first empty row
                                                    sheet = client.open_by_key(
                                                        spreadsheet_id).worksheet(sheet_name)
                                                    values = sheet.col_values(1)
                                                    last_row = len(values)
                                                    values = [user_completo + ' ' + senha, num, timestamp, maquina,
                                                            'CRIAÇÃO POR CIMA', local_vpn, user_mysql]
                                                    cell_list = sheet.range(
                                                        f'A{last_row + 1}:G{last_row + 1}')
                                                    for i, val in enumerate(values):
                                                        cell_list[i].value = val
                                                    sheet.update_cells(cell_list)

                                            except Exception as e:
                                                print(e)
                                            d(text="Pular").click(timeout=20)
                                            d(text="Pular").click_exists(timeout=5)

                                            if d(text="Pública").wait(timeout=5):
                                                d(text="Pública").click()
                                                d(text="Pular").click(timeout=20)
                                        else:
                                            print("SMS")
                                            window['output'].print(
                                                f'[{datetime.now().strftime("%H:%M:%S")}] SMS.')
                                            window.Refresh()
                                            try:
                                                subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                                            stdout=subprocess.DEVNULL,
                                                            stderr=subprocess.DEVNULL, check=True, shell=True)

                                            except:
                                                pass

                                            conteudo = config['vpn']
                                            if conteudo == "AVG":
                                                vpn_avg()
                                            elif conteudo == "SurfShark":
                                                vpn_surf()
                                            elif conteudo == "Nenhuma":
                                                nenhuma_vpn()
                                            elif conteudo == "Avast":
                                                vpn_avast()
                                            elif conteudo == "ExpressVPN":
                                                vpn_express()
                                            elif conteudo == "PiaVPN":
                                                vpn_pia()
                                            elif conteudo == "TunnelBear":
                                                vpn_tunnelbear()
                                            elif conteudo == "BetterNet":
                                                vpn_better()
                                            elif conteudo == "CyberGhost":
                                                vpn_cyberghost()
                                            elif conteudo == "NordVPN":
                                                vpn_nord()
                                            elif conteudo == "HotspotShield":
                                                vpn_hotspotshield()
                                            elif conteudo == "WindscribeVPN":
                                                vpn_windscribe()
                                            elif conteudo == "HmaVPN":
                                                vpn_hma()
                                            else:
                                                window['output'].print(
                                                    "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                                window.Refresh()
                                            raise Exception("Restrição")
                                            
                                        d(text="Pular").wait(timeout=60)
                                        d(text="Pular").click(timeout=20)
                                        d(text="Pular").wait(timeout=60)
                                        d(text="Pular").click(timeout=20)
                                        d(resourceId="com.instagram.android:id/action_bar_button_action").click(timeout=30)

                                    except Exception as e:
                                        if d(text="Aguarde alguns minutos antes de tentar novamente."):
                                            print('Restrição')
                                        else:
                                            print(f"Algum erro: {e}")

                                    try:
                                        while True:
                                            d(resourceId="com.instagram.android:id/tab_avatar").click(timeout=60)
                                            d(resourceId="com.instagram.android:id/action_bar_title_chevron").click(timeout=30)
                                            d.xpath('/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout[2]/android.widget.FrameLayout/android.widget.FrameLayout/android.view.ViewGroup/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.ListView/android.widget.LinearLayout[last()]/android.widget.FrameLayout/android.widget.ImageView').click(timeout=30)
                                            d(text="Criar nova conta").click(timeout=20)

                                            lista_user = random.choices(range(0, 9), k=2)
                                            lista_letras = random.choices(letras, k=2)
                                            nomea = fake.first_name_male().replace(" ", "")
                                            nome = unicodedata.normalize('NFKD', nomea).encode(
                                                'ASCII', 'ignore').decode('ASCII')
                                            sobrenomea = fake.last_name().replace(" ", "").lower()
                                            sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                                                'ASCII', 'ignore').decode('ASCII')
                                            nome_completo = nome + ' ' + sobrenome
                                            nome_completo_s = nome + sobrenome
                                            numeros_concatenados = ''.join(str(numero)
                                                                        for numero in lista_user)
                                            user_completo1 = nome_completo_s + '' + \
                                                str(numeros_concatenados) + ''.join(lista_letras)
                                            user_completo = random.randint(1, len(user_completo1))
                                            string_with_dot = user_completo1[:user_completo] + \
                                                '_' + user_completo1[user_completo:]
                                            user_completo_antigo = string_with_dot.lower()
                                            escolha = random.choice(["_", "."])
                                            user_completo = nome + escolha + sobrenome + \
                                                str(numeros_concatenados) + ''.join(lista_letras)
                                            print(user_completo)
                                            window['output'].print(
                                                f'{linha_ret}')
                                            window.Refresh()
                                            window['output'].print(
                                                f'[{datetime.now().strftime("%H:%M:%S")}] User: {user_completo}')
                                            window.Refresh()
                                            d(resourceId="com.instagram.android:id/username").set_text(user_completo)
                                            time.sleep(5)
                                            d(resourceId="com.instagram.android:id/button_text").click(timeout=20)
                                            senha = gerar_senha(12)
                                            print(senha)
                                            d(resourceId="com.instagram.android:id/password").wait(timeout=25)
                                            d(resourceId="com.instagram.android:id/password").set_text(senha)
                                            d(text="Avançar").click(timeout=15)

                                            if d(text="Adicione sua data de nascimento").wait(timeout=5):
                                                d(text="Avançar").click()
                                                d(text="OK").click(timeout=5)
                                                d(text="Inserir idade").click(timeout=5)
                                                d(resourceId="com.instagram.android:id/entered_age").set_text(random.randint(18, 50))
                                                d(text="Avançar").click(timeout=5)
                                                


                                            d(text="Adicionar novo telefone ou email").click(timeout=30)
                                            ddi_insta = d(resourceId="com.instagram.android:id/country_code_picker").get_text(timeout=20)
                                            ddi_bruto = re.findall(r'\d+', ddi_insta)
                                            ddi = ''.join(ddi_bruto)
                                            num_insta = num.replace('+', '')
                                            num_insta = num_insta.replace(ddi, '')
                                            d(text="Telefone").set_text(num_insta)
                                            d(text="Avançar").click(timeout=15)
                                            try:
                                                d(text="Pular").wait(timeout=30)
                                            except:
                                                window['output'].print(
                                                f'[{datetime.now().strftime("%H:%M:%S")}] Restrição.')
                                                window.Refresh()
                                                try:
                                                    subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                                                stdout=subprocess.DEVNULL,
                                                                stderr=subprocess.DEVNULL, check=True, shell=True)

                                                except:
                                                    pass

                                                conteudo = config['vpn']
                                                if conteudo == "AVG":
                                                    vpn_avg()
                                                elif conteudo == "SurfShark":
                                                    vpn_surf()
                                                elif conteudo == "Nenhuma":
                                                    nenhuma_vpn()
                                                elif conteudo == "Avast":
                                                    vpn_avast()
                                                elif conteudo == "ExpressVPN":
                                                    vpn_express()
                                                elif conteudo == "PiaVPN":
                                                    vpn_pia()
                                                elif conteudo == "TunnelBear":
                                                    vpn_tunnelbear()
                                                elif conteudo == "BetterNet":
                                                    vpn_better()
                                                elif conteudo == "CyberGhost":
                                                    vpn_cyberghost()
                                                elif conteudo == "NordVPN":
                                                    vpn_nord()
                                                elif conteudo == "HotspotShield":
                                                    vpn_hotspotshield()
                                                elif conteudo == "WindscribeVPN":
                                                    vpn_windscribe()
                                                elif conteudo == "HmaVPN":
                                                    vpn_hma()
                                                else:
                                                    window['output'].print(
                                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                                    window.Refresh()
                                                raise Exception("Restrição")
                                            
                                            time.sleep(5)
                                            if d(text="Pular").wait(timeout=10):
                                                print('Conta criada')
                                                try:
                                                    conteudo = config['vpn']
                                                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                                        text_color=('lime'))
                                                    window.Refresh()
                                                    contagem = contagem + 1
                                                    window['criadas'].update(contagem)
                                                    window.Refresh()
                                                    now = datetime.now()
                                                    now_brasilia = tz.localize(now)
                                                    timestamp = now_brasilia.strftime(
                                                        "%d/%m/%Y %H:%M:%S")
                                                    try:
                                                        scope = ["https://spreadsheets.google.com/feeds",
                                                                "https://www.googleapis.com/auth/drive"]
                                                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                                                            'credentials.json', scope)
                                                        client = gspread.authorize(creds)

                                                        spreadsheet_id = config['spreadsheet']
                                                        sheet_name = 'contas'
                                                        # Insert user, password, and timestamp into first empty row
                                                        sheet = client.open_by_key(
                                                            spreadsheet_id).worksheet(sheet_name)
                                                        values = sheet.col_values(1)
                                                        last_row = len(values)
                                                        values = [user_completo + ' ' + senha, num, timestamp, maquina,
                                                                'CRIAÇÃO POR CIMA', local_vpn]
                                                        cell_list = sheet.range(
                                                            f'A{last_row + 1}:F{last_row + 1}')
                                                        for i, val in enumerate(values):
                                                            cell_list[i].value = val
                                                        sheet.update_cells(cell_list)

                                                        rows = sheet.get_all_values()

                                                        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                                        regex = re.compile(r'\S+\s\S+')

                                                        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                                        num_rows = sum(
                                                            1 for row in rows if regex.match(row[0]))
                                                    except Exception as e:
                                                        print(e)
                                                        window['output'].print(
                                                            f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                                        tempo_aleatorio = random.randint(10, 40)
                                                        window['output'].print(
                                                            f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                                        time.sleep(tempo_aleatorio)
                                                        scope = ["https://spreadsheets.google.com/feeds",
                                                                "https://www.googleapis.com/auth/drive"]
                                                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                                                            'credentials.json', scope)
                                                        client = gspread.authorize(creds)

                                                        spreadsheet_id = config['spreadsheet']
                                                        sheet_name = 'contas'
                                                        # Insert user, password, and timestamp into first empty row
                                                        sheet = client.open_by_key(
                                                            spreadsheet_id).worksheet(sheet_name)
                                                        values = sheet.col_values(1)
                                                        last_row = len(values)
                                                        values = [user_completo + ' ' + senha, num, timestamp,
                                                                maquina, 'CRIAÇÃO POR CIMA', local_vpn]
                                                        cell_list = sheet.range(
                                                            f'A{last_row + 1}:F{last_row + 1}')
                                                        for i, val in enumerate(values):
                                                            cell_list[i].value = val
                                                        sheet.update_cells(cell_list)

                                                        rows = sheet.get_all_values()

                                                        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                                        regex = re.compile(r'\S+\s\S+')

                                                        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                                        num_rows = sum(
                                                            1 for row in rows if regex.match(row[0]))
                                                    window['total'].update(num_rows)
                                                    random_number = random.random()

                                                    # Definir a chance desejada (10%)
                                                    chance = 0.2

                                                    # Verificar se o número aleatório está abaixo da chance
                                                    if random_number < chance and not user_mysql == "wn3":
                                                        scope = ["https://spreadsheets.google.com/feeds",
                                                                "https://www.googleapis.com/auth/drive"]
                                                        creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                                            funcionamento, scope)
                                                        client = gspread.authorize(creds)

                                                        spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                                        sheet_name = 'relatorio_geral'
                                                        # Insert user, password, and timestamp into first empty row
                                                        sheet = client.open_by_key(
                                                            spreadsheet_id).worksheet(sheet_name)
                                                        values = sheet.col_values(1)
                                                        last_row = len(values)
                                                        values = [user_completo + ' ' + senha, num, timestamp, maquina,
                                                                'CRIAÇÃO POR CIMA', local_vpn, user_mysql]
                                                        cell_list = sheet.range(
                                                            f'A{last_row + 1}:G{last_row + 1}')
                                                        for i, val in enumerate(values):
                                                            cell_list[i].value = val
                                                        sheet.update_cells(cell_list)

                                                except Exception as e:
                                                    print(e)
                                                d(text="Pular").click(timeout=20)
                                                d(text="Pular").click_exists(timeout=5)

                                                if d(text="Pública").wait(timeout=5):
                                                    d(text="Pública").click()
                                                    d(text="Pular").click(timeout=20)
                                            else:
                                                print("SMS")
                                                window['output'].print(
                                                    f'[{datetime.now().strftime("%H:%M:%S")}] SMS')
                                                window.Refresh()
                                                try:
                                                    subprocess.run(f'adb -s {porta} shell pm clear com.instagram.android',
                                                                stdout=subprocess.DEVNULL,
                                                                stderr=subprocess.DEVNULL, check=True, shell=True)

                                                except:
                                                    pass

                                                conteudo = config['vpn']
                                                if conteudo == "AVG":
                                                    vpn_avg()
                                                elif conteudo == "SurfShark":
                                                    vpn_surf()
                                                elif conteudo == "Nenhuma":
                                                    nenhuma_vpn()
                                                elif conteudo == "Avast":
                                                    vpn_avast()
                                                elif conteudo == "ExpressVPN":
                                                    vpn_express()
                                                elif conteudo == "PiaVPN":
                                                    vpn_pia()
                                                elif conteudo == "TunnelBear":
                                                    vpn_tunnelbear()
                                                elif conteudo == "BetterNet":
                                                    vpn_better()
                                                elif conteudo == "CyberGhost":
                                                    vpn_cyberghost()
                                                elif conteudo == "NordVPN":
                                                    vpn_nord()
                                                elif conteudo == "HotspotShield":
                                                    vpn_hotspotshield()
                                                elif conteudo == "WindscribeVPN":
                                                    vpn_windscribe()
                                                elif conteudo == "HmaVPN":
                                                    vpn_hma()
                                                else:
                                                    window['output'].print(
                                                        "Verifique se escreveu certo a VPN que deseja.\nOBS: Não pode conter espaços e o conteúdo tem que ser todo minúsculo")
                                                    window.Refresh()
                                                raise Exception("Restrição")
                                                
                                            d(text="Pular").wait(timeout=60)
                                            d(text="Pular").click(timeout=20)
                                            d(text="Pular").wait(timeout=60)
                                            d(text="Pular").click(timeout=20)
                                            d(resourceId="com.instagram.android:id/action_bar_button_action").click(timeout=30)

                                    except Exception as e:
                                        print(f"Algum erro no processo de criação por cima: {e}")


                                break
                else:
                    with SB(uc=False, demo=False, locale_code='pt-br', headless=nav_oculto, incognito=True, extension_dir=rf'.\storage\recaptcha', extension_zip=rf'{caminho_atual}\storage\{vpn_usada}.crx') as chrome:
                        time.sleep(5)

                        if vpn_usada == 'urbanvpn':
                            file_path = './storage/urbanvpn.crx'
                            import zipfile

                            if os.path.exists("./storage/urbanvpn.crx"):
                                result = f"A pasta 'urbanvpn' já existe em '{file_path}'."
                            else:
                                # URL para download
                                url = 'https://www.dropbox.com/scl/fi/y6i5kltqi7vl20v7rc8fp/urbanvpn.crx?rlkey=goarhqxyvz7lgd9m1f2co4cf9&st=vvdo4oy2&dl=1'

                                # Fazendo o download do arquivo
                                response = requests.get(url)
                                if response.status_code == 200:
                                    with open(file_path, 'wb') as file:
                                        file.write(response.content)
                                    print("Arquivo 'urbanvpn.crx' baixado e salvo em './storage/urbanvpn.crx'.")

                                else:
                                    result = "Não foi possível baixar o arquivo. Status Code: " + \
                                        str(response.status_code)
                            
                            time.sleep(3)
                            
                            chrome.open('chrome://extensions/')
                            extensoes = chrome.execute_script(
                                'return document.querySelector("extensions-manager").shadowRoot.querySelector("extensions-item-list").shadowRoot.querySelectorAll("extensions-item");'
                            )

                            id_extensao = None
                            for ext in extensoes:
                                nome_ext = chrome.execute_script('return arguments[0].shadowRoot.querySelector("#name").innerText;', ext)
                                if "Urban" in nome_ext:  # Substitua pelo nome da sua extensão
                                    id_extensao = chrome.execute_script('return arguments[0].getAttribute("id");', ext)
                                    break

                            if id_extensao:
                                # Use o ID da extensão para abrir a página da extensão
                                url_extensao = f'chrome-extension://{id_extensao}/popup/index.html'
                                
                            else:
                                print("ID da extensão não encontrado")
                            
                            chrome.driver.get(url_extensao)
                            while True:
                                if chrome.driver.window_handles[0] == chrome.driver.window_handles[-1]:
                                    pass
                                elif chrome.driver.window_handles[0] != chrome.driver.window_handles[-1]:
                                    chrome.driver.switch_to.window(
                                        chrome.driver.window_handles[-1])
                                    # Verificar se a URL está correta e fechar a aba
                                    if "https://www.urban-vpn.com/" in chrome.driver.current_url:
                                        chrome.driver.close()
                                    # Alternar de volta para a aba original
                                    chrome.driver.switch_to.window(
                                        chrome.driver.window_handles[0])
                                    break
                            chrome.wait_for_element('button.button.button--pink.consent-text-controls__action').click()
                            time.sleep(0.5)
                            chrome.wait_for_element('button.button.button--pink.consent-text-controls__action').click()
                            locais = ['Australia', 'Germany', 'United Kingdom', 'United States', 'Belgium', 'Brazil', 'Canada', 'Denmark', 'France', 'India', 'Indonesia', 'Japan', 'Luxembourg', 'Poland', 'Portugal', 'Romania', 'Singapore', 'Africa', 'Sweden', 'Switzerland', 'Turkey', 'Spain']
                            local_vpn = random.choice(locais)
                            print(local_vpn)
                            chrome.wait_for_element('input[class=select-location__input]').send_keys(local_vpn)
                            chrome.wait_for_element('li[class=locations__item]').click()
                            time.sleep(3)
                            if chrome.find_elements('span.timer.main-page__timer'):
                                while True:
                                    cronometro = chrome.find_element('span.timer.main-page__timer').text
                                    cronometro = cronometro.replace(" :", "")
                                    cronometro = cronometro.replace(" ", "")
                                    #print(cronometro)
                                    if int(cronometro) > 000000:
                                        print('VPN Conectada')
                                        break

                        janela_principal = chrome.driver.window_handles[0]
                        chrome.driver.switch_to.window(janela_principal)
                        url = f"https://www.instagram.com/"
                        chrome.set_window_size(800, 800)
                        chrome.driver.get(url)
                        time.sleep(5)
                        try:
                            chrome.wait_for_element('button:contains("Permitir todos os cookies")').click()
                            print('Cookies aceito')
                            time.sleep(5)
                            chrome.driver.refresh()
                            #chrome.wait_for_element_not_present('button:contains("Permitir todos os cookies")').click()
                        except:
                            print('Sem cookies')
                        chrome.wait_for_element(
                            "a[href='/accounts/emailsignup/']", timeout=60).click()

                        lista_user = random.choices(range(0, 9), k=2)
                        lista_letras = random.choices(letras, k=2)
                        nomea = fake.first_name_male().replace(" ", "")
                        nome = unicodedata.normalize('NFKD', nomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        sobrenomea = fake.last_name().replace(" ", "").lower()
                        sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                            'ASCII', 'ignore').decode('ASCII')
                        nome_completo = nome + ' ' + sobrenome
                        nome_completo_s = nome + sobrenome
                        numeros_concatenados = ''.join(str(numero)
                                                    for numero in lista_user)
                        user_completo1 = nome_completo_s + '' + \
                            str(numeros_concatenados) + ''.join(lista_letras)
                        user_completo = random.randint(1, len(user_completo1))
                        string_with_dot = user_completo1[:user_completo] + \
                            '_' + user_completo1[user_completo:]
                        user_completo_antigo = string_with_dot.lower()
                        escolha = random.choice(["_", "."])
                        user_completo = nome + escolha + sobrenome + \
                            str(numeros_concatenados) + ''.join(lista_letras)

                        print(user_completo)
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] User: {user_completo}')
                        window.Refresh()
                        senha = gerar_senha(12)
                        print(senha)
                        num = f'+48{num}'
                        chrome.type("//input[@name='emailOrPhone']", num)
                        #for numero in num:
                        #    chrome.send_keys(
                        #        "//input[@name='emailOrPhone']", f'{numero}')
                        #    time.sleep(random.uniform(0.001, 0.05))
                        time.sleep(random.uniform(0.5, 2))
                        chrome.type("//input[@name='fullName']", nome_completo)
                        #for nome in nome_completo:
                        #    chrome.send_keys("//input[@name='fullName']", nome)
                        #    time.sleep(random.uniform(0.001, 0.05))
                        time.sleep(random.uniform(0.5, 2))
                        chrome.type("//input[@name='username']", user_completo)
                        #    for user in user_completo:
                        #        chrome.send_keys("//input[@name='username']", user)
                        #        time.sleep(random.uniform(0.001, 0.05))
                        time.sleep(random.uniform(0.5, 2))
                        chrome.type("//input[@name='password']", senha)
                        #    for password in senha:
                        #        chrome.send_keys("//input[@name='password']", password)
                        #        time.sleep(random.uniform(0.001, 0.05))
                        time.sleep(random.uniform(0.5, 2))
                        time.sleep(5)
                        chrome.wait_for_element('''button[type='submit']''').click()
                        ano = str(random.randint(1960, 2000))
                        try:
                            chrome.wait_for_element(
                                "//select[@title='Ano:']", timeout=15)
                        except:
                            pass
                        if len(chrome.find_elements("//input[@name='emailOrPhone']")) == 1:
                            print('IP Bloqueado, procurando outro IP')
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] IP Bloqueado')
                            window.Refresh()

                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Procurando outro IP')
                            window.Refresh()
                            tentativa = 1
                        
                                    
                            if vpn_nav == 'UrbanVPN':
                                while True:
                                    chrome.execute_script(
                                        "window.open('a', 'new_tab')")
                                    janela_principal = chrome.driver.window_handles[0]
                                    nova_janela = chrome.driver.window_handles[-1]
                                    chrome.driver.switch_to.window(nova_janela)
                                    chrome.driver.get(url_extensao)
                                    time.sleep(1)
                                    if chrome.find_elements("#app > div > div.simple-layout.rate-us-page > div.simple-layout__header > div"):
                                        chrome.find_element("#app > div > div.simple-layout.rate-us-page > div.simple-layout__header > div").click()
                                        
                                    chrome.wait_for_element('div.play-button.play-button--pause').click()
                                    time.sleep(0.5)
                                    chrome.driver.get(url_extensao)
                                    time.sleep(2)
                                    if chrome.find_elements("#app > div > div.simple-layout.rate-us-page > div.simple-layout__header > div"):
                                        chrome.find_element("#app > div > div.simple-layout.rate-us-page > div.simple-layout__header > div").click()

                                    chrome.wait_for_element('div.play-button.play-button--play').click()
                                    time.sleep(0.5)
                                    if chrome.find_elements('span.timer.main-page__timer'):
                                        while True:
                                            cronometro = chrome.find_element('span.timer.main-page__timer').text
                                            cronometro = cronometro.replace(" :", "")
                                            cronometro = cronometro.replace(" ", "")
                                            #print(cronometro)
                                            if int(cronometro) > 000000:
                                                print('VPN Conectada')
                                                break
                                    
                                    chrome.driver.close()
                                    janela_principal = chrome.driver.window_handles[0]
                                    chrome.driver.switch_to.window(janela_principal)
                                    time.sleep(3)
                                    try:
                                        chrome.wait_for_element(
                                            '''button[type='submit']''').click()
                                    except:
                                        chrome.wait_for_element(
                                            '''//button[@type='submit']''').click()
                                    time.sleep(10)
                                    if len(chrome.find_elements("//select[@title='Ano:']")) == 1:
                                        print('IP aceito')
                                        break
                                    tentativa += 1
                                    if tentativa == 5:
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Não achou IP válido', text_color='red')
                                        window.Refresh()
                                        chrome.driver.quit()
                                        raise Exception("Não achou IP válido")
                        

                        try:
                            chrome.wait_for_element(
                                "//select[@title='Ano:']").send_keys(ano)
                        except:
                            print('IP Bloqueado')
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] IP Bloqueado ou Número bloqueado', text_color='red')
                            window.Refresh()
                            chrome.driver.quit()

                        dia = str(random.randint(1, 28))
                        time.sleep(random.uniform(0.5, 2))
                        chrome.wait_for_element(
                            "//select[@title='Dia:']").send_keys(dia)
                        months = [
                            ("janeiro", 1),
                            ("fevereiro", 2),
                            ("março", 3),
                            ("abril", 4),
                            ("maio", 5),
                            ("junho", 6),
                            ("julho", 7),
                            ("agosto", 8),
                            ("setembro", 9),
                            ("outubro", 10),
                            ("novembro", 11),
                            ("dezembro", 12),
                        ]

                        random_month = random.choice(months)
                        month_text = random_month[0]

                        time.sleep(random.uniform(0.5, 2))
                        chrome.wait_for_element(
                            "//select[@title='Mês:']").send_keys(month_text)
                        time.sleep(2)
                        chrome.wait_for_element('button:contains("Avançar")').click()
                        time.sleep(10)
                        if len(chrome.find_elements("//p[@id='ssfErrorAlert']")) == 1:
                            print('IP Bloqueado ou Número bloqueado')
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] IP Bloqueado ou Número bloqueado', text_color='red')
                            window.Refresh()
                            d.app_start('pl.rs.sip.softphone.newapp')
                            time.sleep(5)
                            if d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').exists:
                                print('2NR deslogou')
                                d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(timeout=60)
                                time.sleep(5)

                                d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email2nr)
                                time.sleep(0.5)
                                d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha2nr)
                                time.sleep(0.5)
                                d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                                time.sleep(3)
                            d.app_start('pl.rs.sip.softphone.newapp')
                            time.sleep(4)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                            time.sleep(1)
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                            window.Refresh()
                            chrome.driver.quit()
                            raise Exception('skip')
                        captcha_element = chrome.find_elements(
                            "//input[@id='recaptcha-input']")
                        tentativas = 1
                        if len(captcha_element) == 1:
                            print('Resolvendo captcha')
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Resolvendo captcha')
                            window.Refresh()
                            while True:
                                try:
                                    # Check if the button is clickable
                                    button = WebDriverWait(chrome.driver, 3).until(EC.element_to_be_clickable(
                                        (By.XPATH, "//button[contains(text(), 'Avançar')]")))

                                    # Click the button once it's clickable
                                    chrome.wait_for_element('button:contains("Avançar")').click()
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] Captcha resolvido')
                                    window.Refresh()
                                    break  # Exit the loop once the button is clicked

                                except Exception as e:
                                    print(f"Captcha ainda não resolvido")

                                    # Wait for a short interval before checking again
                                    time.sleep(2)
                                    tentativas += 1
                                    if tentativas == 40:
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Captcha não pode ser resolvido')
                                        window.Refresh()
                                        print('Captcha não pode ser resolvido')
                                        raise Exception(' ')
                        else:
                            print('Sem Captcha')
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando código...')
                        window.Refresh()
                        d.app_start('pl.rs.sip.softphone.newapp')
                        time.sleep(5)
                        if d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').exists:
                            print('2NR deslogou')
                            d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(timeout=60)
                            time.sleep(5)

                            d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email2nr)
                            time.sleep(0.5)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha2nr)
                            time.sleep(0.5)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                            time.sleep(3)

                        d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()

                        try:
                            try:
                                cod = d(
                                    resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=80)
                            except:
                                d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                                d(resourceId='pl.rs.sip.softphone.newapp:id/messages').click()
                                cod = d(
                                    resourceId='pl.rs.sip.softphone.newapp:id/message').get_text(timeout=5)

                        except:
                            codigo_não_recebido_seguidos += 1
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Código não recebido.')
                            window.Refresh()
                            d.app_start('pl.rs.sip.softphone.newapp')
                            time.sleep(4)
                            d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                            time.sleep(1)
                            d.xpath(
                                '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                            window.Refresh()
                            chrome.driver.quit()
                            raise Exception(' ')
                        cod = cod.replace(' ', '')
                        codigo = re.sub('[^0-9]', '', cod)[:6]
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Codigo recebido: {codigo}')
                        window.Refresh()
                        codigo = cod
                        for codigo in cod:
                            chrome.send_keys(
                                "//input[@name='confirmationCode']", codigo)
                            time.sleep(random.uniform(0.1, 0.4))

                        time.sleep(random.uniform(0.5, 2))
                        chrome.wait_for_element('button:contains("Confirmar")').click()
                        time.sleep(15)
                        while True:
                            if len(chrome.find_elements("//p[@id='phoneSignupConfirmErrorAlert']")) == 1:
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Tentando relogar')
                                window.Refresh()
                                chrome.driver.get(url)
                                try:
                                    chrome.wait_for_element(
                                        'button:contains("Permitir todos os cookies")').click()
                                    print('Cookies aceito')
                                    time.sleep(5)
                                except:
                                    print('Sem cookies')
                                for user in user_completo:
                                    chrome.send_keys(
                                        "//input[@name='username']", user)
                                    time.sleep(random.uniform(0.001, 0.05))
                                time.sleep(random.uniform(0.5, 2))
                                # chrome.type("//input[@name='password']", senha)
                                for password in senha:
                                    chrome.send_keys(
                                        "//input[@name='password']", password)
                                    time.sleep(random.uniform(0.001, 0.05))
                                time.sleep(2)
                                chrome.wait_for_element(
                                    '''button[type='submit']''').click()
                                time.sleep(20)

                                if (
                                    "challenge" in chrome.driver.current_url or
                                    "suspended" in chrome.driver.current_url or
                                    len(chrome.find_elements("//div[contains(text(), 'Sua senha está incorreta. Confira-a.')]")) == 1 or
                                    len(chrome.find_elements("//div[text()='A sua conta foi desativada por violar nossos termos: http://instagram.com/about/legal/terms/']")) == 1 or
                                    len(chrome.find_elements("//div[text()='Houve um problema ao entrar no Instagram. Tente novamente em breve.']")) == 1 or
                                    len(chrome.find_elements("//div[text()='Não foi possível se conectar ao Instagram. Verifique se você está conectado à Internet e tente novamente.']")) == 1
                                ):
                                    print('Conta com SMS')
                                    window['output'].print(
                                        f'[{datetime.now().strftime("%H:%M:%S")}] SMS.', text_color='red')
                                    window.Refresh()
                                    troca_ip += 1
                                    if troca_ip == 3:
                                        troca_ip = 1
                                        d.app_start('pl.rs.sip.softphone.newapp')
                                        time.sleep(5)
                                        if d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').exists:
                                            print('2NR deslogou')
                                            d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(
                                                timeout=60)
                                            time.sleep(5)

                                            d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(
                                                email2nr)
                                            time.sleep(0.5)
                                            d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(
                                                senha2nr)
                                            time.sleep(0.5)
                                            d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                                            time.sleep(3)
                                        d.app_start('pl.rs.sip.softphone.newapp')
                                        time.sleep(4)
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                                        time.sleep(1)
                                        d.xpath(
                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                                        window.Refresh()
                                        chrome.driver.quit()
                                        raise Exception('Número excluido')
                                    break
                            if "challenge" in chrome.driver.current_url or "suspended" in chrome.driver.current_url or len(chrome.find_elements("//div[contains(text(), 'Sua senha está incorreta. Confira-a.')]")) == 1:
                                print('Conta com SMS')
                                chrome.driver.quit()
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] SMS.', text_color='red')
                                window.Refresh()
                                troca_ip += 1
                                if troca_ip == 3:
                                    troca_ip = 1
                                    d.app_start('pl.rs.sip.softphone.newapp')
                                    time.sleep(5)
                                    if d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').exists:
                                        print('2NR deslogou')
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/loginButton').click(timeout=60)
                                        time.sleep(5)

                                        d(resourceId='pl.rs.sip.softphone.newapp:id/emailEdiText').set_text(email2nr)
                                        time.sleep(0.5)
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/passwordEdiText').set_text(senha2nr)
                                        time.sleep(0.5)
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonLogin').click()
                                        time.sleep(3)
                                        d.app_start('pl.rs.sip.softphone.newapp')
                                        time.sleep(4)
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/numbers').click()
                                        time.sleep(1)
                                        d.xpath(
                                            '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.FrameLayout/androidx.appcompat.widget.LinearLayoutCompat/android.widget.FrameLayout[1]/android.widget.FrameLayout/android.widget.FrameLayout/android.widget.LinearLayout/android.widget.LinearLayout[2]/androidx.recyclerview.widget.RecyclerView/androidx.cardview.widget.CardView[1]/androidx.appcompat.widget.LinearLayoutCompat').click()
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonDelete').click()
                                        d(resourceId='pl.rs.sip.softphone.newapp:id/buttonAgree').click()
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Número excluído.')
                                        window.Refresh()
                                        chrome.driver.quit()
                                        raise Exception('Número excluido')
                                break
                            if len(chrome.find_elements("//span[contains(text(), 'Página inicial')]")) == 1:
                                print('Conta criada com sucesso')
                                time.sleep(4)
                                if len(chrome.find_elements("//span[text()='Permitir todos os cookies']")) == 1:
                                    try:
                                        chrome.wait_for_element(
                                            "//span[text()='Permitir todos os cookies']").click()
                                        print('Cookies aceito')
                                        time.sleep(5)
                                    except:
                                        print('Sem cookies')
                                troca_ip = 1
                                chrome.driver.quit()
                                try:
                                    conteudo = config['vpn']
                                    window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                                        text_color=('lime'))
                                    window.Refresh()
                                    contagem = contagem + 1
                                    window['criadas'].update(contagem)
                                    window.Refresh()
                                    now = datetime.now()
                                    now_brasilia = tz.localize(now)
                                    timestamp = now_brasilia.strftime(
                                        "%d/%m/%Y %H:%M:%S")
                                    try:
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                                            'credentials.json', scope)
                                        client = gspread.authorize(creds)

                                        spreadsheet_id = config['spreadsheet']
                                        sheet_name = 'contas'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, num, timestamp, maquina,
                                                vpn_nav + ' - ' + '2NR + NAV', local_vpn]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:F{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)

                                        rows = sheet.get_all_values()

                                        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                        regex = re.compile(r'\S+\s\S+')

                                        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                        num_rows = sum(
                                            1 for row in rows if regex.match(row[0]))
                                    except Exception as e:
                                        print(e)
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Ocorreu um erro ao salvar a conta na planilha.')
                                        tempo_aleatorio = random.randint(10, 40)
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Aguardando {tempo_aleatorio} segundos para tentar novamente.')
                                        time.sleep(tempo_aleatorio)
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_name(
                                            'credentials.json', scope)
                                        client = gspread.authorize(creds)

                                        spreadsheet_id = config['spreadsheet']
                                        sheet_name = 'contas'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, num, timestamp,
                                                maquina, vpn_nav + ' - ' + '2NR + NAV', local_vpn]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:F{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)

                                        rows = sheet.get_all_values()

                                        # Definir uma expressão regular para filtrar as linhas que atendem ao formato especificado
                                        regex = re.compile(r'\S+\s\S+')

                                        # Filtrar as linhas que atendem à expressão regular e contar o número de linhas
                                        num_rows = sum(
                                            1 for row in rows if regex.match(row[0]))
                                    window['total'].update(num_rows)
                                    random_number = random.random()

                                    # Definir a chance desejada (10%)
                                    chance = 0.2

                                    # Verificar se o número aleatório está abaixo da chance
                                    if random_number < chance and not user_mysql == "wn3":
                                        scope = ["https://spreadsheets.google.com/feeds",
                                                "https://www.googleapis.com/auth/drive"]
                                        creds = ServiceAccountCredentials.from_json_keyfile_dict(
                                            funcionamento, scope)
                                        client = gspread.authorize(creds)

                                        spreadsheet_id = '1qQHRYiycNm1PXpMbOioOJ9sdMX1oFpnB6-x7WSGjuP4'
                                        sheet_name = 'relatorio_geral'
                                        # Insert user, password, and timestamp into first empty row
                                        sheet = client.open_by_key(
                                            spreadsheet_id).worksheet(sheet_name)
                                        values = sheet.col_values(1)
                                        last_row = len(values)
                                        values = [user_completo + ' ' + senha, num, timestamp, maquina,
                                                vpn_nav + ' - ' + '2NR + NAV', local_vpn, user_mysql]
                                        cell_list = sheet.range(
                                            f'A{last_row + 1}:G{last_row + 1}')
                                        for i, val in enumerate(values):
                                            cell_list[i].value = val
                                        sheet.update_cells(cell_list)

                                except Exception as e:
                                    print(e)
                                    try:
                                        chrome.driver.quit()
                                    except:
                                        pass
                                break
            except:
                try:
                    chrome.driver.quit()
                except:
                    pass
                traceback.print_exc()
        except:
            traceback.print_exc()
            try:
                chrome.driver.quit()
            except:
                pass


def instaface_criarinsta():
    global parar
    global chrome
    dados_brutos = f"""
        {texto_digitado}
    """
    import email
    from selenium import webdriver
    from selenium.webdriver.common.by import By
    from selenium.webdriver.chrome.service import Service
    from webdriver_manager.chrome import ChromeDriverManager
    import time
    import traceback
    import random
    import base64
    import re
    from email.header import decode_header
    import requests
    import unicodedata
    from faker import Faker
    fake = Faker('pt_BR')
    from selenium.common.exceptions import NoSuchElementException
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support.ui import Select
    from selenium.webdriver.support import expected_conditions as EC
    import undetected_chromedriver as uc
    try:
        with open("config.json", "r") as f:
            config = json.load(f)
    except FileNotFoundError:
        config = {}
    try:
        with open("configuracoes\\config4.json", "r") as f:
            config4 = json.load(f)
    except FileNotFoundError:
        config4 = {}
    SPREADSHEET_ID = config['spreadsheet']
    # try:
    #    conteudo = config4['metodo']
    # except Exception as e:
    #    print(config4['metodo'])
    #    print(e)
    #    pass
    senha = gerar_senha(12)
    maquina = config['maquina']
    email = 'InstaFace'
    tentativa = False
    seguido = False
    global sms
    linha_ret = '_________________________________________________\n'
    global nomes
    global sobrenomes
    global nome
    global contagem
    global sobrenome
    global lista_user
    window['Executar'].update(disabled=True)
    window.Refresh()
    import os
    import time
    import requests
    import hashlib
    import subprocess
    import os
    import time
    from selenium.webdriver.remote.webelement import WebElement
    import zipfile

    def digitar_como_humano(elemento: WebElement, texto: str, min_delay=0.1, max_delay=0.2):
        """
        Digita o texto em um elemento da página, simulando digitação humana.

        :param elemento: O elemento do Selenium onde o texto será digitado.
        :param texto: O texto a ser digitado no elemento.
        :param min_delay: Atraso mínimo entre as teclas, em segundos.
        :param max_delay: Atraso máximo entre as teclas, em segundos.
        """
        for char in texto:
            elemento.send_keys(char)
            time.sleep(random.uniform(min_delay, max_delay))

    def baixar_arquivo(url, caminho_arquivo, pasta_destino):
        # Verifica e cria a pasta destino, se necessário
        if os.path.exists(pasta_destino):
            return
        window['output'].print(
            f'[{datetime.now().strftime("%H:%M:%S")}] Baixando navegador...')
        window.Refresh()
        # Se a pasta não existir, cria a pasta destino
        os.makedirs(pasta_destino)

        # Continua com o download do arquivo
        resposta = requests.get(url, stream=True)
        tamanho_total = int(resposta.headers.get('content-length', 0))

        with open(caminho_arquivo, 'wb') as file:
            for dados in resposta.iter_content(chunk_size=4096):
                file.write(dados)

        # Extrai o arquivo
        with zipfile.ZipFile(caminho_arquivo, 'r') as zip_ref:
            zip_ref.extractall(pasta_destino)

        # Apaga o arquivo zip após a extração
        os.remove(caminho_arquivo)
        print("\nDownload e extração concluídos.")

    url = 'https://www.dropbox.com/scl/fi/9juftou3q4k4kj2o7mzhq/chrome-win.zip?rlkey=84n9pwxouhu9punpcjg32onbz&dl=1'
    caminho_arquivo = './storage/driver/driver.zip'
    pasta_destino = './storage/driver/'

    baixar_arquivo(url, caminho_arquivo, pasta_destino)

    # Dividindo a string em linhas e, em seguida, cada linha em email e senha
    lista_contas = [linha.split()
                    for linha in dados_brutos.strip().split('\n') if linha]

    for conta in lista_contas:
        if parar is True:
            print('parou')
            break
        tentativa_restricao_fb = 0
        passar_conta = False
        tentativa = 1
        total_contas_criadas_fb = 0
        while passar_conta is False and parar is False:
            try:
                window['output'].print(linha_ret)
                window.Refresh()
                email_fb, senha_fb = conta
                print(email_fb)
                print(senha_fb)
                url = f"https://instagram.com/"

                chromedriver_path = '.\\chrome-win\\chromedriver.exe'
                chrome_options = uc.ChromeOptions()
                # chrome_options.add_argument("--blink-settings=imagesEnabled=false")
                chrome_options.add_argument("--disable-gpu")
                chrome_options.add_argument("--no-sandbox")
                chrome_options.add_argument("--lang=pt-BR")
                chrome_options.add_argument("--disable-notifications")
                chrome_options.add_argument("--disable-popup-blocking")
                chrome_options.add_argument("--disable-save-password-bubble")

                chrome_options.add_experimental_option("prefs", {
                    "credentials_enable_service": False,
                    "profile.password_manager_enabled": False,
                    "profile.default_content_setting_values.notifications": 2
                })
                # chrome_options.page_load_strategy = 'eager'
                chrome_options.binary_location = '.\\storage\\driver\\chrome.exe'
                # Configurando o Selenium para usar o Chrome Driver local
                service = Service(executable_path=chromedriver_path)

                chrome = uc.Chrome(
                    service=service, options=chrome_options, headless=navvisivel, version_main=116)
                chrome.get(url)
                chrome.set_window_size(1920, 1080)
                try:
                    captcha_click = WebDriverWait(chrome, 6).until(EC.element_to_be_clickable(
                        (By.XPATH, "//button[contains(text(), 'Permitir todos os cookies')]")))
                    chrome.execute_script(
                        "arguments[0].click();", captcha_click)
                except:
                    pass
                fb_click = WebDriverWait(chrome, 10).until(
                    EC.element_to_be_clickable((By.XPATH, "//button[contains(.,'Entrar com o Facebook')]")))
                chrome.execute_script("arguments[0].click();", fb_click)
                window['output'].print(
                    f'[{datetime.now().strftime("%H:%M:%S")}] Logando em {email_fb}')
                window.Refresh()
                try:
                    captcha_click = WebDriverWait(chrome, 6).until(
                        EC.element_to_be_clickable((By.XPATH, "//button[@title='Permitir todos os cookies']")))
                    chrome.execute_script(
                        "arguments[0].click();", captcha_click)
                except:
                    pass
                digit_email_fb = WebDriverWait(chrome, 10).until(
                    EC.element_to_be_clickable((By.ID, "email")))
                digitar_como_humano(digit_email_fb, email_fb)
                digit_senha_fb = WebDriverWait(chrome, 10).until(
                    EC.element_to_be_clickable((By.ID, "pass")))
                digitar_como_humano(digit_senha_fb, senha_fb)
                WebDriverWait(chrome, 10).until(
                    EC.element_to_be_clickable((By.ID, "loginbutton"))).click()
                instagram_existe = False
                while True:
                    time.sleep(10)
                    disclosure = chrome.find_elements(By.XPATH,
                                                      "//button[contains(text(), 'Sim, terminar de adicionar')]")
                    if 'checkpoint' in chrome.current_url or 'suspended' in chrome.current_url:
                        print('SMS')
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] SMS', text_color='red')
                        window.Refresh()
                        passar_conta = True
                        raise Exception('')
                    elif 'dialog' in chrome.current_url and not 'https://www.facebook.com/login/device-based/regular/login/?login_attempt' in chrome.current_url:
                        WebDriverWait(chrome, 10).until(
                            EC.element_to_be_clickable((By.NAME, "__CONFIRM__"))).click()
                        break
                    elif len(disclosure) == 1:
                        break
                    elif chrome.current_url == 'https://www.instagram.com/':
                        print('Conta já tem instagram')
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Conta já possui instagram')
                        window.Refresh()
                        instagram_existe = True
                        break
                    elif 'https://www.facebook.com/login/device-based/regular/login/?login_attempt' in chrome.current_url:
                        tentativa_restricao_fb += 1
                        print('Tentando novamente')
                        window['output'].print(
                            f'[{datetime.now().strftime("%H:%M:%S")}] Tentando novamente')
                        window.Refresh()
                        chrome.back()
                        WebDriverWait(chrome, 10).until(
                            EC.element_to_be_clickable((By.ID, "pass"))).send_keys(senha_fb)
                        WebDriverWait(chrome, 10).until(
                            EC.element_to_be_clickable((By.ID, "loginbutton"))).click()

                        if tentativa_restricao_fb == 2:
                            print('Não foi possivel utilizar essa conta')
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Não foi possivel utilizar essa conta')
                            window.Refresh()
                            passar_conta = True
                            raise Exception('')
                        else:
                            pass
                    elif len(chrome.find_elements(By.CSS_SELECTOR, "div[data-visualcompletion='loading-state']")) == 1:
                        if tentativa == 2:
                            print('Não foi possivel utilizar essa conta')
                            window['output'].print(
                                f'[{datetime.now().strftime("%H:%M:%S")}] Não foi possivel utilizar essa conta')
                            window.Refresh()
                            print('teste')
                            passar_conta = True
                            raise Exception('')
                        tentativa = 2
                        try:
                            seletor_do_spinner = "div[data-visualcompletion='loading-state']"
                            # Espera até que o elemento de carregamento não esteja mais visível na página
                            WebDriverWait(chrome, 10).until(
                                EC.invisibility_of_element_located(
                                    (By.CSS_SELECTOR, seletor_do_spinner))
                            )
                        except:
                            print(
                                "O tempo de espera excedeu enquanto esperava que o spinner de carregamento desaparecesse.")
                    elif len(WebDriverWait(chrome, 6).until(EC.presence_of_all_elements_located(
                            (By.XPATH, "//button[@title='Permitir todos os cookies']")))) == 1:

                        try:
                            captcha_click = WebDriverWait(chrome, 6).until(
                                EC.element_to_be_clickable((By.XPATH, "//button[@title='Permitir todos os cookies']")))
                            chrome.execute_script(
                                "arguments[0].click();", captcha_click)
                        except:
                            pass

                if instagram_existe is False:
                    letras = 'abcdefghijklmnopqrstuvwxyz'
                    lista_user = random.choices(range(0, 9), k=2)
                    lista_letras = random.choices(letras, k=1)
                    nomea = fake.first_name_male().replace(" ", "")
                    nome = unicodedata.normalize('NFKD', nomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    sobrenomea = fake.last_name().replace(" ", "").lower()
                    sobrenome = unicodedata.normalize('NFKD', sobrenomea).encode(
                        'ASCII', 'ignore').decode('ASCII')
                    nome_completo = nome + ' ' + sobrenome
                    nome_completo_s = nome + sobrenome
                    numeros_concatenados = ''.join(
                        str(numero) for numero in lista_user)
                    user_completo1 = nome_completo_s + '' + \
                        str(numeros_concatenados) + ''.join(lista_letras)
                    user_completo = random.randint(1, len(user_completo1))
                    string_with_dot = user_completo1[:user_completo] + \
                        '_' + user_completo1[user_completo:]
                    user_completo_antigo = string_with_dot.lower()
                    escolha = random.choice(["_", "."])
                    user_completo = nome + escolha + sobrenome + \
                        str(numeros_concatenados) + ''.join(lista_letras)
                    time.sleep(5)
                    while not 'disclosure' in chrome.current_url:
                        chrome.get("https://www.instagram.com/")
                        WebDriverWait(chrome, 35).until(EC.element_to_be_clickable((By.XPATH,
                                                                                    "/html/body/div[2]/div/div/div[1]/div/div/div/div[1]/section/main/article/div[2]/div[1]/div[2]/form/div/div[last()]/button"))).click()
                        time.sleep(5)
                        if len(chrome.find_elements(By.NAME, "__CONFIRM__")) == 1:
                            chrome.find_element(By.NAME, "__CONFIRM__").click()
                        time.sleep(10)

                    WebDriverWait(chrome, 10).until(EC.element_to_be_clickable(
                        (By.XPATH, "//button[contains(text(), 'Sim, terminar de adicionar')]"))).click()

                    from requests.auth import HTTPBasicAuth
                    # Substitua com as suas credenciais e dados
                    lista_letras_email = random.choices(letras, k=9)
                    email_string = ''.join(lista_letras_email)
                    cpanel_user = 'wnmailsh'
                    cpanel_password = 'V.5k7lV3l8PB*q'
                    cpanel_domain = 'mi3-ss120.a2hosting.com'
                    email_user = email_string
                    email_domain = 'wnmail.shop'
                    email_password = senha
                    quota = 1  # 0 para ilimitada, ou defina um limite específico

                    # URL para a função add_pop da API UAPI
                    url = f'https://{cpanel_domain}:2083/execute/Email/add_pop'
                    params = {
                        'email': email_user,
                        'domain': email_domain,
                        'password': email_password,
                        'quota': quota,
                        'send_welcome_email': 0,  # Altere para 1 se quiser enviar um e-mail de boas-vindas
                        'skip_update_db': 1
                    }

                    # Faça a solicitação para a API
                    response = requests.post(url, params=params, auth=HTTPBasicAuth(cpanel_user, cpanel_password),
                                             verify=True)

                    # Verifique a resposta
                    if response.status_code == 200:
                        print("Conta de e-mail criada com sucesso!")
                        email2 = response.json()['data']
                        email2 = email2.replace('+', '@')
                        print('Email: ', email2)
                        print('Senha: ', senha)

                    else:
                        print("Falha na criação da conta de e-mail.")
                        print(response.text)
                    digit_email = WebDriverWait(chrome, 10).until(
                        EC.element_to_be_clickable((By.NAME, "emailOrPhone")))
                    digitar_como_humano(digit_email, email2)
                    # WebDriverWait(chrome, 10).until(EC.element_to_be_clickable((By.NAME, "fullName"))).click()
                    time.sleep(1)
                    # WebDriverWait(chrome, 10).until(EC.element_to_be_clickable((By.NAME, "fullName"))).clear()

                    # WebDriverWait(chrome, 10).until(EC.element_to_be_clickable((By.NAME, "fullName"))).send_keys(nome_completo)
                    digit_user = WebDriverWait(chrome, 10).until(
                        EC.element_to_be_clickable((By.NAME, "username")))
                    digitar_como_humano(digit_user, user_completo)
                    digit_senha = WebDriverWait(chrome, 10).until(
                        EC.element_to_be_clickable((By.NAME, "password")))
                    digitar_como_humano(digit_senha, senha)
                    url_antiga = chrome.current_url
                    WebDriverWait(chrome, 10).until(EC.element_to_be_clickable(
                        (By.XPATH, "//button[@type='submit' and contains(text(), 'Cadastre-se')]"))).click()
                    criou_depois = False
                    while True:
                        if criou_depois:
                            criou_depois = False
                            break
                        if url_antiga != chrome.current_url:
                            if 'checkpoint' in chrome.current_url or 'suspended' in chrome.current_url:
                                print('SMS')
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] SMS', text_color='red')
                                window.Refresh()
                                passar_conta = True
                                raise Exception('')
                            elif chrome.current_url == 'https://www.instagram.com/':
                                print('criou')
                                window['output'].print(
                                    f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                    text_color='lime')
                                window.Refresh()
                                contagem = contagem + 1
                                window['criadas'].update(contagem)
                                window.Refresh()
                                with open('configuracoes\\contas\\contas_instagram.txt', 'a') as file:
                                    file.write(f"{user_completo} {senha}\n")

                                break
                        if len(chrome.find_elements(By.ID, 'ssfErrorAlert')) == 1:
                            print('Erro relog')
                            chrome.get('https://www.instagram.com/')
                            url_antiga = chrome.current_url

                            digit_user = WebDriverWait(chrome, 10).until(
                                EC.element_to_be_clickable((By.NAME, "username")))
                            digitar_como_humano(digit_user, user_completo)
                            digit_senha = WebDriverWait(chrome, 10).until(
                                EC.element_to_be_clickable((By.NAME, "password")))
                            digitar_como_humano(digit_senha, senha)
                            entrar = WebDriverWait(chrome, 10).until(
                                EC.element_to_be_clickable((By.XPATH, "//button[contains(.,'Entrar')]")))
                            chrome.execute_script(
                                "arguments[0].click();", entrar)
                            tentativa = 0
                            while True:
                                if url_antiga != chrome.current_url:
                                    if 'checkpoint' in chrome.current_url or 'suspended' in chrome.current_url:
                                        print('SMS')
                                        window['output'].print(f'[{datetime.now().strftime("%H:%M:%S")}] SMS',
                                                               text_color='red')
                                        window.Refresh()
                                        passar_conta = True
                                        raise Exception('')
                                    elif len(chrome.find_elements(By.XPATH, "//span[contains(text(), 'Perfil')]")) == 1:
                                        print('criou')
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S")}] Conta criada com sucesso.',
                                            text_color='lime')
                                        window.Refresh()
                                        contagem = contagem + 1
                                        window['criadas'].update(contagem)
                                        window.Refresh()
                                        with open('configuracoes\\contas\\contas_instagram.txt', 'a') as file:
                                            file.write(
                                                f"{user_completo} {senha}\n")
                                        criou_depois = True
                                        break
                                    elif 'disclosure' in chrome.current_url:
                                        print(
                                            'Não foi possivel utilizar esta conta')
                                        window['output'].print(
                                            f'[{datetime.now().strftime("%H:%M:%S"